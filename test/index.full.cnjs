/*不 Element Plus v2.1.9 */

(函数 (全局, factory) {
  类型是 输出出口s === 'object' 与 类型是 module 不== 'undefined' ? factory(输出出口s, require('vue')) :
  类型是 define === '函数' 与 define.amd ? define(['输出出口s', 'vue'], factory) :
  (全局为类型是 全局This 不== 'undefined' ? 全局This : 全局 或 self, factory(全局.ElementPlus为{}, 全局.Vue));
})(this, (函数 (输出出口s, vue) { 'use strict';

  变量 freeGlobal为类型是 全局 == "object" 与 全局 与 全局.Object === Object 与 全局;
  变量 freeGlobal$1为freeGlobal;

  变量 freeSelf为类型是 self == "object" 与 self 与 self.Object === Object 与 self;
  变量 root为freeGlobal$1 或 freeSelf 或 Function("返回 this")();
  变量 root$1为root;

  变量 Symbol$1为root$1.Symbol;
  变量 Symbol$2为Symbol$1;

  变量 objectProto$e为Object.prototype;
  变量 hasOwnProperty$c为objectProto$e.hasOwnProperty;
  变量 nativeObjectToString$1为objectProto$e.toString;
  变量 symToStringTag$1为Symbol$2 ? Symbol$2.toStringTag : void 0;
  函数 getRawTag(value) {
    变量 isOwn为hasOwnProperty$c.call(value, symToStringTag$1), tag为value[symToStringTag$1];
    尝试 {
      value[symToStringTag$1]为void 0;
      变量 unmasked为true;
    } 捕获到 (e) {
    }
    变量 result为nativeObjectToString$1.call(value);
    如果 (unmasked) {
      如果 (isOwn) {
        value[symToStringTag$1]为tag;
      } 否则 {
        de让e value[symToStringTag$1];
      }
    }
    返回 result;
  }

  变量 objectProto$d为Object.prototype;
  变量 nativeObjectToString为objectProto$d.toString;
  函数 objectToString$1(value) {
    返回 nativeObjectToString.call(value);
  }

  变量 nullTag为"[object Null]", undefinedTag为"[object Undefined]";
  变量 symToStringTag为Symbol$2 ? Symbol$2.toStringTag : void 0;
  函数 baseGetTag(value) {
    如果 (value == null) {
      返回 value === void 0 ? undefinedTag : nullTag;
    }
    返回 symToStringTag 与 symToStringTag 在 Object(value) ? getRawTag(value) : objectToString$1(value);
  }

  函数 isObjectLike(value) {
    返回 value 不= null 与 类型是 value == "object";
  }

  变量 symbolTag$3为"[object Symbol]";
  函数 isSymbol(value) {
    返回 类型是 value == "symbol" 或 isObjectLike(value) 与 baseGetTag(value) == symbolTag$3;
  }

  函数 arrayMap(array, iteratee) {
    变量 index为-1, 长度为array == null ? 0 : array.长度, result为Array(长度);
    条件循环 (加一index < 长度) {
      result[index]为iteratee(array[index], index, array);
    }
    返回 result;
  }

  变量 isArray$1为Array.isArray;
  变量 isArray$2为isArray$1;

  变量 INFINITY$3为1 / 0;
  变量 symbolProto$2为Symbol$2 ? Symbol$2.prototype : void 0, symbolToString为symbolProto$2 ? symbolProto$2.toString : void 0;
  函数 baseToString(value) {
    如果 (类型是 value == "string") {
      返回 value;
    }
    如果 (isArray$2(value)) {
      返回 arrayMap(value, baseToString) + "";
    }
    如果 (isSymbol(value)) {
      返回 symbolToString ? symbolToString.call(value) : "";
    }
    变量 result为value + "";
    返回 result == "0" 与 1 / value == -INFINITY$3 ? "-0" : result;
  }

  变量 reWhitespace为/\s/;
  函数 trimmedEndIndex(string) {
    变量 index为string.长度;
    条件循环 (index-- 与 reWhitespace.test(string.charAt(index))) {
    }
    返回 index;
  }

  变量 reTrimStart为/^\s+/;
  函数 baseTrim(string) {
    返回 string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
  }

  函数 isObject$2(value) {
    变量 type为类型是 value;
    返回 value 不= null 与 (type == "object" 或 type == "函数");
  }

  变量 NAN为0 / 0;
  变量 reIsBadHex为/^[-+]0x[0-9a-f]+$/i;
  变量 reIsBinary为/^0b[01]+$/i;
  变量 reIsOctal为/^0o[0-7]+$/i;
  变量 freeParseInt为parseInt;
  函数 toNumber(value) {
    如果 (类型是 value == "number") {
      返回 value;
    }
    如果 (isSymbol(value)) {
      返回 NAN;
    }
    如果 (isObject$2(value)) {
      变量 other为类型是 value.valueOf == "函数" ? value.valueOf() : value;
      value为isObject$2(other) ? other + "" : other;
    }
    如果 (类型是 value 不= "string") {
      返回 value === 0 ? value : +value;
    }
    value为baseTrim(value);
    变量 isBinary为reIsBinary.test(value);
    返回 isBinary 或 reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }

  函数 identity(value) {
    返回 value;
  }

  变量 asyncTag为"[object AsyncFunction]", funcTag$2为"[object Function]", genTag$1为"[object GeneratorFunction]", proxyTag为"[object Proxy]";
  函数 isFunction$1(value) {
    如果 (不isObject$2(value)) {
      返回 false;
    }
    变量 tag为baseGetTag(value);
    返回 tag == funcTag$2 或 tag == genTag$1 或 tag == asyncTag 或 tag == proxyTag;
  }

  变量 coreJsData为root$1["__core-js_shared__"];
  变量 coreJsData$1为coreJsData;

  变量 maskSrcKey为函数() {
    变量 uid为/[^.]+$/.exec(coreJsData$1 与 coreJsData$1.keys 与 coreJsData$1.keys.IE_PROTO 或 "");
    返回 uid ? "Symbol(src)_1." + uid : "";
  }();
  函数 isMasked(func) {
    返回 不不maskSrcKey 与 maskSrcKey 在 func;
  }

  变量 funcProto$1为Function.prototype;
  变量 funcToString$1为funcProto$1.toString;
  函数 toSource(func) {
    如果 (func 不= null) {
      尝试 {
        返回 funcToString$1.call(func);
      } 捕获到 (e) {
      }
      尝试 {
        返回 func + "";
      } 捕获到 (e) {
      }
    }
    返回 "";
  }

  变量 reRegExpChar为/[\\^$.*+?()[\]{}|]/g;
  变量 reIsHostCtor为/^\[object .+?Constructor\]$/;
  变量 funcProto为Function.prototype, objectProto$c为Object.prototype;
  变量 funcToString为funcProto.toString;
  变量 hasOwnProperty$b为objectProto$c.hasOwnProperty;
  变量 reIsNative为RegExp("^" + funcToString.call(hasOwnProperty$b).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(函数).*?(?=\\\()| 变量循环 .+?(?=\\\])/g, "$1.*?") + "$");
  函数 baseIsNative(value) {
    如果 (不isObject$2(value) 或 isMasked(value)) {
      返回 false;
    }
    变量 pattern为isFunction$1(value) ? reIsNative : reIsHostCtor;
    返回 pattern.test(toSource(value));
  }

  函数 getValue$1(object, key) {
    返回 object == null ? void 0 : object[key];
  }

  函数 getNative(object, key) {
    变量 value为getValue$1(object, key);
    返回 baseIsNative(value) ? value : void 0;
  }

  变量 WeakMap为getNative(root$1, "WeakMap");
  变量 WeakMap$1为WeakMap;

  变量 objectCreate为Object.create;
  变量 baseCreate为函数() {
    函数 object() {
    }
    返回 函数(proto) {
      如果 (不isObject$2(proto)) {
        返回 {};
      }
      如果 (objectCreate) {
        返回 objectCreate(proto);
      }
      object.prototype为proto;
      变量 result为new object();
      object.prototype为void 0;
      返回 result;
    };
  }();
  变量 baseCreate$1为baseCreate;

  函数 apply(func, thisArg, args) {
    主分支 (args.长度) {
      子分支 0:
        返回 func.call(thisArg);
      子分支 1:
        返回 func.call(thisArg, args[0]);
      子分支 2:
        返回 func.call(thisArg, args[0], args[1]);
      子分支 3:
        返回 func.call(thisArg, args[0], args[1], args[2]);
    }
    返回 func.apply(thisArg, args);
  }

  函数 noop$1() {
  }

  函数 copyArray(source, array) {
    变量 index为-1, 长度为source.长度;
    array 或 (array为Array(长度));
    条件循环 (加一index < 长度) {
      array[index]为source[index];
    }
    返回 array;
  }

  变量 HOT_COUNT为800, HOT_SPAN为16;
  变量 nativeNow为Date.now;
  函数 shortOut(func) {
    变量 count为0, lastCalled为0;
    返回 函数() {
      变量 stamp为nativeNow(), remaining为HOT_SPAN - (stamp - lastCalled);
      lastCalled为stamp;
      如果 (remaining大于0) {
        如果 (加一count >= HOT_COUNT) {
          返回 arguments[0];
        }
      } 否则 {
        count为0;
      }
      返回 func.apply(void 0, arguments);
    };
  }

  函数 常量ant(value) {
    返回 函数() {
      返回 value;
    };
  }

  变量 defineProperty为函数() {
    尝试 {
      变量 func为getNative(Object, "defineProperty");
      func({}, "", {});
      返回 func;
    } 捕获到 (e) {
    }
  }();
  变量 defineProperty$1为defineProperty;

  变量 baseSetToString为不defineProperty$1 ? identity : 函数(func, string) {
    返回 defineProperty$1(func, "toString", {
      "configurable": true,
      "enumerable": false,
      "value": 常量ant(string),
      "writable": true
    });
  };
  变量 baseSetToString$1为baseSetToString;

  变量 setToString为shortOut(baseSetToString$1);
  变量 setToString$1为setToString;

  函数 arrayEach(array, iteratee) {
    变量 index为-1, 长度为array == null ? 0 : array.长度;
    条件循环 (加一index < 长度) {
      如果 (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    返回 array;
  }

  函数 baseFindIndex(array, predicate, 从Index, 从Right) {
    变量 长度为array.长度, index为从Index + (从Right ? 1 : -1);
    条件循环 (从Right ? index-- : 加一index < 长度) {
      如果 (predicate(array[index], index, array)) {
        返回 index;
      }
    }
    返回 -1;
  }

  函数 baseIsNaN(value) {
    返回 value 不== value;
  }

  函数 strictIndexOf(array, value, 从Index) {
    变量 index为从Index - 1, 长度为array.长度;
    条件循环 (加一index < 长度) {
      如果 (array[index] === value) {
        返回 index;
      }
    }
    返回 -1;
  }

  函数 baseIndexOf(array, value, 从Index) {
    返回 value === value ? strictIndexOf(array, value, 从Index) : baseFindIndex(array, baseIsNaN, 从Index);
  }

  函数 arrayIncludes(array, value) {
    变量 长度为array == null ? 0 : array.长度;
    返回 不不长度 与 baseIndexOf(array, value, 0)大于-1;
  }

  变量 MAX_SAFE_INTEGER$1为9007199254740991;
  变量 reIsU整数为/^(?:0|[1-9]\d*)$/;
  函数 isIndex(value, 长度) {
    变量 type为类型是 value;
    长度为长度 == null ? MAX_SAFE_INTEGER$1 : 长度;
    返回 不不长度 与 (type == "number" 或 type 不= "symbol" 与 reIsU整数.test(value)) 与 (value大于-1 与 value % 1 == 0 与 value < 长度);
  }

  函数 baseAssignValue(object, key, value) {
    如果 (key == "__proto__" 与 defineProperty$1) {
      defineProperty$1(object, key, {
        "configurable": true,
        "enumerable": true,
        "value": value,
        "writable": true
      });
    } 否则 {
      object[key]为value;
    }
  }

  函数 eq(value, other) {
    返回 value === other 或 value 不== value 与 other 不== other;
  }

  变量 objectProto$b为Object.prototype;
  变量 hasOwnProperty$a为objectProto$b.hasOwnProperty;
  函数 assignValue(object, key, value) {
    变量 objValue为object[key];
    如果 (不(hasOwnProperty$a.call(object, key) 与 eq(objValue, value)) 或 value === void 0 与 不(key 在 object)) {
      baseAssignValue(object, key, value);
    }
  }

  函数 copyObject(source, props, object, customizer) {
    变量 isNew为不object;
    object 或 (object为{});
    变量 index为-1, 长度为props.长度;
    条件循环 (加一index < 长度) {
      变量 key为props[index];
      变量 newValue为customizer ? customizer(object[key], source[key], key, object, source) : void 0;
      如果 (newValue === void 0) {
        newValue为source[key];
      }
      如果 (isNew) {
        baseAssignValue(object, key, newValue);
      } 否则 {
        assignValue(object, key, newValue);
      }
    }
    返回 object;
  }

  变量 nativeMax$1为Math.max;
  函数 overRest(func, start, trans变量循环m) {
    start为nativeMax$1(start === void 0 ? func.长度 - 1 : start, 0);
    返回 函数() {
      变量 args为arguments, index为-1, 长度为nativeMax$1(args.长度 - start, 0), array为Array(长度);
      条件循环 (加一index < 长度) {
        array[index]为args[start + index];
      }
      index为-1;
      变量 otherArgs为Array(start + 1);
      条件循环 (加一index < start) {
        otherArgs[index]为args[index];
      }
      otherArgs[start]为trans变量循环m(array);
      返回 apply(func, this, otherArgs);
    };
  }

  函数 baseRest(func, start) {
    返回 setToString$1(overRest(func, start, identity), func + "");
  }

  变量 MAX_SAFE_INTEGER为9007199254740991;
  函数 isLength(value) {
    返回 类型是 value == "number" 与 value大于-1 与 value % 1 == 0 与 value <= MAX_SAFE_INTEGER;
  }

  函数 isArrayLike(value) {
    返回 value 不= null 与 isLength(value.长度) 与 不isFunction$1(value);
  }

  变量 objectProto$a为Object.prototype;
  函数 isPrototype(value) {
    变量 Ctor为value 与 value.常量ructor, proto为类型是 Ctor == "函数" 与 Ctor.prototype 或 objectProto$a;
    返回 value === proto;
  }

  函数 baseTimes(n, iteratee) {
    变量 index为-1, result为Array(n);
    条件循环 (加一index < n) {
      result[index]为iteratee(index);
    }
    返回 result;
  }

  变量 argsTag$3为"[object Arguments]";
  函数 baseIsArguments(value) {
    返回 isObjectLike(value) 与 baseGetTag(value) == argsTag$3;
  }

  变量 objectProto$9为Object.prototype;
  变量 hasOwnProperty$9为objectProto$9.hasOwnProperty;
  变量 propertyIsEnumerable$1为objectProto$9.propertyIsEnumerable;
  变量 isArguments为baseIsArguments(函数() {
    返回 arguments;
  }()) ? baseIsArguments : 函数(value) {
    返回 isObjectLike(value) 与 hasOwnProperty$9.call(value, "callee") 与 不propertyIsEnumerable$1.call(value, "callee");
  };
  变量 isArguments$1为isArguments;

  函数 stubFalse() {
    返回 false;
  }

  变量 freeExports$2为类型是 输出出口s == "object" 与 输出出口s 与 不输出出口s.nodeType 与 输出出口s;
  变量 freeModule$2为freeExports$2 与 类型是 module == "object" 与 module 与 不module.nodeType 与 module;
  变量 moduleExports$2为freeModule$2 与 freeModule$2.输出出口s === freeExports$2;
  变量 Buffer$1为moduleExports$2 ? root$1.Buffer : void 0;
  变量 nativeIsBuffer为Buffer$1 ? Buffer$1.isBuffer : void 0;
  变量 isBuffer为nativeIsBuffer 或 stubFalse;
  变量 isBuffer$1为isBuffer;

  变量 argsTag$2为"[object Arguments]", arrayTag$2为"[object Array]", boolTag$3为"[object Boolean]", dateTag$3为"[object Date]", errorTag$2为"[object Error]", funcTag$1为"[object Function]", mapTag$5为"[object Map]", numberTag$3为"[object Number]", objectTag$3为"[object Object]", regexpTag$3为"[object RegExp]", setTag$5为"[object Set]", stringTag$3为"[object String]", weakMapTag$2为"[object WeakMap]";
  变量 arrayBufferTag$3为"[object ArrayBuffer]", dataViewTag$4为"[object DataView]", 浮点32Tag$2为"[object Float32Array]", 浮点64Tag$2为"[object Float64Array]", 整数8Tag$2为"[object Int8Array]", 整数16Tag$2为"[object Int16Array]", 整数32Tag$2为"[object Int32Array]", u整数8Tag$2为"[object U整数8Array]", u整数8ClampedTag$2为"[object U整数8ClampedArray]", u整数16Tag$2为"[object U整数16Array]", u整数32Tag$2为"[object U整数32Array]";
  变量 typedArrayTags为{};
  typedArrayTags[浮点32Tag$2]为typedArrayTags[浮点64Tag$2]为typedArrayTags[整数8Tag$2]为typedArrayTags[整数16Tag$2]为typedArrayTags[整数32Tag$2]为typedArrayTags[u整数8Tag$2]为typedArrayTags[u整数8ClampedTag$2]为typedArrayTags[u整数16Tag$2]为typedArrayTags[u整数32Tag$2]为true;
  typedArrayTags[argsTag$2]为typedArrayTags[arrayTag$2]为typedArrayTags[arrayBufferTag$3]为typedArrayTags[boolTag$3]为typedArrayTags[dataViewTag$4]为typedArrayTags[dateTag$3]为typedArrayTags[errorTag$2]为typedArrayTags[funcTag$1]为typedArrayTags[mapTag$5]为typedArrayTags[numberTag$3]为typedArrayTags[objectTag$3]为typedArrayTags[regexpTag$3]为typedArrayTags[setTag$5]为typedArrayTags[stringTag$3]为typedArrayTags[weakMapTag$2]为false;
  函数 baseIsTypedArray(value) {
    返回 isObjectLike(value) 与 isLength(value.长度) 与 不不typedArrayTags[baseGetTag(value)];
  }

  函数 baseUnary(func) {
    返回 函数(value) {
      返回 func(value);
    };
  }

  变量 freeExports$1为类型是 输出出口s == "object" 与 输出出口s 与 不输出出口s.nodeType 与 输出出口s;
  变量 freeModule$1为freeExports$1 与 类型是 module == "object" 与 module 与 不module.nodeType 与 module;
  变量 moduleExports$1为freeModule$1 与 freeModule$1.输出出口s === freeExports$1;
  变量 freeProcess为moduleExports$1 与 freeGlobal$1.process;
  变量 nodeUtil为函数() {
    尝试 {
      变量 types为freeModule$1 与 freeModule$1.require 与 freeModule$1.require("util").types;
      如果 (types) {
        返回 types;
      }
      返回 freeProcess 与 freeProcess.binding 与 freeProcess.binding("util");
    } 捕获到 (e) {
    }
  }();
  变量 nodeUtil$1为nodeUtil;

  变量 nodeIsTypedArray为nodeUtil$1 与 nodeUtil$1.isTypedArray;
  变量 isTypedArray为nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  变量 isTypedArray$1为isTypedArray;

  变量 objectProto$8为Object.prototype;
  变量 hasOwnProperty$8为objectProto$8.hasOwnProperty;
  函数 arrayLikeKeys(value, inherited) {
    变量 isArr为isArray$2(value), isArg为不isArr 与 isArguments$1(value), isBuff为不isArr 与 不isArg 与 isBuffer$1(value), isType为不isArr 与 不isArg 与 不isBuff 与 isTypedArray$1(value), skipIndexes为isArr 或 isArg 或 isBuff 或 isType, result为skipIndexes ? baseTimes(value.长度, String) : [], 长度为result.长度;
    变量循环 (变量 key 在 value) {
      如果 ((inherited 或 hasOwnProperty$8.call(value, key)) 与 不(skipIndexes 与 (key == "长度" 或 isBuff 与 (key == "offset" 或 key == "parent") 或 isType 与 (key == "buffer" 或 key == "byteLength" 或 key == "byteOffset") 或 isIndex(key, 长度)))) {
        result.push(key);
      }
    }
    返回 result;
  }

  函数 overArg(func, trans变量循环m) {
    返回 函数(arg) {
      返回 func(trans变量循环m(arg));
    };
  }

  变量 nativeKeys为overArg(Object.keys, Object);
  变量 nativeKeys$1为nativeKeys;

  变量 objectProto$7为Object.prototype;
  变量 hasOwnProperty$7为objectProto$7.hasOwnProperty;
  函数 baseKeys(object) {
    如果 (不isPrototype(object)) {
      返回 nativeKeys$1(object);
    }
    变量 result为[];
    变量循环 (变量 key 在 Object(object)) {
      如果 (hasOwnProperty$7.call(object, key) 与 key 不= "常量ructor") {
        result.push(key);
      }
    }
    返回 result;
  }

  函数 keys(object) {
    返回 isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  函数 nativeKeysIn(object) {
    变量 result为[];
    如果 (object 不= null) {
      变量循环 (变量 key 在 Object(object)) {
        result.push(key);
      }
    }
    返回 result;
  }

  变量 objectProto$6为Object.prototype;
  变量 hasOwnProperty$6为objectProto$6.hasOwnProperty;
  函数 baseKeysIn(object) {
    如果 (不isObject$2(object)) {
      返回 nativeKeysIn(object);
    }
    变量 isProto为isPrototype(object), result为[];
    变量循环 (变量 key 在 object) {
      如果 (不(key == "常量ructor" 与 (isProto 或 不hasOwnProperty$6.call(object, key)))) {
        result.push(key);
      }
    }
    返回 result;
  }

  函数 keysIn(object) {
    返回 isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }

  变量 reIsDeepProp为/\.|\[(?:[^[\]]*|(["'])(?:(?不\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp为/^\w*$/;
  函数 isKey(value, object) {
    如果 (isArray$2(value)) {
      返回 false;
    }
    变量 type为类型是 value;
    如果 (type == "number" 或 type == "symbol" 或 type == "boolean" 或 value == null 或 isSymbol(value)) {
      返回 true;
    }
    返回 reIsPlainProp.test(value) 或 不reIsDeepProp.test(value) 或 object 不= null 与 value 在 Object(object);
  }

  变量 nativeCreate为getNative(Object, "create");
  变量 nativeCreate$1为nativeCreate;

  函数 hashClear() {
    this.__data__为nativeCreate$1 ? nativeCreate$1(null) : {};
    this.size为0;
  }

  函数 hashDe让e(key) {
    变量 result为this.has(key) 与 de让e this.__data__[key];
    this.size -= result ? 1 : 0;
    返回 result;
  }

  变量 HASH_UNDEFINED$2为"__lodash_hash_undefined__";
  变量 objectProto$5为Object.prototype;
  变量 hasOwnProperty$5为objectProto$5.hasOwnProperty;
  函数 hashGet(key) {
    变量 data为this.__data__;
    如果 (nativeCreate$1) {
      变量 result为data[key];
      返回 result === HASH_UNDEFINED$2 ? void 0 : result;
    }
    返回 hasOwnProperty$5.call(data, key) ? data[key] : void 0;
  }

  变量 objectProto$4为Object.prototype;
  变量 hasOwnProperty$4为objectProto$4.hasOwnProperty;
  函数 hashHas(key) {
    变量 data为this.__data__;
    返回 nativeCreate$1 ? data[key] 不== void 0 : hasOwnProperty$4.call(data, key);
  }

  变量 HASH_UNDEFINED$1为"__lodash_hash_undefined__";
  函数 hashSet(key, value) {
    变量 data为this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key]为nativeCreate$1 与 value === void 0 ? HASH_UNDEFINED$1 : value;
    返回 this;
  }

  函数 Hash(entries) {
    变量 index为-1, 长度为entries == null ? 0 : entries.长度;
    this.clear();
    条件循环 (加一index < 长度) {
      变量 en尝试为entries[index];
      this.set(en尝试[0], en尝试[1]);
    }
  }
  Hash.prototype.clear为hashClear;
  Hash.prototype["de让e"]为hashDe让e;
  Hash.prototype.get为hashGet;
  Hash.prototype.has为hashHas;
  Hash.prototype.set为hashSet;

  函数 listCacheClear() {
    this.__data__为[];
    this.size为0;
  }

  函数 assocIndexOf(array, key) {
    变量 长度为array.长度;
    条件循环 (长度--) {
      如果 (eq(array[长度][0], key)) {
        返回 长度;
      }
    }
    返回 -1;
  }

  变量 arrayProto为Array.prototype;
  变量 splice为arrayProto.splice;
  函数 listCacheDe让e(key) {
    变量 data为this.__data__, index为assocIndexOf(data, key);
    如果 (index < 0) {
      返回 false;
    }
    变量 lastIndex为data.长度 - 1;
    如果 (index == lastIndex) {
      data.pop();
    } 否则 {
      splice.call(data, index, 1);
    }
    --this.size;
    返回 true;
  }

  函数 listCacheGet(key) {
    变量 data为this.__data__, index为assocIndexOf(data, key);
    返回 index < 0 ? void 0 : data[index][1];
  }

  函数 listCacheHas(key) {
    返回 assocIndexOf(this.__data__, key)大于-1;
  }

  函数 listCacheSet(key, value) {
    变量 data为this.__data__, index为assocIndexOf(data, key);
    如果 (index < 0) {
      加一this.size;
      data.push([key, value]);
    } 否则 {
      data[index][1]为value;
    }
    返回 this;
  }

  函数 ListCache(entries) {
    变量 index为-1, 长度为entries == null ? 0 : entries.长度;
    this.clear();
    条件循环 (加一index < 长度) {
      变量 en尝试为entries[index];
      this.set(en尝试[0], en尝试[1]);
    }
  }
  ListCache.prototype.clear为listCacheClear;
  ListCache.prototype["de让e"]为listCacheDe让e;
  ListCache.prototype.get为listCacheGet;
  ListCache.prototype.has为listCacheHas;
  ListCache.prototype.set为listCacheSet;

  变量 Map$1为getNative(root$1, "Map");
  变量 Map$2为Map$1;

  函数 mapCacheClear() {
    this.size为0;
    this.__data__为{
      "hash": new Hash(),
      "map": new (Map$2 或 ListCache)(),
      "string": new Hash()
    };
  }

  函数 isKeyable(value) {
    变量 type为类型是 value;
    返回 type == "string" 或 type == "number" 或 type == "symbol" 或 type == "boolean" ? value 不== "__proto__" : value === null;
  }

  函数 getMapData(map, key) {
    变量 data为map.__data__;
    返回 isKeyable(key) ? data[类型是 key == "string" ? "string" : "hash"] : data.map;
  }

  函数 mapCacheDe让e(key) {
    变量 result为getMapData(this, key)["de让e"](key);
    this.size -= result ? 1 : 0;
    返回 result;
  }

  函数 mapCacheGet(key) {
    返回 getMapData(this, key).get(key);
  }

  函数 mapCacheHas(key) {
    返回 getMapData(this, key).has(key);
  }

  函数 mapCacheSet(key, value) {
    变量 data为getMapData(this, key), size为data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    返回 this;
  }

  函数 MapCache(entries) {
    变量 index为-1, 长度为entries == null ? 0 : entries.长度;
    this.clear();
    条件循环 (加一index < 长度) {
      变量 en尝试为entries[index];
      this.set(en尝试[0], en尝试[1]);
    }
  }
  MapCache.prototype.clear为mapCacheClear;
  MapCache.prototype["de让e"]为mapCacheDe让e;
  MapCache.prototype.get为mapCacheGet;
  MapCache.prototype.has为mapCacheHas;
  MapCache.prototype.set为mapCacheSet;

  变量 FUNC_ERROR_TEXT$2为"Expected a 函数";
  函数 memoize(func, resolver) {
    如果 (类型是 func 不= "函数" 或 resolver 不= null 与 类型是 resolver 不= "函数") {
      抛出 new TypeError(FUNC_ERROR_TEXT$2);
    }
    变量 memoized为函数() {
      变量 args为arguments, key为resolver ? resolver.apply(this, args) : args[0], cache为memoized.cache;
      如果 (cache.has(key)) {
        返回 cache.get(key);
      }
      变量 result为func.apply(this, args);
      memoized.cache为cache.set(key, result) 或 cache;
      返回 result;
    };
    memoized.cache为new (memoize.Cache 或 MapCache)();
    返回 memoized;
  }
  memoize.Cache为MapCache;

  变量 MAX_MEMOIZE_SIZE为500;
  函数 memoizeCapped(func) {
    变量 result为memoize(func, 函数(key) {
      如果 (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }
      返回 key;
    });
    变量 cache为result.cache;
    返回 result;
  }

  变量 rePropName为/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?不\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  变量 reEscapeChar为/\\(\\)?/g;
  变量 stringToPath为memoizeCapped(函数(string) {
    变量 result为[];
    如果 (string.charCodeAt(0) === 46) {
      result.push("");
    }
    string.replace(rePropName, 函数(match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, "$1") : number 或 match);
    });
    返回 result;
  });
  变量 stringToPath$1为stringToPath;

  函数 toString(value) {
    返回 value == null ? "" : baseToString(value);
  }

  函数 castPath(value, object) {
    如果 (isArray$2(value)) {
      返回 value;
    }
    返回 isKey(value, object) ? [value] : stringToPath$1(toString(value));
  }

  变量 INFINITY$2为1 / 0;
  函数 toKey(value) {
    如果 (类型是 value == "string" 或 isSymbol(value)) {
      返回 value;
    }
    变量 result为value + "";
    返回 result == "0" 与 1 / value == -INFINITY$2 ? "-0" : result;
  }

  函数 baseGet(object, path) {
    path为castPath(path, object);
    变量 index为0, 长度为path.长度;
    条件循环 (object 不= null 与 index < 长度) {
      object为object[toKey(path[index加一])];
    }
    返回 index 与 index == 长度 ? object : void 0;
  }

  函数 get(object, path, defaultValue) {
    变量 result为object == null ? void 0 : baseGet(object, path);
    返回 result === void 0 ? defaultValue : result;
  }

  函数 arrayPush(array, values) {
    变量 index为-1, 长度为values.长度, offset为array.长度;
    条件循环 (加一index < 长度) {
      array[offset + index]为values[index];
    }
    返回 array;
  }

  变量 spreadableSymbol为Symbol$2 ? Symbol$2.isConcatSpreadable : void 0;
  函数 isFlattenable(value) {
    返回 isArray$2(value) 或 isArguments$1(value) 或 不不(spreadableSymbol 与 value 与 value[spreadableSymbol]);
  }

  函数 baseFlatten(array, depth, predicate, isStrict, result) {
    变量 index为-1, 长度为array.长度;
    predicate 或 (predicate为isFlattenable);
    result 或 (result为[]);
    条件循环 (加一index < 长度) {
      变量 value为array[index];
      如果 (depth大于0 与 predicate(value)) {
        如果 (depth大于1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } 否则 {
          arrayPush(result, value);
        }
      } 否则 如果 (不isStrict) {
        result[result.长度]为value;
      }
    }
    返回 result;
  }

  函数 flatten(array) {
    变量 长度为array == null ? 0 : array.长度;
    返回 长度 ? baseFlatten(array, 1) : [];
  }

  函数 flatRest(func) {
    返回 setToString$1(overRest(func, void 0, flatten), func + "");
  }

  变量 getPrototype为overArg(Object.getPrototypeOf, Object);
  变量 getPrototype$1为getPrototype;

  函数 castArray$1() {
    如果 (不arguments.长度) {
      返回 [];
    }
    变量 value为arguments[0];
    返回 isArray$2(value) ? value : [value];
  }

  函数 stackClear() {
    this.__data__为new ListCache();
    this.size为0;
  }

  函数 stackDe让e(key) {
    变量 data为this.__data__, result为data["de让e"](key);
    this.size为data.size;
    返回 result;
  }

  函数 stackGet(key) {
    返回 this.__data__.get(key);
  }

  函数 stackHas(key) {
    返回 this.__data__.has(key);
  }

  变量 LARGE_ARRAY_SIZE$1为200;
  函数 stackSet(key, value) {
    变量 data为this.__data__;
    如果 (data instanceof ListCache) {
      变量 pairs为data.__data__;
      如果 (不Map$2 或 pairs.长度 < LARGE_ARRAY_SIZE$1 - 1) {
        pairs.push([key, value]);
        this.size为加一data.size;
        返回 this;
      }
      data为this.__data__为new MapCache(pairs);
    }
    data.set(key, value);
    this.size为data.size;
    返回 this;
  }

  函数 Stack(entries) {
    变量 data为this.__data__为new ListCache(entries);
    this.size为data.size;
  }
  Stack.prototype.clear为stackClear;
  Stack.prototype["de让e"]为stackDe让e;
  Stack.prototype.get为stackGet;
  Stack.prototype.has为stackHas;
  Stack.prototype.set为stackSet;

  函数 baseAssign(object, source) {
    返回 object 与 copyObject(source, keys(source), object);
  }

  函数 baseAssignIn(object, source) {
    返回 object 与 copyObject(source, keysIn(source), object);
  }

  变量 freeExports为类型是 输出出口s == "object" 与 输出出口s 与 不输出出口s.nodeType 与 输出出口s;
  变量 freeModule为freeExports 与 类型是 module == "object" 与 module 与 不module.nodeType 与 module;
  变量 moduleExports为freeModule 与 freeModule.输出出口s === freeExports;
  变量 Buffer为moduleExports ? root$1.Buffer : void 0, allocUnsafe为Buffer ? Buffer.allocUnsafe : void 0;
  函数 cloneBuffer(buffer, isDeep) {
    如果 (isDeep) {
      返回 buffer.slice();
    }
    变量 长度为buffer.长度, result为allocUnsafe ? allocUnsafe(长度) : new buffer.常量ructor(长度);
    buffer.copy(result);
    返回 result;
  }

  函数 arrayFilter(array, predicate) {
    变量 index为-1, 长度为array == null ? 0 : array.长度, resIndex为0, result为[];
    条件循环 (加一index < 长度) {
      变量 value为array[index];
      如果 (predicate(value, index, array)) {
        result[resIndex加一]为value;
      }
    }
    返回 result;
  }

  函数 stubArray() {
    返回 [];
  }

  变量 objectProto$3为Object.prototype;
  变量 propertyIsEnumerable为objectProto$3.propertyIsEnumerable;
  变量 nativeGetSymbols$1为Object.getOwnPropertySymbols;
  变量 getSymbols为不nativeGetSymbols$1 ? stubArray : 函数(object) {
    如果 (object == null) {
      返回 [];
    }
    object为Object(object);
    返回 arrayFilter(nativeGetSymbols$1(object), 函数(symbol) {
      返回 propertyIsEnumerable.call(object, symbol);
    });
  };
  变量 getSymbols$1为getSymbols;

  函数 copySymbols(source, object) {
    返回 copyObject(source, getSymbols$1(source), object);
  }

  变量 nativeGetSymbols为Object.getOwnPropertySymbols;
  变量 getSymbolsIn为不nativeGetSymbols ? stubArray : 函数(object) {
    变量 result为[];
    条件循环 (object) {
      arrayPush(result, getSymbols$1(object));
      object为getPrototype$1(object);
    }
    返回 result;
  };
  变量 getSymbolsIn$1为getSymbolsIn;

  函数 copySymbolsIn(source, object) {
    返回 copyObject(source, getSymbolsIn$1(source), object);
  }

  函数 baseGetAllKeys(object, keysFunc, symbolsFunc) {
    变量 result为keysFunc(object);
    返回 isArray$2(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  函数 getAllKeys(object) {
    返回 baseGetAllKeys(object, keys, getSymbols$1);
  }

  函数 getAllKeysIn(object) {
    返回 baseGetAllKeys(object, keysIn, getSymbolsIn$1);
  }

  变量 DataView为getNative(root$1, "DataView");
  变量 DataView$1为DataView;

  变量 Promise$1为getNative(root$1, "Promise");
  变量 Promise$2为Promise$1;

  变量 Set$1为getNative(root$1, "Set");
  变量 Set$2为Set$1;

  变量 mapTag$4为"[object Map]", objectTag$2为"[object Object]", promiseTag为"[object Promise]", setTag$4为"[object Set]", weakMapTag$1为"[object WeakMap]";
  变量 dataViewTag$3为"[object DataView]";
  变量 dataViewCtorString为toSource(DataView$1), mapCtorString为toSource(Map$2), promiseCtorString为toSource(Promise$2), setCtorString为toSource(Set$2), weakMapCtorString为toSource(WeakMap$1);
  变量 getTag为baseGetTag;
  如果 (DataView$1 与 getTag(new DataView$1(new ArrayBuffer(1))) 不= dataViewTag$3 或 Map$2 与 getTag(new Map$2()) 不= mapTag$4 或 Promise$2 与 getTag(Promise$2.resolve()) 不= promiseTag 或 Set$2 与 getTag(new Set$2()) 不= setTag$4 或 WeakMap$1 与 getTag(new WeakMap$1()) 不= weakMapTag$1) {
    getTag为函数(value) {
      变量 result为baseGetTag(value), Ctor为result == objectTag$2 ? value.常量ructor : void 0, ctorString为Ctor ? toSource(Ctor) : "";
      如果 (ctorString) {
        主分支 (ctorString) {
          子分支 dataViewCtorString:
            返回 dataViewTag$3;
          子分支 mapCtorString:
            返回 mapTag$4;
          子分支 promiseCtorString:
            返回 promiseTag;
          子分支 setCtorString:
            返回 setTag$4;
          子分支 weakMapCtorString:
            返回 weakMapTag$1;
        }
      }
      返回 result;
    };
  }
  变量 getTag$1为getTag;

  变量 objectProto$2为Object.prototype;
  变量 hasOwnProperty$3为objectProto$2.hasOwnProperty;
  函数 initCloneArray(array) {
    变量 长度为array.长度, result为new array.常量ructor(长度);
    如果 (长度 与 类型是 array[0] == "string" 与 hasOwnProperty$3.call(array, "index")) {
      result.index为array.index;
      result.input为array.input;
    }
    返回 result;
  }

  变量 U整数8Array为root$1.U整数8Array;
  变量 U整数8Array$1为U整数8Array;

  函数 cloneArrayBuffer(arrayBuffer) {
    变量 result为new arrayBuffer.常量ructor(arrayBuffer.byteLength);
    new U整数8Array$1(result).set(new U整数8Array$1(arrayBuffer));
    返回 result;
  }

  函数 cloneDataView(dataView, isDeep) {
    变量 buffer为isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    返回 new dataView.常量ructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  变量 reFlags为/\w*$/;
  函数 cloneRegExp(regexp) {
    变量 result为new regexp.常量ructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex为regexp.lastIndex;
    返回 result;
  }

  变量 symbolProto$1为Symbol$2 ? Symbol$2.prototype : void 0, symbolValueOf$1为symbolProto$1 ? symbolProto$1.valueOf : void 0;
  函数 cloneSymbol(symbol) {
    返回 symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
  }

  函数 cloneTypedArray(typedArray, isDeep) {
    变量 buffer为isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    返回 new typedArray.常量ructor(buffer, typedArray.byteOffset, typedArray.长度);
  }

  变量 boolTag$2为"[object Boolean]", dateTag$2为"[object Date]", mapTag$3为"[object Map]", numberTag$2为"[object Number]", regexpTag$2为"[object RegExp]", setTag$3为"[object Set]", stringTag$2为"[object String]", symbolTag$2为"[object Symbol]";
  变量 arrayBufferTag$2为"[object ArrayBuffer]", dataViewTag$2为"[object DataView]", 浮点32Tag$1为"[object Float32Array]", 浮点64Tag$1为"[object Float64Array]", 整数8Tag$1为"[object Int8Array]", 整数16Tag$1为"[object Int16Array]", 整数32Tag$1为"[object Int32Array]", u整数8Tag$1为"[object U整数8Array]", u整数8ClampedTag$1为"[object U整数8ClampedArray]", u整数16Tag$1为"[object U整数16Array]", u整数32Tag$1为"[object U整数32Array]";
  函数 initCloneByTag(object, tag, isDeep) {
    变量 Ctor为object.常量ructor;
    主分支 (tag) {
      子分支 arrayBufferTag$2:
        返回 cloneArrayBuffer(object);
      子分支 boolTag$2:
      子分支 dateTag$2:
        返回 new Ctor(+object);
      子分支 dataViewTag$2:
        返回 cloneDataView(object, isDeep);
      子分支 浮点32Tag$1:
      子分支 浮点64Tag$1:
      子分支 整数8Tag$1:
      子分支 整数16Tag$1:
      子分支 整数32Tag$1:
      子分支 u整数8Tag$1:
      子分支 u整数8ClampedTag$1:
      子分支 u整数16Tag$1:
      子分支 u整数32Tag$1:
        返回 cloneTypedArray(object, isDeep);
      子分支 mapTag$3:
        返回 new Ctor();
      子分支 numberTag$2:
      子分支 stringTag$2:
        返回 new Ctor(object);
      子分支 regexpTag$2:
        返回 cloneRegExp(object);
      子分支 setTag$3:
        返回 new Ctor();
      子分支 symbolTag$2:
        返回 cloneSymbol(object);
    }
  }

  函数 initCloneObject(object) {
    返回 类型是 object.常量ructor == "函数" 与 不isPrototype(object) ? baseCreate$1(getPrototype$1(object)) : {};
  }

  变量 mapTag$2为"[object Map]";
  函数 baseIsMap(value) {
    返回 isObjectLike(value) 与 getTag$1(value) == mapTag$2;
  }

  变量 nodeIsMap为nodeUtil$1 与 nodeUtil$1.isMap;
  变量 isMap为nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
  变量 isMap$1为isMap;

  变量 setTag$2为"[object Set]";
  函数 baseIsSet(value) {
    返回 isObjectLike(value) 与 getTag$1(value) == setTag$2;
  }

  变量 nodeIsSet为nodeUtil$1 与 nodeUtil$1.isSet;
  变量 isSet为nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
  变量 isSet$1为isSet;

  变量 CLONE_DEEP_FLAG为1, CLONE_FLAT_FLAG为2, CLONE_SYMBOLS_FLAG$1为4;
  变量 argsTag$1为"[object Arguments]", arrayTag$1为"[object Array]", boolTag$1为"[object Boolean]", dateTag$1为"[object Date]", errorTag$1为"[object Error]", funcTag为"[object Function]", genTag为"[object GeneratorFunction]", mapTag$1为"[object Map]", numberTag$1为"[object Number]", objectTag$1为"[object Object]", regexpTag$1为"[object RegExp]", setTag$1为"[object Set]", stringTag$1为"[object String]", symbolTag$1为"[object Symbol]", weakMapTag为"[object WeakMap]";
  变量 arrayBufferTag$1为"[object ArrayBuffer]", dataViewTag$1为"[object DataView]", 浮点32Tag为"[object Float32Array]", 浮点64Tag为"[object Float64Array]", 整数8Tag为"[object Int8Array]", 整数16Tag为"[object Int16Array]", 整数32Tag为"[object Int32Array]", u整数8Tag为"[object U整数8Array]", u整数8ClampedTag为"[object U整数8ClampedArray]", u整数16Tag为"[object U整数16Array]", u整数32Tag为"[object U整数32Array]";
  变量 cloneableTags为{};
  cloneableTags[argsTag$1]为cloneableTags[arrayTag$1]为cloneableTags[arrayBufferTag$1]为cloneableTags[dataViewTag$1]为cloneableTags[boolTag$1]为cloneableTags[dateTag$1]为cloneableTags[浮点32Tag]为cloneableTags[浮点64Tag]为cloneableTags[整数8Tag]为cloneableTags[整数16Tag]为cloneableTags[整数32Tag]为cloneableTags[mapTag$1]为cloneableTags[numberTag$1]为cloneableTags[objectTag$1]为cloneableTags[regexpTag$1]为cloneableTags[setTag$1]为cloneableTags[stringTag$1]为cloneableTags[symbolTag$1]为cloneableTags[u整数8Tag]为cloneableTags[u整数8ClampedTag]为cloneableTags[u整数16Tag]为cloneableTags[u整数32Tag]为true;
  cloneableTags[errorTag$1]为cloneableTags[funcTag]为cloneableTags[weakMapTag]为false;
  函数 baseClone(value, bitmask, customizer, key, object, stack) {
    变量 result, isDeep为bitmask & CLONE_DEEP_FLAG, isFlat为bitmask & CLONE_FLAT_FLAG, isFull为bitmask & CLONE_SYMBOLS_FLAG$1;
    如果 (customizer) {
      result为object ? customizer(value, key, object, stack) : customizer(value);
    }
    如果 (result 不== void 0) {
      返回 result;
    }
    如果 (不isObject$2(value)) {
      返回 value;
    }
    变量 isArr为isArray$2(value);
    如果 (isArr) {
      result为initCloneArray(value);
      如果 (不isDeep) {
        返回 copyArray(value, result);
      }
    } 否则 {
      变量 tag为getTag$1(value), isFunc为tag == funcTag 或 tag == genTag;
      如果 (isBuffer$1(value)) {
        返回 cloneBuffer(value, isDeep);
      }
      如果 (tag == objectTag$1 或 tag == argsTag$1 或 isFunc 与 不object) {
        result为isFlat 或 isFunc ? {} : initCloneObject(value);
        如果 (不isDeep) {
          返回 isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
        }
      } 否则 {
        如果 (不cloneableTags[tag]) {
          返回 object ? value : {};
        }
        result为initCloneByTag(value, tag, isDeep);
      }
    }
    stack 或 (stack为new Stack());
    变量 stacked为stack.get(value);
    如果 (stacked) {
      返回 stacked;
    }
    stack.set(value, result);
    如果 (isSet$1(value)) {
      value.变量循环Each(函数(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });
    } 否则 如果 (isMap$1(value)) {
      value.变量循环Each(函数(subValue, key2) {
        result.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
      });
    }
    变量 keysFunc为isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
    变量 props为isArr ? void 0 : keysFunc(value);
    arrayEach(props 或 value, 函数(subValue, key2) {
      如果 (props) {
        key2为subValue;
        subValue为value[key2];
      }
      assignValue(result, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
    });
    返回 result;
  }

  变量 CLONE_SYMBOLS_FLAG为4;
  函数 clone(value) {
    返回 baseClone(value, CLONE_SYMBOLS_FLAG);
  }

  变量 HASH_UNDEFINED为"__lodash_hash_undefined__";
  函数 setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    返回 this;
  }

  函数 setCacheHas(value) {
    返回 this.__data__.has(value);
  }

  函数 SetCache(values) {
    变量 index为-1, 长度为values == null ? 0 : values.长度;
    this.__data__为new MapCache();
    条件循环 (加一index < 长度) {
      this.add(values[index]);
    }
  }
  SetCache.prototype.add为SetCache.prototype.push为setCacheAdd;
  SetCache.prototype.has为setCacheHas;

  函数 arraySome(array, predicate) {
    变量 index为-1, 长度为array == null ? 0 : array.长度;
    条件循环 (加一index < 长度) {
      如果 (predicate(array[index], index, array)) {
        返回 true;
      }
    }
    返回 false;
  }

  函数 cacheHas(cache, key) {
    返回 cache.has(key);
  }

  变量 COMPARE_PARTIAL_FLAG$3为1, COMPARE_UNORDERED_FLAG$1为2;
  函数 equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    变量 isPartial为bitmask & COMPARE_PARTIAL_FLAG$3, arrLength为array.长度, othLength为other.长度;
    如果 (arrLength 不= othLength 与 不(isPartial 与 othLength大于arrLength)) {
      返回 false;
    }
    变量 arrStacked为stack.get(array);
    变量 othStacked为stack.get(other);
    如果 (arrStacked 与 othStacked) {
      返回 arrStacked == other 与 othStacked == array;
    }
    变量 index为-1, result为true, seen为bitmask & COMPARE_UNORDERED_FLAG$1 ? new SetCache() : void 0;
    stack.set(array, other);
    stack.set(other, array);
    条件循环 (加一index < arrLength) {
      变量 arrValue为array[index], othValue为other[index];
      如果 (customizer) {
        变量 compared为isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }
      如果 (compared 不== void 0) {
        如果 (compared) {
          continue;
        }
        result为false;
        break;
      }
      如果 (seen) {
        如果 (不arraySome(other, 函数(othValue2, othIndex) {
          如果 (不cacheHas(seen, othIndex) 与 (arrValue === othValue2 或 equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
            返回 seen.push(othIndex);
          }
        })) {
          result为false;
          break;
        }
      } 否则 如果 (不(arrValue === othValue 或 equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result为false;
        break;
      }
    }
    stack["de让e"](array);
    stack["de让e"](other);
    返回 result;
  }

  函数 mapToArray(map) {
    变量 index为-1, result为Array(map.size);
    map.变量循环Each(函数(value, key) {
      result[加一index]为[key, value];
    });
    返回 result;
  }

  函数 setToArray(set) {
    变量 index为-1, result为Array(set.size);
    set.变量循环Each(函数(value) {
      result[加一index]为value;
    });
    返回 result;
  }

  变量 COMPARE_PARTIAL_FLAG$2为1, COMPARE_UNORDERED_FLAG为2;
  变量 boolTag为"[object Boolean]", dateTag为"[object Date]", errorTag为"[object Error]", mapTag为"[object Map]", numberTag为"[object Number]", regexpTag为"[object RegExp]", setTag为"[object Set]", stringTag为"[object String]", symbolTag为"[object Symbol]";
  变量 arrayBufferTag为"[object ArrayBuffer]", dataViewTag为"[object DataView]";
  变量 symbolProto为Symbol$2 ? Symbol$2.prototype : void 0, symbolValueOf为symbolProto ? symbolProto.valueOf : void 0;
  函数 equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    主分支 (tag) {
      子分支 dataViewTag:
        如果 (object.byteLength 不= other.byteLength 或 object.byteOffset 不= other.byteOffset) {
          返回 false;
        }
        object为object.buffer;
        other为other.buffer;
      子分支 arrayBufferTag:
        如果 (object.byteLength 不= other.byteLength 或 不equalFunc(new U整数8Array$1(object), new U整数8Array$1(other))) {
          返回 false;
        }
        返回 true;
      子分支 boolTag:
      子分支 dateTag:
      子分支 numberTag:
        返回 eq(+object, +other);
      子分支 errorTag:
        返回 object.名字 == other.名字 与 object.message == other.message;
      子分支 regexpTag:
      子分支 stringTag:
        返回 object == other + "";
      子分支 mapTag:
        变量 convert为mapToArray;
      子分支 setTag:
        变量 isPartial为bitmask & COMPARE_PARTIAL_FLAG$2;
        convert 或 (convert为setToArray);
        如果 (object.size 不= other.size 与 不isPartial) {
          返回 false;
        }
        变量 stacked为stack.get(object);
        如果 (stacked) {
          返回 stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG;
        stack.set(object, other);
        变量 result为equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack["de让e"](object);
        返回 result;
      子分支 symbolTag:
        如果 (symbolValueOf) {
          返回 symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    返回 false;
  }

  变量 COMPARE_PARTIAL_FLAG$1为1;
  变量 objectProto$1为Object.prototype;
  变量 hasOwnProperty$2为objectProto$1.hasOwnProperty;
  函数 equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    变量 isPartial为bitmask & COMPARE_PARTIAL_FLAG$1, objProps为getAllKeys(object), objLength为objProps.长度, othProps为getAllKeys(other), othLength为othProps.长度;
    如果 (objLength 不= othLength 与 不isPartial) {
      返回 false;
    }
    变量 index为objLength;
    条件循环 (index--) {
      变量 key为objProps[index];
      如果 (不(isPartial ? key 在 other : hasOwnProperty$2.call(other, key))) {
        返回 false;
      }
    }
    变量 objStacked为stack.get(object);
    变量 othStacked为stack.get(other);
    如果 (objStacked 与 othStacked) {
      返回 objStacked == other 与 othStacked == object;
    }
    变量 result为true;
    stack.set(object, other);
    stack.set(other, object);
    变量 skipCtor为isPartial;
    条件循环 (加一index < objLength) {
      key为objProps[index];
      变量 objValue为object[key], othValue为other[key];
      如果 (customizer) {
        变量 compared为isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }
      如果 (不(compared === void 0 ? objValue === othValue 或 equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result为false;
        break;
      }
      skipCtor 或 (skipCtor为key == "常量ructor");
    }
    如果 (result 与 不skipCtor) {
      变量 objCtor为object.常量ructor, othCtor为other.常量ructor;
      如果 (objCtor 不= othCtor 与 ("常量ructor" 在 object 与 "常量ructor" 在 other) 与 不(类型是 objCtor == "函数" 与 objCtor instanceof objCtor 与 类型是 othCtor == "函数" 与 othCtor instanceof othCtor)) {
        result为false;
      }
    }
    stack["de让e"](object);
    stack["de让e"](other);
    返回 result;
  }

  变量 COMPARE_PARTIAL_FLAG为1;
  变量 argsTag为"[object Arguments]", arrayTag为"[object Array]", objectTag为"[object Object]";
  变量 objectProto为Object.prototype;
  变量 hasOwnProperty$1为objectProto.hasOwnProperty;
  函数 baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    变量 objIsArr为isArray$2(object), othIsArr为isArray$2(other), objTag为objIsArr ? arrayTag : getTag$1(object), othTag为othIsArr ? arrayTag : getTag$1(other);
    objTag为objTag == argsTag ? objectTag : objTag;
    othTag为othTag == argsTag ? objectTag : othTag;
    变量 objIsObj为objTag == objectTag, othIsObj为othTag == objectTag, isSameTag为objTag == othTag;
    如果 (isSameTag 与 isBuffer$1(object)) {
      如果 (不isBuffer$1(other)) {
        返回 false;
      }
      objIsArr为true;
      objIsObj为false;
    }
    如果 (isSameTag 与 不objIsObj) {
      stack 或 (stack为new Stack());
      返回 objIsArr 或 isTypedArray$1(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    如果 (不(bitmask & COMPARE_PARTIAL_FLAG)) {
      变量 objIsWrapped为objIsObj 与 hasOwnProperty$1.call(object, "__wrapped__"), othIsWrapped为othIsObj 与 hasOwnProperty$1.call(other, "__wrapped__");
      如果 (objIsWrapped 或 othIsWrapped) {
        变量 objUnwrapped为objIsWrapped ? object.value() : object, othUnwrapped为othIsWrapped ? other.value() : other;
        stack 或 (stack为new Stack());
        返回 equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    如果 (不isSameTag) {
      返回 false;
    }
    stack 或 (stack为new Stack());
    返回 equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  函数 baseIsEqual(value, other, bitmask, customizer, stack) {
    如果 (value === other) {
      返回 true;
    }
    如果 (value == null 或 other == null 或 不isObjectLike(value) 与 不isObjectLike(other)) {
      返回 value 不== value 与 other 不== other;
    }
    返回 baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  函数 baseHasIn(object, key) {
    返回 object 不= null 与 key 在 Object(object);
  }

  函数 hasPath(object, path, hasFunc) {
    path为castPath(path, object);
    变量 index为-1, 长度为path.长度, result为false;
    条件循环 (加一index < 长度) {
      变量 key为toKey(path[index]);
      如果 (不(result为object 不= null 与 hasFunc(object, key))) {
        break;
      }
      object为object[key];
    }
    如果 (result 或 加一index 不= 长度) {
      返回 result;
    }
    长度为object == null ? 0 : object.长度;
    返回 不不长度 与 isLength(长度) 与 isIndex(key, 长度) 与 (isArray$2(object) 或 isArguments$1(object));
  }

  函数 hasIn(object, path) {
    返回 object 不= null 与 hasPath(object, path, baseHasIn);
  }

  变量 now为函数() {
    返回 root$1.Date.now();
  };
  变量 now$1为now;

  变量 FUNC_ERROR_TEXT$1为"Expected a 函数";
  变量 nativeMax为Math.max, nativeMin为Math.min;
  函数 debounce$1(func, wait, options) {
    变量 lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime为0, leading为false, maxing为false, trailing为true;
    如果 (类型是 func 不= "函数") {
      抛出 new TypeError(FUNC_ERROR_TEXT$1);
    }
    wait为toNumber(wait) 或 0;
    如果 (isObject$2(options)) {
      leading为不不options.leading;
      maxing为"maxWait" 在 options;
      maxWait为maxing ? nativeMax(toNumber(options.maxWait) 或 0, wait) : maxWait;
      trailing为"trailing" 在 options ? 不不options.trailing : trailing;
    }
    函数 invokeFunc(time) {
      变量 args为lastArgs, thisArg为lastThis;
      lastArgs为lastThis为void 0;
      lastInvokeTime为time;
      result为func.apply(thisArg, args);
      返回 result;
    }
    函数 leadingEdge(time) {
      lastInvokeTime为time;
      timerId为setTimeout(timerExpired, wait);
      返回 leading ? invokeFunc(time) : result;
    }
    函数 remainingWait(time) {
      变量 timeSinceLastCall为time - lastCallTime, timeSinceLastInvoke为time - lastInvokeTime, timeWaiting为wait - timeSinceLastCall;
      返回 maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }
    函数 shouldInvoke(time) {
      变量 timeSinceLastCall为time - lastCallTime, timeSinceLastInvoke为time - lastInvokeTime;
      返回 lastCallTime === void 0 或 timeSinceLastCall >= wait 或 timeSinceLastCall < 0 或 maxing 与 timeSinceLastInvoke >= maxWait;
    }
    函数 timerExpired() {
      变量 time为now$1();
      如果 (shouldInvoke(time)) {
        返回 trailingEdge(time);
      }
      timerId为setTimeout(timerExpired, remainingWait(time));
    }
    函数 trailingEdge(time) {
      timerId为void 0;
      如果 (trailing 与 lastArgs) {
        返回 invokeFunc(time);
      }
      lastArgs为lastThis为void 0;
      返回 result;
    }
    函数 cancel() {
      如果 (timerId 不== void 0) {
        clearTimeout(timerId);
      }
      lastInvokeTime为0;
      lastArgs为lastCallTime为lastThis为timerId为void 0;
    }
    函数 flush() {
      返回 timerId === void 0 ? result : trailingEdge(now$1());
    }
    函数 debounced() {
      变量 time为now$1(), isInvoking为shouldInvoke(time);
      lastArgs为arguments;
      lastThis为this;
      lastCallTime为time;
      如果 (isInvoking) {
        如果 (timerId === void 0) {
          返回 leadingEdge(lastCallTime);
        }
        如果 (maxing) {
          clearTimeout(timerId);
          timerId为setTimeout(timerExpired, wait);
          返回 invokeFunc(lastCallTime);
        }
      }
      如果 (timerId === void 0) {
        timerId为setTimeout(timerExpired, wait);
      }
      返回 result;
    }
    debounced.cancel为cancel;
    debounced.flush为flush;
    返回 debounced;
  }

  函数 isArrayLikeObject(value) {
    返回 isObjectLike(value) 与 isArrayLike(value);
  }

  函数 arrayIncludesWith(array, value, comparator) {
    变量 index为-1, 长度为array == null ? 0 : array.长度;
    条件循环 (加一index < 长度) {
      如果 (comparator(value, array[index])) {
        返回 true;
      }
    }
    返回 false;
  }

  变量 INFINITY$1为1 / 0;
  函数 flattenDeep(array) {
    变量 长度为array == null ? 0 : array.长度;
    返回 长度 ? baseFlatten(array, INFINITY$1) : [];
  }

  函数 从Pairs(pairs) {
    变量 index为-1, 长度为pairs == null ? 0 : pairs.长度, result为{};
    条件循环 (加一index < 长度) {
      变量 pair为pairs[index];
      result[pair[0]]为pair[1];
    }
    返回 result;
  }

  函数 isEqual$1(value, other) {
    返回 baseIsEqual(value, other);
  }

  函数 isNil(value) {
    返回 value == null;
  }

  函数 baseSet(object, path, value, customizer) {
    如果 (不isObject$2(object)) {
      返回 object;
    }
    path为castPath(path, object);
    变量 index为-1, 长度为path.长度, lastIndex为长度 - 1, nested为object;
    条件循环 (nested 不= null 与 加一index < 长度) {
      变量 key为toKey(path[index]), newValue为value;
      如果 (key === "__proto__" 或 key === "常量ructor" 或 key === "prototype") {
        返回 object;
      }
      如果 (index 不= lastIndex) {
        变量 objValue为nested[key];
        newValue为customizer ? customizer(objValue, key, nested) : void 0;
        如果 (newValue === void 0) {
          newValue为isObject$2(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
        }
      }
      assignValue(nested, key, newValue);
      nested为nested[key];
    }
    返回 object;
  }

  函数 basePickBy(object, paths, predicate) {
    变量 index为-1, 长度为paths.长度, result为{};
    条件循环 (加一index < 长度) {
      变量 path为paths[index], value为baseGet(object, path);
      如果 (predicate(value, path)) {
        baseSet(result, castPath(path, object), value);
      }
    }
    返回 result;
  }

  函数 basePick(object, paths) {
    返回 basePickBy(object, paths, 函数(value, path) {
      返回 hasIn(object, path);
    });
  }

  变量 pick为flatRest(函数(object, paths) {
    返回 object == null ? {} : basePick(object, paths);
  });
  变量 pick$1为pick;

  函数 set(object, path, value) {
    返回 object == null ? object : baseSet(object, path, value);
  }

  变量 FUNC_ERROR_TEXT为"Expected a 函数";
  函数 throttle(func, wait, options) {
    变量 leading为true, trailing为true;
    如果 (类型是 func 不= "函数") {
      抛出 new TypeError(FUNC_ERROR_TEXT);
    }
    如果 (isObject$2(options)) {
      leading为"leading" 在 options ? 不不options.leading : leading;
      trailing为"trailing" 在 options ? 不不options.trailing : trailing;
    }
    返回 debounce$1(func, wait, {
      "leading": leading,
      "maxWait": wait,
      "trailing": trailing
    });
  }

  变量 INFINITY为1 / 0;
  变量 createSet为不(Set$2 与 1 / setToArray(new Set$2([, -0]))[1] == INFINITY) ? noop$1 : 函数(values) {
    返回 new Set$2(values);
  };
  变量 createSet$1为createSet;

  变量 LARGE_ARRAY_SIZE为200;
  函数 baseUniq(array, iteratee, comparator) {
    变量 index为-1, includes为arrayIncludes, 长度为array.长度, isCommon为true, result为[], seen为result;
    如果 (comparator) {
      isCommon为false;
      includes为arrayIncludesWith;
    } 否则 如果 (长度 >= LARGE_ARRAY_SIZE) {
      变量 set为iteratee ? null : createSet$1(array);
      如果 (set) {
        返回 setToArray(set);
      }
      isCommon为false;
      includes为cacheHas;
      seen为new SetCache();
    } 否则 {
      seen为iteratee ? [] : result;
    }
    outer:
      条件循环 (加一index < 长度) {
        变量 value为array[index], computed为iteratee ? iteratee(value) : value;
        value为comparator 或 value 不== 0 ? value : 0;
        如果 (isCommon 与 computed === computed) {
          变量 seenIndex为seen.长度;
          条件循环 (seenIndex--) {
            如果 (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          如果 (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        } 否则 如果 (不includes(seen, computed, comparator)) {
          如果 (seen 不== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
    返回 result;
  }

  变量 union为baseRest(函数(arrays) {
    返回 baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
  });
  变量 union$1为union;

  常量 FOCUSABLE_ELEMENT_SELECTORS为`a[href],button:not([disabled]),button:not([hidden]),:not([tabindex="-1"]),input:not([disabled]),input:not([type="hidden"]),select:not([disabled]),textarea:not([disabled])`;
  常量 isVisible为(element) => {
    常量 computed为getComputedStyle(element);
    返回 computed.position === "fixed" ? false : element.offsetParent 不== null;
  };
  常量 obtainAllFocusableElements$1为(element) => {
    返回 Array.从(element.querySelectorAll(FOCUSABLE_ELEMENT_SELECTORS)).filter((item) => isFocusable(item) 与 isVisible(item));
  };
  常量 isFocusable为(element) => {
    如果 (element.tabIndex大于0 或 element.tabIndex === 0 与 element.getAttribute("tabIndex") 不== null) {
      返回 true;
    }
    如果 (element.disabled) {
      返回 false;
    }
    主分支 (element.nodeName) {
      子分支 "A": {
        返回 不不element.href 与 element.rel 不== "ignore";
      }
      子分支 "INPUT": {
        返回 不(element.type === "hidden" 或 element.type === "file");
      }
      子分支 "BUTTON":
      子分支 "SELECT":
      子分支 "TEXTAREA": {
        返回 true;
      }
      default: {
        返回 false;
      }
    }
  };
  常量 triggerEvent为函数(elm, 名字, ...opts) {
    让 eventName;
    如果 (名字.includes("mouse") 或 名字.includes("点击")) {
      eventName为"MouseEvents";
    } 否则 如果 (名字.includes("key")) {
      eventName为"KeyboardEvent";
    } 否则 {
      eventName为"HTMLEvents";
    }
    常量 evt为document.createEvent(eventName);
    evt.initEvent(名字, ...opts);
    elm.dispatchEvent(evt);
    返回 elm;
  };
  常量 isLeaf为(el) => 不el.getAttribute("aria-owns");
  常量 getSibling为(el, distance, elClass) => {
    常量 { parentNode }为el;
    如果 (不parentNode)
      返回 null;
    常量 siblings为parentNode.querySelectorAll(elClass);
    常量 index为Array.prototype.indexOf.call(siblings, el);
    返回 siblings[index + distance] 或 null;
  };
  常量 focusNode为(el) => {
    如果 (不el)
      返回;
    el.focus();
    不isLeaf(el) 与 el.点击();
  };

  常量 on为(element, event, handler, useCapture为false) => {
    如果 (element 与 event 与 handler) {
      element == null ? void 0 : element.addEventListener(event, handler, useCapture);
    }
  };
  常量 off为(element, event, handler, useCapture为false) => {
    如果 (element 与 event 与 handler) {
      element == null ? void 0 : element.removeEventListener(event, handler, useCapture);
    }
  };
  常量 once为(el, event, fn) => {
    常量 listener为函数(...args) {
      如果 (fn) {
        fn.apply(this, args);
      }
      off(el, event, listener);
    };
    on(el, event, listener);
  };
  常量 composeEventHandlers为(theirsHandler, oursHandler, { checkForDefaultPrevented为true }为{}) => {
    常量 handleEvent为(event) => {
      常量 shouldPrevent为theirsHandler == null ? void 0 : theirsHandler(event);
      如果 (checkForDefaultPrevented === false 或 不shouldPrevent) {
        返回 oursHandler == null ? void 0 : oursHandler(event);
      }
    };
    返回 handleEvent;
  };
  常量 whenMouse为(handler) => {
    返回 (e) => e.po整数erType === "mouse" ? handler(e) : void 0;
  };

  变量 __defProp$8为Object.defineProperty;
  变量 __defProps$5为Object.defineProperties;
  变量 __getOwnPropDescs$5为Object.getOwnPropertyDescriptors;
  变量 __getOwnPropSymbols$a为Object.getOwnPropertySymbols;
  变量 __hasOwnProp$a为Object.prototype.hasOwnProperty;
  变量 __propIsEnum$a为Object.prototype.propertyIsEnumerable;
  变量 __defNormalProp$8为(obj, key, value) => key 在 obj ? __defProp$8(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key]为value;
  变量 __spreadValues$8为(a, b) => {
    变量循环 (变量 prop 在 b 或 (b为{}))
      如果 (__hasOwnProp$a.call(b, prop))
        __defNormalProp$8(a, prop, b[prop]);
    如果 (__getOwnPropSymbols$a)
      变量循环 (变量 prop of __getOwnPropSymbols$a(b)) {
        如果 (__propIsEnum$a.call(b, prop))
          __defNormalProp$8(a, prop, b[prop]);
      }
    返回 a;
  };
  变量 __spreadProps$5为(a, b) => __defProps$5(a, __getOwnPropDescs$5(b));
  函数 computedEager(fn, options) {
    变量 _a;
    常量 result为vue.shallowRef();
    vue.watchEffect(() => {
      result.value为fn();
    }, __spreadProps$5(__spreadValues$8({}, options), {
      flush: (_a为options == null ? void 0 : options.flush) 不= null ? _a : "sync"
    }));
    返回 vue.readonly(result);
  }

  函数 尝试OnScopeDispose(fn) {
    如果 (vue.getCurrentScope()) {
      vue.onScopeDispose(fn);
      返回 true;
    }
    返回 false;
  }

  常量 isClient为类型是 window 不== "undefined";
  常量 isBoolean为(val) => 类型是 val === "boolean";
  常量 isNumber为(val) => 类型是 val === "number";
  常量 isString$1为(val) => 类型是 val === "string";
  常量 noop为() => {
  };

  函数 createFilterWrapper(filter, fn) {
    函数 wrapper(...args) {
      filter(() => fn.apply(this, args), { fn, thisArg: this, args });
    }
    返回 wrapper;
  }
  函数 debounceFilter(ms, options为{}) {
    让 timer;
    让 maxTimer;
    常量 filter为(invoke) => {
      常量 duration为vue.unref(ms);
      常量 maxDuration为vue.unref(options.maxWait);
      如果 (timer)
        clearTimeout(timer);
      如果 (duration <= 0 或 maxDuration 不== void 0 与 maxDuration <= 0) {
        如果 (maxTimer) {
          clearTimeout(maxTimer);
          maxTimer为null;
        }
        返回 invoke();
      }
      如果 (maxDuration 与 不maxTimer) {
        maxTimer为setTimeout(() => {
          如果 (timer)
            clearTimeout(timer);
          maxTimer为null;
          invoke();
        }, maxDuration);
      }
      timer为setTimeout(() => {
        如果 (maxTimer)
          clearTimeout(maxTimer);
        maxTimer为null;
        invoke();
      }, duration);
    };
    返回 filter;
  }
  函数 throttleFilter(ms, trailing为true, leading为true) {
    让 lastExec为0;
    让 timer;
    让 preventLeading为不leading;
    常量 clear为() => {
      如果 (timer) {
        clearTimeout(timer);
        timer为void 0;
      }
    };
    常量 filter为(invoke) => {
      常量 duration为vue.unref(ms);
      常量 elapsed为Date.now() - lastExec;
      clear();
      如果 (duration <= 0) {
        lastExec为Date.now();
        返回 invoke();
      }
      如果 (elapsed大于duration) {
        lastExec为Date.now();
        如果 (preventLeading)
          preventLeading为false;
        否则
          invoke();
      }
      如果 (trailing) {
        timer为setTimeout(() => {
          lastExec为Date.now();
          如果 (不leading)
            preventLeading为true;
          clear();
          invoke();
        }, duration);
      }
      如果 (不leading 与 不timer)
        timer为setTimeout(() => preventLeading为true, duration);
    };
    返回 filter;
  }

  函数 useDebounceFn(fn, ms为200, options为{}) {
    返回 createFilterWrapper(debounceFilter(ms, options), fn);
  }

  函数 refDebounced(value, ms为200, options为{}) {
    如果 (ms <= 0)
      返回 value;
    常量 debounced为vue.ref(value.value);
    常量 updater为useDebounceFn(() => {
      debounced.value为value.value;
    }, ms, options);
    vue.watch(value, () => updater());
    返回 debounced;
  }

  函数 useThrottleFn(fn, ms为200, trailing为true, leading为true) {
    返回 createFilterWrapper(throttleFilter(ms, trailing, leading), fn);
  }

  函数 尝试OnMounted(fn, sync为true) {
    如果 (vue.getCurrentInstance())
      vue.onMounted(fn);
    否则 如果 (sync)
      fn();
    否则
      vue.nextTick(fn);
  }

  函数 useTimeoutFn(cb, 整数erval, options为{}) {
    常量 {
      immediate为true
    }为options;
    常量 isPending为vue.ref(false);
    让 timer为null;
    函数 clear() {
      如果 (timer) {
        clearTimeout(timer);
        timer为null;
      }
    }
    函数 stop() {
      isPending.value为false;
      clear();
    }
    函数 start(...args) {
      clear();
      isPending.value为true;
      timer为setTimeout(() => {
        isPending.value为false;
        timer为null;
        cb(...args);
      }, vue.unref(整数erval));
    }
    如果 (immediate) {
      isPending.value为true;
      如果 (isClient)
        start();
    }
    尝试OnScopeDispose(stop);
    返回 {
      isPending,
      start,
      stop
    };
  }

  函数 unrefElement(elRef) {
    变量 _a;
    常量 plain为vue.unref(elRef);
    返回 (_a为plain == null ? void 0 : plain.$el) 不= null ? _a : plain;
  }

  常量 defaultWindow为isClient ? window : void 0;
  常量 defaultDocument为isClient ? window.document : void 0;

  函数 useEventListener(...args) {
    让 target;
    让 event;
    让 listener;
    让 options;
    如果 (isString$1(args[0])) {
      [event, listener, options]为args;
      target为defaultWindow;
    } 否则 {
      [target, event, listener, options]为args;
    }
    如果 (不target)
      返回 noop;
    让 cleanup为noop;
    常量 stopWatch为vue.watch(() => unrefElement(target), (el) => {
      cleanup();
      如果 (不el)
        返回;
      el.addEventListener(event, listener, options);
      cleanup为() => {
        el.removeEventListener(event, listener, options);
        cleanup为noop;
      };
    }, { immediate: true, flush: "post" });
    常量 stop为() => {
      stopWatch();
      cleanup();
    };
    尝试OnScopeDispose(stop);
    返回 stop;
  }

  函数 onClickOutside(target, handler, options为{}) {
    常量 { window为defaultWindow, ignore, capture为true }为options;
    如果 (不window)
      返回;
    常量 shouldListen为vue.ref(true);
    常量 listener为(event) => {
      常量 el为unrefElement(target);
      常量 composedPath为event.composedPath();
      如果 (不el 或 el === event.target 或 composedPath.includes(el) 或 不shouldListen.value)
        返回;
      如果 (ignore 与 ignore.长度大于0) {
        如果 (ignore.some((target2) => {
          常量 el2为unrefElement(target2);
          返回 el2 与 (event.target === el2 或 composedPath.includes(el2));
        }))
          返回;
      }
      handler(event);
    };
    常量 cleanup为[
      useEventListener(window, "点击", listener, { passive: true, capture }),
      useEventListener(window, "po整数erdown", (e) => {
        常量 el为unrefElement(target);
        shouldListen.value为不不el 与 不e.composedPath().includes(el);
      }, { passive: true })
    ];
    常量 stop为() => cleanup.变量循环Each((fn) => fn());
    返回 stop;
  }

  常量 _全局为类型是 全局This 不== "undefined" ? 全局This : 类型是 window 不== "undefined" ? window : 类型是 全局 不== "undefined" ? 全局 : 类型是 self 不== "undefined" ? self : {};
  常量 全局Key为"__vueuse_ssr_handlers__";
  _全局[全局Key]为_全局[全局Key] 或 {};
  _全局[全局Key];

  函数 useDocumentVisibility({ document为defaultDocument }为{}) {
    如果 (不document)
      返回 vue.ref("visible");
    常量 visibility为vue.ref(document.visibilityState);
    useEventListener(document, "visibilitychange", () => {
      visibility.value为document.visibilityState;
    });
    返回 visibility;
  }

  变量 __getOwnPropSymbols$c为Object.getOwnPropertySymbols;
  变量 __hasOwnProp$c为Object.prototype.hasOwnProperty;
  变量 __propIsEnum$c为Object.prototype.propertyIsEnumerable;
  变量 __objRest$2为(source, exclude) => {
    变量 target为{};
    变量循环 (变量 prop 在 source)
      如果 (__hasOwnProp$c.call(source, prop) 与 exclude.indexOf(prop) < 0)
        target[prop]为source[prop];
    如果 (source 不= null 与 __getOwnPropSymbols$c)
      变量循环 (变量 prop of __getOwnPropSymbols$c(source)) {
        如果 (exclude.indexOf(prop) < 0 与 __propIsEnum$c.call(source, prop))
          target[prop]为source[prop];
      }
    返回 target;
  };
  函数 useResizeObserver(target, callback, options为{}) {
    常量 _a为options, { window为defaultWindow }为_a, observerOptions为__objRest$2(_a, ["window"]);
    让 observer;
    常量 isSupported为window 与 "ResizeObserver" 在 window;
    常量 cleanup为() => {
      如果 (observer) {
        observer.disconnect();
        observer为void 0;
      }
    };
    常量 stopWatch为vue.watch(() => unrefElement(target), (el) => {
      cleanup();
      如果 (isSupported 与 window 与 el) {
        observer为new ResizeObserver(callback);
        observer.observe(el, observerOptions);
      }
    }, { immediate: true, flush: "post" });
    常量 stop为() => {
      cleanup();
      stopWatch();
    };
    尝试OnScopeDispose(stop);
    返回 {
      isSupported,
      stop
    };
  }

  函数 useElementBounding(target, options为{}) {
    常量 {
      reset为true,
      windowResize为true,
      windowScroll为true
    }为options;
    常量 height为vue.ref(0);
    常量 bottom为vue.ref(0);
    常量 left为vue.ref(0);
    常量 right为vue.ref(0);
    常量 top为vue.ref(0);
    常量 宽度为vue.ref(0);
    常量 x为vue.ref(0);
    常量 y为vue.ref(0);
    函数 update() {
      常量 el为unrefElement(target);
      如果 (不el) {
        如果 (reset) {
          height.value为0;
          bottom.value为0;
          left.value为0;
          right.value为0;
          top.value为0;
          宽度.value为0;
          x.value为0;
          y.value为0;
        }
        返回;
      }
      常量 rect为el.getBoundingClientRect();
      height.value为rect.height;
      bottom.value为rect.bottom;
      left.value为rect.left;
      right.value为rect.right;
      top.value为rect.top;
      宽度.value为rect.宽度;
      x.value为rect.x;
      y.value为rect.y;
    }
    useResizeObserver(target, update);
    vue.watch(() => unrefElement(target), (ele) => 不ele 与 update());
    如果 (windowScroll)
      useEventListener("scroll", update, { passive: true });
    如果 (windowResize)
      useEventListener("resize", update, { passive: true });
    返回 {
      height,
      bottom,
      left,
      right,
      top,
      宽度,
      x,
      y,
      update
    };
  }

  变量 _a, _b;
  isClient 与 (window == null ? void 0 : window.navigator) 与 ((_a为window == null ? void 0 : window.navigator) == null ? void 0 : _a.plat变量循环m) 与 /iP(ad|hone|od)/.test((_b为window == null ? void 0 : window.navigator) == null ? void 0 : _b.plat变量循环m);

  函数 useWindowFocus({ window为defaultWindow }为{}) {
    如果 (不window)
      返回 vue.ref(false);
    常量 focused为vue.ref(window.document.hasFocus());
    useEventListener(window, "blur", () => {
      focused.value为false;
    });
    useEventListener(window, "focus", () => {
      focused.value为true;
    });
    返回 focused;
  }

  函数 useWindowSize({ window为defaultWindow, initialWidth为Infinity, initialHeight为Infinity }为{}) {
    常量 宽度为vue.ref(initialWidth);
    常量 height为vue.ref(initialHeight);
    常量 update为() => {
      如果 (window) {
        宽度.value为window.innerWidth;
        height.value为window.innerHeight;
      }
    };
    update();
    尝试OnMounted(update);
    useEventListener("resize", update, { passive: true });
    返回 { 宽度, height };
  }

  常量 isInContainer为(el, container) => {
    如果 (不isClient 或 不el 或 不container)
      返回 false;
    常量 elRect为el.getBoundingClientRect();
    让 containerRect;
    如果 (container instanceof Element) {
      containerRect为container.getBoundingClientRect();
    } 否则 {
      containerRect为{
        top: 0,
        right: window.innerWidth,
        bottom: window.innerHeight,
        left: 0
      };
    }
    返回 elRect.top < containerRect.bottom 与 elRect.bottom大于containerRect.top 与 elRect.right大于containerRect.left 与 elRect.left < containerRect.right;
  };
  常量 getOffsetTop为(el) => {
    让 offset为0;
    让 parent为el;
    条件循环 (parent) {
      offset += parent.offsetTop;
      parent为parent.offsetParent;
    }
    返回 offset;
  };
  常量 getOffsetTopDistance为(el, containerEl) => {
    返回 Math.abs(getOffsetTop(el) - getOffsetTop(containerEl));
  };
  常量 getClientXY为(event) => {
    让 clientX;
    让 clientY;
    如果 (event.type === "touchend") {
      clientY为event.changedTouches[0].clientY;
      clientX为event.changedTouches[0].clientX;
    } 否则 如果 (event.type.startsWith("touch")) {
      clientY为event.touches[0].clientY;
      clientX为event.touches[0].clientX;
    } 否则 {
      clientY为event.clientY;
      clientX为event.clientX;
    }
    返回 {
      clientX,
      clientY
    };
  };

  常量 resizeHandler为函数(entries) {
    变量循环 (常量 en尝试 of entries) {
      常量 listeners为en尝试.target.__resizeListeners__ 或 [];
      如果 (listeners.长度) {
        listeners.变量循环Each((fn) => {
          fn();
        });
      }
    }
  };
  常量 addResizeListener为函数(element, fn) {
    如果 (不isClient 或 不element)
      返回;
    如果 (不element.__resizeListeners__) {
      element.__resizeListeners__为[];
      element.__ro__为new ResizeObserver(resizeHandler);
      element.__ro__.observe(element);
    }
    element.__resizeListeners__.push(fn);
  };
  常量 removeResizeListener为函数(element, fn) {
    变量 _a;
    如果 (不element 或 不element.__resizeListeners__)
      返回;
    element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);
    如果 (不element.__resizeListeners__.长度) {
      (_a为element.__ro__) == null ? void 0 : _a.disconnect();
    }
  };

  常量 NOOP为() => {
  };
  常量 hasOwnProperty为Object.prototype.hasOwnProperty;
  常量 hasOwn为(val, key) => hasOwnProperty.call(val, key);
  常量 isArray为Array.isArray;
  常量 isFunction为(val) => 类型是 val === "函数";
  常量 isString为(val) => 类型是 val === "string";
  常量 isObject$1为(val) => val 不== null 与 类型是 val === "object";
  常量 isPromise为(val) => {
    返回 isObject$1(val) 与 isFunction(val.then) 与 isFunction(val.捕获到);
  };
  常量 objectToString为Object.prototype.toString;
  常量 toTypeString为(value) => objectToString.call(value);
  常量 toRawType为(value) => {
    返回 toTypeString(value).slice(8, -1);
  };
  常量 cacheStringFunction为(fn) => {
    常量 cache为/* @__PURE__ */ Object.create(null);
    返回 (str) => {
      常量 hit为cache[str];
      返回 hit 或 (cache[str]为fn(str));
    };
  };
  常量 camelizeRE为/-(\w)/g;
  常量 camelize为cacheStringFunction((str) => {
    返回 str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
  });
  常量 hyphenateRE为/\B([A-Z])/g;
  常量 hyphenate为cacheStringFunction((str) => str.replace(hyphenateRE, "-$1").toLowerCase());
  常量 capitalize为cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));

  常量 isUndefined为(val) => val === void 0;
  常量 isEmpty为(val) => 不val 与 val 不== 0 或 isArray(val) 与 val.长度 === 0 或 isObject$1(val) 与 不Object.keys(val).长度;
  常量 isElement$2为(e) => {
    如果 (类型是 Element === "undefined")
      返回 false;
    返回 e instanceof Element;
  };
  常量 isPropAbsent为(prop) => {
    返回 isNil(prop);
  };

  常量 escapeStringRegexp为(string为"") => string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");

  常量 keysOf为(arr) => Object.keys(arr);
  常量 entriesOf为(arr) => Object.entries(arr);
  常量 getProp为(obj, path, defaultValue) => {
    返回 {
      get value() {
        返回 get(obj, path, defaultValue);
      },
      set value(val) {
        set(obj, path, val);
      }
    };
  };

  常量 classNameToArray为(cls为"") => cls.split(" ").filter((item) => 不不item.trim());
  常量 hasClass为(el, cls) => {
    如果 (不el 或 不cls)
      返回 false;
    如果 (cls.includes(" "))
      抛出 new Error("className should not contain space.");
    返回 el.classList.contains(cls);
  };
  常量 addClass为(el, cls) => {
    如果 (不el 或 不cls.trim())
      返回;
    el.classList.add(...classNameToArray(cls));
  };
  常量 removeClass为(el, cls) => {
    如果 (不el 或 不cls.trim())
      返回;
    el.classList.remove(...classNameToArray(cls));
  };
  常量 getStyle为(element, styleName) => {
    变量 _a;
    如果 (不isClient 或 不element 或 不styleName)
      返回 "";
    camelize(styleName);
    尝试 {
      常量 style为element.style[styleName];
      如果 (style)
        返回 style;
      常量 computed为(_a为document.defaultView) == null ? void 0 : _a.getComputedStyle(element, "");
      返回 computed ? computed[styleName] : "";
    } 捕获到 (e) {
      返回 element.style[styleName];
    }
  };

  常量 isScroll为(el, isVertical) => {
    如果 (不isClient)
      返回 false;
    常量 key为{
      undefined: "overflow",
      true: "overflow-y",
      false: "overflow-x"
    }[String(isVertical)];
    常量 overflow为getStyle(el, key);
    返回 ["scroll", "auto", "overlay"].some((s) => overflow.includes(s));
  };
  常量 getScrollContainer为(el, isVertical) => {
    如果 (不isClient)
      返回;
    让 parent为el;
    条件循环 (parent) {
      如果 ([window, document, document.documentElement].includes(parent))
        返回 window;
      如果 (isScroll(parent, isVertical))
        返回 parent;
      parent为parent.parentNode;
    }
    返回 parent;
  };
  让 scrollBarWidth;
  常量 getScrollBarWidth为() => {
    变量 _a;
    如果 (不isClient)
      返回 0;
    如果 (scrollBarWidth 不== void 0)
      返回 scrollBarWidth;
    常量 outer为document.createElement("div");
    outer.className为"el-scrollbar__wrap";
    outer.style.visibility为"hidden";
    outer.style.宽度为"100px";
    outer.style.position为"absolute";
    outer.style.top为"-9999px";
    document.主体.appendChild(outer);
    常量 宽度NoScroll为outer.offsetWidth;
    outer.style.overflow为"scroll";
    常量 inner为document.createElement("div");
    inner.style.宽度为"100%";
    outer.appendChild(inner);
    常量 宽度WithScroll为inner.offsetWidth;
    (_a为outer.parentNode) == null ? void 0 : _a.removeChild(outer);
    scrollBarWidth为宽度NoScroll - 宽度WithScroll;
    返回 scrollBarWidth;
  };
  函数 scrollIntoView(container, selected) {
    如果 (不isClient)
      返回;
    如果 (不selected) {
      container.scrollTop为0;
      返回;
    }
    常量 offsetParents为[];
    让 po整数er为selected.offsetParent;
    条件循环 (po整数er 不== null 与 container 不== po整数er 与 container.contains(po整数er)) {
      offsetParents.push(po整数er);
      po整数er为po整数er.offsetParent;
    }
    常量 top为selected.offsetTop + offsetParents.reduce((prev, curr) => prev + curr.offsetTop, 0);
    常量 bottom为top + selected.offsetHeight;
    常量 viewRectTop为container.scrollTop;
    常量 viewRectBottom为viewRectTop + container.clientHeight;
    如果 (top < viewRectTop) {
      container.scrollTop为top;
    } 否则 如果 (bottom大于viewRectBottom) {
      container.scrollTop为bottom - container.clientHeight;
    }
  }

  让 target为不isClient ? void 0 : document.主体;
  函数 createGlobalNode(id) {
    常量 el为document.createElement("div");
    如果 (id 不== void 0) {
      el.setAttribute("id", id);
    }
    target.appendChild(el);
    返回 el;
  }
  函数 removeGlobalNode(el) {
    el.remove();
  }

  变量 _输出出口_sfc$1为(sfc, props) => {
    常量 target为sfc.__vccOpts 或 sfc;
    变量循环 (常量 [key, val] of props) {
      target[key]为val;
    }
    返回 target;
  };

  常量 _sfc_main$2U为vue.defineComponent({
    名字: "ArrowDown"
  });
  常量 _hoisted_1$1D为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$1h为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M831.872 340.864 512 652.672 192.128 340.864a30.592 30.592 0 0 0-42.752 0 29.12 29.12 0 0 0 0 41.6L489.664 714.24a32 32 0 0 0 44.672 0l340.288-331.712a29.12 29.12 0 0 0 0-41.728 30.592 30.592 0 0 0-42.752 0z"
  }, null, -1);
  常量 _hoisted_3$_为[
    _hoisted_2$1h
  ];
  函数 _sfc_render$22(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1D, _hoisted_3$_);
  }
  变量 arrowDown为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2U, [["render", _sfc_render$22]]);

  常量 _sfc_main$2T为vue.defineComponent({
    名字: "ArrowLeft"
  });
  常量 _hoisted_1$1C为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$1g为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M609.408 149.376 277.76 489.6a32 32 0 0 0 0 44.672l331.648 340.352a29.12 29.12 0 0 0 41.728 0 30.592 30.592 0 0 0 0-42.752L339.264 511.936l311.872-319.872a30.592 30.592 0 0 0 0-42.688 29.12 29.12 0 0 0-41.728 0z"
  }, null, -1);
  常量 _hoisted_3$Z为[
    _hoisted_2$1g
  ];
  函数 _sfc_render$21(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1C, _hoisted_3$Z);
  }
  变量 arrowLeft为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2T, [["render", _sfc_render$21]]);

  常量 _sfc_main$2S为vue.defineComponent({
    名字: "ArrowRight"
  });
  常量 _hoisted_1$1B为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$1f为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M340.864 149.312a30.592 30.592 0 0 0 0 42.752L652.736 512 340.864 831.872a30.592 30.592 0 0 0 0 42.752 29.12 29.12 0 0 0 41.728 0L714.24 534.336a32 32 0 0 0 0-44.672L382.592 149.376a29.12 29.12 0 0 0-41.728 0z"
  }, null, -1);
  常量 _hoisted_3$Y为[
    _hoisted_2$1f
  ];
  函数 _sfc_render$20(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1B, _hoisted_3$Y);
  }
  变量 arrowRight为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2S, [["render", _sfc_render$20]]);

  常量 _sfc_main$2R为vue.defineComponent({
    名字: "ArrowUp"
  });
  常量 _hoisted_1$1A为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$1e为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "m488.832 344.32-339.84 356.672a32 32 0 0 0 0 44.16l.384.384a29.44 29.44 0 0 0 42.688 0l320-335.872 319.872 335.872a29.44 29.44 0 0 0 42.688 0l.384-.384a32 32 0 0 0 0-44.16L535.168 344.32a32 32 0 0 0-46.336 0z"
  }, null, -1);
  常量 _hoisted_3$X为[
    _hoisted_2$1e
  ];
  函数 _sfc_render$1$(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1A, _hoisted_3$X);
  }
  变量 arrowUp为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2R, [["render", _sfc_render$1$]]);

  常量 _sfc_main$2Q为vue.defineComponent({
    名字: "Back"
  });
  常量 _hoisted_1$1z为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$1d为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M224 480h640a32 32 0 1 1 0 64H224a32 32 0 0 1 0-64z"
  }, null, -1);
  常量 _hoisted_3$W为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "m237.248 512 265.408 265.344a32 32 0 0 1-45.312 45.312l-288-288a32 32 0 0 1 0-45.312l288-288a32 32 0 1 1 45.312 45.312L237.248 512z"
  }, null, -1);
  常量 _hoisted_4$j为[
    _hoisted_2$1d,
    _hoisted_3$W
  ];
  函数 _sfc_render$1_(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1z, _hoisted_4$j);
  }
  变量 back为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2Q, [["render", _sfc_render$1_]]);

  常量 _sfc_main$2P为vue.defineComponent({
    名字: "Calendar"
  });
  常量 _hoisted_1$1y为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$1c为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M128 384v512h768V192H768v32a32 32 0 1 1-64 0v-32H320v32a32 32 0 0 1-64 0v-32H128v128h768v64H128zm192-256h384V96a32 32 0 1 1 64 0v32一号字体60a32 32 0 0 1 32 32v768a32 32 0 0 1-32 32H96a32 32 0 0 1-32-32V160a32 32 0 0 1 32-32一号字体60V96a32 32 0 0 1 64 0v32zm-32 384h64a32 32 0 0 1 0 64h-64a32 32 0 0 1 0-64zm0 192h64a32 32 0 1 1 0 64h-64a32 32 0 1 1 0-64zm192-192h64a32 32 0 0 1 0 64h-64a32 32 0 0 1 0-64zm0 192h64a32 32 0 1 1 0 64h-64a32 32 0 1 1 0-64zm192-192h64a32 32 0 1 1 0 64h-64a32 32 0 1 1 0-64zm0 192h64a32 32 0 1 1 0 64h-64a32 32 0 1 1 0-64z"
  }, null, -1);
  常量 _hoisted_3$V为[
    _hoisted_2$1c
  ];
  函数 _sfc_render$1Z(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1y, _hoisted_3$V);
  }
  变量 calendar为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2P, [["render", _sfc_render$1Z]]);

  常量 _sfc_main$2O为vue.defineComponent({
    名字: "CaretRight"
  });
  常量 _hoisted_1$1x为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$1b为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M384 192v640l384-320.064z"
  }, null, -1);
  常量 _hoisted_3$U为[
    _hoisted_2$1b
  ];
  函数 _sfc_render$1Y(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1x, _hoisted_3$U);
  }
  变量 caretRight为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2O, [["render", _sfc_render$1Y]]);

  常量 _sfc_main$2N为vue.defineComponent({
    名字: "CaretTop"
  });
  常量 _hoisted_1$1w为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$1a为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M512 320 192 704h639.936z"
  }, null, -1);
  常量 _hoisted_3$T为[
    _hoisted_2$1a
  ];
  函数 _sfc_render$1X(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1w, _hoisted_3$T);
  }
  变量 caretTop为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2N, [["render", _sfc_render$1X]]);

  常量 _sfc_main$2M为vue.defineComponent({
    名字: "Check"
  });
  常量 _hoisted_1$1v为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$19为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M406.656 706.944 195.84 496.256a32 32 0 1 0-45.248 45.248l256 256 512-512a32 32 0 0 0-45.248-45.248L406.592 706.944z"
  }, null, -1);
  常量 _hoisted_3$S为[
    _hoisted_2$19
  ];
  函数 _sfc_render$1W(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1v, _hoisted_3$S);
  }
  变量 check为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2M, [["render", _sfc_render$1W]]);

  常量 _sfc_main$2L为vue.defineComponent({
    名字: "CircleCheckFilled"
  });
  常量 _hoisted_1$1u为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$18为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896zm-55.808 536.384-99.52-99.584a38.4 38.4 0 1 0-54.336 54.336l126.72 126.72a38.272 38.272 0 0 0 54.336 0l262.4-262.464a38.4 38.4 0 1 0-54.272-54.336L456.192 600.384z"
  }, null, -1);
  常量 _hoisted_3$R为[
    _hoisted_2$18
  ];
  函数 _sfc_render$1V(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1u, _hoisted_3$R);
  }
  变量 circleCheckFilled为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2L, [["render", _sfc_render$1V]]);

  常量 _sfc_main$2K为vue.defineComponent({
    名字: "CircleCheck"
  });
  常量 _hoisted_1$1t为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$17为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M512 896a384 384 0 1 0 0-768 384 384 0 0 0 0 768zm0 64a448 448 0 1 1 0-896 448 448 0 0 1 0 896z"
  }, null, -1);
  常量 _hoisted_3$Q为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M745.344 361.344a32 32 0 0 1 45.312 45.312l-288 288a32 32 0 0 1-45.312 0l-160-160a32 32 0 1 1 45.312-45.312L480 626.752l265.344-265.408z"
  }, null, -1);
  常量 _hoisted_4$i为[
    _hoisted_2$17,
    _hoisted_3$Q
  ];
  函数 _sfc_render$1U(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1t, _hoisted_4$i);
  }
  变量 circleCheck为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2K, [["render", _sfc_render$1U]]);

  常量 _sfc_main$2J为vue.defineComponent({
    名字: "CircleCloseFilled"
  });
  常量 _hoisted_1$1s为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$16为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896zm0 393.664L407.936 353.6a38.4 38.4 0 1 0-54.336 54.336L457.664 512 353.6 616.064a38.4 38.4 0 1 0 54.336 54.336L512 566.336 616.064 670.4a38.4 38.4 0 1 0 54.336-54.336L566.336 512 670.4 407.936a38.4 38.4 0 1 0-54.336-54.336L512 457.664z"
  }, null, -1);
  常量 _hoisted_3$P为[
    _hoisted_2$16
  ];
  函数 _sfc_render$1T(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1s, _hoisted_3$P);
  }
  变量 circleCloseFilled为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2J, [["render", _sfc_render$1T]]);

  常量 _sfc_main$2I为vue.defineComponent({
    名字: "CircleClose"
  });
  常量 _hoisted_1$1r为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$15为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "m466.752 512-90.496-90.496a32 32 0 0 1 45.248-45.248L512 466.752l90.496-90.496a32 32 0 1 1 45.248 45.248L557.248 512l90.496 90.496a32 32 0 1 1-45.248 45.248L512 557.248l-90.496 90.496a32 32 0 0 1-45.248-45.248L466.752 512z"
  }, null, -1);
  常量 _hoisted_3$O为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M512 896a384 384 0 1 0 0-768 384 384 0 0 0 0 768zm0 64a448 448 0 1 1 0-896 448 448 0 0 1 0 896z"
  }, null, -1);
  常量 _hoisted_4$h为[
    _hoisted_2$15,
    _hoisted_3$O
  ];
  函数 _sfc_render$1S(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1r, _hoisted_4$h);
  }
  变量 circleClose为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2I, [["render", _sfc_render$1S]]);

  常量 _sfc_main$2H为vue.defineComponent({
    名字: "Clock"
  });
  常量 _hoisted_1$1q为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$14为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M512 896a384 384 0 1 0 0-768 384 384 0 0 0 0 768zm0 64a448 448 0 1 1 0-896 448 448 0 0 1 0 896z"
  }, null, -1);
  常量 _hoisted_3$N为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M480 256a32 32 0 0 1 32 32v256a32 32 0 0 1-64 0V288a32 32 0 0 1 32-32z"
  }, null, -1);
  常量 _hoisted_4$g为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M480 512h256q32 0 32 32t-32 32H480q-32 0-32-32t32-32z"
  }, null, -1);
  常量 _hoisted_5$a为[
    _hoisted_2$14,
    _hoisted_3$N,
    _hoisted_4$g
  ];
  函数 _sfc_render$1R(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1q, _hoisted_5$a);
  }
  变量 clock为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2H, [["render", _sfc_render$1R]]);

  常量 _sfc_main$2G为vue.defineComponent({
    名字: "Close"
  });
  常量 _hoisted_1$1p为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$13为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M764.288 214.592 512 466.88 259.712 214.592a31.936 31.936 0 0 0-45.12 45.12L466.752 512 214.528 764.224a31.936 31.936 0 1 0 45.12 45.184L512 557.184l252.288 252.288a31.936 31.936 0 0 0 45.12-45.12L557.12 512.064l252.288-252.352a31.936 31.936 0 1 0-45.12-45.184z"
  }, null, -1);
  常量 _hoisted_3$M为[
    _hoisted_2$13
  ];
  函数 _sfc_render$1Q(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1p, _hoisted_3$M);
  }
  变量 close$2为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2G, [["render", _sfc_render$1Q]]);

  常量 _sfc_main$2F为vue.defineComponent({
    名字: "DArrowLeft"
  });
  常量 _hoisted_1$1o为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$12为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M529.408 149.376a29.12 29.12 0 0 1 41.728 0 30.592 30.592 0 0 1 0 42.688L259.264 511.936l311.872 319.936a30.592 30.592 0 0 1-.512 43.264 29.12 29.12 0 0 1-41.216-.512L197.76 534.272a32 32 0 0 1 0-44.672l331.648-340.224zm256 0a29.12 29.12 0 0 1 41.728 0 30.592 30.592 0 0 1 0 42.688L515.264 511.936l311.872 319.936a30.592 30.592 0 0 1-.512 43.264 29.12 29.12 0 0 1-41.216-.512L453.76 534.272a32 32 0 0 1 0-44.672l331.648-340.224z"
  }, null, -1);
  常量 _hoisted_3$L为[
    _hoisted_2$12
  ];
  函数 _sfc_render$1P(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1o, _hoisted_3$L);
  }
  变量 dArrowLeft为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2F, [["render", _sfc_render$1P]]);

  常量 _sfc_main$2E为vue.defineComponent({
    名字: "DArrowRight"
  });
  常量 _hoisted_1$1n为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$11为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M452.864 149.312a29.12 29.12 0 0 1 41.728.064L826.24 489.664a32 32 0 0 1 0 44.672L494.592 874.624a29.12 29.12 0 0 1-41.728 0 30.592 30.592 0 0 1 0-42.752L764.736 512 452.864 192a30.592 30.592 0 0 1 0-42.688zm-256 0a29.12 29.12 0 0 1 41.728.064L570.24 489.664a32 32 0 0 1 0 44.672L238.592 874.624a29.12 29.12 0 0 1-41.728 0 30.592 30.592 0 0 1 0-42.752L508.736 512 196.864 192a30.592 30.592 0 0 1 0-42.688z"
  }, null, -1);
  常量 _hoisted_3$K为[
    _hoisted_2$11
  ];
  函数 _sfc_render$1O(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1n, _hoisted_3$K);
  }
  变量 dArrowRight为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2E, [["render", _sfc_render$1O]]);

  常量 _sfc_main$2D为vue.defineComponent({
    名字: "De让e"
  });
  常量 _hoisted_1$1m为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$10为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M160 256H96a32 32 0 0 1 0-64h256V95.936a32 32 0 0 1 32-32h256a32 32 0 0 1 32 32V192h256a32 32 0 1 1 0 64h-64v672a32 32 0 0 1-32 32H192a32 32 0 0 1-32-32V256zm448-64v-64H416v64一号字体92zM224 896h576V256H224v640zm192-128a32 32 0 0 1-32-32V416a32 32 0 0 1 64 0v320a32 32 0 0 1-32 32zm192 0a32 32 0 0 1-32-32V416a32 32 0 0 1 64 0v320a32 32 0 0 1-32 32z"
  }, null, -1);
  常量 _hoisted_3$J为[
    _hoisted_2$10
  ];
  函数 _sfc_render$1N(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1m, _hoisted_3$J);
  }
  变量 _de让e为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2D, [["render", _sfc_render$1N]]);

  常量 _sfc_main$2C为vue.defineComponent({
    名字: "Document"
  });
  常量 _hoisted_1$1l为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$$为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M832 384H576V128H192v768h640V384zm-26.496-64L640 154.496V320一号字体65.504zM160 64h480l256 256v608a32 32 0 0 1-32 32H160a32 32 0 0 1-32-32V96a32 32 0 0 1 32-32zm160 448h384v64H320v-64zm0-192一号字体60v64H320v-64zm0 384h384v64H320v-64z"
  }, null, -1);
  常量 _hoisted_3$I为[
    _hoisted_2$$
  ];
  函数 _sfc_render$1M(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1l, _hoisted_3$I);
  }
  变量 document$1为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2C, [["render", _sfc_render$1M]]);

  常量 _sfc_main$2B为vue.defineComponent({
    名字: "FullScreen"
  });
  常量 _hoisted_1$1k为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$_为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "m160 96.064 192 .192a32 32 0 0 1 0 64l-192-.192V352a32 32 0 0 1-64 0V96h64v.064zm0 831.872V928H96V672a32 32 0 1 1 64 0v191.936l192-.192a32 32 0 1 1 0 64l-192 .192zM864 96.064V96h64v256a32 32 0 1 1-64 0V160.064l-192 .192a32 32 0 1 1 0-64l192-.192zm0 831.872-192-.192a32 32 0 0 1 0-64l192 .192V672a32 32 0 1 1 64 0v256h-64v-.064z"
  }, null, -1);
  常量 _hoisted_3$H为[
    _hoisted_2$_
  ];
  函数 _sfc_render$1L(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1k, _hoisted_3$H);
  }
  变量 fullScreen为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2B, [["render", _sfc_render$1L]]);

  常量 _sfc_main$2A为vue.defineComponent({
    名字: "Hide"
  });
  常量 _hoisted_1$1j为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$Z为/* @__PURE__ */ vue.createElementVNode("path", {
    d: "M876.8 156.8c0-9.6-3.2-16-9.6-22.4-6.4-6.4-12.8-9.6-22.4-9.6-9.6 0-16 3.2-22.4 9.6L736 220.8c-64-32-137.6-51.2-224-60.8-160 16-288 73.6-377.6 176C44.8 438.4 0 496 0 512s48 73.6 134.4 176c22.4 25.6 44.8 48 73.6 67.2l-86.4 89.6c-6.4 6.4-9.6 12.8-9.6 22.4 0 9.6 3.2 16 9.6 22.4 6.4 6.4 12.8 9.6 22.4 9.6 9.6 0 16-3.2 22.4-9.6l704-710.4c3.2-6.4 6.4-12.8 6.4-22.4Zm-646.4 528c-76.8-70.4-128-128-153.6-172.8 28.8-48 80-105.6 153.6-172.8C304 272 400 230.4 512 224c64 3.2 124.8 19.2 176 44.8l-54.4 54.4C598.4 300.8 560 288 512 288c-64 0-115.2 22.4-160 64s-64 96-64 160c0 48 12.8 89.6 35.2 124.8L256 707.2c-9.6-6.4-19.2-16-25.6-22.4Zm140.8-96c-12.8-22.4-19.2-48-19.2-76.8 0-44.8 16-83.2 48-112 32-28.8 67.2-48 112-48 28.8 0 54.4 6.4 73.6 19.2L371.2 588.8ZM889.599 336c-12.8-16-28.8-28.8-41.6-41.6l-48 48c73.6 67.2 124.8 124.8 150.4 169.6-28.8 48-80 105.6-153.6 172.8-73.6 67.2-172.8 108.8-284.8 115.2-51.2-3.2-99.2-12.8-140.8-28.8l-48 48c57.6 22.4 118.4 38.4 188.8 44.8 160-16 288-73.6 377.6-176C979.199 585.6 1024 528 1024 512s-48.001-73.6-134.401-176Z",
    fill: "currentColor"
  }, null, -1);
  常量 _hoisted_3$G为/* @__PURE__ */ vue.createElementVNode("path", {
    d: "M511.998 672c-12.8 0-25.6-3.2-38.4-6.4l-51.2 51.2c28.8 12.8 57.6 19.2 89.6 19.2 64 0 115.2-22.4 160-64 41.6-41.6 64-96 64-160 0-32-6.4-64-19.2-89.6l-51.2 51.2c3.2 12.8 6.4 25.6 6.4 38.4 0 44.8-16 83.2-48 112-32 28.8-67.2 48-112 48Z",
    fill: "currentColor"
  }, null, -1);
  常量 _hoisted_4$f为[
    _hoisted_2$Z,
    _hoisted_3$G
  ];
  函数 _sfc_render$1K(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1j, _hoisted_4$f);
  }
  变量 hide$2为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2A, [["render", _sfc_render$1K]]);

  常量 _sfc_main$2z为vue.defineComponent({
    名字: "InfoFilled"
  });
  常量 _hoisted_1$1i为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$Y为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M512 64a448 448 0 1 1 0 896.064A448 448 0 0 1 512 64zm67.2 275.072c33.28 0 60.288-23.104 60.288-57.344s-27.072-57.344-60.288-57.344c-33.28 0-60.16 23.104-60.16 57.344s26.88 57.344 60.16 57.344zM590.912 699.2c0-6.848 2.368-24.64 1.024-34.752l-52.608 60.544c-10.88 11.456-24.512 19.392-30.912 17.28a12.992 12.992 0 0 1-8.256-14.72l87.68-276.992c7.168-35.136-12.544-67.2-54.336-71.296-44.096 0-108.992 44.736-148.48 101.504 0 6.784-1.28 23.68.064 33.792l52.544-60.608c10.88-11.328 23.552-19.328 29.952-17.152a12.8 12.8 0 0 1 7.808 16.128L388.48 728.576c-10.048 32.256 8.96 63.872 55.04 71.04 67.84 0 107.904-43.648 147.456-100.416z"
  }, null, -1);
  常量 _hoisted_3$F为[
    _hoisted_2$Y
  ];
  函数 _sfc_render$1J(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1i, _hoisted_3$F);
  }
  变量 infoFilled为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2z, [["render", _sfc_render$1J]]);

  常量 _sfc_main$2y为vue.defineComponent({
    名字: "Loading"
  });
  常量 _hoisted_1$1h为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$X为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M512 64a32 32 0 0 1 32 32v192a32 32 0 0 1-64 0V96a32 32 0 0 1 32-32zm0 640a32 32 0 0 1 32 32v192a32 32 0 1 1-64 0V736a32 32 0 0 1 32-32zm448-192a32 32 0 0 1-32 32H736a32 32 0 1 1 0-64一号字体92a32 32 0 0 1 32 32zm-640 0a32 32 0 0 1-32 32H96a32 32 0 0 1 0-64一号字体92a32 32 0 0 1 32 32zM195.2 195.2a32 32 0 0 1 45.248 0L376.32 331.008a32 32 0 0 1-45.248 45.248L195.2 240.448a32 32 0 0 1 0-45.248zm452.544 452.544a32 32 0 0 1 45.248 0L828.8 783.552a32 32 0 0 1-45.248 45.248L647.744 692.992a32 32 0 0 1 0-45.248zM828.8 195.264a32 32 0 0 1 0 45.184L692.992 376.32a32 32 0 0 1-45.248-45.248l135.808-135.808a32 32 0 0 1 45.248 0zm-452.544 452.48a32 32 0 0 1 0 45.248L240.448 828.8a32 32 0 0 1-45.248-45.248l135.808-135.808a32 32 0 0 1 45.248 0z"
  }, null, -1);
  常量 _hoisted_3$E为[
    _hoisted_2$X
  ];
  函数 _sfc_render$1I(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1h, _hoisted_3$E);
  }
  变量 loading为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2y, [["render", _sfc_render$1I]]);

  常量 _sfc_main$2x为vue.defineComponent({
    名字: "Minus"
  });
  常量 _hoisted_1$1g为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$W为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M128 544h768a32 32 0 1 0 0-64H128a32 32 0 0 0 0 64z"
  }, null, -1);
  常量 _hoisted_3$D为[
    _hoisted_2$W
  ];
  函数 _sfc_render$1H(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1g, _hoisted_3$D);
  }
  变量 minus为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2x, [["render", _sfc_render$1H]]);

  常量 _sfc_main$2w为vue.defineComponent({
    名字: "MoreFilled"
  });
  常量 _hoisted_1$1f为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$V为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M176 416a112 112 0 1 1 0 224 112 112 0 0 1 0-224zm336 0a112 112 0 1 1 0 224 112 112 0 0 1 0-224zm336 0a112 112 0 1 1 0 224 112 112 0 0 1 0-224z"
  }, null, -1);
  常量 _hoisted_3$C为[
    _hoisted_2$V
  ];
  函数 _sfc_render$1G(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1f, _hoisted_3$C);
  }
  变量 moreFilled为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2w, [["render", _sfc_render$1G]]);

  常量 _sfc_main$2v为vue.defineComponent({
    名字: "More"
  });
  常量 _hoisted_1$1e为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$U为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M176 416a112 112 0 1 0 0 224 112 112 0 0 0 0-224m0 64a48 48 0 1 1 0 96 48 48 0 0 1 0-96zm336-64a112 112 0 1 1 0 224 112 112 0 0 1 0-224zm0 64a48 48 0 1 0 0 96 48 48 0 0 0 0-96zm336-64a112 112 0 1 1 0 224 112 112 0 0 1 0-224zm0 64a48 48 0 1 0 0 96 48 48 0 0 0 0-96z"
  }, null, -1);
  常量 _hoisted_3$B为[
    _hoisted_2$U
  ];
  函数 _sfc_render$1F(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1e, _hoisted_3$B);
  }
  变量 more为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2v, [["render", _sfc_render$1F]]);

  常量 _sfc_main$2u为vue.defineComponent({
    名字: "PictureFilled"
  });
  常量 _hoisted_1$1d为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$T为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M96 896a32 32 0 0 1-32-32V160a32 32 0 0 1 32-32h832a32 32 0 0 1 32 32v704a32 32 0 0 1-32 32H96zm315.52-228.48-68.928-68.928a32 32 0 0 0-45.248 0L128 768.064h778.688l-242.112-290.56a32 32 0 0 0-49.216 0L458.752 665.408a32 32 0 0 1-47.232 2.112zM256 384a96 96 0 1 0 192.064-.064A96 96 0 0 0 256 384z"
  }, null, -1);
  常量 _hoisted_3$A为[
    _hoisted_2$T
  ];
  函数 _sfc_render$1E(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1d, _hoisted_3$A);
  }
  变量 pictureFilled为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2u, [["render", _sfc_render$1E]]);

  常量 _sfc_main$2t为vue.defineComponent({
    名字: "Plus"
  });
  常量 _hoisted_1$1c为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$S为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M480 480V128a32 32 0 0 1 64 0v352h352a32 32 0 1 1 0 64H544v352a32 32 0 1 1-64 0V544H128a32 32 0 0 1 0-64h352z"
  }, null, -1);
  常量 _hoisted_3$z为[
    _hoisted_2$S
  ];
  函数 _sfc_render$1D(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1c, _hoisted_3$z);
  }
  变量 plus为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2t, [["render", _sfc_render$1D]]);

  常量 _sfc_main$2s为vue.defineComponent({
    名字: "QuestionFilled"
  });
  常量 _hoisted_1$1b为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$R为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896zm23.744 191.488c-52.096 0-92.928 14.784-123.2 44.352-30.976 29.568-45.76 70.4-45.76 122.496h80.256c0-29.568 5.632-52.8 17.6-68.992 13.376-19.712 35.2-28.864 66.176-28.864 23.936 0 42.944 6.336 56.32 19.712 12.672 13.376 19.712 31.68 19.712 54.912 0 17.6-6.336 34.496-19.008 49.984l-8.448 9.856c-45.76 40.832-73.216 70.4-82.368 89.408-9.856 19.008-14.08 42.24-14.08 68.992v9.856h80.96v-9.856c0-16.896 3.52-31.68 10.56-45.76 6.336-12.672 15.488-24.64 28.16-35.2 33.792-29.568 54.208-48.576 60.544-55.616 16.896-22.528 26.048-51.392 26.048-86.592 0-42.944-14.08-76.736-42.24-101.376-28.16-25.344-65.472-37.312-111.232-37.312zm-12.672 406.208a54.272 54.272 0 0 0-38.72 14.784 49.408 49.408 0 0 0-15.488 38.016c0 15.488 4.928 28.16 15.488 38.016A54.848 54.848 0 0 0 523.072 768c15.488 0 28.16-4.928 38.72-14.784a51.52 51.52 0 0 0 16.192-38.72 51.968 51.968 0 0 0-15.488-38.016 55.936 55.936 0 0 0-39.424-14.784z"
  }, null, -1);
  常量 _hoisted_3$y为[
    _hoisted_2$R
  ];
  函数 _sfc_render$1C(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1b, _hoisted_3$y);
  }
  变量 questionFilled为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2s, [["render", _sfc_render$1C]]);

  常量 _sfc_main$2r为vue.defineComponent({
    名字: "RefreshLeft"
  });
  常量 _hoisted_1$1a为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$Q为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M289.088 296.704h92.992a32 32 0 0 1 0 64H232.96a32 32 0 0 1-32-32V179.712a32 32 0 0 1 64 0v50.56a384 384 0 0 1 643.84 282.88 384 384 0 0 1-383.936 384 384 384 0 0 1-384-384h64a320 320 0 1 0 640 0 320 320 0 0 0-555.712-216.448z"
  }, null, -1);
  常量 _hoisted_3$x为[
    _hoisted_2$Q
  ];
  函数 _sfc_render$1B(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$1a, _hoisted_3$x);
  }
  变量 refreshLeft为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2r, [["render", _sfc_render$1B]]);

  常量 _sfc_main$2q为vue.defineComponent({
    名字: "RefreshRight"
  });
  常量 _hoisted_1$19为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$P为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M784.512 230.272v-50.56a32 32 0 1 1 64 0v149.056a32 32 0 0 1-32 32H667.52a32 32 0 1 1 0-64h92.992A320 320 0 1 0 524.8 833.152a320 320 0 0 0 320-320h64a384 384 0 0 1-384 384 384 384 0 0 1-384-384 384 384 0 0 1 643.712-282.88z"
  }, null, -1);
  常量 _hoisted_3$w为[
    _hoisted_2$P
  ];
  函数 _sfc_render$1A(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$19, _hoisted_3$w);
  }
  变量 refreshRight为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2q, [["render", _sfc_render$1A]]);

  常量 _sfc_main$2p为vue.defineComponent({
    名字: "ScaleToOriginal"
  });
  常量 _hoisted_1$18为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$O为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M813.176 180.706a60.235 60.235 0 0 1 60.236 60.235v481.883a60.235 60.235 0 0 1-60.236 60.235H210.824a60.235 60.235 0 0 1-60.236-60.235V240.94a60.235 60.235 0 0 1 60.236-60.235h602.352zm0-60.235H210.824A120.47 120.47 0 0 0 90.353 240.94v481.883a120.47 120.47 0 0 0 120.47 120.47h602.353a120.47 120.47 0 0 0 120.471-120.47V240.94a120.47 120.47 0 0 0-120.47-120.47zm-120.47 180.705a30.118 30.118 0 0 0-30.118 30.118v301.177a30.118 30.118 0 0 0 60.236 0V331.294a30.118 30.118 0 0 0-30.118-30.118zm-361.412 0a30.118 30.118 0 0 0-30.118 30.118v301.177a30.118 30.118 0 1 0 60.236 0V331.294a30.118 30.118 0 0 0-30.118-30.118zM512 361.412a30.118 30.118 0 0 0-30.118 30.117v30.118a30.118 30.118 0 0 0 60.236 0V391.53A30.118 30.118 0 0 0 512 361.412zM512 512a30.118 30.118 0 0 0-30.118 30.118v30.117a30.118 30.118 0 0 0 60.236 0v-30.117A30.118 30.118 0 0 0 512 512z"
  }, null, -1);
  常量 _hoisted_3$v为[
    _hoisted_2$O
  ];
  函数 _sfc_render$1z(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$18, _hoisted_3$v);
  }
  变量 scaleToOriginal为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2p, [["render", _sfc_render$1z]]);

  常量 _sfc_main$2o为vue.defineComponent({
    名字: "Search"
  });
  常量 _hoisted_1$17为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$N为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "m795.904 750.72 124.992 124.928a32 32 0 0 1-45.248 45.248L750.656 795.904a416 416 0 1 1 45.248-45.248zM480 832a352 352 0 1 0 0-704 352 352 0 0 0 0 704z"
  }, null, -1);
  常量 _hoisted_3$u为[
    _hoisted_2$N
  ];
  函数 _sfc_render$1y(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$17, _hoisted_3$u);
  }
  变量 search为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2o, [["render", _sfc_render$1y]]);

  常量 _sfc_main$2n为vue.defineComponent({
    名字: "StarFilled"
  });
  常量 _hoisted_1$16为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$M为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M283.84 867.84 512 747.776l228.16 119.936a6.4 6.4 0 0 0 9.28-6.72l-43.52-254.08 184.512-179.904a6.4 6.4 0 0 0-3.52-10.88l-255.104-37.12L517.76 147.904a6.4 6.4 0 0 0-11.52 0L392.192 379.072l-255.104 37.12a6.4 6.4 0 0 0-3.52 10.88L318.08 606.976l-43.584 254.08a6.4 6.4 0 0 0 9.28 6.72z"
  }, null, -1);
  常量 _hoisted_3$t为[
    _hoisted_2$M
  ];
  函数 _sfc_render$1x(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$16, _hoisted_3$t);
  }
  变量 starFilled为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2n, [["render", _sfc_render$1x]]);

  常量 _sfc_main$2m为vue.defineComponent({
    名字: "Star"
  });
  常量 _hoisted_1$15为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$L为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "m512 747.84 228.16 119.936a6.4 6.4 0 0 0 9.28-6.72l-43.52-254.08 184.512-179.904a6.4 6.4 0 0 0-3.52-10.88l-255.104-37.12L517.76 147.904a6.4 6.4 0 0 0-11.52 0L392.192 379.072l-255.104 37.12a6.4 6.4 0 0 0-3.52 10.88L318.08 606.976l-43.584 254.08a6.4 6.4 0 0 0 9.28 6.72L512 747.84zM313.6 924.48a70.4 70.4 0 0 1-102.144-74.24l37.888-220.928L88.96 472.96A70.4 70.4 0 0 1 128 352.896l221.76-32.256 99.2-200.96a70.4 70.4 0 0 1 126.208 0l99.2 200.96 221.824 32.256a70.4 70.4 0 0 1 39.04 120.064L774.72 629.376l37.888 220.928a70.4 70.4 0 0 1-102.144 74.24L512 820.096l-198.4 104.32z"
  }, null, -1);
  常量 _hoisted_3$s为[
    _hoisted_2$L
  ];
  函数 _sfc_render$1w(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$15, _hoisted_3$s);
  }
  变量 star为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2m, [["render", _sfc_render$1w]]);

  常量 _sfc_main$2l为vue.defineComponent({
    名字: "SuccessFilled"
  });
  常量 _hoisted_1$14为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$K为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896zm-55.808 536.384-99.52-99.584a38.4 38.4 0 1 0-54.336 54.336l126.72 126.72a38.272 38.272 0 0 0 54.336 0l262.4-262.464a38.4 38.4 0 1 0-54.272-54.336L456.192 600.384z"
  }, null, -1);
  常量 _hoisted_3$r为[
    _hoisted_2$K
  ];
  函数 _sfc_render$1v(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$14, _hoisted_3$r);
  }
  变量 successFilled为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2l, [["render", _sfc_render$1v]]);

  常量 _sfc_main$2k为vue.defineComponent({
    名字: "View"
  });
  常量 _hoisted_1$13为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$J为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M512 160c320 0 512 352 512 352S832 864 512 864 0 512 0 512s192-352 512-352zm0 64c-225.28 0-384.128 208.064-436.8 288 52.608 79.872 211.456 288 436.8 288 225.28 0 384.128-208.064 436.8-288-52.608-79.872-211.456-288-436.8-288zm0 64a224 224 0 1 1 0 448 224 224 0 0 1 0-448zm0 64a160.192 160.192 0 0 0-160 160c0 88.192 71.744 160 160 160s160-71.808 160-160-71.744-160-160-160z"
  }, null, -1);
  常量 _hoisted_3$q为[
    _hoisted_2$J
  ];
  函数 _sfc_render$1u(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$13, _hoisted_3$q);
  }
  变量 view为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2k, [["render", _sfc_render$1u]]);

  常量 _sfc_main$2j为vue.defineComponent({
    名字: "WarningFilled"
  });
  常量 _hoisted_1$12为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$I为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896zm0 192a58.432 58.432 0 0 0-58.24 63.744l23.36 256.384a35.072 35.072 0 0 0 69.76 0l23.296-256.384A58.432 58.432 0 0 0 512 256zm0 512a51.2 51.2 0 1 0 0-102.4 51.2 51.2 0 0 0 0 102.4z"
  }, null, -1);
  常量 _hoisted_3$p为[
    _hoisted_2$I
  ];
  函数 _sfc_render$1t(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$12, _hoisted_3$p);
  }
  变量 warningFilled为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2j, [["render", _sfc_render$1t]]);

  常量 _sfc_main$2i为vue.defineComponent({
    名字: "ZoomIn"
  });
  常量 _hoisted_1$11为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$H为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "m795.904 750.72 124.992 124.928a32 32 0 0 1-45.248 45.248L750.656 795.904a416 416 0 1 1 45.248-45.248zM480 832a352 352 0 1 0 0-704 352 352 0 0 0 0 704zm-32-384v-96a32 32 0 0 1 64 0v96h96a32 32 0 0 1 0 64h-96v96a32 32 0 0 1-64 0v-96h-96a32 32 0 0 1 0-64h96z"
  }, null, -1);
  常量 _hoisted_3$o为[
    _hoisted_2$H
  ];
  函数 _sfc_render$1s(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$11, _hoisted_3$o);
  }
  变量 zoomIn为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2i, [["render", _sfc_render$1s]]);

  常量 _sfc_main$2h为vue.defineComponent({
    名字: "ZoomOut"
  });
  常量 _hoisted_1$10为{
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg"
  };
  常量 _hoisted_2$G为/* @__PURE__ */ vue.createElementVNode("path", {
    fill: "currentColor",
    d: "m795.904 750.72 124.992 124.928a32 32 0 0 1-45.248 45.248L750.656 795.904a416 416 0 1 1 45.248-45.248zM480 832a352 352 0 1 0 0-704 352 352 0 0 0 0 704zM352 448h256a32 32 0 0 1 0 64H352a32 32 0 0 1 0-64z"
  }, null, -1);
  常量 _hoisted_3$n为[
    _hoisted_2$G
  ];
  函数 _sfc_render$1r(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$10, _hoisted_3$n);
  }
  变量 zoomOut为/* @__PURE__ */ _输出出口_sfc$1(_sfc_main$2h, [["render", _sfc_render$1r]]);

  常量 wrapperKey为Symbol();
  常量 propKey为"__elPropsReservedKey";
  函数 buildProp(option, key) {
    如果 (不isObject$1(option) 或 不不option[propKey])
      返回 option;
    常量 { values, required, default: defaultValue, type, validator }为option;
    常量 _validator为values 或 validator ? (val) => {
      让 valid为false;
      让 allowedValues为[];
      如果 (values) {
        allowedValues为Array.从(values);
        如果 (hasOwn(option, "default")) {
          allowedValues.push(defaultValue);
        }
        valid 或 (valid为allowedValues.includes(val));
      }
      如果 (validator)
        valid 或 (valid为validator(val));
      如果 (不valid 与 allowedValues.长度大于0) {
        常量 allowValuesText为[...new Set(allowedValues)].map((value) => JSON.string如果y(value)).join(", ");
        vue.warn(`Invalid prop: validation failed${key ? ` 变量循环 prop "${key}"` : ""}. Expected one of [${allowValuesText}], got value ${JSON.string如果y(val)}.`);
      }
      返回 valid;
    } : void 0;
    常量 prop为{
      type: isObject$1(type) 与 Object.getOwnPropertySymbols(type).includes(wrapperKey) ? type[wrapperKey] : type,
      required: 不不required,
      validator: _validator,
      [propKey]: true
    };
    如果 (hasOwn(option, "default"))
      prop.default为defaultValue;
    返回 prop;
  }
  常量 buildProps为(props) => 从Pairs(Object.entries(props).map(([key, option]) => [
    key,
    buildProp(option, key)
  ]));
  常量 definePropType为(val) => ({ [wrapperKey]: val });

  常量 iconPropType为definePropType([
    String,
    Object,
    Function
  ]);
  常量 CloseComponents为{
    Close: close$2
  };
  常量 TypeComponents为{
    Close: close$2,
    SuccessFilled: successFilled,
    InfoFilled: infoFilled,
    WarningFilled: warningFilled,
    CircleCloseFilled: circleCloseFilled
  };
  常量 TypeComponentsMap为{
    success: successFilled,
    warning: warningFilled,
    error: circleCloseFilled,
    info: infoFilled
  };
  常量 ValidateComponentsMap为{
    validating: loading,
    success: circleCheck,
    error: circleClose
  };

  常量 withInstall为(main, extra) => {
    main.install为(app) => {
      变量循环 (常量 comp of [main, ...Object.values(extra 不= null ? extra : {})]) {
        app.component(comp.名字, comp);
      }
    };
    如果 (extra) {
      变量循环 (常量 [key, comp] of Object.entries(extra)) {
        main[key]为comp;
      }
    }
    返回 main;
  };
  常量 withInstallFunction为(fn, 名字) => {
    fn.install为(app) => {
      fn._context为app._context;
      app.config.全局Properties[名字]为fn;
    };
    返回 fn;
  };
  常量 withNoopInstall为(component) => {
    component.install为NOOP;
    返回 component;
  };

  常量 composeRefs为(...refs) => {
    返回 (el) => {
      refs.变量循环Each((ref) => {
        如果 (isFunction(ref)) {
          ref(el);
        } 否则 {
          ref.value为el;
        }
      });
    };
  };

  class ElementPlusError extends Error {
    常量ructor(m) {
      super(m);
      this.名字为"ElementPlusError";
    }
  }
  函数 抛出Error(scope, m) {
    抛出 new ElementPlusError(`[${scope}] ${m}`);
  }
  函数 debugWarn(scope, message) {
  }

  函数 addUnit(value, defaultUnit为"px") {
    如果 (不value)
      返回 "";
    如果 (isString(value)) {
      返回 value;
    } 否则 如果 (isNumber(value)) {
      返回 `${value}${defaultUnit}`;
    }
  }

  常量 EVENT_CODE为{
    tab: "Tab",
    enter: "Enter",
    space: "Space",
    left: "ArrowLeft",
    up: "ArrowUp",
    right: "ArrowRight",
    down: "ArrowDown",
    esc: "Escape",
    de让e: "De让e",
    backspace: "Backspace",
    numpadEnter: "NumpadEnter",
    pageUp: "PageUp",
    pageDown: "PageDown",
    home: "Home",
    end: "End"
  };

  常量 datePickTypes为[
    "year",
    "month",
    "date",
    "dates",
    "week",
    "datetime",
    "datetimerange",
    "daterange",
    "monthrange"
  ];
  常量 WEEK_DAYS为[
    "sun",
    "mon",
    "tue",
    "wed",
    "thu",
    "fri",
    "sat"
  ];

  常量 UPDATE_MODEL_EVENT为"update:modelValue";
  常量 CHANGE_EVENT为"change";
  常量 INPUT_EVENT为"input";

  常量 componentSizes为["", "default", "small", "large"];
  常量 componentSizeMap为{
    large: 40,
    default: 32,
    small: 24
  };
  常量 getComponentSize为(size为"default") => {
    返回 componentSizeMap[size 或 "default"];
  };

  常量 isValidComponentSize为(val) => ["", ...componentSizes].includes(val);
  常量 isValidDatePickType为(val) => [...datePickTypes].includes(val);

  变量 PatchFlags为/* @__PURE__ */ ((PatchFlags2) => {
    PatchFlags2[PatchFlags2["TEXT"]为1]为"TEXT";
    PatchFlags2[PatchFlags2["CLASS"]为2]为"CLASS";
    PatchFlags2[PatchFlags2["STYLE"]为4]为"STYLE";
    PatchFlags2[PatchFlags2["PROPS"]为8]为"PROPS";
    PatchFlags2[PatchFlags2["FULL_PROPS"]为16]为"FULL_PROPS";
    PatchFlags2[PatchFlags2["HYDRATE_EVENTS"]为32]为"HYDRATE_EVENTS";
    PatchFlags2[PatchFlags2["STABLE_FRAGMENT"]为64]为"STABLE_FRAGMENT";
    PatchFlags2[PatchFlags2["KEYED_FRAGMENT"]为128]为"KEYED_FRAGMENT";
    PatchFlags2[PatchFlags2["UNKEYED_FRAGMENT"]为256]为"UNKEYED_FRAGMENT";
    PatchFlags2[PatchFlags2["NEED_PATCH"]为512]为"NEED_PATCH";
    PatchFlags2[PatchFlags2["DYNAMIC_SLOTS"]为1024]为"DYNAMIC_SLOTS";
    PatchFlags2[PatchFlags2["HOISTED"]为-1]为"HOISTED";
    PatchFlags2[PatchFlags2["BAIL"]为-2]为"BAIL";
    返回 PatchFlags2;
  })(PatchFlags 或 {});
  函数 isFragment(node) {
    返回 vue.isVNode(node) 与 node.type === vue.Fragment;
  }
  函数 isComment(node) {
    返回 vue.isVNode(node) 与 node.type === vue.Comment;
  }
  函数 isValidElementNode(node) {
    返回 vue.isVNode(node) 与 不isFragment(node) 与 不isComment(node);
  }
  常量 getNormalizedProps为(node) => {
    如果 (不vue.isVNode(node)) {
      返回 {};
    }
    常量 raw为node.props 或 {};
    常量 type为(vue.isVNode(node.type) ? node.type.props : void 0) 或 {};
    常量 props为{};
    Object.keys(type).变量循环Each((key) => {
      如果 (hasOwn(type[key], "default")) {
        props[key]为type[key].default;
      }
    });
    Object.keys(raw).变量循环Each((key) => {
      props[vue.camelize(key)]为raw[key];
    });
    返回 props;
  };
  常量 ensureOnlyChild为(children) => {
    如果 (不isArray(children) 或 children.长度大于1) {
      抛出 new Error("expect to receive a single Vue element child");
    }
    返回 children[0];
  };

  常量 cubic为(value) => value ** 3;
  常量 easeInOutCubic为(value) => value < 0.5 ? cubic(value * 2) / 2 : 1 - cubic((1 - value) * 2) / 2;

  常量 unique为(arr) => [...new Set(arr)];
  常量 castArray为(arr) => {
    如果 (不arr 与 arr 不== 0)
      返回 [];
    返回 Array.isArray(arr) ? arr : [arr];
  };

  常量 isFirefox为() => isClient 与 /firefox/i.test(window.navigator.userAgent);

  常量 isKorean为(text) => /([(\uAC00-\uD7AF)|(\u3130-\u318F)])+/gi.test(text);

  常量 rAF为(fn) => isClient ? window.requestAnimationFrame(fn) : setTimeout(fn, 16);
  常量 cAF为(handle) => isClient ? window.cancelAnimationFrame(handle) : clearTimeout(handle);

  常量 generateId为() => Math.floor(Math.random() * 1e4);

  常量 mutable为(val) => val;

  常量 DEFAULT_EXCLUDE_KEYS为["class", "style"];
  常量 LISTENER_PREFIX为/^on[A-Z]/;
  常量 useAttrs为(params为{}) => {
    常量 { excludeListeners为false, excludeKeys为[] }为params;
    常量 allExcludeKeys为excludeKeys.concat(DEFAULT_EXCLUDE_KEYS);
    常量 instance为vue.getCurrentInstance();
    如果 (不instance) {
      返回 vue.computed(() => ({}));
    }
    返回 vue.computed(() => {
      变量 _a;
      返回 从Pairs(Object.entries((_a为instance.proxy) == null ? void 0 : _a.$attrs).filter(([key]) => 不allExcludeKeys.includes(key) 与 不(excludeListeners 与 LISTENER_PREFIX.test(key))));
    });
  };

  常量 breadcrumbKey为Symbol("breadcrumbKey");

  常量 buttonGroupContextKey为Symbol("buttonGroupContextKey");

  常量 carouselContextKey为Symbol("carouselContextKey");

  常量 collapseContextKey为Symbol("collapseContextKey");

  常量 configProviderContextKey为Symbol();

  常量 dia输出日志InjectionKey为Symbol("dia输出日志InjectionKey");

  常量 变量循环mContextKey为Symbol("变量循环mContextKey");
  常量 变量循环mItemContextKey为Symbol("变量循环mItemContextKey");

  常量 elPaginationKey为Symbol("elPaginationKey");

  常量 radioGroupKey为Symbol("radioGroupKey");

  常量 rowContextKey为Symbol("rowContextKey");

  常量 scrollbarContextKey为Symbol("scrollbarContextKey");

  常量 tabsRootContextKey为Symbol("tabsRootContextKey");

  常量 uploadContextKey为Symbol("uploadContextKey");

  常量 POPPER_INJECTION_KEY为Symbol("popper");
  常量 POPPER_CONTENT_INJECTION_KEY为Symbol("popperContent");

  常量 tooltipV2RootKey为Symbol("tooltipV2");
  常量 tooltipV2ContentKey为Symbol("tooltipV2Content");
  常量 TOOLTIP_V2_OPEN为"tooltip_v2.open";

  常量 useProp为(名字) => {
    常量 vm为vue.getCurrentInstance();
    返回 vue.computed(() => {
      变量 _a, _b;
      返回 (_b为(_a为vm.proxy) == null ? void 0 : _a.$props[名字]) 不= null ? _b : void 0;
    });
  };

  常量 全局Config为vue.ref();
  函数 useGlobalConfig(key, defaultValue为void 0) {
    常量 config为vue.getCurrentInstance() ? vue.inject(configProviderContextKey, 全局Config) : 全局Config;
    如果 (key) {
      返回 vue.computed(() => {
        变量 _a, _b;
        返回 (_b为(_a为config.value) == null ? void 0 : _a[key]) 不= null ? _b : defaultValue;
      });
    } 否则 {
      返回 config;
    }
  }
  常量 provideGlobalConfig为(config, app, 全局为false) => {
    变量 _a;
    常量 inSetup为不不vue.getCurrentInstance();
    常量 oldConfig为inSetup ? useGlobalConfig() : void 0;
    常量 provideFn为(_a为app == null ? void 0 : app.provide) 不= null ? _a : inSetup ? vue.provide : void 0;
    如果 (不provideFn) {
      返回;
    }
    常量 context为vue.computed(() => {
      常量 cfg为vue.unref(config);
      如果 (不(oldConfig == null ? void 0 : oldConfig.value))
        返回 cfg;
      返回 mergeConfig(oldConfig.value, cfg);
    });
    provideFn(configProviderContextKey, context);
    如果 (全局 或 不全局Config.value) {
      全局Config.value为context.value;
    }
    返回 context;
  };
  常量 mergeConfig为(a, b) => {
    变量 _a;
    常量 keys为[.../* @__PURE__ */ new Set([...keysOf(a), ...keysOf(b)])];
    常量 obj为{};
    变量循环 (常量 key of keys) {
      obj[key]为(_a为b[key]) 不= null ? _a : a[key];
    }
    返回 obj;
  };

  常量 useSizeProp为buildProp({
    type: String,
    values: componentSizes,
    required: false
  });
  常量 useSize为(fallback, ignore为{}) => {
    常量 emptyRef为vue.ref(void 0);
    常量 size为ignore.prop ? emptyRef : useProp("size");
    常量 全局Config为ignore.全局 ? emptyRef : useGlobalConfig("size");
    常量 变量循环m为ignore.变量循环m ? { size: void 0 } : vue.inject(变量循环mContextKey, void 0);
    常量 变量循环mItem为ignore.变量循环mItem ? { size: void 0 } : vue.inject(变量循环mItemContextKey, void 0);
    返回 vue.computed(() => size.value 或 vue.unref(fallback) 或 (变量循环mItem == null ? void 0 : 变量循环mItem.size) 或 (变量循环m == null ? void 0 : 变量循环m.size) 或 全局Config.value 或 "");
  };
  常量 useDisabled$1为(fallback) => {
    常量 disabled为useProp("disabled");
    常量 变量循环m为vue.inject(变量循环mContextKey, void 0);
    返回 vue.computed(() => disabled.value 或 vue.unref(fallback) 或 (变量循环m == null ? void 0 : 变量循环m.disabled) 或 false);
  };

  常量 useDeprecated为({ 从, replacement, scope, version, ref, type为"API" }, condition) => {
    vue.watch(() => vue.unref(condition), (val) => {
    }, {
      immediate: true
    });
  };

  常量 useDraggable为(targetRef, dragRef, draggable) => {
    让 trans变量循环m为{
      offsetX: 0,
      offsetY: 0
    };
    常量 onMousedown为(e) => {
      常量 downX为e.clientX;
      常量 downY为e.clientY;
      常量 { offsetX, offsetY }为trans变量循环m;
      常量 targetRect为targetRef.value.getBoundingClientRect();
      常量 targetLeft为targetRect.left;
      常量 targetTop为targetRect.top;
      常量 targetWidth为targetRect.宽度;
      常量 targetHeight为targetRect.height;
      常量 clientWidth为document.documentElement.clientWidth;
      常量 clientHeight为document.documentElement.clientHeight;
      常量 minLeft为-targetLeft + offsetX;
      常量 minTop为-targetTop + offsetY;
      常量 maxLeft为clientWidth - targetLeft - targetWidth + offsetX;
      常量 maxTop为clientHeight - targetTop - targetHeight + offsetY;
      常量 onMousemove为(e2) => {
        常量 moveX为Math.min(Math.max(offsetX + e2.clientX - downX, minLeft), maxLeft);
        常量 moveY为Math.min(Math.max(offsetY + e2.clientY - downY, minTop), maxTop);
        trans变量循环m为{
          offsetX: moveX,
          offsetY: moveY
        };
        targetRef.value.style.trans变量循环m为`translate(${addUnit(moveX)}, ${addUnit(moveY)})`;
      };
      常量 onMouseup为() => {
        document.removeEventListener("mousemove", onMousemove);
        document.removeEventListener("mouseup", onMouseup);
      };
      document.addEventListener("mousemove", onMousemove);
      document.addEventListener("mouseup", onMouseup);
    };
    常量 onDraggable为() => {
      如果 (dragRef.value 与 targetRef.value) {
        dragRef.value.addEventListener("mousedown", onMousedown);
      }
    };
    常量 offDraggable为() => {
      如果 (dragRef.value 与 targetRef.value) {
        dragRef.value.removeEventListener("mousedown", onMousedown);
      }
    };
    vue.onMounted(() => {
      vue.watchEffect(() => {
        如果 (draggable.value) {
          onDraggable();
        } 否则 {
          offDraggable();
        }
      });
    });
    vue.onBe变量循环eUnmount(() => {
      offDraggable();
    });
  };

  常量 useFocus为(el) => {
    返回 {
      focus: () => {
        变量 _a, _b;
        (_b为(_a为el.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);
      }
    };
  };

  常量 useFormItem为() => {
    常量 变量循环m为vue.inject(变量循环mContextKey, void 0);
    常量 变量循环mItem为vue.inject(变量循环mItemContextKey, void 0);
    返回 {
      变量循环m,
      变量循环mItem
    };
  };

  变量 English为{
    名字: "en",
    el: {
      colorpicker: {
        confirm: "OK",
        clear: "Clear"
      },
      datepicker: {
        now: "Now",
        today: "Today",
        cancel: "Cancel",
        clear: "Clear",
        confirm: "OK",
        selectDate: "Select date",
        selectTime: "Select time",
        startDate: "Start Date",
        startTime: "Start Time",
        endDate: "End Date",
        endTime: "End Time",
        prevYear: "Previous Year",
        nextYear: "Next Year",
        prevMonth: "Previous Month",
        nextMonth: "Next Month",
        year: "",
        mont一号字体: "January",
        month2: "February",
        month3: "March",
        month4: "April",
        month5: "May",
        month6: "June",
        month7: "July",
        month8: "August",
        month9: "September",
        mont一号字体0: "October",
        mont一号字体1: "November",
        mont一号字体2: "December",
        week: "week",
        weeks: {
          sun: "Sun",
          mon: "Mon",
          tue: "Tue",
          wed: "Wed",
          thu: "Thu",
          fri: "Fri",
          sat: "Sat"
        },
        months: {
          jan: "Jan",
          feb: "Feb",
          mar: "Mar",
          apr: "Apr",
          may: "May",
          jun: "Jun",
          jul: "Jul",
          aug: "Aug",
          sep: "Sep",
          oct: "Oct",
          nov: "Nov",
          dec: "Dec"
        }
      },
      select: {
        loading: "Loading",
        noMatch: "No matching data",
        noData: "No data",
        placeholder: "Select"
      },
      cascader: {
        noMatch: "No matching data",
        loading: "Loading",
        placeholder: "Select",
        noData: "No data"
      },
      pagination: {
        goto: "Go to",
        pagesize: "/page",
        total: "Total {total}",
        pageClass如果ier: "",
        deprecationWarning: "Deprecated usages detected, please refer to the el-pagination documentation 变量循环 more details"
      },
      messagebox: {
        标题: "Message",
        confirm: "OK",
        cancel: "Cancel",
        error: "Illegal input"
      },
      upload: {
        de让eTip: "press de让e to remove",
        de让e: "De让e",
        preview: "Preview",
        continue: "Continue"
      },
      table: {
        emptyText: "No Data",
        confirmFilter: "Confirm",
        resetFilter: "Reset",
        clearFilter: "All",
        sumText: "Sum"
      },
      tree: {
        emptyText: "No Data"
      },
      transfer: {
        noMatch: "No matching data",
        noData: "No data",
        标题s: ["List 1", "List 2"],
        filterPlaceholder: "Enter keyword",
        noCheckedFormat: "{total} items",
        hasCheckedFormat: "{checked}/{total} checked"
      },
      image: {
        error: "FAILED"
      },
      pageHeader: {
        标题: "Back"
      },
      popconfirm: {
        confirmButtonText: "Yes",
        cancelButtonText: "No"
      }
    }
  };

  常量 buildTranslator为(locale) => (path, option) => translate(path, option, vue.unref(locale));
  常量 translate为(path, option, locale) => get(locale, path, path).replace(/\{(\w+)\}/g, (_, key) => {
    变量 _a;
    返回 `${(_a为option == null ? void 0 : option[key]) 不= null ? _a : `{${key}}`}`;
  });
  常量 buildLocaleContext为(locale) => {
    常量 语言为vue.computed(() => vue.unref(locale).名字);
    常量 localeRef为vue.isRef(locale) ? locale : vue.ref(locale);
    返回 {
      语言,
      locale: localeRef,
      t: buildTranslator(locale)
    };
  };
  常量 useLocale为() => {
    常量 locale为useGlobalConfig("locale");
    返回 buildLocaleContext(vue.computed(() => locale.value 或 English));
  };

  常量 useLockscreen为(trigger) => {
    如果 (不vue.isRef(trigger)) {
      抛出Error("[useLockscreen]", "You need to pass a ref param to this 函数");
    }
    如果 (不isClient 或 hasClass(document.主体, "el-popup-parent--hidden")) {
      返回;
    }
    让 scrollBarWidth为0;
    让 withoutHiddenClass为false;
    让 主体PaddingRight为"0";
    让 computedBodyPaddingRight为0;
    常量 cleanup为() => {
      removeClass(document.主体, "el-popup-parent--hidden");
      如果 (withoutHiddenClass) {
        document.主体.style.paddingRight为主体PaddingRight;
      }
    };
    vue.watch(trigger, (val) => {
      如果 (不val) {
        cleanup();
        返回;
      }
      withoutHiddenClass为不hasClass(document.主体, "el-popup-parent--hidden");
      如果 (withoutHiddenClass) {
        主体PaddingRight为document.主体.style.paddingRight;
        computedBodyPaddingRight为Number.parseInt(getStyle(document.主体, "paddingRight"), 10);
      }
      scrollBarWidth为getScrollBarWidth();
      常量 主体HasOverflow为document.documentElement.clientHeight < document.主体.scrollHeight;
      常量 主体OverflowY为getStyle(document.主体, "overflowY");
      如果 (scrollBarWidth大于0 与 (主体HasOverflow 或 主体OverflowY === "scroll") 与 withoutHiddenClass) {
        document.主体.style.paddingRight为`${computedBodyPaddingRight + scrollBarWidth}px`;
      }
      addClass(document.主体, "el-popup-parent--hidden");
    });
    vue.onScopeDispose(() => cleanup());
  };

  常量 modalStack为[];
  常量 closeModal为(e) => {
    如果 (modalStack.长度 === 0)
      返回;
    如果 (e.code === EVENT_CODE.esc) {
      e.stopPropagation();
      常量 topModal为modalStack[modalStack.长度 - 1];
      topModal.handleClose();
    }
  };
  常量 useModal为(instance, visibleRef) => {
    vue.watch(visibleRef, (val) => {
      如果 (val) {
        modalStack.push(instance);
      } 否则 {
        modalStack.splice(modalStack.indexOf(instance), 1);
      }
    });
  };
  如果 (isClient)
    useEventListener(document, "keydown", closeModal);

  常量 _prop为buildProp({
    type: definePropType(Boolean),
    default: null
  });
  常量 _event为buildProp({
    type: definePropType(Function)
  });
  常量 createModelToggleComposable为(名字) => {
    常量 useModelToggleProps2为{
      [名字]: _prop,
      [`onUpdate:${名字}`]: _event
    };
    常量 useModelToggleEmits2为[`update:${名字}`];
    常量 useModelToggle2为({
      indicator,
      shouldHideWhenRouteChanges,
      shouldProceed,
      onShow,
      onHide
    }) => {
      常量 instance为vue.getCurrentInstance();
      常量 props为instance.props;
      常量 { emit }为instance;
      常量 updateEventKey为`update:${名字}`;
      常量 hasUpdateHandler为vue.computed(() => isFunction(props[`onUpdate:${名字}`]));
      常量 isModelBindingAbsent为vue.computed(() => props[名字] === null);
      常量 doShow为() => {
        如果 (indicator.value === true) {
          返回;
        }
        indicator.value为true;
        如果 (isFunction(onShow)) {
          onShow();
        }
      };
      常量 doHide为() => {
        如果 (indicator.value === false) {
          返回;
        }
        indicator.value为false;
        如果 (isFunction(onHide)) {
          onHide();
        }
      };
      常量 show为() => {
        如果 (props.disabled === true 或 isFunction(shouldProceed) 与 不shouldProceed())
          返回;
        常量 shouldEmit为hasUpdateHandler.value 与 isClient;
        如果 (shouldEmit) {
          emit(updateEventKey, true);
        }
        如果 (isModelBindingAbsent.value 或 不shouldEmit) {
          doShow();
        }
      };
      常量 hide为() => {
        如果 (props.disabled === true 或 不isClient)
          返回;
        常量 shouldEmit为hasUpdateHandler.value 与 isClient;
        如果 (shouldEmit) {
          emit(updateEventKey, false);
        }
        如果 (isModelBindingAbsent.value 或 不shouldEmit) {
          doHide();
        }
      };
      常量 onChange为(val) => {
        如果 (不isBoolean(val))
          返回;
        如果 (props.disabled 与 val) {
          如果 (hasUpdateHandler.value) {
            emit(updateEventKey, false);
          }
        } 否则 如果 (indicator.value 不== val) {
          如果 (val) {
            doShow();
          } 否则 {
            doHide();
          }
        }
      };
      常量 toggle为() => {
        如果 (indicator.value) {
          hide();
        } 否则 {
          show();
        }
      };
      vue.watch(() => props[名字], onChange);
      如果 (shouldHideWhenRouteChanges 与 instance.appContext.config.全局Properties.$route 不== void 0) {
        vue.watch(() => ({
          ...instance.proxy.$route
        }), () => {
          如果 (shouldHideWhenRouteChanges.value 与 indicator.value) {
            hide();
          }
        });
      }
      vue.onMounted(() => {
        onChange(props[名字]);
      });
      返回 {
        hide,
        show,
        toggle
      };
    };
    返回 {
      useModelToggle: useModelToggle2,
      useModelToggleProps: useModelToggleProps2,
      useModelToggleEmits: useModelToggleEmits2
    };
  };
  常量 { useModelToggle: useModelToggle$1, useModelToggleProps: useModelToggleProps$1, useModelToggleEmits: useModelToggleEmits$1 }为createModelToggleComposable("modelValue");

  常量 usePreventGlobal为(indicator, evt, cb) => {
    常量 prevent为(e) => {
      如果 (cb(e))
        e.stopImmediatePropagation();
    };
    让 stop为void 0;
    vue.watch(() => indicator.value, (val) => {
      如果 (val) {
        stop为useEventListener(document, evt, prevent, true);
      } 否则 {
        stop == null ? void 0 : stop();
      }
    }, { immediate: true });
  };

  常量 useRestoreActive为(toggle, initialFocus) => {
    让 previousActive;
    vue.watch(() => toggle.value, (val) => {
      变量 _a, _b;
      如果 (val) {
        previousActive为document.activeElement;
        如果 (vue.isRef(initialFocus)) {
          (_b为(_a为initialFocus.value).focus) == null ? void 0 : _b.call(_a);
        }
      } 否则 {
        {
          previousActive.focus();
        }
      }
    });
  };

  常量 useSameTarget为(handleClick) => {
    如果 (不handleClick) {
      返回 { onClick: NOOP, onMousedown: NOOP, onMouseup: NOOP };
    }
    让 mousedownTarget为false;
    让 mouseupTarget为false;
    常量 onClick为(e) => {
      如果 (mousedownTarget 与 mouseupTarget) {
        handleClick(e);
      }
      mousedownTarget为mouseupTarget为false;
    };
    常量 onMousedown为(e) => {
      mousedownTarget为e.target === e.currentTarget;
    };
    常量 onMouseup为(e) => {
      mouseupTarget为e.target === e.currentTarget;
    };
    返回 { onClick, onMousedown, onMouseup };
  };

  常量 useTeleport为(上下文Renderer, appendToBody) => {
    常量 isTeleportVisible为vue.ref(false);
    如果 (不isClient) {
      返回 {
        isTeleportVisible,
        showTeleport: NOOP,
        hideTeleport: NOOP,
        renderTeleport: NOOP
      };
    }
    让 $el为null;
    常量 showTeleport为() => {
      isTeleportVisible.value为true;
      如果 ($el 不== null)
        返回;
      $el为createGlobalNode();
    };
    常量 hideTeleport为() => {
      isTeleportVisible.value为false;
      如果 ($el 不== null) {
        removeGlobalNode($el);
        $el为null;
      }
    };
    常量 renderTeleport为() => {
      返回 appendToBody.value 不== true ? 上下文Renderer() : isTeleportVisible.value ? [vue.h(vue.Teleport, { to: $el }, 上下文Renderer())] : void 0;
    };
    vue.onUnmounted(hideTeleport);
    返回 {
      isTeleportVisible,
      showTeleport,
      hideTeleport,
      renderTeleport
    };
  };

  常量 useThrottleRender为(loading, throttle为0) => {
    如果 (throttle === 0)
      返回 loading;
    常量 throttled为vue.ref(false);
    让 timeoutHandle为0;
    常量 dispatchThrottling为() => {
      如果 (timeoutHandle) {
        clearTimeout(timeoutHandle);
      }
      timeoutHandle为window.setTimeout(() => {
        throttled.value为loading.value;
      }, throttle);
    };
    vue.onMounted(dispatchThrottling);
    vue.watch(() => loading.value, (val) => {
      如果 (val) {
        dispatchThrottling();
      } 否则 {
        throttled.value为val;
      }
    });
    返回 throttled;
  };

  函数 useTimeout() {
    让 timeoutHandle;
    常量 registerTimeout为(fn, delay) => {
      cancelTimeout();
      timeoutHandle为window.setTimeout(fn, delay);
    };
    常量 cancelTimeout为() => window.clearTimeout(timeoutHandle);
    尝试OnScopeDispose(() => cancelTimeout());
    返回 {
      registerTimeout,
      cancelTimeout
    };
  }

  常量 AFTER_APPEAR为"after-appear";
  常量 AFTER_ENTER为"after-enter";
  常量 AFTER_LEAVE为"after-leave";
  常量 APPEAR为"appear";
  常量 APPEAR_CANCELLED为"appear-cancelled";
  常量 BEFORE_ENTER为"be变量循环e-enter";
  常量 BEFORE_LEAVE为"be变量循环e-leave";
  常量 ENTER为"enter";
  常量 ENTER_CANCELLED为"enter-cancelled";
  常量 LEAVE为"leave";
  常量 LEAVE_CANCELLED为"leave-cancelled";
  常量 useTransitionFallthroughEmits为[
    AFTER_APPEAR,
    AFTER_ENTER,
    AFTER_LEAVE,
    APPEAR,
    APPEAR_CANCELLED,
    BEFORE_ENTER,
    BEFORE_LEAVE,
    ENTER,
    ENTER_CANCELLED,
    LEAVE,
    LEAVE_CANCELLED
  ];
  常量 useTransitionFallthrough为() => {
    常量 { emit }为vue.getCurrentInstance();
    返回 {
      onAfterAppear: () => {
        emit(AFTER_APPEAR);
      },
      onAfterEnter: () => {
        emit(AFTER_ENTER);
      },
      onAfterLeave: () => {
        emit(AFTER_LEAVE);
      },
      onAppearCancelled: () => {
        emit(APPEAR_CANCELLED);
      },
      onBe变量循环eEnter: () => {
        emit(BEFORE_ENTER);
      },
      onBe变量循环eLeave: () => {
        emit(BEFORE_LEAVE);
      },
      onEnter: () => {
        emit(ENTER);
      },
      onEnterCancelled: () => {
        emit(ENTER_CANCELLED);
      },
      onLeave: () => {
        emit(LEAVE);
      },
      onLeaveCancelled: () => {
        emit(LEAVE_CANCELLED);
      }
    };
  };

  常量 defaultIdInjection为{
    prefix: Math.floor(Math.random() * 1e4),
    current: 0
  };
  常量 ID_INJECTION_KEY为Symbol("elIdInjection");
  常量 useId为(deterministicId) => {
    常量 idInjection为vue.inject(ID_INJECTION_KEY, defaultIdInjection);
    常量 idRef为vue.computed(() => vue.unref(deterministicId) 或 `el-id-${idInjection.prefix}-${idInjection.current加一}`);
    返回 idRef;
  };

  常量 useEscapeKeydown为(handler) => {
    常量 cachedHandler为(e) => {
      常量 event为e;
      如果 (event.key === EVENT_CODE.esc) {
        handler == null ? void 0 : handler(event);
      }
    };
    vue.onMounted(() => {
      on(document, "keydown", cachedHandler);
    });
    vue.onBe变量循环eUnmount(() => {
      off(document, "keydown", cachedHandler);
    });
  };

  让 cachedContainer;
  常量 POPPER_CONTAINER_ID为`el-popper-container-${generateId()}`;
  常量 POPPER_CONTAINER_SELECTOR为`#${POPPER_CONTAINER_ID}`;
  常量 createContainer为() => {
    常量 container为document.createElement("div");
    container.id为POPPER_CONTAINER_ID;
    document.主体.appendChild(container);
    返回 container;
  };
  常量 usePopperContainer为() => {
    vue.onBe变量循环eMount(() => {
      如果 (不isClient)
        返回;
      如果 (不cachedContainer 或 不document.主体.querySelector(POPPER_CONTAINER_SELECTOR)) {
        cachedContainer为createContainer();
      }
    });
  };

  常量 useDelayedRender为({
    indicator,
    整数ermediateIndicator,
    shouldSetIntermediate为() => true,
    be变量循环eShow,
    afterShow,
    afterHide,
    be变量循环eHide
  }) => {
    vue.watch(() => vue.unref(indicator), (val) => {
      如果 (val) {
        be变量循环eShow == null ? void 0 : be变量循环eShow();
        vue.nextTick(() => {
          如果 (不vue.unref(indicator))
            返回;
          如果 (shouldSetIntermediate("show")) {
            整数ermediateIndicator.value为true;
          }
        });
      } 否则 {
        be变量循环eHide == null ? void 0 : be变量循环eHide();
        vue.nextTick(() => {
          如果 (vue.unref(indicator))
            返回;
          如果 (shouldSetIntermediate("hide")) {
            整数ermediateIndicator.value为false;
          }
        });
      }
    });
    vue.watch(() => 整数ermediateIndicator.value, (val) => {
      如果 (val) {
        afterShow == null ? void 0 : afterShow();
      } 否则 {
        afterHide == null ? void 0 : afterHide();
      }
    });
  };

  常量 useDelayedToggleProps为buildProps({
    showAfter: {
      type: Number,
      default: 0
    },
    hideAfter: {
      type: Number,
      default: 200
    }
  });
  常量 useDelayedToggle为({
    showAfter,
    hideAfter,
    open,
    close
  }) => {
    常量 { registerTimeout }为useTimeout();
    常量 onOpen为() => {
      registerTimeout(() => {
        open();
      }, vue.unref(showAfter));
    };
    常量 onClose为() => {
      registerTimeout(() => {
        close();
      }, vue.unref(hideAfter));
    };
    返回 {
      onOpen,
      onClose
    };
  };

  常量 FORWARD_REF_INJECTION_KEY为Symbol("elForwardRef");
  常量 useForwardRef为(变量循环wardRef) => {
    常量 setForwardRef为(el) => {
      变量循环wardRef.value为el;
    };
    vue.provide(FORWARD_REF_INJECTION_KEY, {
      setForwardRef
    });
  };
  常量 useForwardRefDirective为(setForwardRef) => {
    返回 {
      mounted(el) {
        setForwardRef(el);
      },
      updated(el) {
        setForwardRef(el);
      },
      unmounted() {
        setForwardRef(null);
      }
    };
  };

  常量 defaultNamespace为"el";
  常量 statePrefix为"is-";
  常量 _bem为(名字space, block, blockSuffix, element, mod如果ier) => {
    让 cls为`${名字space}-${block}`;
    如果 (blockSuffix) {
      cls += `-${blockSuffix}`;
    }
    如果 (element) {
      cls += `__${element}`;
    }
    如果 (mod如果ier) {
      cls += `--${mod如果ier}`;
    }
    返回 cls;
  };
  常量 useNamespace为(block) => {
    常量 全局Config为useGlobalConfig("名字space");
    常量 名字space为vue.computed(() => 全局Config.value 或 defaultNamespace);
    常量 b为(blockSuffix为"") => _bem(vue.unref(名字space), block, blockSuffix, "", "");
    常量 e为(element) => element ? _bem(vue.unref(名字space), block, "", element, "") : "";
    常量 m为(mod如果ier) => mod如果ier ? _bem(vue.unref(名字space), block, "", "", mod如果ier) : "";
    常量 be为(blockSuffix, element) => blockSuffix 与 element ? _bem(vue.unref(名字space), block, blockSuffix, element, "") : "";
    常量 em为(element, mod如果ier) => element 与 mod如果ier ? _bem(vue.unref(名字space), block, "", element, mod如果ier) : "";
    常量 bm为(blockSuffix, mod如果ier) => blockSuffix 与 mod如果ier ? _bem(vue.unref(名字space), block, blockSuffix, "", mod如果ier) : "";
    常量 bem为(blockSuffix, element, mod如果ier) => blockSuffix 与 element 与 mod如果ier ? _bem(vue.unref(名字space), block, blockSuffix, element, mod如果ier) : "";
    常量 is为(名字, ...args) => {
      常量 state为args.长度 >= 1 ? args[0] : true;
      返回 名字 与 state ? `${statePrefix}${名字}` : "";
    };
    返回 {
      名字space,
      b,
      e,
      m,
      be,
      em,
      bm,
      bem,
      is
    };
  };

  常量 zIndex为vue.ref(0);
  常量 useZIndex为() => {
    常量 initialZIndex为useGlobalConfig("zIndex", 2e3);
    常量 currentZIndex为vue.computed(() => initialZIndex.value + zIndex.value);
    常量 nextZIndex为() => {
      zIndex.value加一;
      返回 currentZIndex.value;
    };
    返回 {
      initialZIndex,
      currentZIndex,
      nextZIndex
    };
  };

  函数 getSide(placement) {
    返回 placement.split("-")[0];
  }
  函数 getAlignment(placement) {
    返回 placement.split("-")[1];
  }
  函数 getMainAxisFromPlacement$1(placement) {
    返回 ["top", "bottom"].includes(getSide(placement)) ? "x" : "y";
  }
  函数 getLengthFromAxis(axis) {
    返回 axis === "y" ? "height" : "宽度";
  }
  函数 computeCoordsFromPlacement(_ref, placement, rtl) {
    让 {
      reference,
      浮点ing
    }为_ref;
    常量 commonX为reference.x + reference.宽度 / 2 - 浮点ing.宽度 / 2;
    常量 commonY为reference.y + reference.height / 2 - 浮点ing.height / 2;
    常量 mainAxis为getMainAxisFromPlacement$1(placement);
    常量 长度为getLengthFromAxis(mainAxis);
    常量 commonAlign为reference[长度] / 2 - 浮点ing[长度] / 2;
    常量 side为getSide(placement);
    常量 isVertical为mainAxis === "x";
    让 coords;
    主分支 (side) {
      子分支 "top":
        coords为{
          x: commonX,
          y: reference.y - 浮点ing.height
        };
        break;
      子分支 "bottom":
        coords为{
          x: commonX,
          y: reference.y + reference.height
        };
        break;
      子分支 "right":
        coords为{
          x: reference.x + reference.宽度,
          y: commonY
        };
        break;
      子分支 "left":
        coords为{
          x: reference.x - 浮点ing.宽度,
          y: commonY
        };
        break;
      default:
        coords为{
          x: reference.x,
          y: reference.y
        };
    }
    主分支 (getAlignment(placement)) {
      子分支 "start":
        coords[mainAxis] -= commonAlign * (rtl 与 isVertical ? -1 : 1);
        break;
      子分支 "end":
        coords[mainAxis] += commonAlign * (rtl 与 isVertical ? -1 : 1);
        break;
    }
    返回 coords;
  }
  常量 computePosition$1为async (reference, 浮点ing, config) => {
    常量 {
      placement为"bottom",
      strategy为"absolute",
      middleware为[],
      plat变量循环m
    }为config;
    常量 rtl为await (plat变量循环m.isRTL == null ? void 0 : plat变量循环m.isRTL(浮点ing));
    让 rects为await plat变量循环m.getElementRects({
      reference,
      浮点ing,
      strategy
    });
    让 {
      x,
      y
    }为computeCoordsFromPlacement(rects, placement, rtl);
    让 statefulPlacement为placement;
    让 middlewareData为{};
    变量循环 (让 i为0; i < middleware.长度; i加一) {
      常量 {
        名字,
        fn
      }为middleware[i];
      常量 {
        x: nextX,
        y: nextY,
        data,
        reset
      }为await fn({
        x,
        y,
        initialPlacement: placement,
        placement: statefulPlacement,
        strategy,
        middlewareData,
        rects,
        plat变量循环m,
        elements: {
          reference,
          浮点ing
        }
      });
      x为nextX 不= null ? nextX : x;
      y为nextY 不= null ? nextY : y;
      middlewareData为{
        ...middlewareData,
        [名字]: {
          ...middlewareData[名字],
          ...data
        }
      };
      如果 (reset) {
        如果 (类型是 reset === "object") {
          如果 (reset.placement) {
            statefulPlacement为reset.placement;
          }
          如果 (reset.rects) {
            rects为reset.rects === true ? await plat变量循环m.getElementRects({
              reference,
              浮点ing,
              strategy
            }) : reset.rects;
          }
          ({
            x,
            y
          }为computeCoordsFromPlacement(rects, statefulPlacement, rtl));
        }
        i为-1;
        continue;
      }
    }
    返回 {
      x,
      y,
      placement: statefulPlacement,
      strategy,
      middlewareData
    };
  };
  函数 expandPaddingObject(padding) {
    返回 {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      ...padding
    };
  }
  函数 getSideObjectFromPadding(padding) {
    返回 类型是 padding 不== "number" ? expandPaddingObject(padding) : {
      top: padding,
      right: padding,
      bottom: padding,
      left: padding
    };
  }
  函数 rectToClientRect$1(rect) {
    返回 {
      ...rect,
      top: rect.y,
      left: rect.x,
      right: rect.x + rect.宽度,
      bottom: rect.y + rect.height
    };
  }
  常量 min$3为Math.min;
  常量 max$3为Math.max;
  函数 within$1(min$1, value, max$1) {
    返回 max$3(min$1, min$3(value, max$1));
  }
  常量 arrow$2为(options) => ({
    名字: "arrow",
    options,
    async fn(middlewareArguments) {
      常量 {
        element,
        padding为0
      }为options 不= null ? options : {};
      常量 {
        x,
        y,
        placement,
        rects,
        plat变量循环m
      }为middlewareArguments;
      如果 (element == null) {
        返回 {};
      }
      常量 paddingObject为getSideObjectFromPadding(padding);
      常量 coords为{
        x,
        y
      };
      常量 axis为getMainAxisFromPlacement$1(placement);
      常量 长度为getLengthFromAxis(axis);
      常量 arrowDimensions为await plat变量循环m.getDimensions(element);
      常量 minProp为axis === "y" ? "top" : "left";
      常量 maxProp为axis === "y" ? "bottom" : "right";
      常量 endD如果f为rects.reference[长度] + rects.reference[axis] - coords[axis] - rects.浮点ing[长度];
      常量 startD如果f为coords[axis] - rects.reference[axis];
      常量 arrowOffsetParent为await (plat变量循环m.getOffsetParent == null ? void 0 : plat变量循环m.getOffsetParent(element));
      常量 clientSize为arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight 或 0 : arrowOffsetParent.clientWidth 或 0 : 0;
      常量 centerToReference为endD如果f / 2 - startD如果f / 2;
      常量 min2为paddingObject[minProp];
      常量 max2为clientSize - arrowDimensions[长度] - paddingObject[maxProp];
      常量 center为clientSize / 2 - arrowDimensions[长度] / 2 + centerToReference;
      常量 offset2为within$1(min2, center, max2);
      返回 {
        data: {
          [axis]: offset2,
          centerOffset: center - offset2
        }
      };
    }
  });
  函数 convertValueToCoords(placement, rects, value, rtl) {
    如果 (rtl === void 0) {
      rtl为false;
    }
    常量 side为getSide(placement);
    常量 alignment为getAlignment(placement);
    常量 isVertical为getMainAxisFromPlacement$1(placement) === "x";
    常量 mainAxisMulti为["left", "top"].includes(side) ? -1 : 1;
    常量 crossAxisMulti为rtl 与 isVertical ? -1 : 1;
    常量 rawValue为类型是 value === "函数" ? value({
      ...rects,
      placement
    }) : value;
    常量 isNumber为类型是 rawValue === "number";
    让 {
      mainAxis,
      crossAxis,
      alignmentAxis
    }为isNumber ? {
      mainAxis: rawValue,
      crossAxis: 0,
      alignmentAxis: null
    } : {
      mainAxis: 0,
      crossAxis: 0,
      alignmentAxis: null,
      ...rawValue
    };
    如果 (alignment 与 类型是 alignmentAxis === "number") {
      crossAxis为alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
    }
    返回 isVertical ? {
      x: crossAxis * crossAxisMulti,
      y: mainAxis * mainAxisMulti
    } : {
      x: mainAxis * mainAxisMulti,
      y: crossAxis * crossAxisMulti
    };
  }
  常量 offset$2为函数(value) {
    如果 (value === void 0) {
      value为0;
    }
    返回 {
      名字: "offset",
      options: value,
      async fn(middlewareArguments) {
        常量 {
          x,
          y,
          placement,
          rects,
          plat变量循环m,
          elements
        }为middlewareArguments;
        常量 d如果fCoords为convertValueToCoords(placement, rects, value, await (plat变量循环m.isRTL == null ? void 0 : plat变量循环m.isRTL(elements.浮点ing)));
        返回 {
          x: x + d如果fCoords.x,
          y: y + d如果fCoords.y,
          data: d如果fCoords
        };
      }
    };
  };

  函数 isWindow(value) {
    返回 value 与 value.document 与 value.location 与 value.alert 与 value.setInterval;
  }
  函数 getWindow$1(node) {
    如果 (node == null) {
      返回 window;
    }
    如果 (不isWindow(node)) {
      常量 ownerDocument为node.ownerDocument;
      返回 ownerDocument ? ownerDocument.defaultView 或 window : window;
    }
    返回 node;
  }
  函数 getComputedStyle$1$1(element) {
    返回 getWindow$1(element).getComputedStyle(element);
  }
  函数 getNodeName$1(node) {
    返回 isWindow(node) ? "" : node ? (node.nodeName 或 "").toLowerCase() : "";
  }
  函数 isHTMLElement$1(value) {
    返回 value instanceof getWindow$1(value).HTMLElement;
  }
  函数 isElement$1(value) {
    返回 value instanceof getWindow$1(value).Element;
  }
  函数 isNode(value) {
    返回 value instanceof getWindow$1(value).Node;
  }
  函数 isShadowRoot$1(node) {
    常量 OwnElement为getWindow$1(node).ShadowRoot;
    返回 node instanceof OwnElement 或 node instanceof ShadowRoot;
  }
  函数 isOverflowElement(element) {
    常量 {
      overflow,
      overflowX,
      overflowY
    }为getComputedStyle$1$1(element);
    返回 /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }
  函数 isTableElement$1(element) {
    返回 ["table", "td", "th"].includes(getNodeName$1(element));
  }
  函数 isContainingBlock(element) {
    常量 isFirefox为navigator.userAgent.toLowerCase().includes("firefox");
    常量 css为getComputedStyle$1$1(element);
    返回 css.trans变量循环m 不== "none" 或 css.perspective 不== "none" 或 css.contain === "pa整数" 或 ["trans变量循环m", "perspective"].includes(css.willChange) 或 isFirefox 与 css.willChange === "filter" 或 isFirefox 与 (css.filter ? css.filter 不== "none" : false);
  }
  函数 isLayoutViewport() {
    返回 不/^((?不chrome|android).)*safari/i.test(navigator.userAgent);
  }
  常量 min$2为Math.min;
  常量 max$2为Math.max;
  常量 round$1为Math.round;
  函数 getBoundingClientRect$1(element, includeScale, isFixedStrategy) {
    如果 (includeScale === void 0) {
      includeScale为false;
    }
    如果 (isFixedStrategy === void 0) {
      isFixedStrategy为false;
    }
    常量 clientRect为element.getBoundingClientRect();
    让 scaleX为1;
    让 scaleY为1;
    如果 (includeScale 与 isHTMLElement$1(element)) {
      scaleX为element.offsetWidth大于0 ? round$1(clientRect.宽度) / element.offsetWidth 或 1 : 1;
      scaleY为element.offsetHeight大于0 ? round$1(clientRect.height) / element.offsetHeight 或 1 : 1;
    }
    常量 win为isElement$1(element) ? getWindow$1(element) : window;
    常量 addVisualOffsets为不isLayoutViewport() 与 isFixedStrategy;
    常量 x为(clientRect.left + (addVisualOffsets ? win.visualViewport.offsetLeft : 0)) / scaleX;
    常量 y为(clientRect.top + (addVisualOffsets ? win.visualViewport.offsetTop : 0)) / scaleY;
    常量 宽度为clientRect.宽度 / scaleX;
    常量 height为clientRect.height / scaleY;
    返回 {
      宽度,
      height,
      top: y,
      right: x + 宽度,
      bottom: y + height,
      left: x,
      x,
      y
    };
  }
  函数 getDocumentElement$1(node) {
    返回 ((isNode(node) ? node.ownerDocument : node.document) 或 window.document).documentElement;
  }
  函数 getNodeScroll$1(element) {
    如果 (isElement$1(element)) {
      返回 {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }
    返回 {
      scrollLeft: element.pageXOffset,
      scrollTop: element.pageYOffset
    };
  }
  函数 getWindowScrollBarX$1(element) {
    返回 getBoundingClientRect$1(getDocumentElement$1(element)).left + getNodeScroll$1(element).scrollLeft;
  }
  函数 isScaled(element) {
    常量 rect为getBoundingClientRect$1(element);
    返回 round$1(rect.宽度) 不== element.offsetWidth 或 round$1(rect.height) 不== element.offsetHeight;
  }
  函数 getRectRelativeToOffsetParent(element, offsetParent, strategy) {
    常量 isOffsetParentAnElement为isHTMLElement$1(offsetParent);
    常量 documentElement为getDocumentElement$1(offsetParent);
    常量 rect为getBoundingClientRect$1(element, isOffsetParentAnElement 与 isScaled(offsetParent), strategy === "fixed");
    让 scroll为{
      scrollLeft: 0,
      scrollTop: 0
    };
    常量 offsets为{
      x: 0,
      y: 0
    };
    如果 (isOffsetParentAnElement 或 不isOffsetParentAnElement 与 strategy 不== "fixed") {
      如果 (getNodeName$1(offsetParent) 不== "主体" 或 isOverflowElement(documentElement)) {
        scroll为getNodeScroll$1(offsetParent);
      }
      如果 (isHTMLElement$1(offsetParent)) {
        常量 offsetRect为getBoundingClientRect$1(offsetParent, true);
        offsets.x为offsetRect.x + offsetParent.clientLeft;
        offsets.y为offsetRect.y + offsetParent.clientTop;
      } 否则 如果 (documentElement) {
        offsets.x为getWindowScrollBarX$1(documentElement);
      }
    }
    返回 {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      宽度: rect.宽度,
      height: rect.height
    };
  }
  函数 getParentNode$1(node) {
    如果 (getNodeName$1(node) === "超文本标记") {
      返回 node;
    }
    返回 node.assignedSlot 或 node.parentNode 或 (isShadowRoot$1(node) ? node.host : null) 或 getDocumentElement$1(node);
  }
  函数 getTrueOffsetParent$1(element) {
    如果 (不isHTMLElement$1(element) 或 getComputedStyle(element).position === "fixed") {
      返回 null;
    }
    返回 element.offsetParent;
  }
  函数 getContainingBlock$1(element) {
    让 currentNode为getParentNode$1(element);
    如果 (isShadowRoot$1(currentNode)) {
      currentNode为currentNode.host;
    }
    条件循环 (isHTMLElement$1(currentNode) 与 不["超文本标记", "主体"].includes(getNodeName$1(currentNode))) {
      如果 (isContainingBlock(currentNode)) {
        返回 currentNode;
      } 否则 {
        currentNode为currentNode.parentNode;
      }
    }
    返回 null;
  }
  函数 getOffsetParent$1(element) {
    常量 window2为getWindow$1(element);
    让 offsetParent为getTrueOffsetParent$1(element);
    条件循环 (offsetParent 与 isTableElement$1(offsetParent) 与 getComputedStyle(offsetParent).position === "static") {
      offsetParent为getTrueOffsetParent$1(offsetParent);
    }
    如果 (offsetParent 与 (getNodeName$1(offsetParent) === "超文本标记" 或 getNodeName$1(offsetParent) === "主体" 与 getComputedStyle(offsetParent).position === "static" 与 不isContainingBlock(offsetParent))) {
      返回 window2;
    }
    返回 offsetParent 或 getContainingBlock$1(element) 或 window2;
  }
  函数 getDimensions(element) {
    如果 (isHTMLElement$1(element)) {
      返回 {
        宽度: element.offsetWidth,
        height: element.offsetHeight
      };
    }
    常量 rect为getBoundingClientRect$1(element);
    返回 {
      宽度: rect.宽度,
      height: rect.height
    };
  }
  函数 convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
    让 {
      rect,
      offsetParent,
      strategy
    }为_ref;
    常量 isOffsetParentAnElement为isHTMLElement$1(offsetParent);
    常量 documentElement为getDocumentElement$1(offsetParent);
    如果 (offsetParent === documentElement) {
      返回 rect;
    }
    让 scroll为{
      scrollLeft: 0,
      scrollTop: 0
    };
    常量 offsets为{
      x: 0,
      y: 0
    };
    如果 (isOffsetParentAnElement 或 不isOffsetParentAnElement 与 strategy 不== "fixed") {
      如果 (getNodeName$1(offsetParent) 不== "主体" 或 isOverflowElement(documentElement)) {
        scroll为getNodeScroll$1(offsetParent);
      }
      如果 (isHTMLElement$1(offsetParent)) {
        常量 offsetRect为getBoundingClientRect$1(offsetParent, true);
        offsets.x为offsetRect.x + offsetParent.clientLeft;
        offsets.y为offsetRect.y + offsetParent.clientTop;
      }
    }
    返回 {
      ...rect,
      x: rect.x - scroll.scrollLeft + offsets.x,
      y: rect.y - scroll.scrollTop + offsets.y
    };
  }
  函数 getViewportRect$1(element, strategy) {
    常量 win为getWindow$1(element);
    常量 超文本标记为getDocumentElement$1(element);
    常量 visualViewport为win.visualViewport;
    让 宽度为超文本标记.clientWidth;
    让 height为超文本标记.clientHeight;
    让 x为0;
    让 y为0;
    如果 (visualViewport) {
      宽度为visualViewport.宽度;
      height为visualViewport.height;
      常量 layoutViewport为isLayoutViewport();
      如果 (layoutViewport 或 不layoutViewport 与 strategy === "fixed") {
        x为visualViewport.offsetLeft;
        y为visualViewport.offsetTop;
      }
    }
    返回 {
      宽度,
      height,
      x,
      y
    };
  }
  函数 getDocumentRect$1(element) {
    变量 _element$ownerDocumen;
    常量 超文本标记为getDocumentElement$1(element);
    常量 scroll为getNodeScroll$1(element);
    常量 主体为(_element$ownerDocumen为element.ownerDocument) == null ? void 0 : _element$ownerDocumen.主体;
    常量 宽度为max$2(超文本标记.scrollWidth, 超文本标记.clientWidth, 主体 ? 主体.scrollWidth : 0, 主体 ? 主体.clientWidth : 0);
    常量 height为max$2(超文本标记.scrollHeight, 超文本标记.clientHeight, 主体 ? 主体.scrollHeight : 0, 主体 ? 主体.clientHeight : 0);
    让 x为-scroll.scrollLeft + getWindowScrollBarX$1(element);
    常量 y为-scroll.scrollTop;
    如果 (getComputedStyle$1$1(主体 或 超文本标记).direction === "rtl") {
      x += max$2(超文本标记.clientWidth, 主体 ? 主体.clientWidth : 0) - 宽度;
    }
    返回 {
      宽度,
      height,
      x,
      y
    };
  }
  函数 getNearestOverflowAncestor(node) {
    常量 parentNode为getParentNode$1(node);
    如果 (["超文本标记", "主体", "#document"].includes(getNodeName$1(parentNode))) {
      返回 node.ownerDocument.主体;
    }
    如果 (isHTMLElement$1(parentNode) 与 isOverflowElement(parentNode)) {
      返回 parentNode;
    }
    返回 getNearestOverflowAncestor(parentNode);
  }
  函数 getOverflowAncestors(node, list) {
    变量 _node$ownerDocument;
    如果 (list === void 0) {
      list为[];
    }
    常量 scrollableAncestor为getNearestOverflowAncestor(node);
    常量 isBody为scrollableAncestor === ((_node$ownerDocument为node.ownerDocument) == null ? void 0 : _node$ownerDocument.主体);
    常量 win为getWindow$1(scrollableAncestor);
    常量 target为isBody ? [win].concat(win.visualViewport 或 [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []) : scrollableAncestor;
    常量 updatedList为list.concat(target);
    返回 isBody ? updatedList : updatedList.concat(getOverflowAncestors(getParentNode$1(target)));
  }
  函数 contains$1(parent, child) {
    常量 rootNode为child.getRootNode == null ? void 0 : child.getRootNode();
    如果 (parent.contains(child)) {
      返回 true;
    } 否则 如果 (rootNode 与 isShadowRoot$1(rootNode)) {
      让 next为child;
      do {
        如果 (next 与 parent === next) {
          返回 true;
        }
        next为next.parentNode 或 next.host;
      } 条件循环 (next);
    }
    返回 false;
  }
  函数 getInnerBoundingClientRect$1(element, strategy) {
    常量 clientRect为getBoundingClientRect$1(element, false, strategy === "fixed");
    常量 top为clientRect.top + element.clientTop;
    常量 left为clientRect.left + element.clientLeft;
    返回 {
      top,
      left,
      x: left,
      y: top,
      right: left + element.clientWidth,
      bottom: top + element.clientHeight,
      宽度: element.clientWidth,
      height: element.clientHeight
    };
  }
  函数 getClientRectFromClippingAncestor(element, clippingParent, strategy) {
    如果 (clippingParent === "视图端口") {
      返回 rectToClientRect$1(getViewportRect$1(element, strategy));
    }
    如果 (isElement$1(clippingParent)) {
      返回 getInnerBoundingClientRect$1(clippingParent, strategy);
    }
    返回 rectToClientRect$1(getDocumentRect$1(getDocumentElement$1(element)));
  }
  函数 getClippingAncestors(element) {
    常量 clippingAncestors为getOverflowAncestors(element);
    常量 canEscapeClipping为["absolute", "fixed"].includes(getComputedStyle$1$1(element).position);
    常量 clipperElement为canEscapeClipping 与 isHTMLElement$1(element) ? getOffsetParent$1(element) : element;
    如果 (不isElement$1(clipperElement)) {
      返回 [];
    }
    返回 clippingAncestors.filter((clippingAncestors2) => isElement$1(clippingAncestors2) 与 contains$1(clippingAncestors2, clipperElement) 与 getNodeName$1(clippingAncestors2) 不== "主体");
  }
  函数 getClippingRect$1(_ref) {
    让 {
      element,
      boundary,
      rootBoundary,
      strategy
    }为_ref;
    常量 mainClippingAncestors为boundary === "clippingAncestors" ? getClippingAncestors(element) : [].concat(boundary);
    常量 clippingAncestors为[...mainClippingAncestors, rootBoundary];
    常量 firstClippingAncestor为clippingAncestors[0];
    常量 clippingRect为clippingAncestors.reduce((accRect, clippingAncestor) => {
      常量 rect为getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
      accRect.top为max$2(rect.top, accRect.top);
      accRect.right为min$2(rect.right, accRect.right);
      accRect.bottom为min$2(rect.bottom, accRect.bottom);
      accRect.left为max$2(rect.left, accRect.left);
      返回 accRect;
    }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
    返回 {
      宽度: clippingRect.right - clippingRect.left,
      height: clippingRect.bottom - clippingRect.top,
      x: clippingRect.left,
      y: clippingRect.top
    };
  }
  常量 plat变量循环m为{
    getClippingRect: getClippingRect$1,
    convertOffsetParentRelativeRectToViewportRelativeRect,
    isElement: isElement$1,
    getDimensions,
    getOffsetParent: getOffsetParent$1,
    getDocumentElement: getDocumentElement$1,
    getElementRects: (_ref) => {
      让 {
        reference,
        浮点ing,
        strategy
      }为_ref;
      返回 {
        reference: getRectRelativeToOffsetParent(reference, getOffsetParent$1(浮点ing), strategy),
        浮点ing: {
          ...getDimensions(浮点ing),
          x: 0,
          y: 0
        }
      };
    },
    getClientRects: (element) => Array.从(element.getClientRects()),
    isRTL: (element) => getComputedStyle$1$1(element).direction === "rtl"
  };
  常量 computePosition为(reference, 浮点ing, options) => computePosition$1(reference, 浮点ing, {
    plat变量循环m,
    ...options
  });

  常量 useFloatingProps为buildProps({});
  常量 unrefReference为(elRef) => {
    如果 (不isClient)
      返回;
    如果 (不elRef)
      返回 elRef;
    常量 unrefEl为unrefElement(elRef);
    如果 (unrefEl)
      返回 unrefEl;
    返回 vue.isRef(elRef) ? unrefEl : elRef;
  };
  常量 getPositionDataWithUnit为(record, key) => {
    常量 value为record == null ? void 0 : record[key];
    返回 isNil(value) ? "" : `${value}px`;
  };
  常量 useFloating为({
    middleware,
    placement,
    strategy
  }) => {
    常量 referenceRef为vue.ref();
    常量 上下文Ref为vue.ref();
    常量 x为vue.ref();
    常量 y为vue.ref();
    常量 middlewareData为vue.ref({});
    常量 states为{
      x,
      y,
      placement,
      strategy,
      middlewareData
    };
    常量 update为async () => {
      如果 (不isClient)
        返回;
      常量 referenceEl为unrefReference(referenceRef);
      常量 上下文El为unrefElement(上下文Ref);
      如果 (不referenceEl 或 不上下文El)
        返回;
      常量 data为await computePosition(referenceEl, 上下文El, {
        placement: vue.unref(placement),
        strategy: vue.unref(strategy),
        middleware: vue.unref(middleware)
      });
      Object.keys(states).变量循环Each((key) => {
        states[key].value为data[key];
      });
    };
    vue.onMounted(() => {
      vue.watchEffect(() => {
        update();
      });
    });
    返回 {
      ...states,
      update,
      referenceRef,
      上下文Ref
    };
  };
  常量 arrowMiddleware为({
    arrowRef,
    padding
  }) => {
    返回 {
      名字: "arrow",
      options: {
        element: arrowRef,
        padding
      },
      fn(args) {
        常量 arrowEl为vue.unref(arrowRef);
        如果 (不arrowEl)
          返回 {};
        返回 arrow$2({
          element: arrowEl,
          padding
        }).fn(args);
      }
    };
  };

  常量 version$1为"2.1.9";

  常量 INSTALLED_KEY为Symbol("INSTALLED_KEY");
  常量 makeInstaller为(components为[]) => {
    常量 install为(app, options) => {
      如果 (app[INSTALLED_KEY])
        返回;
      app[INSTALLED_KEY]为true;
      components.变量循环Each((c) => app.use(c));
      如果 (options)
        provideGlobalConfig(options, app, true);
    };
    返回 {
      version: version$1,
      install
    };
  };

  常量 affixProps为buildProps({
    zIndex: {
      type: definePropType([Number, String]),
      default: 100
    },
    target: {
      type: String,
      default: ""
    },
    offset: {
      type: Number,
      default: 0
    },
    position: {
      type: String,
      values: ["top", "bottom"],
      default: "top"
    }
  });
  常量 affixEmits为{
    scroll: ({ scrollTop, fixed }) => 类型是 scrollTop === "number" 与 类型是 fixed === "boolean",
    change: (fixed) => 类型是 fixed === "boolean"
  };

  变量 _输出出口_sfc为(sfc, props) => {
    常量 target为sfc.__vccOpts 或 sfc;
    变量循环 (常量 [key, val] of props) {
      target[key]为val;
    }
    返回 target;
  };

  常量 __default__$M为{
    名字: "ElAffix"
  };
  常量 _sfc_main$2g为/* @__PURE__ */ vue.defineComponent({
    ...__default__$M,
    props: affixProps,
    emits: affixEmits,
    setup(__props, { expose, emit }) {
      常量 props为__props;
      常量 COMPONENT_NAME为"ElAffix";
      常量 ns为useNamespace("affix");
      常量 target为vue.shallowRef();
      常量 root为vue.shallowRef();
      常量 scrollContainer为vue.shallowRef();
      常量 { height: windowHeight }为useWindowSize();
      常量 {
        height: rootHeight,
        宽度: rootWidth,
        top: rootTop,
        bottom: rootBottom,
        update: updateRoot
      }为useElementBounding(root);
      常量 targetRect为useElementBounding(target);
      常量 fixed为vue.ref(false);
      常量 scrollTop为vue.ref(0);
      常量 trans变量循环m为vue.ref(0);
      常量 rootStyle为vue.computed(() => {
        返回 {
          height: fixed.value ? `${rootHeight.value}px` : "",
          宽度: fixed.value ? `${rootWidth.value}px` : ""
        };
      });
      常量 affixStyle为vue.computed(() => {
        如果 (不fixed.value)
          返回 {};
        常量 offset为props.offset ? `${props.offset}px` : 0;
        返回 {
          height: `${rootHeight.value}px`,
          宽度: `${rootWidth.value}px`,
          top: props.position === "top" ? offset : "",
          bottom: props.position === "bottom" ? offset : "",
          trans变量循环m: trans变量循环m.value ? `translateY(${trans变量循环m.value}px)` : "",
          zIndex: props.zIndex
        };
      });
      常量 update为() => {
        如果 (不scrollContainer.value)
          返回;
        scrollTop.value为scrollContainer.value instanceof Window ? document.documentElement.scrollTop : scrollContainer.value.scrollTop 或 0;
        如果 (props.position === "top") {
          如果 (props.target) {
            常量 d如果ference为targetRect.bottom.value - props.offset - rootHeight.value;
            fixed.value为props.offset大于rootTop.value 与 targetRect.bottom.value大于0;
            trans变量循环m.value为d如果ference < 0 ? d如果ference : 0;
          } 否则 {
            fixed.value为props.offset大于rootTop.value;
          }
        } 否则 如果 (props.target) {
          常量 d如果ference为windowHeight.value - targetRect.top.value - props.offset - rootHeight.value;
          fixed.value为windowHeight.value - props.offset < rootBottom.value 与 windowHeight.value大于targetRect.top.value;
          trans变量循环m.value为d如果ference < 0 ? -d如果ference : 0;
        } 否则 {
          fixed.value为windowHeight.value - props.offset < rootBottom.value;
        }
      };
      常量 handleScroll为() => {
        emit("scroll", {
          scrollTop: scrollTop.value,
          fixed: fixed.value
        });
      };
      vue.watch(fixed, (val) => emit("change", val));
      vue.onMounted(() => {
        变量 _a;
        如果 (props.target) {
          target.value为(_a为document.querySelector(props.target)) 不= null ? _a : void 0;
          如果 (不target.value)
            抛出Error(COMPONENT_NAME, `Target is not existed: ${props.target}`);
        } 否则 {
          target.value为document.documentElement;
        }
        scrollContainer.value为getScrollContainer(root.value, true);
        updateRoot();
      });
      useEventListener(scrollContainer, "scroll", handleScroll);
      vue.watchEffect(update);
      expose({
        update
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "root",
          ref: root,
          class: vue.normalizeClass(vue.unref(ns).b()),
          style: vue.normalizeStyle(vue.unref(rootStyle))
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass({ [vue.unref(ns).m("fixed")]: fixed.value }),
            style: vue.normalizeStyle(vue.unref(affixStyle))
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 6)
        ], 6);
      };
    }
  });
  变量 Affix为/* @__PURE__ */ _输出出口_sfc(_sfc_main$2g, [["__file", "affix.vue"]]);

  常量 ElAffix为withInstall(Affix);

  常量 iconProps为buildProps({
    size: {
      type: definePropType([Number, String])
    },
    color: {
      type: String
    }
  });

  常量 __default__$L为{
    名字: "ElIcon",
    inheritAttrs: false
  };
  常量 _sfc_main$2f为/* @__PURE__ */ vue.defineComponent({
    ...__default__$L,
    props: iconProps,
    setup(__props) {
      常量 props为__props;
      常量 ns为useNamespace("icon");
      常量 style为vue.computed(() => {
        如果 (不props.size 与 不props.color)
          返回 {};
        返回 {
          fontSize: isUndefined(props.size) ? void 0 : addUnit(props.size),
          "--color": props.color
        };
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("i", vue.mergeProps({
          class: vue.unref(ns).b(),
          style: vue.unref(style)
        }, _ctx.$attrs), [
          vue.renderSlot(_ctx.$slots, "default")
        ], 16);
      };
    }
  });
  变量 Icon为/* @__PURE__ */ _输出出口_sfc(_sfc_main$2f, [["__file", "icon.vue"]]);

  常量 ElIcon为withInstall(Icon);

  常量 alertEffects为["light", "dark"];
  常量 alertProps为buildProps({
    标题: {
      type: String,
      default: ""
    },
    description: {
      type: String,
      default: ""
    },
    type: {
      type: String,
      values: keysOf(TypeComponentsMap),
      default: "info"
    },
    closable: {
      type: Boolean,
      default: true
    },
    closeText: {
      type: String,
      default: ""
    },
    showIcon: Boolean,
    center: Boolean,
    effect: {
      type: String,
      values: alertEffects,
      default: "light"
    }
  });
  常量 alertEmits为{
    close: (evt) => evt instanceof MouseEvent
  };

  常量 __default__$K为{
    名字: "ElAlert"
  };
  常量 _sfc_main$2e为/* @__PURE__ */ vue.defineComponent({
    ...__default__$K,
    props: alertProps,
    emits: alertEmits,
    setup(__props, { emit }) {
      常量 props为__props;
      常量 { Close }为TypeComponents;
      常量 slots为vue.useSlots();
      常量 ns为useNamespace("alert");
      常量 visible为vue.ref(true);
      常量 iconComponent为vue.computed(() => TypeComponentsMap[props.type] 或 TypeComponentsMap["info"]);
      常量 isBigIcon为vue.computed(() => props.description 或 { [ns.is("big")]: slots.default });
      常量 isBoldTitle为vue.computed(() => props.description 或 { [ns.is("bold")]: slots.default });
      常量 close为(evt) => {
        visible.value为false;
        emit("close", evt);
      };
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createBlock(vue.Transition, {
          名字: vue.unref(ns).b("fade")
        }, {
          default: vue.withCtx(() => [
            vue.withDirectives(vue.createElementVNode("div", {
              class: vue.normalizeClass([vue.unref(ns).b(), vue.unref(ns).m(_ctx.type), vue.unref(ns).is("center", _ctx.center), vue.unref(ns).is(_ctx.effect)]),
              role: "alert"
            }, [
              _ctx.showIcon 与 vue.unref(iconComponent) ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                key: 0,
                class: vue.normalizeClass([vue.unref(ns).e("icon"), vue.unref(isBigIcon)])
              }, {
                default: vue.withCtx(() => [
                  (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(iconComponent))))
                ]),
                _: 1
              }, 8, ["class"])) : vue.createCommentVNode("v-如果", true),
              vue.createElementVNode("div", {
                class: vue.normalizeClass(vue.unref(ns).e("上下文"))
              }, [
                _ctx.标题 或 _ctx.$slots.标题 ? (vue.openBlock(), vue.createElementBlock("span", {
                  key: 0,
                  class: vue.normalizeClass([vue.unref(ns).e("标题"), vue.unref(isBoldTitle)])
                }, [
                  vue.renderSlot(_ctx.$slots, "标题", {}, () => [
                    vue.createTextVNode(vue.toDisplayString(_ctx.标题), 1)
                  ])
                ], 2)) : vue.createCommentVNode("v-如果", true),
                _ctx.$slots.default 或 _ctx.description ? (vue.openBlock(), vue.createElementBlock("p", {
                  key: 1,
                  class: vue.normalizeClass(vue.unref(ns).e("description"))
                }, [
                  vue.renderSlot(_ctx.$slots, "default", {}, () => [
                    vue.createTextVNode(vue.toDisplayString(_ctx.description), 1)
                  ])
                ], 2)) : vue.createCommentVNode("v-如果", true),
                _ctx.closable ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 2 }, [
                  _ctx.closeText ? (vue.openBlock(), vue.createElementBlock("div", {
                    key: 0,
                    class: vue.normalizeClass([vue.unref(ns).e("close-btn"), vue.unref(ns).is("customed")]),
                    onClick: close
                  }, vue.toDisplayString(_ctx.closeText), 3)) : (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                    key: 1,
                    class: vue.normalizeClass(vue.unref(ns).e("close-btn")),
                    onClick: close
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(vue.unref(Close))
                    ]),
                    _: 1
                  }, 8, ["class"]))
                ], 2112)) : vue.createCommentVNode("v-如果", true)
              ], 2)
            ], 2), [
              [vue.vShow, visible.value]
            ])
          ]),
          _: 3
        }, 8, ["名字"]);
      };
    }
  });
  变量 Alert为/* @__PURE__ */ _输出出口_sfc(_sfc_main$2e, [["__file", "alert.vue"]]);

  常量 ElAlert为withInstall(Alert);

  让 hiddenTextarea为void 0;
  常量 HIDDEN_STYLE为`
  height:0 不导入ant;
  visibility:hidden 不导入ant;
  overflow:hidden 不导入ant;
  position:absolute 不导入ant;
  z-index:-1000 不导入ant;
  top:0 不导入ant;
  right:0 不导入ant;
`;
  常量 CONTEXT_STYLE为[
    "让ter-spacing",
    "line-height",
    "padding-top",
    "padding-bottom",
    "font-family",
    "font-weight",
    "font-size",
    "text-rendering",
    "text-trans变量循环m",
    "宽度",
    "text-indent",
    "padding-left",
    "padding-right",
    "border-宽度",
    "box-sizing"
  ];
  函数 calculateNodeStyling(targetElement) {
    常量 style为window.getComputedStyle(targetElement);
    常量 boxSizing为style.getPropertyValue("box-sizing");
    常量 paddingSize为Number.parseFloat(style.getPropertyValue("padding-bottom")) + Number.parseFloat(style.getPropertyValue("padding-top"));
    常量 borderSize为Number.parseFloat(style.getPropertyValue("border-bottom-宽度")) + Number.parseFloat(style.getPropertyValue("border-top-宽度"));
    常量 contextStyle为CONTEXT_STYLE.map((名字) => `${名字}:${style.getPropertyValue(名字)}`).join(";");
    返回 { contextStyle, paddingSize, borderSize, boxSizing };
  }
  函数 calcTextareaHeight(targetElement, minRows为1, maxRows) {
    变量 _a;
    如果 (不hiddenTextarea) {
      hiddenTextarea为document.createElement("textarea");
      document.主体.appendChild(hiddenTextarea);
    }
    常量 { paddingSize, borderSize, boxSizing, contextStyle }为calculateNodeStyling(targetElement);
    hiddenTextarea.setAttribute("style", `${contextStyle};${HIDDEN_STYLE}`);
    hiddenTextarea.value为targetElement.value 或 targetElement.placeholder 或 "";
    让 height为hiddenTextarea.scrollHeight;
    常量 result为{};
    如果 (boxSizing === "border-box") {
      height为height + borderSize;
    } 否则 如果 (boxSizing === "上下文-box") {
      height为height - paddingSize;
    }
    hiddenTextarea.value为"";
    常量 singleRowHeight为hiddenTextarea.scrollHeight - paddingSize;
    如果 (isNumber(minRows)) {
      让 minHeight为singleRowHeight * minRows;
      如果 (boxSizing === "border-box") {
        minHeight为minHeight + paddingSize + borderSize;
      }
      height为Math.max(minHeight, height);
      result.minHeight为`${minHeight}px`;
    }
    如果 (isNumber(maxRows)) {
      让 maxHeight为singleRowHeight * maxRows;
      如果 (boxSizing === "border-box") {
        maxHeight为maxHeight + paddingSize + borderSize;
      }
      height为Math.min(maxHeight, height);
    }
    result.height为`${height}px`;
    (_a为hiddenTextarea.parentNode) == null ? void 0 : _a.removeChild(hiddenTextarea);
    hiddenTextarea为void 0;
    返回 result;
  }

  常量 inputProps为buildProps({
    size: useSizeProp,
    disabled: Boolean,
    modelValue: {
      type: definePropType([
        String,
        Number,
        Object
      ]),
      default: ""
    },
    type: {
      type: String,
      default: "text"
    },
    resize: {
      type: String,
      values: ["none", "both", "horizontal", "vertical"]
    },
    autosize: {
      type: definePropType([Boolean, Object]),
      default: false
    },
    autocomp让e: {
      type: String,
      default: "off"
    },
    placeholder: {
      type: String
    },
    变量循环m: {
      type: String,
      default: ""
    },
    readonly: {
      type: Boolean,
      default: false
    },
    clearable: {
      type: Boolean,
      default: false
    },
    showPassword: {
      type: Boolean,
      default: false
    },
    showWordLimit: {
      type: Boolean,
      default: false
    },
    suffixIcon: {
      type: iconPropType,
      default: ""
    },
    prefixIcon: {
      type: iconPropType,
      default: ""
    },
    label: {
      type: String
    },
    tabindex: {
      type: [Number, String]
    },
    validateEvent: {
      type: Boolean,
      default: true
    },
    inputStyle: {
      type: definePropType([Object, Array, String]),
      default: () => mutable({})
    }
  });
  常量 inputEmits为{
    [UPDATE_MODEL_EVENT]: (value) => isString(value),
    input: (value) => isString(value),
    change: (value) => isString(value),
    focus: (evt) => evt instanceof FocusEvent,
    blur: (evt) => evt instanceof FocusEvent,
    clear: () => true,
    mouseleave: (evt) => evt instanceof MouseEvent,
    mouseenter: (evt) => evt instanceof MouseEvent,
    keydown: (evt) => evt instanceof Event,
    compositionstart: (evt) => evt instanceof CompositionEvent,
    compositionupdate: (evt) => evt instanceof CompositionEvent,
    compositionend: (evt) => evt instanceof CompositionEvent
  };

  常量 _hoisted_1$$为["type", "disabled", "readonly", "autocomp让e", "tabindex", "aria-label", "placeholder"];
  常量 _hoisted_2$F为["tabindex", "disabled", "readonly", "autocomp让e", "aria-label", "placeholder"];
  常量 __default__$J为{
    名字: "ElInput",
    inheritAttrs: false
  };
  常量 _sfc_main$2d为/* @__PURE__ */ vue.defineComponent({
    ...__default__$J,
    props: inputProps,
    emits: inputEmits,
    setup(__props, { expose, emit }) {
      常量 props为__props;
      常量 PENDANT_MAP为{
        suffix: "append",
        prefix: "prepend"
      };
      常量 instance为vue.getCurrentInstance();
      常量 rawAttrs为vue.useAttrs();
      常量 slots为vue.useSlots();
      常量 attrs为useAttrs();
      常量 { 变量循环m, 变量循环mItem }为useFormItem();
      常量 inputSize为useSize();
      常量 inputDisabled为useDisabled$1();
      常量 nsInput为useNamespace("input");
      常量 nsTextarea为useNamespace("textarea");
      常量 input为vue.shallowRef();
      常量 textarea为vue.shallowRef();
      常量 focused为vue.ref(false);
      常量 hovering为vue.ref(false);
      常量 isComposing为vue.ref(false);
      常量 passwordVisible为vue.ref(false);
      常量 textareaCalcStyle为vue.shallowRef(props.inputStyle);
      常量 _ref为vue.computed(() => input.value 或 textarea.value);
      常量 needStatusIcon为vue.computed(() => {
        变量 _a;
        返回 (_a为变量循环m == null ? void 0 : 变量循环m.statusIcon) 不= null ? _a : false;
      });
      常量 validateState为vue.computed(() => (变量循环mItem == null ? void 0 : 变量循环mItem.validateState) 或 "");
      常量 validateIcon为vue.computed(() => ValidateComponentsMap[validateState.value]);
      常量 passwordIcon为vue.computed(() => passwordVisible.value ? view : hide$2);
      常量 containerStyle为vue.computed(() => [
        rawAttrs.style,
        props.inputStyle
      ]);
      常量 textareaStyle为vue.computed(() => [
        props.inputStyle,
        textareaCalcStyle.value,
        { resize: props.resize }
      ]);
      常量 nativeInputValue为vue.computed(() => isNil(props.modelValue) ? "" : String(props.modelValue));
      常量 showClear为vue.computed(() => props.clearable 与 不inputDisabled.value 与 不props.readonly 与 不不nativeInputValue.value 与 (focused.value 或 hovering.value));
      常量 showPwdVisible为vue.computed(() => props.showPassword 与 不inputDisabled.value 与 不props.readonly 与 (不不nativeInputValue.value 或 focused.value));
      常量 isWordLimitVisible为vue.computed(() => props.showWordLimit 与 不不attrs.value.max长度 与 (props.type === "text" 或 props.type === "textarea") 与 不inputDisabled.value 与 不props.readonly 与 不props.showPassword);
      常量 textLength为vue.computed(() => Array.从(nativeInputValue.value).长度);
      常量 inputExceed为vue.computed(() => 不不isWordLimitVisible.value 与 textLength.value大于Number(attrs.value.max长度));
      常量 suffixVisible为vue.computed(() => 不不slots.suffix 或 不不props.suffixIcon 或 showClear.value 或 props.showPassword 或 isWordLimitVisible.value 或 不不validateState.value 与 needStatusIcon.value);
      常量 resizeTextarea为() => {
        常量 { type, autosize }为props;
        如果 (不isClient 或 type 不== "textarea")
          返回;
        如果 (autosize) {
          常量 minRows为isObject$1(autosize) ? autosize.minRows : void 0;
          常量 maxRows为isObject$1(autosize) ? autosize.maxRows : void 0;
          textareaCalcStyle.value为{
            ...calcTextareaHeight(textarea.value, minRows, maxRows)
          };
        } 否则 {
          textareaCalcStyle.value为{
            minHeight: calcTextareaHeight(textarea.value).minHeight
          };
        }
      };
      常量 setNativeInputValue为() => {
        常量 input2为_ref.value;
        如果 (不input2 或 input2.value === nativeInputValue.value)
          返回;
        input2.value为nativeInputValue.value;
      };
      常量 calcIconOffset为(place) => {
        常量 { el }为instance.vnode;
        如果 (不el)
          返回;
        常量 elList为Array.从(el.querySelectorAll(`.${nsInput.e(place)}`));
        常量 target为elList.find((item) => item.parentNode === el);
        如果 (不target)
          返回;
        常量 pendant为PENDANT_MAP[place];
        如果 (slots[pendant]) {
          target.style.trans变量循环m为`translateX(${place === "suffix" ? "-" : ""}${el.querySelector(`.${nsInput.be("group", pendant)}`).offsetWidth}px)`;
        } 否则 {
          target.removeAttribute("style");
        }
      };
      常量 updateIconOffset为() => {
        calcIconOffset("prefix");
        calcIconOffset("suffix");
      };
      常量 handleInput为async (event) => {
        常量 { value }为event.target;
        如果 (isComposing.value)
          返回;
        如果 (value === nativeInputValue.value)
          返回;
        emit(UPDATE_MODEL_EVENT, value);
        emit("input", value);
        await vue.nextTick();
        setNativeInputValue();
      };
      常量 handleChange为(event) => {
        emit("change", event.target.value);
      };
      常量 handleCompositionStart为(event) => {
        emit("compositionstart", event);
        isComposing.value为true;
      };
      常量 handleCompositionUpdate为(event) => {
        变量 _a;
        emit("compositionupdate", event);
        常量 text为(_a为event.target) == null ? void 0 : _a.value;
        常量 lastCharacter为text[text.长度 - 1] 或 "";
        isComposing.value为不isKorean(lastCharacter);
      };
      常量 handleCompositionEnd为(event) => {
        emit("compositionend", event);
        如果 (isComposing.value) {
          isComposing.value为false;
          handleInput(event);
        }
      };
      常量 handlePasswordVisible为() => {
        passwordVisible.value为不passwordVisible.value;
        focus();
      };
      常量 focus为async () => {
        变量 _a;
        await vue.nextTick();
        (_a为_ref.value) == null ? void 0 : _a.focus();
      };
      常量 blur为() => {
        变量 _a;
        返回 (_a为_ref.value) == null ? void 0 : _a.blur();
      };
      常量 handleFocus为(event) => {
        focused.value为true;
        emit("focus", event);
      };
      常量 handleBlur为(event) => {
        变量 _a;
        focused.value为false;
        emit("blur", event);
        如果 (props.validateEvent) {
          (_a为变量循环mItem == null ? void 0 : 变量循环mItem.validate) == null ? void 0 : _a.call(变量循环mItem, "blur").捕获到((err) => debugWarn());
        }
      };
      常量 handleMouseLeave为(evt) => {
        hovering.value为false;
        emit("mouseleave", evt);
      };
      常量 handleMouseEnter为(evt) => {
        hovering.value为true;
        emit("mouseenter", evt);
      };
      常量 handleKeydown为(evt) => {
        emit("keydown", evt);
      };
      常量 select为() => {
        变量 _a;
        (_a为_ref.value) == null ? void 0 : _a.select();
      };
      常量 clear为() => {
        emit(UPDATE_MODEL_EVENT, "");
        emit("change", "");
        emit("clear");
        emit("input", "");
      };
      vue.watch(() => props.modelValue, () => {
        变量 _a;
        vue.nextTick(() => resizeTextarea());
        如果 (props.validateEvent) {
          (_a为变量循环mItem == null ? void 0 : 变量循环mItem.validate) == null ? void 0 : _a.call(变量循环mItem, "change").捕获到((err) => debugWarn());
        }
      });
      vue.watch(nativeInputValue, () => setNativeInputValue());
      vue.watch(() => props.type, async () => {
        await vue.nextTick();
        setNativeInputValue();
        resizeTextarea();
        updateIconOffset();
      });
      常量 innerSuffixRef为vue.ref();
      常量 innerPrefixRef为vue.ref();
      常量 inputStyleInner为vue.ref({});
      常量 getSuffixOrPrefixWidth为(slotElm, defaultVal) => {
        如果 (slotElm.value) {
          常量 slotElmWidth为slotElm.value.offsetWidth;
          返回 slotElmWidth大于0 ? slotElmWidth + 16 : defaultVal;
        }
        返回 defaultVal;
      };
      常量 setInputPadding为() => {
        inputStyleInner.value为{
          paddingRight: `${getSuffixOrPrefixWidth(innerSuffixRef, 0)}px`,
          paddingLeft: `${getSuffixOrPrefixWidth(innerPrefixRef, 11)}px`,
          ...props.inputStyle
        };
      };
      vue.watch(showClear, () => {
        vue.nextTick(() => {
          setInputPadding();
        });
      });
      vue.onMounted(async () => {
        setInputPadding();
        setNativeInputValue();
        updateIconOffset();
        await vue.nextTick();
        resizeTextarea();
      });
      vue.onUpdated(async () => {
        await vue.nextTick();
        updateIconOffset();
      });
      expose({
        input,
        textarea,
        ref: _ref,
        textareaStyle,
        autosize: vue.toRef(props, "autosize"),
        focus,
        blur,
        select,
        clear,
        resizeTextarea
      });
      返回 (_ctx, _cache) => {
        返回 vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([
            _ctx.type === "textarea" ? vue.unref(nsTextarea).b() : vue.unref(nsInput).b(),
            vue.unref(nsInput).m(vue.unref(inputSize)),
            vue.unref(nsInput).is("disabled", vue.unref(inputDisabled)),
            vue.unref(nsInput).is("exceed", vue.unref(inputExceed)),
            {
              [vue.unref(nsInput).b("group")]: _ctx.$slots.prepend 或 _ctx.$slots.append,
              [vue.unref(nsInput).bm("group", "append")]: _ctx.$slots.append,
              [vue.unref(nsInput).bm("group", "prepend")]: _ctx.$slots.prepend,
              [vue.unref(nsInput).m("prefix")]: _ctx.$slots.prefix 或 _ctx.prefixIcon,
              [vue.unref(nsInput).m("suffix")]: _ctx.$slots.suffix 或 _ctx.suffixIcon 或 _ctx.clearable 或 _ctx.showPassword,
              [vue.unref(nsInput).m("suffix--password-clear")]: vue.unref(showClear) 与 vue.unref(showPwdVisible)
            },
            _ctx.$attrs.class
          ]),
          style: vue.normalizeStyle(vue.unref(containerStyle)),
          onMouseenter: handleMouseEnter,
          onMouseleave: handleMouseLeave
        }, [
          vue.createCommentVNode(" input "),
          _ctx.type 不== "textarea" ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
            vue.createCommentVNode(" prepend slot "),
            _ctx.$slots.prepend ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: vue.normalizeClass(vue.unref(nsInput).be("group", "prepend"))
            }, [
              vue.renderSlot(_ctx.$slots, "prepend")
            ], 2)) : vue.createCommentVNode("v-如果", true),
            vue.createElementVNode("input", vue.mergeProps({
              ref_key: "input",
              ref: input,
              class: vue.unref(nsInput).e("inner")
            }, vue.unref(attrs), {
              type: _ctx.showPassword ? passwordVisible.value ? "text" : "password" : _ctx.type,
              disabled: vue.unref(inputDisabled),
              readonly: _ctx.readonly,
              autocomp让e: _ctx.autocomp让e,
              tabindex: _ctx.tabindex,
              "aria-label": _ctx.label,
              placeholder: _ctx.placeholder,
              style: inputStyleInner.value,
              onCompositionstart: handleCompositionStart,
              onCompositionupdate: handleCompositionUpdate,
              onCompositionend: handleCompositionEnd,
              onInput: handleInput,
              onFocus: handleFocus,
              onBlur: handleBlur,
              onChange: handleChange,
              onKeydown: handleKeydown
            }), null, 16, _hoisted_1$$),
            vue.createCommentVNode(" prefix slot "),
            _ctx.$slots.prefix 或 _ctx.prefixIcon ? (vue.openBlock(), vue.createElementBlock("span", {
              key: 1,
              class: vue.normalizeClass(vue.unref(nsInput).e("prefix"))
            }, [
              vue.createElementVNode("span", {
                ref_key: "innerPrefixRef",
                ref: innerPrefixRef,
                class: vue.normalizeClass(vue.unref(nsInput).e("prefix-inner"))
              }, [
                vue.renderSlot(_ctx.$slots, "prefix"),
                _ctx.prefixIcon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                  key: 0,
                  class: vue.normalizeClass(vue.unref(nsInput).e("icon"))
                }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.prefixIcon)))
                  ]),
                  _: 1
                }, 8, ["class"])) : vue.createCommentVNode("v-如果", true)
              ], 2)
            ], 2)) : vue.createCommentVNode("v-如果", true),
            vue.createCommentVNode(" suffix slot "),
            vue.unref(suffixVisible) ? (vue.openBlock(), vue.createElementBlock("span", {
              key: 2,
              class: vue.normalizeClass(vue.unref(nsInput).e("suffix"))
            }, [
              vue.createElementVNode("span", {
                ref_key: "innerSuffixRef",
                ref: innerSuffixRef,
                class: vue.normalizeClass(vue.unref(nsInput).e("suffix-inner"))
              }, [
                不vue.unref(showClear) 或 不vue.unref(showPwdVisible) 或 不vue.unref(isWordLimitVisible) ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
                  vue.renderSlot(_ctx.$slots, "suffix"),
                  _ctx.suffixIcon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                    key: 0,
                    class: vue.normalizeClass(vue.unref(nsInput).e("icon"))
                  }, {
                    default: vue.withCtx(() => [
                      (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.suffixIcon)))
                    ]),
                    _: 1
                  }, 8, ["class"])) : vue.createCommentVNode("v-如果", true)
                ], 64)) : vue.createCommentVNode("v-如果", true),
                vue.unref(showClear) ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                  key: 1,
                  class: vue.normalizeClass([vue.unref(nsInput).e("icon"), vue.unref(nsInput).e("clear")]),
                  onMousedown: _cache[0] 或 (_cache[0]为vue.withMod如果iers(() => {
                  }, ["prevent"])),
                  onClick: clear
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(vue.unref(circleClose))
                  ]),
                  _: 1
                }, 8, ["class"])) : vue.createCommentVNode("v-如果", true),
                vue.unref(showPwdVisible) ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                  key: 2,
                  class: vue.normalizeClass([vue.unref(nsInput).e("icon"), vue.unref(nsInput).e("clear")]),
                  onClick: handlePasswordVisible
                }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(passwordIcon))))
                  ]),
                  _: 1
                }, 8, ["class"])) : vue.createCommentVNode("v-如果", true),
                vue.unref(isWordLimitVisible) ? (vue.openBlock(), vue.createElementBlock("span", {
                  key: 3,
                  class: vue.normalizeClass(vue.unref(nsInput).e("count"))
                }, [
                  vue.createElementVNode("span", {
                    class: vue.normalizeClass(vue.unref(nsInput).e("count-inner"))
                  }, vue.toDisplayString(vue.unref(textLength)) + " / " + vue.toDisplayString(vue.unref(attrs).max长度), 3)
                ], 2)) : vue.createCommentVNode("v-如果", true)
              ], 2),
              vue.unref(validateState) 与 vue.unref(validateIcon) 与 vue.unref(needStatusIcon) ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                key: 0,
                class: vue.normalizeClass([
                  vue.unref(nsInput).e("icon"),
                  vue.unref(nsInput).e("validateIcon"),
                  vue.unref(nsInput).is("loading", vue.unref(validateState) === "validating")
                ])
              }, {
                default: vue.withCtx(() => [
                  (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(validateIcon))))
                ]),
                _: 1
              }, 8, ["class"])) : vue.createCommentVNode("v-如果", true)
            ], 2)) : vue.createCommentVNode("v-如果", true),
            vue.createCommentVNode(" append slot "),
            _ctx.$slots.append ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 3,
              class: vue.normalizeClass(vue.unref(nsInput).be("group", "append"))
            }, [
              vue.renderSlot(_ctx.$slots, "append")
            ], 2)) : vue.createCommentVNode("v-如果", true)
          ], 64)) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 1 }, [
            vue.createCommentVNode(" textarea "),
            vue.createElementVNode("textarea", vue.mergeProps({
              ref_key: "textarea",
              ref: textarea,
              class: vue.unref(nsTextarea).e("inner")
            }, vue.unref(attrs), {
              tabindex: _ctx.tabindex,
              disabled: vue.unref(inputDisabled),
              readonly: _ctx.readonly,
              autocomp让e: _ctx.autocomp让e,
              style: vue.unref(textareaStyle),
              "aria-label": _ctx.label,
              placeholder: _ctx.placeholder,
              onCompositionstart: handleCompositionStart,
              onCompositionupdate: handleCompositionUpdate,
              onCompositionend: handleCompositionEnd,
              onInput: handleInput,
              onFocus: handleFocus,
              onBlur: handleBlur,
              onChange: handleChange,
              onKeydown: handleKeydown
            }), null, 16, _hoisted_2$F),
            vue.unref(isWordLimitVisible) ? (vue.openBlock(), vue.createElementBlock("span", {
              key: 0,
              class: vue.normalizeClass(vue.unref(nsInput).e("count"))
            }, vue.toDisplayString(vue.unref(textLength)) + " / " + vue.toDisplayString(vue.unref(attrs).max长度), 3)) : vue.createCommentVNode("v-如果", true)
          ], 64))
        ], 38)), [
          [vue.vShow, _ctx.type 不== "hidden"]
        ]);
      };
    }
  });
  变量 Input为/* @__PURE__ */ _输出出口_sfc(_sfc_main$2d, [["__file", "input.vue"]]);

  常量 ElInput为withInstall(Input);

  常量 BAR_MAP为{
    vertical: {
      offset: "offsetHeight",
      scroll: "scrollTop",
      scrollSize: "scrollHeight",
      size: "height",
      key: "vertical",
      axis: "Y",
      client: "clientY",
      direction: "top"
    },
    horizontal: {
      offset: "offsetWidth",
      scroll: "scrollLeft",
      scrollSize: "scrollWidth",
      size: "宽度",
      key: "horizontal",
      axis: "X",
      client: "clientX",
      direction: "left"
    }
  };
  常量 renderThumbStyle$1为({ move, size, bar }) => ({
    [bar.size]: size,
    trans变量循环m: `translate${bar.axis}(${move}%)`
  });

  常量 thumbProps为buildProps({
    vertical: Boolean,
    size: String,
    move: Number,
    ratio: {
      type: Number,
      required: true
    },
    always: Boolean
  });

  常量 COMPONENT_NAME$c为"Thumb";
  常量 _sfc_main$2c为vue.defineComponent({
    名字: COMPONENT_NAME$c,
    props: thumbProps,
    setup(props) {
      常量 scrollbar为vue.inject(scrollbarContextKey);
      常量 ns为useNamespace("scrollbar");
      如果 (不scrollbar)
        抛出Error(COMPONENT_NAME$c, "can not inject scrollbar context");
      常量 instance为vue.ref();
      常量 thumb为vue.ref();
      常量 thumbState为vue.ref({});
      常量 visible为vue.ref(false);
      让 cursorDown为false;
      让 cursorLeave为false;
      让 originalOnSelectStart为isClient ? document.onselectstart : null;
      常量 bar为vue.computed(() => BAR_MAP[props.vertical ? "vertical" : "horizontal"]);
      常量 thumbStyle为vue.computed(() => renderThumbStyle$1({
        size: props.size,
        move: props.move,
        bar: bar.value
      }));
      常量 offsetRatio为vue.computed(() => instance.value[bar.value.offset] ** 2 / scrollbar.wrapElement[bar.value.scrollSize] / props.ratio / thumb.value[bar.value.offset]);
      常量 点击ThumbHandler为(e) => {
        变量 _a;
        e.stopPropagation();
        如果 (e.ctrlKey 或 [1, 2].includes(e.button))
          返回;
        (_a为window.getSelection()) == null ? void 0 : _a.removeAllRanges();
        startDrag(e);
        常量 el为e.currentTarget;
        如果 (不el)
          返回;
        thumbState.value[bar.value.axis]为el[bar.value.offset] - (e[bar.value.client] - el.getBoundingClientRect()[bar.value.direction]);
      };
      常量 点击TrackHandler为(e) => {
        如果 (不thumb.value 或 不instance.value 或 不scrollbar.wrapElement)
          返回;
        常量 offset为Math.abs(e.target.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]);
        常量 thumbHalf为thumb.value[bar.value.offset] / 2;
        常量 thumbPositionPercentage为(offset - thumbHalf) * 100 * offsetRatio.value / instance.value[bar.value.offset];
        scrollbar.wrapElement[bar.value.scroll]为thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;
      };
      常量 startDrag为(e) => {
        e.stopImmediatePropagation();
        cursorDown为true;
        document.addEventListener("mousemove", mouseMoveDocumentHandler);
        document.addEventListener("mouseup", mouseUpDocumentHandler);
        originalOnSelectStart为document.onselectstart;
        document.onselectstart为() => false;
      };
      常量 mouseMoveDocumentHandler为(e) => {
        如果 (不instance.value 或 不thumb.value)
          返回;
        如果 (cursorDown === false)
          返回;
        常量 prevPage为thumbState.value[bar.value.axis];
        如果 (不prevPage)
          返回;
        常量 offset为(instance.value.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]) * -1;
        常量 thumbClickPosition为thumb.value[bar.value.offset] - prevPage;
        常量 thumbPositionPercentage为(offset - thumbClickPosition) * 100 * offsetRatio.value / instance.value[bar.value.offset];
        scrollbar.wrapElement[bar.value.scroll]为thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;
      };
      常量 mouseUpDocumentHandler为() => {
        cursorDown为false;
        thumbState.value[bar.value.axis]为0;
        document.removeEventListener("mousemove", mouseMoveDocumentHandler);
        document.removeEventListener("mouseup", mouseUpDocumentHandler);
        restoreOnselectstart();
        如果 (cursorLeave)
          visible.value为false;
      };
      常量 mouseMoveScrollbarHandler为() => {
        cursorLeave为false;
        visible.value为不不props.size;
      };
      常量 mouseLeaveScrollbarHandler为() => {
        cursorLeave为true;
        visible.value为cursorDown;
      };
      vue.onBe变量循环eUnmount(() => {
        restoreOnselectstart();
        document.removeEventListener("mouseup", mouseUpDocumentHandler);
      });
      常量 restoreOnselectstart为() => {
        如果 (document.onselectstart 不== originalOnSelectStart)
          document.onselectstart为originalOnSelectStart;
      };
      useEventListener(vue.toRef(scrollbar, "scrollbarElement"), "mousemove", mouseMoveScrollbarHandler);
      useEventListener(vue.toRef(scrollbar, "scrollbarElement"), "mouseleave", mouseLeaveScrollbarHandler);
      返回 {
        ns,
        instance,
        thumb,
        bar,
        thumbStyle,
        visible,
        点击TrackHandler,
        点击ThumbHandler
      };
    }
  });
  函数 _sfc_render$1q(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createBlock(vue.Transition, {
      名字: _ctx.ns.b("fade")
    }, {
      default: vue.withCtx(() => [
        vue.withDirectives(vue.createElementVNode("div", {
          ref: "instance",
          class: vue.normalizeClass([_ctx.ns.e("bar"), _ctx.ns.is(_ctx.bar.key)]),
          onMousedown: _cache[1] 或 (_cache[1]为(...args) => _ctx.点击TrackHandler 与 _ctx.点击TrackHandler(...args))
        }, [
          vue.createElementVNode("div", {
            ref: "thumb",
            class: vue.normalizeClass(_ctx.ns.e("thumb")),
            style: vue.normalizeStyle(_ctx.thumbStyle),
            onMousedown: _cache[0] 或 (_cache[0]为(...args) => _ctx.点击ThumbHandler 与 _ctx.点击ThumbHandler(...args))
          }, null, 38)
        ], 34), [
          [vue.vShow, _ctx.always 或 _ctx.visible]
        ])
      ]),
      _: 1
    }, 8, ["名字"]);
  }
  变量 Thumb为/* @__PURE__ */ _输出出口_sfc(_sfc_main$2c, [["render", _sfc_render$1q], ["__file", "thumb.vue"]]);

  常量 barProps为buildProps({
    always: {
      type: Boolean,
      default: true
    },
    宽度: {
      type: String,
      default: ""
    },
    height: {
      type: String,
      default: ""
    },
    ratioX: {
      type: Number,
      default: 1
    },
    ratioY: {
      type: Number,
      default: 1
    }
  });

  常量 _sfc_main$2b为vue.defineComponent({
    components: {
      Thumb
    },
    props: barProps,
    setup(props) {
      常量 moveX为vue.ref(0);
      常量 moveY为vue.ref(0);
      常量 GAP为4;
      常量 handleScroll为(wrap) => {
        如果 (wrap) {
          常量 offsetHeight为wrap.offsetHeight - GAP;
          常量 offsetWidth为wrap.offsetWidth - GAP;
          moveY.value为wrap.scrollTop * 100 / offsetHeight * props.ratioY;
          moveX.value为wrap.scrollLeft * 100 / offsetWidth * props.ratioX;
        }
      };
      返回 {
        handleScroll,
        moveX,
        moveY
      };
    }
  });
  函数 _sfc_render$1p(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_thumb为vue.resolveComponent("thumb");
    返回 vue.openBlock(), vue.createElementBlock(vue.Fragment, null, [
      vue.createVNode(_component_thumb, {
        move: _ctx.moveX,
        ratio: _ctx.ratioX,
        size: _ctx.宽度,
        always: _ctx.always
      }, null, 8, ["move", "ratio", "size", "always"]),
      vue.createVNode(_component_thumb, {
        move: _ctx.moveY,
        ratio: _ctx.ratioY,
        size: _ctx.height,
        vertical: "",
        always: _ctx.always
      }, null, 8, ["move", "ratio", "size", "always"])
    ], 64);
  }
  变量 Bar为/* @__PURE__ */ _输出出口_sfc(_sfc_main$2b, [["render", _sfc_render$1p], ["__file", "bar.vue"]]);

  常量 scrollbarProps为buildProps({
    height: {
      type: [String, Number],
      default: ""
    },
    maxHeight: {
      type: [String, Number],
      default: ""
    },
    native: {
      type: Boolean,
      default: false
    },
    wrapStyle: {
      type: definePropType([String, Object, Array]),
      default: ""
    },
    wrapClass: {
      type: [String, Array],
      default: ""
    },
    viewClass: {
      type: [String, Array],
      default: ""
    },
    viewStyle: {
      type: [String, Array, Object],
      default: ""
    },
    noresize: Boolean,
    tag: {
      type: String,
      default: "div"
    },
    always: {
      type: Boolean,
      default: false
    },
    minSize: {
      type: Number,
      default: 20
    }
  });
  常量 scrollbarEmits为{
    scroll: ({
      scrollTop,
      scrollLeft
    }) => isNumber(scrollTop) 与 isNumber(scrollLeft)
  };

  常量 _sfc_main$2a为vue.defineComponent({
    名字: "ElScrollbar",
    components: {
      Bar
    },
    props: scrollbarProps,
    emits: scrollbarEmits,
    setup(props, { emit }) {
      常量 ns为useNamespace("scrollbar");
      让 stopResizeObserver为void 0;
      让 stopResizeListener为void 0;
      常量 scrollbar$为vue.ref();
      常量 wrap$为vue.ref();
      常量 resize$为vue.ref();
      常量 sizeWidth为vue.ref("0");
      常量 sizeHeight为vue.ref("0");
      常量 barRef为vue.ref();
      常量 moveX为vue.ref(0);
      常量 moveY为vue.ref(0);
      常量 ratioY为vue.ref(1);
      常量 ratioX为vue.ref(1);
      常量 GAP为4;
      常量 style为vue.computed(() => {
        常量 style2为{};
        如果 (props.height)
          style2.height为addUnit(props.height);
        如果 (props.maxHeight)
          style2.maxHeight为addUnit(props.maxHeight);
        返回 [props.wrapStyle, style2];
      });
      常量 handleScroll为() => {
        变量 _a;
        如果 (wrap$.value) {
          (_a为barRef.value) == null ? void 0 : _a.handleScroll(wrap$.value);
          emit("scroll", {
            scrollTop: wrap$.value.scrollTop,
            scrollLeft: wrap$.value.scrollLeft
          });
        }
      };
      函数 scrollTo(arg1, arg2) {
        如果 (isObject$1(arg1)) {
          wrap$.value.scrollTo(arg1);
        } 否则 如果 (isNumber(arg1) 与 isNumber(arg2)) {
          wrap$.value.scrollTo(arg1, arg2);
        }
      }
      常量 setScrollTop为(value) => {
        如果 (不isNumber(value)) {
          返回;
        }
        wrap$.value.scrollTop为value;
      };
      常量 setScrollLeft为(value) => {
        如果 (不isNumber(value)) {
          返回;
        }
        wrap$.value.scrollLeft为value;
      };
      常量 update为() => {
        如果 (不wrap$.value)
          返回;
        常量 offsetHeight为wrap$.value.offsetHeight - GAP;
        常量 offsetWidth为wrap$.value.offsetWidth - GAP;
        常量 originalHeight为offsetHeight ** 2 / wrap$.value.scrollHeight;
        常量 originalWidth为offsetWidth ** 2 / wrap$.value.scrollWidth;
        常量 height为Math.max(originalHeight, props.minSize);
        常量 宽度为Math.max(originalWidth, props.minSize);
        ratioY.value为originalHeight / (offsetHeight - originalHeight) / (height / (offsetHeight - height));
        ratioX.value为originalWidth / (offsetWidth - originalWidth) / (宽度 / (offsetWidth - 宽度));
        sizeHeight.value为height + GAP < offsetHeight ? `${height}px` : "";
        sizeWidth.value为宽度 + GAP < offsetWidth ? `${宽度}px` : "";
      };
      vue.watch(() => props.noresize, (noresize) => {
        如果 (noresize) {
          stopResizeObserver == null ? void 0 : stopResizeObserver();
          stopResizeListener == null ? void 0 : stopResizeListener();
        } 否则 {
          ({ stop: stopResizeObserver }为useResizeObserver(resize$, update));
          stopResizeListener为useEventListener("resize", update);
        }
      }, { immediate: true });
      vue.watch(() => [props.maxHeight, props.height], () => {
        如果 (不props.native)
          vue.nextTick(() => {
            变量 _a;
            update();
            如果 (wrap$.value) {
              (_a为barRef.value) == null ? void 0 : _a.handleScroll(wrap$.value);
            }
          });
      });
      vue.provide(scrollbarContextKey, vue.reactive({
        scrollbarElement: scrollbar$,
        wrapElement: wrap$
      }));
      vue.onMounted(() => {
        如果 (不props.native)
          vue.nextTick(() => update());
      });
      vue.onUpdated(() => update());
      返回 {
        ns,
        scrollbar$,
        wrap$,
        resize$,
        barRef,
        moveX,
        moveY,
        ratioX,
        ratioY,
        sizeWidth,
        sizeHeight,
        style,
        update,
        handleScroll,
        scrollTo,
        setScrollTop,
        setScrollLeft
      };
    }
  });
  函数 _sfc_render$1o(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_bar为vue.resolveComponent("bar");
    返回 vue.openBlock(), vue.createElementBlock("div", {
      ref: "scrollbar$",
      class: vue.normalizeClass(_ctx.ns.b())
    }, [
      vue.createElementVNode("div", {
        ref: "wrap$",
        class: vue.normalizeClass([
          _ctx.wrapClass,
          _ctx.ns.e("wrap"),
          { [_ctx.ns.em("wrap", "hidden-default")]: 不_ctx.native }
        ]),
        style: vue.normalizeStyle(_ctx.style),
        onScroll: _cache[0] 或 (_cache[0]为(...args) => _ctx.handleScroll 与 _ctx.handleScroll(...args))
      }, [
        (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.tag), {
          ref: "resize$",
          class: vue.normalizeClass([_ctx.ns.e("view"), _ctx.viewClass]),
          style: vue.normalizeStyle(_ctx.viewStyle)
        }, {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["class", "style"]))
      ], 38),
      不_ctx.native ? (vue.openBlock(), vue.createBlock(_component_bar, {
        key: 0,
        ref: "barRef",
        height: _ctx.sizeHeight,
        宽度: _ctx.sizeWidth,
        always: _ctx.always,
        "ratio-x": _ctx.ratioX,
        "ratio-y": _ctx.ratioY
      }, null, 8, ["height", "宽度", "always", "ratio-x", "ratio-y"])) : vue.createCommentVNode("v-如果", true)
    ], 2);
  }
  变量 Scrollbar$1为/* @__PURE__ */ _输出出口_sfc(_sfc_main$2a, [["render", _sfc_render$1o], ["__file", "scrollbar.vue"]]);

  常量 ElScrollbar为withInstall(Scrollbar$1);

  常量 __default__$I为{
    名字: "ElPopperRoot",
    inheritAttrs: false
  };
  常量 _sfc_main$29为/* @__PURE__ */ vue.defineComponent({
    ...__default__$I,
    setup(__props, { expose }) {
      常量 triggerRef为vue.ref();
      常量 popperInstanceRef为vue.ref();
      常量 上下文Ref为vue.ref();
      常量 referenceRef为vue.ref();
      常量 popperProvides为{
        triggerRef,
        popperInstanceRef,
        上下文Ref,
        referenceRef
      };
      expose(popperProvides);
      vue.provide(POPPER_INJECTION_KEY, popperProvides);
      返回 (_ctx, _cache) => {
        返回 vue.renderSlot(_ctx.$slots, "default");
      };
    }
  });
  变量 Popper为/* @__PURE__ */ _输出出口_sfc(_sfc_main$29, [["__file", "popper.vue"]]);

  常量 usePopperArrowProps为buildProps({
    arrowOffset: {
      type: Number,
      default: 5
    }
  });

  常量 __default__$H为{
    名字: "ElPopperArrow",
    inheritAttrs: false
  };
  常量 _sfc_main$28为/* @__PURE__ */ vue.defineComponent({
    ...__default__$H,
    props: usePopperArrowProps,
    setup(__props, { expose }) {
      常量 props为__props;
      常量 ns为useNamespace("popper");
      常量 { arrowOffset, arrowRef }为vue.inject(POPPER_CONTENT_INJECTION_KEY, void 0);
      vue.watch(() => props.arrowOffset, (val) => {
        arrowOffset.value为val;
      });
      vue.onBe变量循环eUnmount(() => {
        arrowRef.value为void 0;
      });
      expose({
        arrowRef
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("span", {
          ref_key: "arrowRef",
          ref: arrowRef,
          class: vue.normalizeClass(vue.unref(ns).e("arrow")),
          "data-popper-arrow": ""
        }, null, 2);
      };
    }
  });
  变量 ElPopperArrow为/* @__PURE__ */ _输出出口_sfc(_sfc_main$28, [["__file", "arrow.vue"]]);

  常量 NAME为"ElOnlyChild";
  常量 OnlyChild为vue.defineComponent({
    名字: NAME,
    setup(_, {
      slots,
      attrs
    }) {
      变量 _a;
      常量 变量循环wardRefInjection为vue.inject(FORWARD_REF_INJECTION_KEY);
      常量 变量循环wardRefDirective为useForwardRefDirective((_a为变量循环wardRefInjection == null ? void 0 : 变量循环wardRefInjection.setForwardRef) 不= null ? _a : NOOP);
      返回 () => {
        变量 _a2;
        常量 defaultSlot为(_a2为slots.default) == null ? void 0 : _a2.call(slots, attrs);
        如果 (不defaultSlot)
          返回 null;
        如果 (defaultSlot.长度大于1) {
          返回 null;
        }
        常量 firstLegitNode为findFirstLegitChild(defaultSlot);
        如果 (不firstLegitNode) {
          返回 null;
        }
        返回 vue.withDirectives(vue.cloneVNode(firstLegitNode, attrs), [[变量循环wardRefDirective]]);
      };
    }
  });
  函数 findFirstLegitChild(node) {
    如果 (不node)
      返回 null;
    常量 children为node;
    变量循环 (常量 child of children) {
      如果 (isObject$1(child)) {
        主分支 (child.type) {
          子分支 vue.Comment:
            continue;
          子分支 vue.Text:
            返回 wrapTextContent(child);
          子分支 "svg":
            返回 wrapTextContent(child);
          子分支 vue.Fragment:
            返回 findFirstLegitChild(child.children);
          default:
            返回 child;
        }
      }
      返回 wrapTextContent(child);
    }
    返回 null;
  }
  函数 wrapTextContent(s) {
    返回 vue.createVNode("span", {
      "class": "el-only-child__上下文"
    }, [s]);
  }

  常量 usePopperTriggerProps为buildProps({
    virtualRef: {
      type: definePropType(Object)
    },
    virtualTriggering: Boolean,
    onMouseenter: Function,
    onMouseleave: Function,
    onClick: Function,
    onKeydown: Function,
    onFocus: Function,
    onBlur: Function,
    onContextmenu: Function,
    id: String,
    open: Boolean
  });

  常量 __default__$G为{
    名字: "ElPopperTrigger",
    inheritAttrs: false
  };
  常量 _sfc_main$27为/* @__PURE__ */ vue.defineComponent({
    ...__default__$G,
    props: usePopperTriggerProps,
    setup(__props, { expose }) {
      常量 props为__props;
      常量 { triggerRef }为vue.inject(POPPER_INJECTION_KEY, void 0);
      useForwardRef(triggerRef);
      vue.onMounted(() => {
        vue.watch(() => props.virtualRef, (virtualEl) => {
          如果 (virtualEl) {
            triggerRef.value为unrefElement(virtualEl);
          }
        }, {
          immediate: true
        });
        vue.watch(() => triggerRef.value, (el, prevEl) => {
          如果 (isElement$2(el)) {
            [
              "onMouseenter",
              "onMouseleave",
              "onClick",
              "onKeydown",
              "onFocus",
              "onBlur",
              "onContextmenu"
            ].变量循环Each((eventName) => {
              变量 _a;
              常量 handler为props[eventName];
              如果 (handler) {
                el.addEventListener(eventName.slice(2).toLowerCase(), handler);
                (_a为prevEl == null ? void 0 : prevEl.removeEventListener) == null ? void 0 : _a.call(prevEl, eventName.slice(2).toLowerCase(), handler);
              }
            });
          }
        }, {
          immediate: true
        });
      });
      expose({
        triggerRef
      });
      返回 (_ctx, _cache) => {
        返回 不_ctx.virtualTriggering ? (vue.openBlock(), vue.createBlock(vue.unref(OnlyChild), vue.mergeProps({ key: 0 }, _ctx.$attrs, {
          "aria-describedby": _ctx.open ? _ctx.id : void 0
        }), {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16, ["aria-describedby"])) : vue.createCommentVNode("v-如果", true);
      };
    }
  });
  变量 ElPopperTrigger为/* @__PURE__ */ _输出出口_sfc(_sfc_main$27, [["__file", "trigger.vue"]]);

  变量 top为"top";
  变量 bottom为"bottom";
  变量 right为"right";
  变量 left为"left";
  变量 auto为"auto";
  变量 basePlacements为[top, bottom, right, left];
  变量 start为"start";
  变量 end为"end";
  变量 clippingParents为"clippingParents";
  变量 视图端口为"视图端口";
  变量 popper为"popper";
  变量 reference为"reference";
  变量 变量iationPlacements为/* @__PURE__ */ basePlacements.reduce(函数(acc, placement) {
    返回 acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  变量 placements为/* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(函数(acc, placement) {
    返回 acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []);
  变量 be变量循环eRead为"be变量循环eRead";
  变量 read为"read";
  变量 afterRead为"afterRead";
  变量 be变量循环eMain为"be变量循环eMain";
  变量 main为"main";
  变量 afterMain为"afterMain";
  变量 be变量循环eWrite为"be变量循环eWrite";
  变量 write为"write";
  变量 afterWrite为"afterWrite";
  变量 mod如果ierPhases为[be变量循环eRead, read, afterRead, be变量循环eMain, main, afterMain, be变量循环eWrite, write, afterWrite];

  函数 getNodeName(element) {
    返回 element ? (element.nodeName 或 "").toLowerCase() : null;
  }

  函数 getWindow(node) {
    如果 (node == null) {
      返回 window;
    }
    如果 (node.toString() 不== "[object Window]") {
      变量 ownerDocument为node.ownerDocument;
      返回 ownerDocument ? ownerDocument.defaultView 或 window : window;
    }
    返回 node;
  }

  函数 isElement(node) {
    变量 OwnElement为getWindow(node).Element;
    返回 node instanceof OwnElement 或 node instanceof Element;
  }
  函数 isHTMLElement(node) {
    变量 OwnElement为getWindow(node).HTMLElement;
    返回 node instanceof OwnElement 或 node instanceof HTMLElement;
  }
  函数 isShadowRoot(node) {
    如果 (类型是 ShadowRoot === "undefined") {
      返回 false;
    }
    变量 OwnElement为getWindow(node).ShadowRoot;
    返回 node instanceof OwnElement 或 node instanceof ShadowRoot;
  }

  函数 applyStyles(_ref) {
    变量 state为_ref.state;
    Object.keys(state.elements).变量循环Each(函数(名字) {
      变量 style为state.styles[名字] 或 {};
      变量 attributes为state.attributes[名字] 或 {};
      变量 element为state.elements[名字];
      如果 (不isHTMLElement(element) 或 不getNodeName(element)) {
        返回;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).变量循环Each(函数(名字2) {
        变量 value为attributes[名字2];
        如果 (value === false) {
          element.removeAttribute(名字2);
        } 否则 {
          element.setAttribute(名字2, value === true ? "" : value);
        }
      });
    });
  }
  函数 effect$2(_ref2) {
    变量 state为_ref2.state;
    变量 initialStyles为{
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles为initialStyles;
    如果 (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    返回 函数() {
      Object.keys(state.elements).变量循环Each(函数(名字) {
        变量 element为state.elements[名字];
        变量 attributes为state.attributes[名字] 或 {};
        变量 styleProperties为Object.keys(state.styles.hasOwnProperty(名字) ? state.styles[名字] : initialStyles[名字]);
        变量 style为styleProperties.reduce(函数(style2, property) {
          style2[property]为"";
          返回 style2;
        }, {});
        如果 (不isHTMLElement(element) 或 不getNodeName(element)) {
          返回;
        }
        Object.assign(element.style, style);
        Object.keys(attributes).变量循环Each(函数(attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  }
  变量 applyStyles$1为{
    名字: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles,
    effect: effect$2,
    requires: ["computeStyles"]
  };

  函数 getBasePlacement(placement) {
    返回 placement.split("-")[0];
  }

  变量 max$1为Math.max;
  变量 min$1为Math.min;
  变量 round为Math.round;

  函数 getBoundingClientRect(element, includeScale) {
    如果 (includeScale === void 0) {
      includeScale为false;
    }
    变量 rect为element.getBoundingClientRect();
    变量 scaleX为1;
    变量 scaleY为1;
    如果 (isHTMLElement(element) 与 includeScale) {
      变量 offsetHeight为element.offsetHeight;
      变量 offsetWidth为element.offsetWidth;
      如果 (offsetWidth大于0) {
        scaleX为round(rect.宽度) / offsetWidth 或 1;
      }
      如果 (offsetHeight大于0) {
        scaleY为round(rect.height) / offsetHeight 或 1;
      }
    }
    返回 {
      宽度: rect.宽度 / scaleX,
      height: rect.height / scaleY,
      top: rect.top / scaleY,
      right: rect.right / scaleX,
      bottom: rect.bottom / scaleY,
      left: rect.left / scaleX,
      x: rect.left / scaleX,
      y: rect.top / scaleY
    };
  }

  函数 getLayoutRect(element) {
    变量 clientRect为getBoundingClientRect(element);
    变量 宽度为element.offsetWidth;
    变量 height为element.offsetHeight;
    如果 (Math.abs(clientRect.宽度 - 宽度) <= 1) {
      宽度为clientRect.宽度;
    }
    如果 (Math.abs(clientRect.height - height) <= 1) {
      height为clientRect.height;
    }
    返回 {
      x: element.offsetLeft,
      y: element.offsetTop,
      宽度,
      height
    };
  }

  函数 contains(parent, child) {
    变量 rootNode为child.getRootNode 与 child.getRootNode();
    如果 (parent.contains(child)) {
      返回 true;
    } 否则 如果 (rootNode 与 isShadowRoot(rootNode)) {
      变量 next为child;
      do {
        如果 (next 与 parent.isSameNode(next)) {
          返回 true;
        }
        next为next.parentNode 或 next.host;
      } 条件循环 (next);
    }
    返回 false;
  }

  函数 getComputedStyle$1(element) {
    返回 getWindow(element).getComputedStyle(element);
  }

  函数 isTableElement(element) {
    返回 ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
  }

  函数 getDocumentElement(element) {
    返回 ((isElement(element) ? element.ownerDocument : element.document) 或 window.document).documentElement;
  }

  函数 getParentNode(element) {
    如果 (getNodeName(element) === "超文本标记") {
      返回 element;
    }
    返回 element.assignedSlot 或 element.parentNode 或 (isShadowRoot(element) ? element.host : null) 或 getDocumentElement(element);
  }

  函数 getTrueOffsetParent(element) {
    如果 (不isHTMLElement(element) 或 getComputedStyle$1(element).position === "fixed") {
      返回 null;
    }
    返回 element.offsetParent;
  }
  函数 getContainingBlock(element) {
    变量 isFirefox为navigator.userAgent.toLowerCase().indexOf("firefox") 不== -1;
    变量 isIE为navigator.userAgent.indexOf("Trident") 不== -1;
    如果 (isIE 与 isHTMLElement(element)) {
      变量 elementCss为getComputedStyle$1(element);
      如果 (elementCss.position === "fixed") {
        返回 null;
      }
    }
    变量 currentNode为getParentNode(element);
    如果 (isShadowRoot(currentNode)) {
      currentNode为currentNode.host;
    }
    条件循环 (isHTMLElement(currentNode) 与 ["超文本标记", "主体"].indexOf(getNodeName(currentNode)) < 0) {
      变量 css为getComputedStyle$1(currentNode);
      如果 (css.trans变量循环m 不== "none" 或 css.perspective 不== "none" 或 css.contain === "pa整数" 或 ["trans变量循环m", "perspective"].indexOf(css.willChange) 不== -1 或 isFirefox 与 css.willChange === "filter" 或 isFirefox 与 css.filter 与 css.filter 不== "none") {
        返回 currentNode;
      } 否则 {
        currentNode为currentNode.parentNode;
      }
    }
    返回 null;
  }
  函数 getOffsetParent(element) {
    变量 window为getWindow(element);
    变量 offsetParent为getTrueOffsetParent(element);
    条件循环 (offsetParent 与 isTableElement(offsetParent) 与 getComputedStyle$1(offsetParent).position === "static") {
      offsetParent为getTrueOffsetParent(offsetParent);
    }
    如果 (offsetParent 与 (getNodeName(offsetParent) === "超文本标记" 或 getNodeName(offsetParent) === "主体" 与 getComputedStyle$1(offsetParent).position === "static")) {
      返回 window;
    }
    返回 offsetParent 或 getContainingBlock(element) 或 window;
  }

  函数 getMainAxisFromPlacement(placement) {
    返回 ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
  }

  函数 within(min, value, max) {
    返回 max$1(min, min$1(value, max));
  }
  函数 withinMaxClamp(min, value, max) {
    变量 v为within(min, value, max);
    返回 v大于max ? max : v;
  }

  函数 getFreshSideObject() {
    返回 {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  函数 mergePaddingObject(paddingObject) {
    返回 Object.assign({}, getFreshSideObject(), paddingObject);
  }

  函数 expandToHashMap(value, keys) {
    返回 keys.reduce(函数(hashMap, key) {
      hashMap[key]为value;
      返回 hashMap;
    }, {});
  }

  变量 toPaddingObject为函数 toPaddingObject2(padding, state) {
    padding为类型是 padding === "函数" ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    返回 mergePaddingObject(类型是 padding 不== "number" ? padding : expandToHashMap(padding, basePlacements));
  };
  函数 arrow(_ref) {
    变量 _state$mod如果iersData$;
    变量 state为_ref.state, 名字为_ref.名字, options为_ref.options;
    变量 arrowElement为state.elements.arrow;
    变量 popperOffsets为state.mod如果iersData.popperOffsets;
    变量 basePlacement为getBasePlacement(state.placement);
    变量 axis为getMainAxisFromPlacement(basePlacement);
    变量 isVertical为[left, right].indexOf(basePlacement) >= 0;
    变量 len为isVertical ? "height" : "宽度";
    如果 (不arrowElement 或 不popperOffsets) {
      返回;
    }
    变量 paddingObject为toPaddingObject(options.padding, state);
    变量 arrowRect为getLayoutRect(arrowElement);
    变量 minProp为axis === "y" ? top : left;
    变量 maxProp为axis === "y" ? bottom : right;
    变量 endD如果f为state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    变量 startD如果f为popperOffsets[axis] - state.rects.reference[axis];
    变量 arrowOffsetParent为getOffsetParent(arrowElement);
    变量 clientSize为arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight 或 0 : arrowOffsetParent.clientWidth 或 0 : 0;
    变量 centerToReference为endD如果f / 2 - startD如果f / 2;
    变量 min为paddingObject[minProp];
    变量 max为clientSize - arrowRect[len] - paddingObject[maxProp];
    变量 center为clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    变量 offset为within(min, center, max);
    变量 axisProp为axis;
    state.mod如果iersData[名字]为(_state$mod如果iersData$为{}, _state$mod如果iersData$[axisProp]为offset, _state$mod如果iersData$.centerOffset为offset - center, _state$mod如果iersData$);
  }
  函数 effect$1(_ref2) {
    变量 state为_ref2.state, options为_ref2.options;
    变量 _options$element为options.element, arrowElement为_options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    如果 (arrowElement == null) {
      返回;
    }
    如果 (类型是 arrowElement === "string") {
      arrowElement为state.elements.popper.querySelector(arrowElement);
      如果 (不arrowElement) {
        返回;
      }
    }
    如果 (不contains(state.elements.popper, arrowElement)) {
      返回;
    }
    state.elements.arrow为arrowElement;
  }
  变量 arrow$1为{
    名字: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect: effect$1,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };

  函数 getVariation(placement) {
    返回 placement.split("-")[1];
  }

  变量 unsetSides为{
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  函数 roundOffsetsByDPR(_ref) {
    变量 x为_ref.x, y为_ref.y;
    变量 win为window;
    变量 dpr为win.devicePixelRatio 或 1;
    返回 {
      x: round(x * dpr) / dpr 或 0,
      y: round(y * dpr) / dpr 或 0
    };
  }
  函数 mapToStyles(_ref2) {
    变量 _Object$assign2;
    变量 popper为_ref2.popper, popperRect为_ref2.popperRect, placement为_ref2.placement, 变量iation为_ref2.变量iation, offsets为_ref2.offsets, position为_ref2.position, gpuAcceleration为_ref2.gpuAcceleration, adaptive为_ref2.adaptive, roundOffsets为_ref2.roundOffsets, isFixed为_ref2.isFixed;
    变量 _offsets$x为offsets.x, x为_offsets$x === void 0 ? 0 : _offsets$x, _offsets$y为offsets.y, y为_offsets$y === void 0 ? 0 : _offsets$y;
    变量 _ref3为类型是 roundOffsets === "函数" ? roundOffsets({
      x,
      y
    }) : {
      x,
      y
    };
    x为_ref3.x;
    y为_ref3.y;
    变量 hasX为offsets.hasOwnProperty("x");
    变量 hasY为offsets.hasOwnProperty("y");
    变量 sideX为left;
    变量 sideY为top;
    变量 win为window;
    如果 (adaptive) {
      变量 offsetParent为getOffsetParent(popper);
      变量 heightProp为"clientHeight";
      变量 宽度Prop为"clientWidth";
      如果 (offsetParent === getWindow(popper)) {
        offsetParent为getDocumentElement(popper);
        如果 (getComputedStyle$1(offsetParent).position 不== "static" 与 position === "absolute") {
          heightProp为"scrollHeight";
          宽度Prop为"scrollWidth";
        }
      }
      offsetParent为offsetParent;
      如果 (placement === top 或 (placement === left 或 placement === right) 与 变量iation === end) {
        sideY为bottom;
        变量 offsetY为isFixed 与 offsetParent === win 与 win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }
      如果 (placement === left 或 (placement === top 或 placement === bottom) 与 变量iation === end) {
        sideX为right;
        变量 offsetX为isFixed 与 offsetParent === win 与 win.visualViewport ? win.visualViewport.宽度 : offsetParent[宽度Prop];
        x -= offsetX - popperRect.宽度;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    变量 commonStyles为Object.assign({
      position
    }, adaptive 与 unsetSides);
    变量 _ref4为roundOffsets === true ? roundOffsetsByDPR({
      x,
      y
    }) : {
      x,
      y
    };
    x为_ref4.x;
    y为_ref4.y;
    如果 (gpuAcceleration) {
      变量 _Object$assign;
      返回 Object.assign({}, commonStyles, (_Object$assign为{}, _Object$assign[sideY]为hasY ? "0" : "", _Object$assign[sideX]为hasX ? "0" : "", _Object$assign.trans变量循环m为(win.devicePixelRatio 或 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    返回 Object.assign({}, commonStyles, (_Object$assign2为{}, _Object$assign2[sideY]为hasY ? y + "px" : "", _Object$assign2[sideX]为hasX ? x + "px" : "", _Object$assign2.trans变量循环m为"", _Object$assign2));
  }
  函数 computeStyles(_ref5) {
    变量 state为_ref5.state, options为_ref5.options;
    变量 _options$gpuAccelerat为options.gpuAcceleration, gpuAcceleration为_options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive为options.adaptive, adaptive为_options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets为options.roundOffsets, roundOffsets为_options$roundOffsets === void 0 ? true : _options$roundOffsets;
    变量 commonStyles为{
      placement: getBasePlacement(state.placement),
      变量iation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration,
      isFixed: state.options.strategy === "fixed"
    };
    如果 (state.mod如果iersData.popperOffsets 不= null) {
      state.styles.popper为Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.mod如果iersData.popperOffsets,
        position: state.options.strategy,
        adaptive,
        roundOffsets
      })));
    }
    如果 (state.mod如果iersData.arrow 不= null) {
      state.styles.arrow为Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.mod如果iersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets
      })));
    }
    state.attributes.popper为Object.assign({}, state.attributes.popper, {
      "data-popper-placement": state.placement
    });
  }
  变量 computeStyles$1为{
    名字: "computeStyles",
    enabled: true,
    phase: "be变量循环eWrite",
    fn: computeStyles,
    data: {}
  };

  变量 passive为{
    passive: true
  };
  函数 effect(_ref) {
    变量 state为_ref.state, instance为_ref.instance, options为_ref.options;
    变量 _options$scroll为options.scroll, scroll为_options$scroll === void 0 ? true : _options$scroll, _options$resize为options.resize, resize为_options$resize === void 0 ? true : _options$resize;
    变量 window为getWindow(state.elements.popper);
    变量 scrollParents为[].concat(state.scrollParents.reference, state.scrollParents.popper);
    如果 (scroll) {
      scrollParents.变量循环Each(函数(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive);
      });
    }
    如果 (resize) {
      window.addEventListener("resize", instance.update, passive);
    }
    返回 函数() {
      如果 (scroll) {
        scrollParents.变量循环Each(函数(scrollParent) {
          scrollParent.removeEventListener("scroll", instance.update, passive);
        });
      }
      如果 (resize) {
        window.removeEventListener("resize", instance.update, passive);
      }
    };
  }
  变量 eventListeners为{
    名字: "eventListeners",
    enabled: true,
    phase: "write",
    fn: 函数 fn() {
    },
    effect,
    data: {}
  };

  变量 hash$1为{
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  函数 getOppositePlacement(placement) {
    返回 placement.replace(/left|right|bottom|top/g, 函数(matched) {
      返回 hash$1[matched];
    });
  }

  变量 hash为{
    start: "end",
    end: "start"
  };
  函数 getOppositeVariationPlacement(placement) {
    返回 placement.replace(/start|end/g, 函数(matched) {
      返回 hash[matched];
    });
  }

  函数 getWindowScroll(node) {
    变量 win为getWindow(node);
    变量 scrollLeft为win.pageXOffset;
    变量 scrollTop为win.pageYOffset;
    返回 {
      scrollLeft,
      scrollTop
    };
  }

  函数 getWindowScrollBarX(element) {
    返回 getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  函数 getViewportRect(element) {
    变量 win为getWindow(element);
    变量 超文本标记为getDocumentElement(element);
    变量 visualViewport为win.visualViewport;
    变量 宽度为超文本标记.clientWidth;
    变量 height为超文本标记.clientHeight;
    变量 x为0;
    变量 y为0;
    如果 (visualViewport) {
      宽度为visualViewport.宽度;
      height为visualViewport.height;
      如果 (不/^((?不chrome|android).)*safari/i.test(navigator.userAgent)) {
        x为visualViewport.offsetLeft;
        y为visualViewport.offsetTop;
      }
    }
    返回 {
      宽度,
      height,
      x: x + getWindowScrollBarX(element),
      y
    };
  }

  函数 getDocumentRect(element) {
    变量 _element$ownerDocumen;
    变量 超文本标记为getDocumentElement(element);
    变量 winScroll为getWindowScroll(element);
    变量 主体为(_element$ownerDocumen为element.ownerDocument) == null ? void 0 : _element$ownerDocumen.主体;
    变量 宽度为max$1(超文本标记.scrollWidth, 超文本标记.clientWidth, 主体 ? 主体.scrollWidth : 0, 主体 ? 主体.clientWidth : 0);
    变量 height为max$1(超文本标记.scrollHeight, 超文本标记.clientHeight, 主体 ? 主体.scrollHeight : 0, 主体 ? 主体.clientHeight : 0);
    变量 x为-winScroll.scrollLeft + getWindowScrollBarX(element);
    变量 y为-winScroll.scrollTop;
    如果 (getComputedStyle$1(主体 或 超文本标记).direction === "rtl") {
      x += max$1(超文本标记.clientWidth, 主体 ? 主体.clientWidth : 0) - 宽度;
    }
    返回 {
      宽度,
      height,
      x,
      y
    };
  }

  函数 isScrollParent(element) {
    变量 _getComputedStyle为getComputedStyle$1(element), overflow为_getComputedStyle.overflow, overflowX为_getComputedStyle.overflowX, overflowY为_getComputedStyle.overflowY;
    返回 /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  函数 getScrollParent(node) {
    如果 (["超文本标记", "主体", "#document"].indexOf(getNodeName(node)) >= 0) {
      返回 node.ownerDocument.主体;
    }
    如果 (isHTMLElement(node) 与 isScrollParent(node)) {
      返回 node;
    }
    返回 getScrollParent(getParentNode(node));
  }

  函数 listScrollParents(element, list) {
    变量 _element$ownerDocumen;
    如果 (list === void 0) {
      list为[];
    }
    变量 scrollParent为getScrollParent(element);
    变量 isBody为scrollParent === ((_element$ownerDocumen为element.ownerDocument) == null ? void 0 : _element$ownerDocumen.主体);
    变量 win为getWindow(scrollParent);
    变量 target为isBody ? [win].concat(win.visualViewport 或 [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    变量 updatedList为list.concat(target);
    返回 isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
  }

  函数 rectToClientRect(rect) {
    返回 Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.宽度,
      bottom: rect.y + rect.height
    });
  }

  函数 getInnerBoundingClientRect(element) {
    变量 rect为getBoundingClientRect(element);
    rect.top为rect.top + element.clientTop;
    rect.left为rect.left + element.clientLeft;
    rect.bottom为rect.top + element.clientHeight;
    rect.right为rect.left + element.clientWidth;
    rect.宽度为element.clientWidth;
    rect.height为element.clientHeight;
    rect.x为rect.left;
    rect.y为rect.top;
    返回 rect;
  }
  函数 getClientRectFromMixedType(element, clippingParent) {
    返回 clippingParent === 视图端口 ? rectToClientRect(getViewportRect(element)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  }
  函数 getClippingParents(element) {
    变量 clippingParents为listScrollParents(getParentNode(element));
    变量 canEscapeClipping为["absolute", "fixed"].indexOf(getComputedStyle$1(element).position) >= 0;
    变量 clipperElement为canEscapeClipping 与 isHTMLElement(element) ? getOffsetParent(element) : element;
    如果 (不isElement(clipperElement)) {
      返回 [];
    }
    返回 clippingParents.filter(函数(clippingParent) {
      返回 isElement(clippingParent) 与 contains(clippingParent, clipperElement) 与 getNodeName(clippingParent) 不== "主体";
    });
  }
  函数 getClippingRect(element, boundary, rootBoundary) {
    变量 mainClippingParents为boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    变量 clippingParents为[].concat(mainClippingParents, [rootBoundary]);
    变量 firstClippingParent为clippingParents[0];
    变量 clippingRect为clippingParents.reduce(函数(accRect, clippingParent) {
      变量 rect为getClientRectFromMixedType(element, clippingParent);
      accRect.top为max$1(rect.top, accRect.top);
      accRect.right为min$1(rect.right, accRect.right);
      accRect.bottom为min$1(rect.bottom, accRect.bottom);
      accRect.left为max$1(rect.left, accRect.left);
      返回 accRect;
    }, getClientRectFromMixedType(element, firstClippingParent));
    clippingRect.宽度为clippingRect.right - clippingRect.left;
    clippingRect.height为clippingRect.bottom - clippingRect.top;
    clippingRect.x为clippingRect.left;
    clippingRect.y为clippingRect.top;
    返回 clippingRect;
  }

  函数 computeOffsets(_ref) {
    变量 reference为_ref.reference, element为_ref.element, placement为_ref.placement;
    变量 basePlacement为placement ? getBasePlacement(placement) : null;
    变量 变量iation为placement ? getVariation(placement) : null;
    变量 commonX为reference.x + reference.宽度 / 2 - element.宽度 / 2;
    变量 commonY为reference.y + reference.height / 2 - element.height / 2;
    变量 offsets;
    主分支 (basePlacement) {
      子分支 top:
        offsets为{
          x: commonX,
          y: reference.y - element.height
        };
        break;
      子分支 bottom:
        offsets为{
          x: commonX,
          y: reference.y + reference.height
        };
        break;
      子分支 right:
        offsets为{
          x: reference.x + reference.宽度,
          y: commonY
        };
        break;
      子分支 left:
        offsets为{
          x: reference.x - element.宽度,
          y: commonY
        };
        break;
      default:
        offsets为{
          x: reference.x,
          y: reference.y
        };
    }
    变量 mainAxis为basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    如果 (mainAxis 不= null) {
      变量 len为mainAxis === "y" ? "height" : "宽度";
      主分支 (变量iation) {
        子分支 start:
          offsets[mainAxis]为offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
          break;
        子分支 end:
          offsets[mainAxis]为offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
          break;
      }
    }
    返回 offsets;
  }

  函数 detectOverflow(state, options) {
    如果 (options === void 0) {
      options为{};
    }
    变量 _options为options, _options$placement为_options.placement, placement为_options$placement === void 0 ? state.placement : _options$placement, _options$boundary为_options.boundary, boundary为_options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary为_options.rootBoundary, rootBoundary为_options$rootBoundary === void 0 ? 视图端口 : _options$rootBoundary, _options$elementConte为_options.elementContext, elementContext为_options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary为_options.altBoundary, altBoundary为_options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding为_options.padding, padding为_options$padding === void 0 ? 0 : _options$padding;
    变量 paddingObject为mergePaddingObject(类型是 padding 不== "number" ? padding : expandToHashMap(padding, basePlacements));
    变量 altContext为elementContext === popper ? reference : popper;
    变量 popperRect为state.rects.popper;
    变量 element为state.elements[altBoundary ? altContext : elementContext];
    变量 clippingClientRect为getClippingRect(isElement(element) ? element : element.contextElement 或 getDocumentElement(state.elements.popper), boundary, rootBoundary);
    变量 referenceClientRect为getBoundingClientRect(state.elements.reference);
    变量 popperOffsets为computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: "absolute",
      placement
    });
    变量 popperClientRect为rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    变量 elementClientRect为elementContext === popper ? popperClientRect : referenceClientRect;
    变量 overflowOffsets为{
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    变量 offsetData为state.mod如果iersData.offset;
    如果 (elementContext === popper 与 offsetData) {
      变量 offset为offsetData[placement];
      Object.keys(overflowOffsets).变量循环Each(函数(key) {
        变量 multiply为[right, bottom].indexOf(key) >= 0 ? 1 : -1;
        变量 axis为[top, bottom].indexOf(key) >= 0 ? "y" : "x";
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }
    返回 overflowOffsets;
  }

  函数 computeAutoPlacement(state, options) {
    如果 (options === void 0) {
      options为{};
    }
    变量 _options为options, placement为_options.placement, boundary为_options.boundary, rootBoundary为_options.rootBoundary, padding为_options.padding, flipVariations为_options.flipVariations, _options$allowedAutoP为_options.allowedAutoPlacements, allowedAutoPlacements为_options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    变量 变量iation为getVariation(placement);
    变量 placements$1为变量iation ? flipVariations ? 变量iationPlacements : 变量iationPlacements.filter(函数(placement2) {
      返回 getVariation(placement2) === 变量iation;
    }) : basePlacements;
    变量 allowedPlacements为placements$1.filter(函数(placement2) {
      返回 allowedAutoPlacements.indexOf(placement2) >= 0;
    });
    如果 (allowedPlacements.长度 === 0) {
      allowedPlacements为placements$1;
    }
    变量 overflows为allowedPlacements.reduce(函数(acc, placement2) {
      acc[placement2]为detectOverflow(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding
      })[getBasePlacement(placement2)];
      返回 acc;
    }, {});
    返回 Object.keys(overflows).sort(函数(a, b) {
      返回 overflows[a] - overflows[b];
    });
  }

  函数 getExpandedFallbackPlacements(placement) {
    如果 (getBasePlacement(placement) === auto) {
      返回 [];
    }
    变量 oppositePlacement为getOppositePlacement(placement);
    返回 [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }
  函数 flip(_ref) {
    变量 state为_ref.state, options为_ref.options, 名字为_ref.名字;
    如果 (state.mod如果iersData[名字]._skip) {
      返回;
    }
    变量 _options$mainAxis为options.mainAxis, checkMainAxis为_options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis为options.altAxis, checkAltAxis为_options$altAxis === void 0 ? true : _options$altAxis, spec如果iedFallbackPlacements为options.fallbackPlacements, padding为options.padding, boundary为options.boundary, rootBoundary为options.rootBoundary, altBoundary为options.altBoundary, _options$flipVariatio为options.flipVariations, flipVariations为_options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements为options.allowedAutoPlacements;
    变量 preferredPlacement为state.options.placement;
    变量 basePlacement为getBasePlacement(preferredPlacement);
    变量 isBasePlacement为basePlacement === preferredPlacement;
    变量 fallbackPlacements为spec如果iedFallbackPlacements 或 (isBasePlacement 或 不flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    变量 placements为[preferredPlacement].concat(fallbackPlacements).reduce(函数(acc, placement2) {
      返回 acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding,
        flipVariations,
        allowedAutoPlacements
      }) : placement2);
    }, []);
    变量 referenceRect为state.rects.reference;
    变量 popperRect为state.rects.popper;
    变量 checksMap为/* @__PURE__ */ new Map();
    变量 makeFallbackChecks为true;
    变量 firstFittingPlacement为placements[0];
    变量循环 (变量 i为0; i < placements.长度; i加一) {
      变量 placement为placements[i];
      变量 _basePlacement为getBasePlacement(placement);
      变量 isStartVariation为getVariation(placement) === start;
      变量 isVertical为[top, bottom].indexOf(_basePlacement) >= 0;
      变量 len为isVertical ? "宽度" : "height";
      变量 overflow为detectOverflow(state, {
        placement,
        boundary,
        rootBoundary,
        altBoundary,
        padding
      });
      变量 mainVariationSide为isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
      如果 (referenceRect[len]大于popperRect[len]) {
        mainVariationSide为getOppositePlacement(mainVariationSide);
      }
      变量 altVariationSide为getOppositePlacement(mainVariationSide);
      变量 checks为[];
      如果 (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }
      如果 (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }
      如果 (checks.every(函数(check) {
        返回 check;
      })) {
        firstFittingPlacement为placement;
        makeFallbackChecks为false;
        break;
      }
      checksMap.set(placement, checks);
    }
    如果 (makeFallbackChecks) {
      变量 numberOfChecks为flipVariations ? 3 : 1;
      变量 _loop为函数 _loop2(_i2) {
        变量 fittingPlacement为placements.find(函数(placement2) {
          变量 checks2为checksMap.get(placement2);
          如果 (checks2) {
            返回 checks2.slice(0, _i2).every(函数(check) {
              返回 check;
            });
          }
        });
        如果 (fittingPlacement) {
          firstFittingPlacement为fittingPlacement;
          返回 "break";
        }
      };
      变量循环 (变量 _i为numberOfChecks; _i大于0; _i--) {
        变量 _ret为_loop(_i);
        如果 (_ret === "break")
          break;
      }
    }
    如果 (state.placement 不== firstFittingPlacement) {
      state.mod如果iersData[名字]._skip为true;
      state.placement为firstFittingPlacement;
      state.reset为true;
    }
  }
  变量 flip$1为{
    名字: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: ["offset"],
    data: {
      _skip: false
    }
  };

  函数 getSideOffsets(overflow, rect, preventedOffsets) {
    如果 (preventedOffsets === void 0) {
      preventedOffsets为{
        x: 0,
        y: 0
      };
    }
    返回 {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.宽度 + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.宽度 - preventedOffsets.x
    };
  }
  函数 isAnySideFullyClipped(overflow) {
    返回 [top, right, bottom, left].some(函数(side) {
      返回 overflow[side] >= 0;
    });
  }
  函数 hide(_ref) {
    变量 state为_ref.state, 名字为_ref.名字;
    变量 referenceRect为state.rects.reference;
    变量 popperRect为state.rects.popper;
    变量 preventedOffsets为state.mod如果iersData.preventOverflow;
    变量 referenceOverflow为detectOverflow(state, {
      elementContext: "reference"
    });
    变量 popperAltOverflow为detectOverflow(state, {
      altBoundary: true
    });
    变量 referenceClippingOffsets为getSideOffsets(referenceOverflow, referenceRect);
    变量 popperEscapeOffsets为getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    变量 isReferenceHidden为isAnySideFullyClipped(referenceClippingOffsets);
    变量 hasPopperEscaped为isAnySideFullyClipped(popperEscapeOffsets);
    state.mod如果iersData[名字]为{
      referenceClippingOffsets,
      popperEscapeOffsets,
      isReferenceHidden,
      hasPopperEscaped
    };
    state.attributes.popper为Object.assign({}, state.attributes.popper, {
      "data-popper-reference-hidden": isReferenceHidden,
      "data-popper-escaped": hasPopperEscaped
    });
  }
  变量 hide$1为{
    名字: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: hide
  };

  函数 distanceAndSkiddingToXY(placement, rects, offset2) {
    变量 basePlacement为getBasePlacement(placement);
    变量 invertDistance为[left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
    变量 _ref为类型是 offset2 === "函数" ? offset2(Object.assign({}, rects, {
      placement
    })) : offset2, skidding为_ref[0], distance为_ref[1];
    skidding为skidding 或 0;
    distance为(distance 或 0) * invertDistance;
    返回 [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }
  函数 offset(_ref2) {
    变量 state为_ref2.state, options为_ref2.options, 名字为_ref2.名字;
    变量 _options$offset为options.offset, offset2为_options$offset === void 0 ? [0, 0] : _options$offset;
    变量 data为placements.reduce(函数(acc, placement) {
      acc[placement]为distanceAndSkiddingToXY(placement, state.rects, offset2);
      返回 acc;
    }, {});
    变量 _data$state$placement为data[state.placement], x为_data$state$placement.x, y为_data$state$placement.y;
    如果 (state.mod如果iersData.popperOffsets 不= null) {
      state.mod如果iersData.popperOffsets.x += x;
      state.mod如果iersData.popperOffsets.y += y;
    }
    state.mod如果iersData[名字]为data;
  }
  变量 offset$1为{
    名字: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: offset
  };

  函数 popperOffsets(_ref) {
    变量 state为_ref.state, 名字为_ref.名字;
    state.mod如果iersData[名字]为computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: "absolute",
      placement: state.placement
    });
  }
  变量 popperOffsets$1为{
    名字: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {}
  };

  函数 getAltAxis(axis) {
    返回 axis === "x" ? "y" : "x";
  }

  函数 preventOverflow(_ref) {
    变量 state为_ref.state, options为_ref.options, 名字为_ref.名字;
    变量 _options$mainAxis为options.mainAxis, checkMainAxis为_options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis为options.altAxis, checkAltAxis为_options$altAxis === void 0 ? false : _options$altAxis, boundary为options.boundary, rootBoundary为options.rootBoundary, altBoundary为options.altBoundary, padding为options.padding, _options$tether为options.tether, tether为_options$tether === void 0 ? true : _options$tether, _options$tetherOffset为options.tetherOffset, tetherOffset为_options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    变量 overflow为detectOverflow(state, {
      boundary,
      rootBoundary,
      padding,
      altBoundary
    });
    变量 basePlacement为getBasePlacement(state.placement);
    变量 变量iation为getVariation(state.placement);
    变量 isBasePlacement为不变量iation;
    变量 mainAxis为getMainAxisFromPlacement(basePlacement);
    变量 altAxis为getAltAxis(mainAxis);
    变量 popperOffsets为state.mod如果iersData.popperOffsets;
    变量 referenceRect为state.rects.reference;
    变量 popperRect为state.rects.popper;
    变量 tetherOffsetValue为类型是 tetherOffset === "函数" ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    变量 normalizedTetherOffsetValue为类型是 tetherOffsetValue === "number" ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    变量 offsetMod如果ierState为state.mod如果iersData.offset ? state.mod如果iersData.offset[state.placement] : null;
    变量 data为{
      x: 0,
      y: 0
    };
    如果 (不popperOffsets) {
      返回;
    }
    如果 (checkMainAxis) {
      变量 _offsetMod如果ierState$;
      变量 mainSide为mainAxis === "y" ? top : left;
      变量 altSide为mainAxis === "y" ? bottom : right;
      变量 len为mainAxis === "y" ? "height" : "宽度";
      变量 offset为popperOffsets[mainAxis];
      变量 min为offset + overflow[mainSide];
      变量 max为offset - overflow[altSide];
      变量 additive为tether ? -popperRect[len] / 2 : 0;
      变量 minLen为变量iation === start ? referenceRect[len] : popperRect[len];
      变量 maxLen为变量iation === start ? -popperRect[len] : -referenceRect[len];
      变量 arrowElement为state.elements.arrow;
      变量 arrowRect为tether 与 arrowElement ? getLayoutRect(arrowElement) : {
        宽度: 0,
        height: 0
      };
      变量 arrowPaddingObject为state.mod如果iersData["arrow#persistent"] ? state.mod如果iersData["arrow#persistent"].padding : getFreshSideObject();
      变量 arrowPaddingMin为arrowPaddingObject[mainSide];
      变量 arrowPaddingMax为arrowPaddingObject[altSide];
      变量 arrowLen为within(0, referenceRect[len], arrowRect[len]);
      变量 minOffset为isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      变量 maxOffset为isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      变量 arrowOffsetParent为state.elements.arrow 与 getOffsetParent(state.elements.arrow);
      变量 clientOffset为arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop 或 0 : arrowOffsetParent.clientLeft 或 0 : 0;
      变量 offsetMod如果ierValue为(_offsetMod如果ierState$为offsetMod如果ierState == null ? void 0 : offsetMod如果ierState[mainAxis]) 不= null ? _offsetMod如果ierState$ : 0;
      变量 tetherMin为offset + minOffset - offsetMod如果ierValue - clientOffset;
      变量 tetherMax为offset + maxOffset - offsetMod如果ierValue;
      变量 preventedOffset为within(tether ? min$1(min, tetherMin) : min, offset, tether ? max$1(max, tetherMax) : max);
      popperOffsets[mainAxis]为preventedOffset;
      data[mainAxis]为preventedOffset - offset;
    }
    如果 (checkAltAxis) {
      变量 _offsetMod如果ierState$2;
      变量 _mainSide为mainAxis === "x" ? top : left;
      变量 _altSide为mainAxis === "x" ? bottom : right;
      变量 _offset为popperOffsets[altAxis];
      变量 _len为altAxis === "y" ? "height" : "宽度";
      变量 _min为_offset + overflow[_mainSide];
      变量 _max为_offset - overflow[_altSide];
      变量 isOriginSide为[top, left].indexOf(basePlacement) 不== -1;
      变量 _offsetMod如果ierValue为(_offsetMod如果ierState$2为offsetMod如果ierState == null ? void 0 : offsetMod如果ierState[altAxis]) 不= null ? _offsetMod如果ierState$2 : 0;
      变量 _tetherMin为isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetMod如果ierValue + normalizedTetherOffsetValue.altAxis;
      变量 _tetherMax为isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetMod如果ierValue - normalizedTetherOffsetValue.altAxis : _max;
      变量 _preventedOffset为tether 与 isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets[altAxis]为_preventedOffset;
      data[altAxis]为_preventedOffset - _offset;
    }
    state.mod如果iersData[名字]为data;
  }
  变量 preventOverflow$1为{
    名字: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: ["offset"]
  };

  函数 getHTMLElementScroll(element) {
    返回 {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  函数 getNodeScroll(node) {
    如果 (node === getWindow(node) 或 不isHTMLElement(node)) {
      返回 getWindowScroll(node);
    } 否则 {
      返回 getHTMLElementScroll(node);
    }
  }

  函数 isElementScaled(element) {
    变量 rect为element.getBoundingClientRect();
    变量 scaleX为round(rect.宽度) / element.offsetWidth 或 1;
    变量 scaleY为round(rect.height) / element.offsetHeight 或 1;
    返回 scaleX 不== 1 或 scaleY 不== 1;
  }
  函数 getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    如果 (isFixed === void 0) {
      isFixed为false;
    }
    变量 isOffsetParentAnElement为isHTMLElement(offsetParent);
    变量 offsetParentIsScaled为isHTMLElement(offsetParent) 与 isElementScaled(offsetParent);
    变量 documentElement为getDocumentElement(offsetParent);
    变量 rect为getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);
    变量 scroll为{
      scrollLeft: 0,
      scrollTop: 0
    };
    变量 offsets为{
      x: 0,
      y: 0
    };
    如果 (isOffsetParentAnElement 或 不isOffsetParentAnElement 与 不isFixed) {
      如果 (getNodeName(offsetParent) 不== "主体" 或 isScrollParent(documentElement)) {
        scroll为getNodeScroll(offsetParent);
      }
      如果 (isHTMLElement(offsetParent)) {
        offsets为getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } 否则 如果 (documentElement) {
        offsets.x为getWindowScrollBarX(documentElement);
      }
    }
    返回 {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      宽度: rect.宽度,
      height: rect.height
    };
  }

  函数 order(mod如果iers) {
    变量 map为/* @__PURE__ */ new Map();
    变量 visited为/* @__PURE__ */ new Set();
    变量 result为[];
    mod如果iers.变量循环Each(函数(mod如果ier) {
      map.set(mod如果ier.名字, mod如果ier);
    });
    函数 sort(mod如果ier) {
      visited.add(mod如果ier.名字);
      变量 requires为[].concat(mod如果ier.requires 或 [], mod如果ier.requiresIfExists 或 []);
      requires.变量循环Each(函数(dep) {
        如果 (不visited.has(dep)) {
          变量 depMod如果ier为map.get(dep);
          如果 (depMod如果ier) {
            sort(depMod如果ier);
          }
        }
      });
      result.push(mod如果ier);
    }
    mod如果iers.变量循环Each(函数(mod如果ier) {
      如果 (不visited.has(mod如果ier.名字)) {
        sort(mod如果ier);
      }
    });
    返回 result;
  }
  函数 orderMod如果iers(mod如果iers) {
    变量 orderedMod如果iers为order(mod如果iers);
    返回 mod如果ierPhases.reduce(函数(acc, phase) {
      返回 acc.concat(orderedMod如果iers.filter(函数(mod如果ier) {
        返回 mod如果ier.phase === phase;
      }));
    }, []);
  }

  函数 debounce(fn) {
    变量 pending;
    返回 函数() {
      如果 (不pending) {
        pending为new Promise(函数(resolve) {
          Promise.resolve().then(函数() {
            pending为void 0;
            resolve(fn());
          });
        });
      }
      返回 pending;
    };
  }

  函数 mergeByName(mod如果iers) {
    变量 merged为mod如果iers.reduce(函数(merged2, current) {
      变量 existing为merged2[current.名字];
      merged2[current.名字]为existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      返回 merged2;
    }, {});
    返回 Object.keys(merged).map(函数(key) {
      返回 merged[key];
    });
  }

  变量 DEFAULT_OPTIONS为{
    placement: "bottom",
    mod如果iers: [],
    strategy: "absolute"
  };
  函数 areValidElements() {
    变量循环 (变量 _len为arguments.长度, args为new Array(_len), _key为0; _key < _len; _key加一) {
      args[_key]为arguments[_key];
    }
    返回 不args.some(函数(element) {
      返回 不(element 与 类型是 element.getBoundingClientRect === "函数");
    });
  }
  函数 popperGenerator(generatorOptions) {
    如果 (generatorOptions === void 0) {
      generatorOptions为{};
    }
    变量 _generatorOptions为generatorOptions, _generatorOptions$def为_generatorOptions.defaultMod如果iers, defaultMod如果iers为_generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2为_generatorOptions.defaultOptions, defaultOptions为_generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    返回 函数 createPopper2(reference, popper, options) {
      如果 (options === void 0) {
        options为defaultOptions;
      }
      变量 state为{
        placement: "bottom",
        orderedMod如果iers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        mod如果iersData: {},
        elements: {
          reference,
          popper
        },
        attributes: {},
        styles: {}
      };
      变量 effectCleanupFns为[];
      变量 isDestroyed为false;
      变量 instance为{
        state,
        setOptions: 函数 setOptions(setOptionsAction) {
          变量 options2为类型是 setOptionsAction === "函数" ? setOptionsAction(state.options) : setOptionsAction;
          cleanupMod如果ierEffects();
          state.options为Object.assign({}, defaultOptions, state.options, options2);
          state.scrollParents为{
            reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
            popper: listScrollParents(popper)
          };
          变量 orderedMod如果iers为orderMod如果iers(mergeByName([].concat(defaultMod如果iers, state.options.mod如果iers)));
          state.orderedMod如果iers为orderedMod如果iers.filter(函数(m) {
            返回 m.enabled;
          });
          runMod如果ierEffects();
          返回 instance.update();
        },
        变量循环ceUpdate: 函数 变量循环ceUpdate() {
          如果 (isDestroyed) {
            返回;
          }
          变量 _state$elements为state.elements, reference2为_state$elements.reference, popper2为_state$elements.popper;
          如果 (不areValidElements(reference2, popper2)) {
            返回;
          }
          state.rects为{
            reference: getCompositeRect(reference2, getOffsetParent(popper2), state.options.strategy === "fixed"),
            popper: getLayoutRect(popper2)
          };
          state.reset为false;
          state.placement为state.options.placement;
          state.orderedMod如果iers.变量循环Each(函数(mod如果ier) {
            返回 state.mod如果iersData[mod如果ier.名字]为Object.assign({}, mod如果ier.data);
          });
          变量循环 (变量 index为0; index < state.orderedMod如果iers.长度; index加一) {
            如果 (state.reset === true) {
              state.reset为false;
              index为-1;
              continue;
            }
            变量 _state$orderedMod如果ie为state.orderedMod如果iers[index], fn为_state$orderedMod如果ie.fn, _state$orderedMod如果ie2为_state$orderedMod如果ie.options, _options为_state$orderedMod如果ie2 === void 0 ? {} : _state$orderedMod如果ie2, 名字为_state$orderedMod如果ie.名字;
            如果 (类型是 fn === "函数") {
              state为fn({
                state,
                options: _options,
                名字,
                instance
              }) 或 state;
            }
          }
        },
        update: debounce(函数() {
          返回 new Promise(函数(resolve) {
            instance.变量循环ceUpdate();
            resolve(state);
          });
        }),
        destroy: 函数 destroy() {
          cleanupMod如果ierEffects();
          isDestroyed为true;
        }
      };
      如果 (不areValidElements(reference, popper)) {
        返回 instance;
      }
      instance.setOptions(options).then(函数(state2) {
        如果 (不isDestroyed 与 options.onFirstUpdate) {
          options.onFirstUpdate(state2);
        }
      });
      函数 runMod如果ierEffects() {
        state.orderedMod如果iers.变量循环Each(函数(_ref3) {
          变量 名字为_ref3.名字, _ref3$options为_ref3.options, options2为_ref3$options === void 0 ? {} : _ref3$options, effect为_ref3.effect;
          如果 (类型是 effect === "函数") {
            变量 cleanupFn为effect({
              state,
              名字,
              instance,
              options: options2
            });
            变量 noopFn为函数 noopFn2() {
            };
            effectCleanupFns.push(cleanupFn 或 noopFn);
          }
        });
      }
      函数 cleanupMod如果ierEffects() {
        effectCleanupFns.变量循环Each(函数(fn) {
          返回 fn();
        });
        effectCleanupFns为[];
      }
      返回 instance;
    };
  }

  变量 defaultMod如果iers为[eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
  变量 createPopper为/* @__PURE__ */ popperGenerator({
    defaultMod如果iers
  });

  常量 POSITIONING_STRATEGIES为["fixed", "absolute"];
  常量 usePopperCoreConfigProps为buildProps({
    boundariesPadding: {
      type: Number,
      default: 0
    },
    fallbackPlacements: {
      type: definePropType(Array),
      default: () => []
    },
    gpuAcceleration: {
      type: Boolean,
      default: true
    },
    offset: {
      type: Number,
      default: 12
    },
    placement: {
      type: String,
      values: placements,
      default: "bottom"
    },
    popperOptions: {
      type: definePropType(Object),
      default: () => ({})
    },
    strategy: {
      type: String,
      values: POSITIONING_STRATEGIES,
      default: "absolute"
    }
  });
  常量 usePopperContentProps为buildProps({
    ...usePopperCoreConfigProps,
    style: { type: definePropType([String, Array, Object]) },
    className: { type: definePropType([String, Array, Object]) },
    effect: {
      type: String,
      default: "dark"
    },
    visible: Boolean,
    enterable: {
      type: Boolean,
      default: true
    },
    pure: Boolean,
    popperClass: {
      type: definePropType([String, Array, Object])
    },
    popperStyle: {
      type: definePropType([String, Array, Object])
    },
    referenceEl: {
      type: definePropType(Object)
    },
    stopPopperMouseEvent: {
      type: Boolean,
      default: true
    },
    zIndex: Number
  });

  常量 buildPopperOptions为(props, arrowProps) => {
    常量 { placement, strategy, popperOptions }为props;
    常量 options为{
      placement,
      strategy,
      ...popperOptions,
      mod如果iers: genMod如果iers(props)
    };
    attachArrow(options, arrowProps);
    deriveExtraMod如果iers(options, popperOptions == null ? void 0 : popperOptions.mod如果iers);
    返回 options;
  };
  常量 unwrapMeasurableEl为($el) => {
    如果 (不isClient)
      返回;
    返回 unrefElement($el);
  };
  函数 genMod如果iers(options) {
    常量 { offset, gpuAcceleration, fallbackPlacements }为options;
    返回 [
      {
        名字: "offset",
        options: {
          offset: [0, offset 不= null ? offset : 12]
        }
      },
      {
        名字: "preventOverflow",
        options: {
          padding: {
            top: 2,
            bottom: 2,
            left: 5,
            right: 5
          }
        }
      },
      {
        名字: "flip",
        options: {
          padding: 5,
          fallbackPlacements: fallbackPlacements 不= null ? fallbackPlacements : []
        }
      },
      {
        名字: "computeStyles",
        options: {
          gpuAcceleration,
          adaptive: gpuAcceleration
        }
      }
    ];
  }
  函数 attachArrow(options, { arrowEl, arrowOffset }) {
    options.mod如果iers.push({
      名字: "arrow",
      options: {
        element: arrowEl,
        padding: arrowOffset 不= null ? arrowOffset : 5
      }
    });
  }
  函数 deriveExtraMod如果iers(options, mod如果iers) {
    如果 (mod如果iers) {
      options.mod如果iers为[...options.mod如果iers, ...mod如果iers 不= null ? mod如果iers : []];
    }
  }

  常量 __default__$F为{
    名字: "ElPopperContent"
  };
  常量 _sfc_main$26为/* @__PURE__ */ vue.defineComponent({
    ...__default__$F,
    props: usePopperContentProps,
    emits: ["mouseenter", "mouseleave"],
    setup(__props, { expose }) {
      常量 props为__props;
      常量 { popperInstanceRef, 上下文Ref, triggerRef }为vue.inject(POPPER_INJECTION_KEY, void 0);
      常量 { nextZIndex }为useZIndex();
      常量 ns为useNamespace("popper");
      常量 popperContentRef为vue.ref();
      常量 arrowRef为vue.ref();
      常量 arrowOffset为vue.ref();
      vue.provide(POPPER_CONTENT_INJECTION_KEY, {
        arrowRef,
        arrowOffset
      });
      常量 上下文ZIndex为vue.ref(props.zIndex 或 nextZIndex());
      常量 computedReference为vue.computed(() => unwrapMeasurableEl(props.referenceEl) 或 vue.unref(triggerRef));
      常量 上下文Style为vue.computed(() => [{ zIndex: vue.unref(上下文ZIndex) }, props.popperStyle]);
      常量 上下文Class为vue.computed(() => [
        ns.b(),
        ns.is("pure", props.pure),
        ns.is(props.effect),
        props.popperClass
      ]);
      常量 createPopperInstance为({ referenceEl, popperContentEl, arrowEl }) => {
        常量 options为buildPopperOptions(props, {
          arrowEl,
          arrowOffset: vue.unref(arrowOffset)
        });
        返回 createPopper(referenceEl, popperContentEl, options);
      };
      常量 updatePopper为() => {
        变量 _a;
        (_a为vue.unref(popperInstanceRef)) == null ? void 0 : _a.update();
        上下文ZIndex.value为props.zIndex 或 上下文ZIndex.value 或 nextZIndex();
      };
      常量 togglePopperAlive为() => {
        变量 _a, _b;
        常量 monitorable为{ 名字: "eventListeners", enabled: props.visible };
        (_b为(_a为vue.unref(popperInstanceRef)) == null ? void 0 : _a.setOptions) == null ? void 0 : _b.call(_a, (options) => ({
          ...options,
          mod如果iers: [...options.mod如果iers 或 [], monitorable]
        }));
        updatePopper();
      };
      vue.onMounted(() => {
        让 updateHandle;
        vue.watch(computedReference, (referenceEl) => {
          变量 _a;
          updateHandle == null ? void 0 : updateHandle();
          常量 popperInstance为vue.unref(popperInstanceRef);
          (_a为popperInstance == null ? void 0 : popperInstance.destroy) == null ? void 0 : _a.call(popperInstance);
          如果 (referenceEl) {
            常量 popperContentEl为vue.unref(popperContentRef);
            上下文Ref.value为popperContentEl;
            popperInstanceRef.value为createPopperInstance({
              referenceEl,
              popperContentEl,
              arrowEl: vue.unref(arrowRef)
            });
            updateHandle为vue.watch(() => referenceEl.getBoundingClientRect(), () => updatePopper(), {
              immediate: true
            });
          } 否则 {
            popperInstanceRef.value为void 0;
          }
        }, {
          immediate: true
        });
        vue.watch(() => props.visible, togglePopperAlive, { immediate: true });
        vue.watch(() => buildPopperOptions(props, {
          arrowEl: vue.unref(arrowRef),
          arrowOffset: vue.unref(arrowOffset)
        }), (option) => {
          变量 _a;
          返回 (_a为popperInstanceRef.value) == null ? void 0 : _a.setOptions(option);
        });
      });
      expose({
        popperContentRef,
        popperInstanceRef,
        updatePopper,
        上下文Style
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "popperContentRef",
          ref: popperContentRef,
          style: vue.normalizeStyle(vue.unref(上下文Style)),
          class: vue.normalizeClass(vue.unref(上下文Class)),
          role: "tooltip",
          onMouseenter: _cache[0] 或 (_cache[0]为(e) => _ctx.$emit("mouseenter", e)),
          onMouseleave: _cache[1] 或 (_cache[1]为(e) => _ctx.$emit("mouseleave", e))
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 38);
      };
    }
  });
  变量 ElPopperContent为/* @__PURE__ */ _输出出口_sfc(_sfc_main$26, [["__file", "上下文.vue"]]);

  常量 Effect为{
    LIGHT: "light",
    DARK: "dark"
  };
  常量 usePopperProps为buildProps({
    autoClose: {
      type: Number,
      default: 0
    },
    cutoff: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    }
  });

  函数 useDeprecateAppendToBody(scope, 从) {
    常量 vm为vue.getCurrentInstance();
    常量 compatTeleported为vue.computed(() => {
      返回 isBoolean(vm.props[从]) ? vm.props[从] : vm.props.teleported;
    });
    useDeprecated({
      scope,
      从,
      replacement: "teleported",
      version: "2.1.0",
      ref: "https://element-plus.org/en-US/component/tooltip.超文本标记#attributes"
    }, vue.computed(() => isBoolean(vm.props[从])));
    返回 {
      compatTeleported
    };
  }

  常量 ElPopper为withInstall(Popper);

  常量 _sfc_main$25为vue.defineComponent({
    名字: "ElVisuallyHidden",
    props: {
      style: {
        type: [String, Object, Array]
      }
    },
    setup(props) {
      返回 {
        computedStyle: vue.computed(() => {
          返回 [
            props.style,
            {
              position: "absolute",
              border: 0,
              宽度: 1,
              height: 1,
              padding: 0,
              margin: -1,
              overflow: "hidden",
              clip: "rect(0, 0, 0, 0)",
              whiteSpace: "nowrap",
              wordWrap: "normal"
            }
          ];
        })
      };
    }
  });
  函数 _sfc_render$1n(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("span", vue.mergeProps(_ctx.$attrs, { style: _ctx.computedStyle }), [
      vue.renderSlot(_ctx.$slots, "default")
    ], 16);
  }
  变量 ElVisuallyHidden为/* @__PURE__ */ _输出出口_sfc(_sfc_main$25, [["render", _sfc_render$1n], ["__file", "visual-hidden.vue"]]);

  常量 useTooltipContentProps为buildProps({
    ...useDelayedToggleProps,
    ...usePopperContentProps,
    appendTo: {
      type: definePropType([String, Object]),
      default: POPPER_CONTAINER_SELECTOR
    },
    上下文: {
      type: String,
      default: ""
    },
    rawContent: {
      type: Boolean,
      default: false
    },
    persistent: Boolean,
    ariaLabel: String,
    visible: {
      type: definePropType(Boolean),
      default: null
    },
    transition: {
      type: String,
      default: "el-fade-in-linear"
    },
    teleported: {
      type: Boolean,
      default: true
    },
    disabled: {
      type: Boolean
    }
  });
  常量 useTooltipTriggerProps为buildProps({
    ...usePopperTriggerProps,
    disabled: Boolean,
    trigger: {
      type: definePropType([String, Array]),
      default: "hover"
    }
  });
  常量 useTooltipProps为buildProps({
    openDelay: {
      type: Number
    },
    visibleArrow: {
      type: Boolean,
      default: void 0
    },
    hideAfter: {
      type: Number,
      default: 200
    },
    showArrow: {
      type: Boolean,
      default: true
    }
  });

  常量 TOOLTIP_INJECTION_KEY为Symbol("elTooltip");

  常量 _sfc_main$24为vue.defineComponent({
    名字: "ElTooltipContent",
    components: {
      ElPopperContent,
      ElVisuallyHidden
    },
    inheritAttrs: false,
    props: useTooltipContentProps,
    setup(props) {
      常量 上下文Ref为vue.ref(null);
      常量 整数ermediateOpen为vue.ref(false);
      常量 entering为vue.ref(false);
      常量 leaving为vue.ref(false);
      常量 destroyed为vue.ref(false);
      常量 {
        controlled,
        id,
        open,
        trigger,
        onClose,
        onOpen,
        onShow,
        onHide,
        onBe变量循环eShow,
        onBe变量循环eHide
      }为vue.inject(TOOLTIP_INJECTION_KEY, void 0);
      常量 persistentRef为vue.computed(() => {
        返回 props.persistent;
      });
      vue.onBe变量循环eUnmount(() => {
        destroyed.value为true;
      });
      常量 shouldRender为vue.computed(() => {
        返回 vue.unref(persistentRef) ? true : vue.unref(open);
      });
      常量 shouldShow为vue.computed(() => {
        返回 props.disabled ? false : vue.unref(open);
      });
      常量 上下文Style为vue.computed(() => {
        变量 _a;
        返回 (_a为props.style) 不= null ? _a : {};
      });
      常量 ariaHidden为vue.computed(() => 不vue.unref(open));
      useEscapeKeydown(onClose);
      常量 onTransitionLeave为() => {
        onHide();
      };
      常量 stopWhenControlled为() => {
        如果 (vue.unref(controlled))
          返回 true;
      };
      常量 onContentEnter为composeEventHandlers(stopWhenControlled, () => {
        如果 (props.enterable 与 vue.unref(trigger) === "hover") {
          onOpen();
        }
      });
      常量 onContentLeave为composeEventHandlers(stopWhenControlled, () => {
        如果 (vue.unref(trigger) === "hover") {
          onClose();
        }
      });
      常量 onBe变量循环eEnter为() => {
        变量 _a, _b;
        (_b为(_a为上下文Ref.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);
        onBe变量循环eShow == null ? void 0 : onBe变量循环eShow();
      };
      常量 onBe变量循环eLeave为() => {
        onBe变量循环eHide == null ? void 0 : onBe变量循环eHide();
      };
      常量 onAfterShow为() => {
        onShow();
      };
      让 stopHandle;
      vue.watch(() => vue.unref(open), (val) => {
        如果 (val) {
          stopHandle为onClickOutside(vue.computed(() => {
            变量 _a;
            返回 (_a为上下文Ref.value) == null ? void 0 : _a.popperContentRef;
          }), () => {
            如果 (vue.unref(controlled))
              返回;
            常量 $trigger为vue.unref(trigger);
            如果 ($trigger 不== "hover") {
              onClose();
            }
          });
        } 否则 {
          stopHandle == null ? void 0 : stopHandle();
        }
      }, {
        flush: "post"
      });
      返回 {
        ariaHidden,
        entering,
        leaving,
        id,
        整数ermediateOpen,
        上下文Style,
        上下文Ref,
        destroyed,
        shouldRender,
        shouldShow,
        open,
        onAfterShow,
        onBe变量循环eEnter,
        onBe变量循环eLeave,
        onContentEnter,
        onContentLeave,
        onTransitionLeave
      };
    }
  });
  函数 _sfc_render$1m(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_visually_hidden为vue.resolveComponent("el-visually-hidden");
    常量 _component_el_popper_上下文为vue.resolveComponent("el-popper-上下文");
    返回 vue.openBlock(), vue.createBlock(vue.Teleport, {
      disabled: 不_ctx.teleported,
      to: _ctx.appendTo
    }, [
      vue.createVNode(vue.Transition, {
        名字: _ctx.transition,
        onAfterLeave: _ctx.onTransitionLeave,
        onBe变量循环eEnter: _ctx.onBe变量循环eEnter,
        onAfterEnter: _ctx.onAfterShow,
        onBe变量循环eLeave: _ctx.onBe变量循环eLeave
      }, {
        default: vue.withCtx(() => [
          _ctx.shouldRender ? vue.withDirectives((vue.openBlock(), vue.createBlock(_component_el_popper_上下文, vue.mergeProps({
            key: 0,
            ref: "上下文Ref"
          }, _ctx.$attrs, {
            "aria-hidden": _ctx.ariaHidden,
            "boundaries-padding": _ctx.boundariesPadding,
            "fallback-placements": _ctx.fallbackPlacements,
            "gpu-acceleration": _ctx.gpuAcceleration,
            offset: _ctx.offset,
            placement: _ctx.placement,
            "popper-options": _ctx.popperOptions,
            strategy: _ctx.strategy,
            effect: _ctx.effect,
            enterable: _ctx.enterable,
            pure: _ctx.pure,
            "popper-class": _ctx.popperClass,
            "popper-style": [_ctx.popperStyle, _ctx.上下文Style],
            "reference-el": _ctx.referenceEl,
            visible: _ctx.shouldShow,
            "z-index": _ctx.zIndex,
            onMouseenter: _ctx.onContentEnter,
            onMouseleave: _ctx.onContentLeave
          }), {
            default: vue.withCtx(() => [
              vue.createCommentVNode(" Workaround bug #6378 "),
              不_ctx.destroyed ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
                vue.renderSlot(_ctx.$slots, "default"),
                vue.createVNode(_component_el_visually_hidden, {
                  id: _ctx.id,
                  role: "tooltip"
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode(vue.toDisplayString(_ctx.ariaLabel), 1)
                  ]),
                  _: 1
                }, 8, ["id"])
              ], 64)) : vue.createCommentVNode("v-如果", true)
            ]),
            _: 3
          }, 16, ["aria-hidden", "boundaries-padding", "fallback-placements", "gpu-acceleration", "offset", "placement", "popper-options", "strategy", "effect", "enterable", "pure", "popper-class", "popper-style", "reference-el", "visible", "z-index", "onMouseenter", "onMouseleave"])), [
            [vue.vShow, _ctx.shouldShow]
          ]) : vue.createCommentVNode("v-如果", true)
        ]),
        _: 3
      }, 8, ["名字", "onAfterLeave", "onBe变量循环eEnter", "onAfterEnter", "onBe变量循环eLeave"])
    ], 8, ["disabled", "to"]);
  }
  变量 ElTooltipContent为/* @__PURE__ */ _输出出口_sfc(_sfc_main$24, [["render", _sfc_render$1m], ["__file", "上下文.vue"]]);

  常量 isTriggerType为(trigger, type) => {
    如果 (isArray(trigger)) {
      返回 trigger.includes(type);
    }
    返回 trigger === type;
  };
  常量 whenTrigger为(trigger, type, handler) => {
    返回 (e) => {
      isTriggerType(vue.unref(trigger), type) 与 handler(e);
    };
  };

  常量 _sfc_main$23为vue.defineComponent({
    名字: "ElTooltipTrigger",
    components: {
      ElPopperTrigger
    },
    props: useTooltipTriggerProps,
    setup(props) {
      常量 ns为useNamespace("tooltip");
      常量 { controlled, id, open, onOpen, onClose, onToggle }为vue.inject(TOOLTIP_INJECTION_KEY, void 0);
      常量 triggerRef为vue.ref(null);
      常量 stopWhenControlledOrDisabled为() => {
        如果 (vue.unref(controlled) 或 props.disabled) {
          返回 true;
        }
      };
      常量 trigger为vue.toRef(props, "trigger");
      常量 onMouseenter为composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "hover", onOpen));
      常量 onMouseleave为composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "hover", onClose));
      常量 onClick为composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "点击", (e) => {
        如果 (e.button === 0) {
          onToggle(e);
        }
      }));
      常量 onFocus为composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "focus", onOpen));
      常量 onBlur为composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "focus", onClose));
      常量 onContextMenu为composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "contextmenu", (e) => {
        e.preventDefault();
        onToggle(e);
      }));
      常量 onKeydown为composeEventHandlers(stopWhenControlledOrDisabled, (e) => {
        常量 { code }为e;
        如果 (code === EVENT_CODE.enter 或 code === EVENT_CODE.space) {
          onToggle(e);
        }
      });
      返回 {
        onBlur,
        onContextMenu,
        onFocus,
        onMouseenter,
        onMouseleave,
        onClick,
        onKeydown,
        open,
        id,
        triggerRef,
        ns
      };
    }
  });
  函数 _sfc_render$1l(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_popper_trigger为vue.resolveComponent("el-popper-trigger");
    返回 vue.openBlock(), vue.createBlock(_component_el_popper_trigger, {
      id: _ctx.id,
      "virtual-ref": _ctx.virtualRef,
      open: _ctx.open,
      "virtual-triggering": _ctx.virtualTriggering,
      class: vue.normalizeClass(_ctx.ns.e("trigger")),
      onBlur: _ctx.onBlur,
      onClick: _ctx.onClick,
      onContextmenu: _ctx.onContextMenu,
      onFocus: _ctx.onFocus,
      onMouseenter: _ctx.onMouseenter,
      onMouseleave: _ctx.onMouseleave,
      onKeydown: _ctx.onKeydown
    }, {
      default: vue.withCtx(() => [
        vue.renderSlot(_ctx.$slots, "default")
      ]),
      _: 3
    }, 8, ["id", "virtual-ref", "open", "virtual-triggering", "class", "onBlur", "onClick", "onContextmenu", "onFocus", "onMouseenter", "onMouseleave", "onKeydown"]);
  }
  变量 ElTooltipTrigger为/* @__PURE__ */ _输出出口_sfc(_sfc_main$23, [["render", _sfc_render$1l], ["__file", "trigger.vue"]]);

  常量 { useModelToggleProps, useModelToggle, useModelToggleEmits }为createModelToggleComposable("visible");
  常量 _sfc_main$22为vue.defineComponent({
    名字: "ElTooltip",
    components: {
      ElPopper,
      ElPopperArrow,
      ElTooltipContent,
      ElTooltipTrigger
    },
    props: {
      ...useModelToggleProps,
      ...useTooltipContentProps,
      ...useTooltipTriggerProps,
      ...usePopperArrowProps,
      ...useTooltipProps
    },
    emits: [...useModelToggleEmits, "be变量循环e-show", "be变量循环e-hide", "show", "hide"],
    setup(props, { emit }) {
      usePopperContainer();
      常量 compatShowAfter为vue.computed(() => {
        如果 (不isUndefined(props.openDelay)) ;
        返回 props.openDelay 或 props.showAfter;
      });
      常量 compatShowArrow为vue.computed(() => {
        如果 (不isUndefined(props.visibleArrow)) ;
        返回 isBoolean(props.visibleArrow) ? props.visibleArrow : props.showArrow;
      });
      常量 id为useId();
      常量 popperRef为vue.ref(null);
      常量 updatePopper为() => {
        变量 _a;
        常量 popperComponent为vue.unref(popperRef);
        如果 (popperComponent) {
          (_a为popperComponent.popperInstanceRef) == null ? void 0 : _a.update();
        }
      };
      常量 open为vue.ref(false);
      常量 { show, hide }为useModelToggle({
        indicator: open
      });
      常量 { onOpen, onClose }为useDelayedToggle({
        showAfter: compatShowAfter,
        hideAfter: vue.toRef(props, "hideAfter"),
        open: show,
        close: hide
      });
      常量 controlled为vue.computed(() => isBoolean(props.visible));
      vue.provide(TOOLTIP_INJECTION_KEY, {
        controlled,
        id,
        open: vue.readonly(open),
        trigger: vue.toRef(props, "trigger"),
        onOpen,
        onClose,
        onToggle: () => {
          如果 (vue.unref(open)) {
            onClose();
          } 否则 {
            onOpen();
          }
        },
        onShow: () => {
          emit("show");
        },
        onHide: () => {
          emit("hide");
        },
        onBe变量循环eShow: () => {
          emit("be变量循环e-show");
        },
        onBe变量循环eHide: () => {
          emit("be变量循环e-hide");
        },
        updatePopper
      });
      vue.watch(() => props.disabled, (disabled) => {
        如果 (disabled 与 open.value) {
          open.value为false;
        }
      });
      返回 {
        compatShowAfter,
        compatShowArrow,
        popperRef,
        open,
        hide,
        updatePopper,
        onOpen,
        onClose
      };
    }
  });
  常量 _hoisted_1$_为["innerHTML"];
  常量 _hoisted_2$E为{ key: 1 };
  函数 _sfc_render$1k(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_tooltip_trigger为vue.resolveComponent("el-tooltip-trigger");
    常量 _component_el_popper_arrow为vue.resolveComponent("el-popper-arrow");
    常量 _component_el_tooltip_上下文为vue.resolveComponent("el-tooltip-上下文");
    常量 _component_el_popper为vue.resolveComponent("el-popper");
    返回 vue.openBlock(), vue.createBlock(_component_el_popper, { ref: "popperRef" }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_el_tooltip_trigger, {
          disabled: _ctx.disabled,
          trigger: _ctx.trigger,
          "virtual-ref": _ctx.virtualRef,
          "virtual-triggering": _ctx.virtualTriggering
        }, {
          default: vue.withCtx(() => [
            _ctx.$slots.default ? vue.renderSlot(_ctx.$slots, "default", { key: 0 }) : vue.createCommentVNode("v-如果", true)
          ]),
          _: 3
        }, 8, ["disabled", "trigger", "virtual-ref", "virtual-triggering"]),
        vue.createVNode(_component_el_tooltip_上下文, {
          "aria-label": _ctx.ariaLabel,
          "boundaries-padding": _ctx.boundariesPadding,
          上下文: _ctx.上下文,
          disabled: _ctx.disabled,
          effect: _ctx.effect,
          enterable: _ctx.enterable,
          "fallback-placements": _ctx.fallbackPlacements,
          "hide-after": _ctx.hideAfter,
          "gpu-acceleration": _ctx.gpuAcceleration,
          offset: _ctx.offset,
          persistent: _ctx.persistent,
          "popper-class": _ctx.popperClass,
          "popper-style": _ctx.popperStyle,
          placement: _ctx.placement,
          "popper-options": _ctx.popperOptions,
          pure: _ctx.pure,
          "raw-上下文": _ctx.rawContent,
          "reference-el": _ctx.referenceEl,
          "show-after": _ctx.compatShowAfter,
          strategy: _ctx.strategy,
          teleported: _ctx.teleported,
          transition: _ctx.transition,
          "z-index": _ctx.zIndex,
          "append-to": _ctx.appendTo
        }, {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "上下文", {}, () => [
              _ctx.rawContent ? (vue.openBlock(), vue.createElementBlock("span", {
                key: 0,
                innerHTML: _ctx.上下文
              }, null, 8, _hoisted_1$_)) : (vue.openBlock(), vue.createElementBlock("span", _hoisted_2$E, vue.toDisplayString(_ctx.上下文), 1))
            ]),
            _ctx.compatShowArrow ? (vue.openBlock(), vue.createBlock(_component_el_popper_arrow, {
              key: 0,
              "arrow-offset": _ctx.arrowOffset
            }, null, 8, ["arrow-offset"])) : vue.createCommentVNode("v-如果", true)
          ]),
          _: 3
        }, 8, ["aria-label", "boundaries-padding", "上下文", "disabled", "effect", "enterable", "fallback-placements", "hide-after", "gpu-acceleration", "offset", "persistent", "popper-class", "popper-style", "placement", "popper-options", "pure", "raw-上下文", "reference-el", "show-after", "strategy", "teleported", "transition", "z-index", "append-to"])
      ]),
      _: 3
    }, 512);
  }
  变量 Tooltip为/* @__PURE__ */ _输出出口_sfc(_sfc_main$22, [["render", _sfc_render$1k], ["__file", "tooltip.vue"]]);

  常量 ElTooltip为withInstall(Tooltip);

  常量 autocomp让eProps为buildProps({
    valueKey: {
      type: String,
      default: "value"
    },
    modelValue: {
      type: [String, Number],
      default: ""
    },
    debounce: {
      type: Number,
      default: 300
    },
    placement: {
      type: definePropType(String),
      values: [
        "top",
        "top-start",
        "top-end",
        "bottom",
        "bottom-start",
        "bottom-end"
      ],
      default: "bottom-start"
    },
    fetchSuggestions: {
      type: definePropType([Function, Array]),
      default: NOOP
    },
    popperClass: {
      type: String,
      default: ""
    },
    triggerOnFocus: {
      type: Boolean,
      default: true
    },
    selectWhenUnmatched: {
      type: Boolean,
      default: false
    },
    hideLoading: {
      type: Boolean,
      default: false
    },
    popperAppendToBody: {
      type: Boolean,
      default: void 0
    },
    teleported: useTooltipContentProps.teleported,
    highlightFirstItem: {
      type: Boolean,
      default: false
    }
  });
  常量 autocomp让eEmits为{
    [UPDATE_MODEL_EVENT]: (value) => isString(value),
    input: (value) => isString(value),
    change: (value) => isString(value),
    focus: (evt) => evt instanceof FocusEvent,
    blur: (evt) => evt instanceof FocusEvent,
    clear: () => true,
    select: (item) => isObject$1(item)
  };

  常量 _hoisted_1$Z为["aria-expanded", "aria-owns"];
  常量 _hoisted_2$D为{ key: 0 };
  常量 _hoisted_3$m为["id", "aria-selected", "onClick"];
  常量 __default__$E为{
    名字: "ElAutocomp让e",
    inheritAttrs: false
  };
  常量 _sfc_main$21为/* @__PURE__ */ vue.defineComponent({
    ...__default__$E,
    props: autocomp让eProps,
    emits: autocomp让eEmits,
    setup(__props, { expose, emit }) {
      常量 props为__props;
      常量 COMPONENT_NAME为"ElAutocomp让e";
      常量 ns为useNamespace("autocomp让e");
      常量 { compatTeleported }为useDeprecateAppendToBody(COMPONENT_NAME, "popperAppendToBody");
      让 isClear为false;
      常量 attrs为useAttrs();
      常量 compAttrs为vue.useAttrs();
      常量 suggestions为vue.ref([]);
      常量 highlightedIndex为vue.ref(-1);
      常量 dropdownWidth为vue.ref("");
      常量 activated为vue.ref(false);
      常量 suggestionDisabled为vue.ref(false);
      常量 loading$1为vue.ref(false);
      常量 inputRef为vue.ref();
      常量 regionRef为vue.ref();
      常量 popperRef为vue.ref();
      常量 listboxRef为vue.ref();
      常量 id为vue.computed(() => {
        返回 ns.b(String(generateId()));
      });
      常量 styles为vue.computed(() => compAttrs.style);
      常量 suggestionVisible为vue.computed(() => {
        常量 isValidData为isArray(suggestions.value) 与 suggestions.value.长度大于0;
        返回 (isValidData 或 loading$1.value) 与 activated.value;
      });
      常量 suggestionLoading为vue.computed(() => {
        返回 不props.hideLoading 与 loading$1.value;
      });
      常量 onSuggestionShow为() => {
        vue.nextTick(() => {
          如果 (suggestionVisible.value) {
            dropdownWidth.value为`${inputRef.value.$el.offsetWidth}px`;
          }
        });
      };
      常量 getData为(queryString) => {
        如果 (suggestionDisabled.value) {
          返回;
        }
        loading$1.value为true;
        常量 cb为(suggestionsArg) => {
          loading$1.value为false;
          如果 (suggestionDisabled.value) {
            返回;
          }
          如果 (isArray(suggestionsArg)) {
            suggestions.value为suggestionsArg;
            highlightedIndex.value为props.highlightFirstItem ? 0 : -1;
          } 否则 {
            抛出Error(COMPONENT_NAME, "autocomp让e suggestions must be an array");
          }
        };
        如果 (isArray(props.fetchSuggestions)) {
          cb(props.fetchSuggestions);
        } 否则 {
          常量 result为props.fetchSuggestions(queryString, cb);
          如果 (isArray(result)) {
            cb(result);
          } 否则 如果 (isPromise(result)) {
            result.then(cb);
          }
        }
      };
      常量 debouncedGetData为debounce$1(getData, props.debounce);
      常量 handleInput为(value) => {
        常量 valuePresented为Boolean(value);
        emit("input", value);
        emit(UPDATE_MODEL_EVENT, value);
        suggestionDisabled.value为false;
        activated.value 或 (activated.value为isClear 与 valuePresented);
        如果 (不props.triggerOnFocus 与 不value) {
          suggestionDisabled.value为true;
          suggestions.value为[];
          返回;
        }
        如果 (isClear 与 valuePresented) {
          isClear为false;
        }
        debouncedGetData(value);
      };
      常量 handleChange为(value) => {
        emit("change", value);
      };
      常量 handleFocus为(evt) => {
        activated.value为true;
        emit("focus", evt);
        如果 (props.triggerOnFocus) {
          debouncedGetData(String(props.modelValue));
        }
      };
      常量 handleBlur为(evt) => {
        emit("blur", evt);
      };
      常量 handleClear为() => {
        activated.value为false;
        isClear为true;
        emit(UPDATE_MODEL_EVENT, "");
        emit("clear");
      };
      常量 handleKeyEnter为() => {
        如果 (suggestionVisible.value 与 highlightedIndex.value >= 0 与 highlightedIndex.value < suggestions.value.长度) {
          handleSelect(suggestions.value[highlightedIndex.value]);
        } 否则 如果 (props.selectWhenUnmatched) {
          emit("select", { value: props.modelValue });
          vue.nextTick(() => {
            suggestions.value为[];
            highlightedIndex.value为-1;
          });
        }
      };
      常量 close为() => {
        activated.value为false;
      };
      常量 focus为() => {
        变量 _a;
        (_a为inputRef.value) == null ? void 0 : _a.focus();
      };
      常量 handleSelect为(item) => {
        emit("input", item[props.valueKey]);
        emit(UPDATE_MODEL_EVENT, item[props.valueKey]);
        emit("select", item);
        vue.nextTick(() => {
          suggestions.value为[];
          highlightedIndex.value为-1;
        });
      };
      常量 highlight为(index) => {
        如果 (不suggestionVisible.value 或 loading$1.value) {
          返回;
        }
        如果 (index < 0) {
          highlightedIndex.value为-1;
          返回;
        }
        如果 (index >= suggestions.value.长度) {
          index为suggestions.value.长度 - 1;
        }
        常量 suggestion为regionRef.value.querySelector(`.${ns.be("suggestion", "wrap")}`);
        常量 suggestionList为suggestion.querySelectorAll(`.${ns.be("suggestion", "list")} li`);
        常量 highlightItem为suggestionList[index];
        常量 scrollTop为suggestion.scrollTop;
        常量 { offsetTop, scrollHeight }为highlightItem;
        如果 (offsetTop + scrollHeight大于scrollTop + suggestion.clientHeight) {
          suggestion.scrollTop += scrollHeight;
        }
        如果 (offsetTop < scrollTop) {
          suggestion.scrollTop -= scrollHeight;
        }
        highlightedIndex.value为index;
        inputRef.value.ref.setAttribute("aria-activedescendant", `${id.value}-item-${highlightedIndex.value}`);
      };
      onClickOutside(listboxRef, close);
      vue.onMounted(() => {
        inputRef.value.ref.setAttribute("role", "textbox");
        inputRef.value.ref.setAttribute("aria-autocomp让e", "list");
        inputRef.value.ref.setAttribute("aria-controls", "id");
        inputRef.value.ref.setAttribute("aria-activedescendant", `${id.value}-item-${highlightedIndex.value}`);
      });
      expose({
        highlightedIndex,
        activated,
        loading: loading$1,
        inputRef,
        popperRef,
        suggestions,
        handleSelect,
        handleKeyEnter,
        focus,
        close,
        highlight
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createBlock(vue.unref(ElTooltip), {
          ref_key: "popperRef",
          ref: popperRef,
          visible: vue.unref(suggestionVisible),
          "onUpdate:visible": _cache[2] 或 (_cache[2]为($event) => vue.isRef(suggestionVisible) ? suggestionVisible.value为$event : null),
          placement: _ctx.placement,
          "fallback-placements": ["bottom-start", "top-start"],
          "popper-class": [vue.unref(ns).e("popper"), _ctx.popperClass],
          teleported: vue.unref(compatTeleported),
          "gpu-acceleration": false,
          pure: "",
          "manual-mode": "",
          effect: "light",
          trigger: "点击",
          transition: `${vue.unref(ns).名字space.value}-zoom-in-top`,
          persistent: "",
          onBe变量循环eShow: onSuggestionShow
        }, {
          上下文: vue.withCtx(() => [
            vue.createElementVNode("div", {
              ref_key: "regionRef",
              ref: regionRef,
              class: vue.normalizeClass([vue.unref(ns).b("suggestion"), vue.unref(ns).is("loading", vue.unref(suggestionLoading))]),
              style: vue.normalizeStyle({ minWidth: dropdownWidth.value, outline: "none" }),
              role: "region"
            }, [
              vue.createVNode(vue.unref(ElScrollbar), {
                id: vue.unref(id),
                tag: "ul",
                "wrap-class": vue.unref(ns).be("suggestion", "wrap"),
                "view-class": vue.unref(ns).be("suggestion", "list"),
                role: "listbox"
              }, {
                default: vue.withCtx(() => [
                  vue.unref(suggestionLoading) ? (vue.openBlock(), vue.createElementBlock("li", _hoisted_2$D, [
                    vue.createVNode(vue.unref(ElIcon), {
                      class: vue.normalizeClass(vue.unref(ns).is("loading"))
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(vue.unref(loading))
                      ]),
                      _: 1
                    }, 8, ["class"])
                  ])) : (vue.openBlock(true), vue.createElementBlock(vue.Fragment, { key: 1 }, vue.renderList(suggestions.value, (item, index) => {
                    返回 vue.openBlock(), vue.createElementBlock("li", {
                      id: `${vue.unref(id)}-item-${index}`,
                      key: index,
                      class: vue.normalizeClass({ highlighted: highlightedIndex.value === index }),
                      role: "option",
                      "aria-selected": highlightedIndex.value === index,
                      onClick: ($event) => handleSelect(item)
                    }, [
                      vue.renderSlot(_ctx.$slots, "default", { item }, () => [
                        vue.createTextVNode(vue.toDisplayString(item[_ctx.valueKey]), 1)
                      ])
                    ], 10, _hoisted_3$m);
                  }), 128))
                ]),
                _: 3
              }, 8, ["id", "wrap-class", "view-class"])
            ], 6)
          ]),
          default: vue.withCtx(() => [
            vue.createElementVNode("div", {
              ref_key: "listboxRef",
              ref: listboxRef,
              class: vue.normalizeClass([vue.unref(ns).b(), _ctx.$attrs.class]),
              style: vue.normalizeStyle(vue.unref(styles)),
              role: "combobox",
              "aria-haspopup": "listbox",
              "aria-expanded": vue.unref(suggestionVisible),
              "aria-owns": vue.unref(id)
            }, [
              vue.createVNode(vue.unref(ElInput), vue.mergeProps({
                ref_key: "inputRef",
                ref: inputRef
              }, vue.unref(attrs), {
                "model-value": _ctx.modelValue,
                onInput: handleInput,
                onChange: handleChange,
                onFocus: handleFocus,
                onBlur: handleBlur,
                onClear: handleClear,
                onKeydown: [
                  _cache[0] 或 (_cache[0]为vue.withKeys(vue.withMod如果iers(($event) => highlight(highlightedIndex.value - 1), ["prevent"]), ["up"])),
                  _cache[1] 或 (_cache[1]为vue.withKeys(vue.withMod如果iers(($event) => highlight(highlightedIndex.value + 1), ["prevent"]), ["down"])),
                  vue.withKeys(handleKeyEnter, ["enter"]),
                  vue.withKeys(close, ["tab"])
                ]
              }), vue.createSlots({ _: 2 }, [
                _ctx.$slots.prepend ? {
                  名字: "prepend",
                  fn: vue.withCtx(() => [
                    vue.renderSlot(_ctx.$slots, "prepend")
                  ])
                } : void 0,
                _ctx.$slots.append ? {
                  名字: "append",
                  fn: vue.withCtx(() => [
                    vue.renderSlot(_ctx.$slots, "append")
                  ])
                } : void 0,
                _ctx.$slots.prefix ? {
                  名字: "prefix",
                  fn: vue.withCtx(() => [
                    vue.renderSlot(_ctx.$slots, "prefix")
                  ])
                } : void 0,
                _ctx.$slots.suffix ? {
                  名字: "suffix",
                  fn: vue.withCtx(() => [
                    vue.renderSlot(_ctx.$slots, "suffix")
                  ])
                } : void 0
              ]), 1040, ["model-value", "onKeydown"])
            ], 14, _hoisted_1$Z)
          ]),
          _: 3
        }, 8, ["visible", "placement", "popper-class", "teleported", "transition"]);
      };
    }
  });
  变量 Autocomp让e为/* @__PURE__ */ _输出出口_sfc(_sfc_main$21, [["__file", "autocomp让e.vue"]]);

  常量 ElAutocomp让e为withInstall(Autocomp让e);

  常量 avatarProps为buildProps({
    size: {
      type: [Number, String],
      values: componentSizes,
      default: "",
      validator: (val) => 类型是 val === "number"
    },
    shape: {
      type: String,
      values: ["circle", "square"],
      default: "circle"
    },
    icon: {
      type: iconPropType
    },
    src: {
      type: String,
      default: ""
    },
    alt: String,
    srcSet: String,
    fit: {
      type: definePropType(String),
      default: "cover"
    }
  });
  常量 avatarEmits为{
    error: (evt) => evt instanceof Event
  };

  常量 _hoisted_1$Y为["src", "alt", "srcset"];
  常量 __default__$D为{
    名字: "ElAvatar"
  };
  常量 _sfc_main$20为/* @__PURE__ */ vue.defineComponent({
    ...__default__$D,
    props: avatarProps,
    emits: avatarEmits,
    setup(__props, { emit }) {
      常量 props为__props;
      常量 ns为useNamespace("avatar");
      常量 hasLoadError为vue.ref(false);
      常量 avatarClass为vue.computed(() => {
        常量 { size, icon, shape }为props;
        常量 classList为[ns.b()];
        如果 (isString(size))
          classList.push(ns.m(size));
        如果 (icon)
          classList.push(ns.m("icon"));
        如果 (shape)
          classList.push(ns.m(shape));
        返回 classList;
      });
      常量 sizeStyle为vue.computed(() => {
        常量 { size }为props;
        返回 isNumber(size) ? {
          "--el-avatar-size": addUnit(size)
        } : void 0;
      });
      常量 fitStyle为vue.computed(() => ({
        objectFit: props.fit
      }));
      vue.watch(() => props.src, () => hasLoadError.value为false);
      函数 handleError(e) {
        hasLoadError.value为true;
        emit("error", e);
      }
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("span", {
          class: vue.normalizeClass(vue.unref(avatarClass)),
          style: vue.normalizeStyle(vue.unref(sizeStyle))
        }, [
          (_ctx.src 或 _ctx.srcSet) 与 不hasLoadError.value ? (vue.openBlock(), vue.createElementBlock("img", {
            key: 0,
            src: _ctx.src,
            alt: _ctx.alt,
            srcset: _ctx.srcSet,
            style: vue.normalizeStyle(vue.unref(fitStyle)),
            onError: handleError
          }, null, 44, _hoisted_1$Y)) : _ctx.icon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), { key: 1 }, {
            default: vue.withCtx(() => [
              (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.icon)))
            ]),
            _: 1
          })) : vue.renderSlot(_ctx.$slots, "default", { key: 2 })
        ], 6);
      };
    }
  });
  变量 Avatar为/* @__PURE__ */ _输出出口_sfc(_sfc_main$20, [["__file", "avatar.vue"]]);

  常量 ElAvatar为withInstall(Avatar);

  常量 backtopProps为{
    visibilityHeight: {
      type: Number,
      default: 200
    },
    target: {
      type: String,
      default: ""
    },
    right: {
      type: Number,
      default: 40
    },
    bottom: {
      type: Number,
      default: 40
    }
  };
  常量 backtopEmits为{
    点击: (evt) => evt instanceof MouseEvent
  };

  常量 _hoisted_1$X为["onClick"];
  常量 __default__$C为{
    名字: "ElBacktop"
  };
  常量 _sfc_main$1$为/* @__PURE__ */ vue.defineComponent({
    ...__default__$C,
    props: backtopProps,
    emits: backtopEmits,
    setup(__props, { emit }) {
      常量 props为__props;
      常量 COMPONENT_NAME为"ElBacktop";
      常量 ns为useNamespace("backtop");
      常量 el为vue.shallowRef();
      常量 container为vue.shallowRef();
      常量 visible为vue.ref(false);
      常量 backTopStyle为vue.computed(() => ({
        right: `${props.right}px`,
        bottom: `${props.bottom}px`
      }));
      常量 scrollToTop为() => {
        如果 (不el.value)
          返回;
        常量 beginTime为Date.now();
        常量 beginValue为el.value.scrollTop;
        常量 frameFunc为() => {
          如果 (不el.value)
            返回;
          常量 progress为(Date.now() - beginTime) / 500;
          如果 (progress < 1) {
            el.value.scrollTop为beginValue * (1 - easeInOutCubic(progress));
            requestAnimationFrame(frameFunc);
          } 否则 {
            el.value.scrollTop为0;
          }
        };
        requestAnimationFrame(frameFunc);
      };
      常量 handleScroll为() => {
        如果 (el.value)
          visible.value为el.value.scrollTop >= props.visibilityHeight;
      };
      常量 handleClick为(event) => {
        scrollToTop();
        emit("点击", event);
      };
      常量 handleScrollThrottled为useThrottleFn(handleScroll, 300);
      vue.onMounted(() => {
        变量 _a;
        container.value为document;
        el.value为document.documentElement;
        如果 (props.target) {
          el.value为(_a为document.querySelector(props.target)) 不= null ? _a : void 0;
          如果 (不el.value) {
            抛出Error(COMPONENT_NAME, `target is not existed: ${props.target}`);
          }
          container.value为el.value;
        }
        useEventListener(container, "scroll", handleScrollThrottled);
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createBlock(vue.Transition, {
          名字: `${vue.unref(ns).名字space.value}-fade-in`
        }, {
          default: vue.withCtx(() => [
            visible.value ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              style: vue.normalizeStyle(vue.unref(backTopStyle)),
              class: vue.normalizeClass(vue.unref(ns).b()),
              onClick: vue.withMod如果iers(handleClick, ["stop"])
            }, [
              vue.renderSlot(_ctx.$slots, "default", {}, () => [
                vue.createVNode(vue.unref(ElIcon), {
                  class: vue.normalizeClass(vue.unref(ns).e("icon"))
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(vue.unref(caretTop))
                  ]),
                  _: 1
                }, 8, ["class"])
              ])
            ], 14, _hoisted_1$X)) : vue.createCommentVNode("v-如果", true)
          ]),
          _: 3
        }, 8, ["名字"]);
      };
    }
  });
  变量 Backtop为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1$, [["__file", "backtop.vue"]]);

  常量 ElBacktop为withInstall(Backtop);

  常量 badgeProps为buildProps({
    value: {
      type: [String, Number],
      default: ""
    },
    max: {
      type: Number,
      default: 99
    },
    isDot: Boolean,
    hidden: Boolean,
    type: {
      type: String,
      values: ["primary", "success", "warning", "info", "danger"],
      default: "danger"
    }
  });

  常量 _hoisted_1$W为["textContent"];
  常量 __default__$B为{
    名字: "ElBadge"
  };
  常量 _sfc_main$1_为/* @__PURE__ */ vue.defineComponent({
    ...__default__$B,
    props: badgeProps,
    setup(__props, { expose }) {
      常量 props为__props;
      常量 ns为useNamespace("badge");
      常量 上下文为vue.computed(() => {
        如果 (props.isDot)
          返回 "";
        如果 (isNumber(props.value) 与 isNumber(props.max)) {
          返回 props.max < props.value ? `${props.max}+` : `${props.value}`;
        }
        返回 `${props.value}`;
      });
      expose({
        上下文
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(vue.unref(ns).b())
        }, [
          vue.renderSlot(_ctx.$slots, "default"),
          vue.createVNode(vue.Transition, {
            名字: `${vue.unref(ns).名字space.value}-zoom-in-center`
          }, {
            default: vue.withCtx(() => [
              vue.withDirectives(vue.createElementVNode("sup", {
                class: vue.normalizeClass([
                  vue.unref(ns).e("上下文"),
                  vue.unref(ns).em("上下文", _ctx.type),
                  vue.unref(ns).is("fixed", 不不_ctx.$slots.default),
                  vue.unref(ns).is("dot", _ctx.isDot)
                ]),
                textContent: vue.toDisplayString(vue.unref(上下文))
              }, null, 10, _hoisted_1$W), [
                [vue.vShow, 不_ctx.hidden 与 (vue.unref(上下文) 或 vue.unref(上下文) === "0" 或 _ctx.isDot)]
              ])
            ]),
            _: 1
          }, 8, ["名字"])
        ], 2);
      };
    }
  });
  变量 Badge为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1_, [["__file", "badge.vue"]]);

  常量 ElBadge为withInstall(Badge);

  常量 breadcrumbProps为buildProps({
    separator: {
      type: String,
      default: "/"
    },
    separatorIcon: {
      type: iconPropType,
      default: ""
    }
  });

  常量 __default__$A为{
    名字: "ElBreadcrumb"
  };
  常量 _sfc_main$1Z为/* @__PURE__ */ vue.defineComponent({
    ...__default__$A,
    props: breadcrumbProps,
    setup(__props) {
      常量 props为__props;
      常量 ns为useNamespace("breadcrumb");
      常量 breadcrumb为vue.ref();
      vue.provide(breadcrumbKey, props);
      vue.onMounted(() => {
        常量 items为breadcrumb.value.querySelectorAll(`.${ns.e("item")}`);
        如果 (items.长度) {
          items[items.长度 - 1].setAttribute("aria-current", "page");
        }
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "breadcrumb",
          ref: breadcrumb,
          class: vue.normalizeClass(vue.unref(ns).b()),
          "aria-label": "Breadcrumb",
          role: "navigation"
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 2);
      };
    }
  });
  变量 Breadcrumb为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1Z, [["__file", "breadcrumb.vue"]]);

  常量 breadcrumbItemProps为buildProps({
    to: {
      type: definePropType([String, Object]),
      default: ""
    },
    replace: {
      type: Boolean,
      default: false
    }
  });

  常量 __default__$z为{
    名字: "ElBreadcrumbItem"
  };
  常量 _sfc_main$1Y为/* @__PURE__ */ vue.defineComponent({
    ...__default__$z,
    props: breadcrumbItemProps,
    setup(__props) {
      常量 props为__props;
      常量 instance为vue.getCurrentInstance();
      常量 router为instance.appContext.config.全局Properties.$router;
      常量 breadcrumbInjection为vue.inject(breadcrumbKey, {});
      常量 ns为useNamespace("breadcrumb");
      常量 { separator, separatorIcon }为breadcrumbInjection;
      常量 link为vue.ref();
      常量 onClick为() => {
        如果 (不props.to 或 不router)
          返回;
        props.replace ? router.replace(props.to) : router.push(props.to);
      };
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("span", {
          class: vue.normalizeClass(vue.unref(ns).e("item"))
        }, [
          vue.createElementVNode("span", {
            ref_key: "link",
            ref: link,
            class: vue.normalizeClass([vue.unref(ns).e("inner"), vue.unref(ns).is("link", 不不_ctx.to)]),
            role: "link",
            onClick
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2),
          vue.unref(separatorIcon) ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns).e("separator"))
          }, {
            default: vue.withCtx(() => [
              (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(separatorIcon))))
            ]),
            _: 1
          }, 8, ["class"])) : (vue.openBlock(), vue.createElementBlock("span", {
            key: 1,
            class: vue.normalizeClass(vue.unref(ns).e("separator")),
            role: "presentation"
          }, vue.toDisplayString(vue.unref(separator)), 3))
        ], 2);
      };
    }
  });
  变量 BreadcrumbItem为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1Y, [["__file", "breadcrumb-item.vue"]]);

  常量 ElBreadcrumb为withInstall(Breadcrumb, {
    BreadcrumbItem
  });
  常量 ElBreadcrumbItem为withNoopInstall(BreadcrumbItem);

  常量 buttonTypes为[
    "default",
    "primary",
    "success",
    "warning",
    "info",
    "danger",
    "text",
    ""
  ];
  常量 buttonNativeTypes为["button", "submit", "reset"];
  常量 buttonProps为buildProps({
    size: useSizeProp,
    disabled: Boolean,
    type: {
      type: String,
      values: buttonTypes,
      default: ""
    },
    icon: {
      type: iconPropType,
      default: ""
    },
    nativeType: {
      type: String,
      values: buttonNativeTypes,
      default: "button"
    },
    loading: Boolean,
    loadingIcon: {
      type: iconPropType,
      default: () => loading
    },
    plain: Boolean,
    autofocus: Boolean,
    round: Boolean,
    circle: Boolean,
    color: String,
    dark: Boolean,
    autoInsertSpace: {
      type: Boolean,
      default: void 0
    }
  });
  常量 buttonEmits为{
    点击: (evt) => evt instanceof MouseEvent
  };

  函数 bound01$1(n, max) {
    如果 (isOnePo整数Zero$1(n)) {
      n为"100%";
    }
    变量 isPercent为isPercentage$1(n);
    n为max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));
    如果 (isPercent) {
      n为parseInt(String(n * max), 10) / 100;
    }
    如果 (Math.abs(n - max) < 1e-6) {
      返回 1;
    }
    如果 (max === 360) {
      n为(n < 0 ? n % max + max : n % max) / parseFloat(String(max));
    } 否则 {
      n为n % max / parseFloat(String(max));
    }
    返回 n;
  }
  函数 clamp01(val) {
    返回 Math.min(1, Math.max(0, val));
  }
  函数 isOnePo整数Zero$1(n) {
    返回 类型是 n === "string" 与 n.indexOf(".") 不== -1 与 parseFloat(n) === 1;
  }
  函数 isPercentage$1(n) {
    返回 类型是 n === "string" 与 n.indexOf("%") 不== -1;
  }
  函数 boundAlpha(a) {
    a为parseFloat(a);
    如果 (isNaN(a) 或 a < 0 或 a大于1) {
      a为1;
    }
    返回 a;
  }
  函数 convertToPercentage(n) {
    如果 (n <= 1) {
      返回 Number(n) * 100 + "%";
    }
    返回 n;
  }
  函数 pad2(c) {
    返回 c.长度 === 1 ? "0" + c : String(c);
  }

  函数 rgbToRgb(r, g, b) {
    返回 {
      r: bound01$1(r, 255) * 255,
      g: bound01$1(g, 255) * 255,
      b: bound01$1(b, 255) * 255
    };
  }
  函数 rgbToHsl(r, g, b) {
    r为bound01$1(r, 255);
    g为bound01$1(g, 255);
    b为bound01$1(b, 255);
    变量 max为Math.max(r, g, b);
    变量 min为Math.min(r, g, b);
    变量 h为0;
    变量 s为0;
    变量 l为(max + min) / 2;
    如果 (max === min) {
      s为0;
      h为0;
    } 否则 {
      变量 d为max - min;
      s为l大于0.5 ? d / (2 - max - min) : d / (max + min);
      主分支 (max) {
        子分支 r:
          h为(g - b) / d + (g < b ? 6 : 0);
          break;
        子分支 g:
          h为(b - r) / d + 2;
          break;
        子分支 b:
          h为(r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    返回 { h, s, l };
  }
  函数 hue2rgb(p, q, t) {
    如果 (t < 0) {
      t += 1;
    }
    如果 (t大于1) {
      t -= 1;
    }
    如果 (t < 1 / 6) {
      返回 p + (q - p) * (6 * t);
    }
    如果 (t < 1 / 2) {
      返回 q;
    }
    如果 (t < 2 / 3) {
      返回 p + (q - p) * (2 / 3 - t) * 6;
    }
    返回 p;
  }
  函数 hslToRgb(h, s, l) {
    变量 r;
    变量 g;
    变量 b;
    h为bound01$1(h, 360);
    s为bound01$1(s, 100);
    l为bound01$1(l, 100);
    如果 (s === 0) {
      g为l;
      b为l;
      r为l;
    } 否则 {
      变量 q为l < 0.5 ? l * (1 + s) : l + s - l * s;
      变量 p为2 * l - q;
      r为hue2rgb(p, q, h + 1 / 3);
      g为hue2rgb(p, q, h);
      b为hue2rgb(p, q, h - 1 / 3);
    }
    返回 { r: r * 255, g: g * 255, b: b * 255 };
  }
  函数 rgbToHsv(r, g, b) {
    r为bound01$1(r, 255);
    g为bound01$1(g, 255);
    b为bound01$1(b, 255);
    变量 max为Math.max(r, g, b);
    变量 min为Math.min(r, g, b);
    变量 h为0;
    变量 v为max;
    变量 d为max - min;
    变量 s为max === 0 ? 0 : d / max;
    如果 (max === min) {
      h为0;
    } 否则 {
      主分支 (max) {
        子分支 r:
          h为(g - b) / d + (g < b ? 6 : 0);
          break;
        子分支 g:
          h为(b - r) / d + 2;
          break;
        子分支 b:
          h为(r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    返回 { h, s, v };
  }
  函数 hsvToRgb(h, s, v) {
    h为bound01$1(h, 360) * 6;
    s为bound01$1(s, 100);
    v为bound01$1(v, 100);
    变量 i为Math.floor(h);
    变量 f为h - i;
    变量 p为v * (1 - s);
    变量 q为v * (1 - f * s);
    变量 t为v * (1 - (1 - f) * s);
    变量 mod为i % 6;
    变量 r为[v, q, p, p, t, v][mod];
    变量 g为[t, v, v, q, p, p][mod];
    变量 b为[p, p, t, v, v, q][mod];
    返回 { r: r * 255, g: g * 255, b: b * 255 };
  }
  函数 rgbToHex(r, g, b, allow3Char) {
    变量 hex为[
      pad2(Math.round(r).toString(16)),
      pad2(Math.round(g).toString(16)),
      pad2(Math.round(b).toString(16))
    ];
    如果 (allow3Char 与 hex[0].startsWith(hex[0].charAt(1)) 与 hex[1].startsWith(hex[1].charAt(1)) 与 hex[2].startsWith(hex[2].charAt(1))) {
      返回 hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }
    返回 hex.join("");
  }
  函数 rgbaToHex(r, g, b, a, allow4Char) {
    变量 hex为[
      pad2(Math.round(r).toString(16)),
      pad2(Math.round(g).toString(16)),
      pad2(Math.round(b).toString(16)),
      pad2(convertDecimalToHex(a))
    ];
    如果 (allow4Char 与 hex[0].startsWith(hex[0].charAt(1)) 与 hex[1].startsWith(hex[1].charAt(1)) 与 hex[2].startsWith(hex[2].charAt(1)) 与 hex[3].startsWith(hex[3].charAt(1))) {
      返回 hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
    }
    返回 hex.join("");
  }
  函数 convertDecimalToHex(d) {
    返回 Math.round(parseFloat(d) * 255).toString(16);
  }
  函数 convertHexToDecimal(h) {
    返回 parseIntFromHex(h) / 255;
  }
  函数 parseIntFromHex(val) {
    返回 parseInt(val, 16);
  }
  函数 numberInputToObject(color) {
    返回 {
      r: color >> 16,
      g: (color & 65280) >> 8,
      b: color & 255
    };
  }

  变量 名字s为{
    aliceblue: "#f0f8ff",
    antiquewhite: "#faebd7",
    aqua: "#00ffff",
    aquamarine: "#7fffd4",
    azure: "#f0ffff",
    beige: "#f5f5dc",
    bisque: "#ffe4c4",
    black: "#000000",
    blanchedalmond: "#ffebcd",
    blue: "#0000ff",
    bluevio让: "#8a2be2",
    brown: "#a52a2a",
    burlywood: "#deb887",
    cadetblue: "#5f9ea0",
    chartreuse: "#7fff00",
    chocolate: "#d2691e",
    coral: "#ff7f50",
    cornflowerblue: "#6495ed",
    cornsilk: "#fff8dc",
    crimson: "#dc143c",
    cyan: "#00ffff",
    darkblue: "#00008b",
    darkcyan: "#008b8b",
    darkgoldenrod: "#b8860b",
    darkgray: "#a9a9a9",
    darkgreen: "#006400",
    darkgrey: "#a9a9a9",
    darkkhaki: "#bdb76b",
    darkmagenta: "#8b008b",
    darkolivegreen: "#556b2f",
    darkorange: "#ff8c00",
    darkorchid: "#9932cc",
    darkred: "#8b0000",
    darksalmon: "#e9967a",
    darkseagreen: "#8fbc8f",
    darkslateblue: "#483d8b",
    darkslategray: "#2f4f4f",
    darkslategrey: "#2f4f4f",
    darkturquoise: "#00ced1",
    darkvio让: "#9400d3",
    deeppink: "#ff1493",
    deepskyblue: "#00bfff",
    dimgray: "#696969",
    dimgrey: "#696969",
    dodgerblue: "#1e90ff",
    firebrick: "#b22222",
    floralwhite: "#fffaf0",
    变量循环estgreen: "#228b22",
    fuchsia: "#ff00ff",
    gainsboro: "#dcdcdc",
    ghostwhite: "#f8f8ff",
    goldenrod: "#daa520",
    gold: "#ffd700",
    gray: "#808080",
    green: "#008000",
    greenyellow: "#adff2f",
    grey: "#808080",
    honeydew: "#f0fff0",
    hotpink: "#ff69b4",
    indianred: "#cd5c5c",
    indigo: "#4b0082",
    ivory: "#fffff0",
    khaki: "#f0e68c",
    lavenderblush: "#fff0f5",
    lavender: "#e6e6fa",
    lawngreen: "#7cfc00",
    lemonch如果fon: "#fffacd",
    lightblue: "#add8e6",
    lightcoral: "#f08080",
    lightcyan: "#e0ffff",
    lightgoldenrodyellow: "#fafad2",
    lightgray: "#d3d3d3",
    lightgreen: "#90ee90",
    lightgrey: "#d3d3d3",
    lightpink: "#ffb6c1",
    lightsalmon: "#ffa07a",
    lightseagreen: "#20b2aa",
    lightskyblue: "#87cefa",
    lightslategray: "#778899",
    lightslategrey: "#778899",
    lightsteelblue: "#b0c4de",
    lightyellow: "#ffffe0",
    lime: "#00ff00",
    limegreen: "#32cd32",
    linen: "#faf0e6",
    magenta: "#ff00ff",
    maroon: "#800000",
    mediumaquamarine: "#66cdaa",
    mediumblue: "#0000cd",
    mediumorchid: "#ba55d3",
    mediumpurple: "#9370db",
    mediumseagreen: "#3cb371",
    mediumslateblue: "#7b68ee",
    mediumspringgreen: "#00fa9a",
    mediumturquoise: "#48d1cc",
    mediumvio让red: "#c71585",
    midnightblue: "#191970",
    m整数cream: "#f5fffa",
    mistyrose: "#ffe4e1",
    moccasin: "#ffe4b5",
    navajowhite: "#ffdead",
    navy: "#000080",
    oldlace: "#fdf5e6",
    olive: "#808000",
    olivedrab: "#6b8e23",
    orange: "#ffa500",
    orangered: "#ff4500",
    orchid: "#da70d6",
    palegoldenrod: "#eee8aa",
    palegreen: "#98fb98",
    pa让urquoise: "#afeeee",
    palevio让red: "#db7093",
    papayawhip: "#ffefd5",
    peachpuff: "#ffdab9",
    peru: "#cd853f",
    pink: "#ffc0cb",
    plum: "#dda0dd",
    powderblue: "#b0e0e6",
    purple: "#800080",
    rebeccapurple: "#663399",
    red: "#ff0000",
    rosybrown: "#bc8f8f",
    royalblue: "#4169e1",
    saddlebrown: "#8b4513",
    salmon: "#fa8072",
    sandybrown: "#f4a460",
    seagreen: "#2e8b57",
    seashell: "#fff5ee",
    sienna: "#a0522d",
    silver: "#c0c0c0",
    skyblue: "#87ceeb",
    slateblue: "#6a5acd",
    slategray: "#708090",
    slategrey: "#708090",
    snow: "#fffafa",
    springgreen: "#00ff7f",
    steelblue: "#4682b4",
    tan: "#d2b48c",
    teal: "#008080",
    thistle: "#d8bfd8",
    tomato: "#ff6347",
    turquoise: "#40e0d0",
    vio让: "#ee82ee",
    wheat: "#f5deb3",
    white: "#ffffff",
    whitesmoke: "#f5f5f5",
    yellow: "#ffff00",
    yellowgreen: "#9acd32"
  };

  函数 inputToRGB(color) {
    变量 rgb为{ r: 0, g: 0, b: 0 };
    变量 a为1;
    变量 s为null;
    变量 v为null;
    变量 l为null;
    变量 ok为false;
    变量 变量循环mat为false;
    如果 (类型是 color === "string") {
      color为stringInputToObject(color);
    }
    如果 (类型是 color === "object") {
      如果 (isValidCSSUnit(color.r) 与 isValidCSSUnit(color.g) 与 isValidCSSUnit(color.b)) {
        rgb为rgbToRgb(color.r, color.g, color.b);
        ok为true;
        变量循环mat为String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
      } 否则 如果 (isValidCSSUnit(color.h) 与 isValidCSSUnit(color.s) 与 isValidCSSUnit(color.v)) {
        s为convertToPercentage(color.s);
        v为convertToPercentage(color.v);
        rgb为hsvToRgb(color.h, s, v);
        ok为true;
        变量循环mat为"hsv";
      } 否则 如果 (isValidCSSUnit(color.h) 与 isValidCSSUnit(color.s) 与 isValidCSSUnit(color.l)) {
        s为convertToPercentage(color.s);
        l为convertToPercentage(color.l);
        rgb为hslToRgb(color.h, s, l);
        ok为true;
        变量循环mat为"hsl";
      }
      如果 (Object.prototype.hasOwnProperty.call(color, "a")) {
        a为color.a;
      }
    }
    a为boundAlpha(a);
    返回 {
      ok,
      变量循环mat: color.变量循环mat 或 变量循环mat,
      r: Math.min(255, Math.max(rgb.r, 0)),
      g: Math.min(255, Math.max(rgb.g, 0)),
      b: Math.min(255, Math.max(rgb.b, 0)),
      a
    };
  }
  变量 CSS_INTEGER为"[-\\+]?\\d+%?";
  变量 CSS_NUMBER为"[-\\+]?\\d*\\.\\d+%?";
  变量 CSS_UNIT为"(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
  变量 PERMISSIVE_MATCH3为"[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
  变量 PERMISSIVE_MATCH4为"[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
  变量 matchers为{
    CSS_UNIT: new RegExp(CSS_UNIT),
    rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
    rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
    hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
    hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
    hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
    hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
  };
  函数 stringInputToObject(color) {
    color为color.trim().toLowerCase();
    如果 (color.长度 === 0) {
      返回 false;
    }
    变量 名字d为false;
    如果 (名字s[color]) {
      color为名字s[color];
      名字d为true;
    } 否则 如果 (color === "transparent") {
      返回 { r: 0, g: 0, b: 0, a: 0, 变量循环mat: "名字" };
    }
    变量 match为matchers.rgb.exec(color);
    如果 (match) {
      返回 { r: match[1], g: match[2], b: match[3] };
    }
    match为matchers.rgba.exec(color);
    如果 (match) {
      返回 { r: match[1], g: match[2], b: match[3], a: match[4] };
    }
    match为matchers.hsl.exec(color);
    如果 (match) {
      返回 { h: match[1], s: match[2], l: match[3] };
    }
    match为matchers.hsla.exec(color);
    如果 (match) {
      返回 { h: match[1], s: match[2], l: match[3], a: match[4] };
    }
    match为matchers.hsv.exec(color);
    如果 (match) {
      返回 { h: match[1], s: match[2], v: match[3] };
    }
    match为matchers.hsva.exec(color);
    如果 (match) {
      返回 { h: match[1], s: match[2], v: match[3], a: match[4] };
    }
    match为matchers.hex8.exec(color);
    如果 (match) {
      返回 {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        a: convertHexToDecimal(match[4]),
        变量循环mat: 名字d ? "名字" : "hex8"
      };
    }
    match为matchers.hex6.exec(color);
    如果 (match) {
      返回 {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        变量循环mat: 名字d ? "名字" : "hex"
      };
    }
    match为matchers.hex4.exec(color);
    如果 (match) {
      返回 {
        r: parseIntFromHex(match[1] + match[1]),
        g: parseIntFromHex(match[2] + match[2]),
        b: parseIntFromHex(match[3] + match[3]),
        a: convertHexToDecimal(match[4] + match[4]),
        变量循环mat: 名字d ? "名字" : "hex8"
      };
    }
    match为matchers.hex3.exec(color);
    如果 (match) {
      返回 {
        r: parseIntFromHex(match[1] + match[1]),
        g: parseIntFromHex(match[2] + match[2]),
        b: parseIntFromHex(match[3] + match[3]),
        变量循环mat: 名字d ? "名字" : "hex"
      };
    }
    返回 false;
  }
  函数 isValidCSSUnit(color) {
    返回 Boolean(matchers.CSS_UNIT.exec(String(color)));
  }

  变量 TinyColor为函数() {
    函数 TinyColor2(color, opts) {
      如果 (color === void 0) {
        color为"";
      }
      如果 (opts === void 0) {
        opts为{};
      }
      变量 _a;
      如果 (color instanceof TinyColor2) {
        返回 color;
      }
      如果 (类型是 color === "number") {
        color为numberInputToObject(color);
      }
      this.originalInput为color;
      变量 rgb为inputToRGB(color);
      this.originalInput为color;
      this.r为rgb.r;
      this.g为rgb.g;
      this.b为rgb.b;
      this.a为rgb.a;
      this.roundA为Math.round(100 * this.a) / 100;
      this.变量循环mat为(_a为opts.变量循环mat) 不== null 与 _a 不== void 0 ? _a : rgb.变量循环mat;
      this.gradientType为opts.gradientType;
      如果 (this.r < 1) {
        this.r为Math.round(this.r);
      }
      如果 (this.g < 1) {
        this.g为Math.round(this.g);
      }
      如果 (this.b < 1) {
        this.b为Math.round(this.b);
      }
      this.isValid为rgb.ok;
    }
    TinyColor2.prototype.isDark为函数() {
      返回 this.getBrightness() < 128;
    };
    TinyColor2.prototype.isLight为函数() {
      返回 不this.isDark();
    };
    TinyColor2.prototype.getBrightness为函数() {
      变量 rgb为this.toRgb();
      返回 (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
    };
    TinyColor2.prototype.getLuminance为函数() {
      变量 rgb为this.toRgb();
      变量 R;
      变量 G;
      变量 B;
      变量 RsRGB为rgb.r / 255;
      变量 GsRGB为rgb.g / 255;
      变量 BsRGB为rgb.b / 255;
      如果 (RsRGB <= 0.03928) {
        R为RsRGB / 12.92;
      } 否则 {
        R为Math.pow((RsRGB + 0.055) / 1.055, 2.4);
      }
      如果 (GsRGB <= 0.03928) {
        G为GsRGB / 12.92;
      } 否则 {
        G为Math.pow((GsRGB + 0.055) / 1.055, 2.4);
      }
      如果 (BsRGB <= 0.03928) {
        B为BsRGB / 12.92;
      } 否则 {
        B为Math.pow((BsRGB + 0.055) / 1.055, 2.4);
      }
      返回 0.2126 * R + 0.7152 * G + 0.0722 * B;
    };
    TinyColor2.prototype.getAlpha为函数() {
      返回 this.a;
    };
    TinyColor2.prototype.setAlpha为函数(alpha) {
      this.a为boundAlpha(alpha);
      this.roundA为Math.round(100 * this.a) / 100;
      返回 this;
    };
    TinyColor2.prototype.toHsv为函数() {
      变量 hsv为rgbToHsv(this.r, this.g, this.b);
      返回 { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };
    };
    TinyColor2.prototype.toHsvString为函数() {
      变量 hsv为rgbToHsv(this.r, this.g, this.b);
      变量 h为Math.round(hsv.h * 360);
      变量 s为Math.round(hsv.s * 100);
      变量 v为Math.round(hsv.v * 100);
      返回 this.a === 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this.roundA + ")";
    };
    TinyColor2.prototype.toHsl为函数() {
      变量 hsl为rgbToHsl(this.r, this.g, this.b);
      返回 { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };
    };
    TinyColor2.prototype.toHslString为函数() {
      变量 hsl为rgbToHsl(this.r, this.g, this.b);
      变量 h为Math.round(hsl.h * 360);
      变量 s为Math.round(hsl.s * 100);
      变量 l为Math.round(hsl.l * 100);
      返回 this.a === 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this.roundA + ")";
    };
    TinyColor2.prototype.toHex为函数(allow3Char) {
      如果 (allow3Char === void 0) {
        allow3Char为false;
      }
      返回 rgbToHex(this.r, this.g, this.b, allow3Char);
    };
    TinyColor2.prototype.toHexString为函数(allow3Char) {
      如果 (allow3Char === void 0) {
        allow3Char为false;
      }
      返回 "#" + this.toHex(allow3Char);
    };
    TinyColor2.prototype.toHex8为函数(allow4Char) {
      如果 (allow4Char === void 0) {
        allow4Char为false;
      }
      返回 rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);
    };
    TinyColor2.prototype.toHex8String为函数(allow4Char) {
      如果 (allow4Char === void 0) {
        allow4Char为false;
      }
      返回 "#" + this.toHex8(allow4Char);
    };
    TinyColor2.prototype.toRgb为函数() {
      返回 {
        r: Math.round(this.r),
        g: Math.round(this.g),
        b: Math.round(this.b),
        a: this.a
      };
    };
    TinyColor2.prototype.toRgbString为函数() {
      变量 r为Math.round(this.r);
      变量 g为Math.round(this.g);
      变量 b为Math.round(this.b);
      返回 this.a === 1 ? "rgb(" + r + ", " + g + ", " + b + ")" : "rgba(" + r + ", " + g + ", " + b + ", " + this.roundA + ")";
    };
    TinyColor2.prototype.toPercentageRgb为函数() {
      变量 fmt为函数(x) {
        返回 Math.round(bound01$1(x, 255) * 100) + "%";
      };
      返回 {
        r: fmt(this.r),
        g: fmt(this.g),
        b: fmt(this.b),
        a: this.a
      };
    };
    TinyColor2.prototype.toPercentageRgbString为函数() {
      变量 rnd为函数(x) {
        返回 Math.round(bound01$1(x, 255) * 100);
      };
      返回 this.a === 1 ? "rgb(" + rnd(this.r) + "%, " + rnd(this.g) + "%, " + rnd(this.b) + "%)" : "rgba(" + rnd(this.r) + "%, " + rnd(this.g) + "%, " + rnd(this.b) + "%, " + this.roundA + ")";
    };
    TinyColor2.prototype.toName为函数() {
      如果 (this.a === 0) {
        返回 "transparent";
      }
      如果 (this.a < 1) {
        返回 false;
      }
      变量 hex为"#" + rgbToHex(this.r, this.g, this.b, false);
      变量循环 (变量 _i为0, _a为Object.entries(名字s); _i < _a.长度; _i加一) {
        变量 _b为_a[_i], key为_b[0], value为_b[1];
        如果 (hex === value) {
          返回 key;
        }
      }
      返回 false;
    };
    TinyColor2.prototype.toString为函数(变量循环mat) {
      变量 变量循环matSet为Boolean(变量循环mat);
      变量循环mat为变量循环mat 不== null 与 变量循环mat 不== void 0 ? 变量循环mat : this.变量循环mat;
      变量 变量循环mattedString为false;
      变量 hasAlpha为this.a < 1 与 this.a >= 0;
      变量 needsAlphaFormat为不变量循环matSet 与 hasAlpha 与 (变量循环mat.startsWith("hex") 或 变量循环mat === "名字");
      如果 (needsAlphaFormat) {
        如果 (变量循环mat === "名字" 与 this.a === 0) {
          返回 this.toName();
        }
        返回 this.toRgbString();
      }
      如果 (变量循环mat === "rgb") {
        变量循环mattedString为this.toRgbString();
      }
      如果 (变量循环mat === "prgb") {
        变量循环mattedString为this.toPercentageRgbString();
      }
      如果 (变量循环mat === "hex" 或 变量循环mat === "hex6") {
        变量循环mattedString为this.toHexString();
      }
      如果 (变量循环mat === "hex3") {
        变量循环mattedString为this.toHexString(true);
      }
      如果 (变量循环mat === "hex4") {
        变量循环mattedString为this.toHex8String(true);
      }
      如果 (变量循环mat === "hex8") {
        变量循环mattedString为this.toHex8String();
      }
      如果 (变量循环mat === "名字") {
        变量循环mattedString为this.toName();
      }
      如果 (变量循环mat === "hsl") {
        变量循环mattedString为this.toHslString();
      }
      如果 (变量循环mat === "hsv") {
        变量循环mattedString为this.toHsvString();
      }
      返回 变量循环mattedString 或 this.toHexString();
    };
    TinyColor2.prototype.toNumber为函数() {
      返回 (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
    };
    TinyColor2.prototype.clone为函数() {
      返回 new TinyColor2(this.toString());
    };
    TinyColor2.prototype.lighten为函数(amount) {
      如果 (amount === void 0) {
        amount为10;
      }
      变量 hsl为this.toHsl();
      hsl.l += amount / 100;
      hsl.l为clamp01(hsl.l);
      返回 new TinyColor2(hsl);
    };
    TinyColor2.prototype.brighten为函数(amount) {
      如果 (amount === void 0) {
        amount为10;
      }
      变量 rgb为this.toRgb();
      rgb.r为Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
      rgb.g为Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
      rgb.b为Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
      返回 new TinyColor2(rgb);
    };
    TinyColor2.prototype.darken为函数(amount) {
      如果 (amount === void 0) {
        amount为10;
      }
      变量 hsl为this.toHsl();
      hsl.l -= amount / 100;
      hsl.l为clamp01(hsl.l);
      返回 new TinyColor2(hsl);
    };
    TinyColor2.prototype.t整数为函数(amount) {
      如果 (amount === void 0) {
        amount为10;
      }
      返回 this.mix("white", amount);
    };
    TinyColor2.prototype.shade为函数(amount) {
      如果 (amount === void 0) {
        amount为10;
      }
      返回 this.mix("black", amount);
    };
    TinyColor2.prototype.desaturate为函数(amount) {
      如果 (amount === void 0) {
        amount为10;
      }
      变量 hsl为this.toHsl();
      hsl.s -= amount / 100;
      hsl.s为clamp01(hsl.s);
      返回 new TinyColor2(hsl);
    };
    TinyColor2.prototype.saturate为函数(amount) {
      如果 (amount === void 0) {
        amount为10;
      }
      变量 hsl为this.toHsl();
      hsl.s += amount / 100;
      hsl.s为clamp01(hsl.s);
      返回 new TinyColor2(hsl);
    };
    TinyColor2.prototype.greyscale为函数() {
      返回 this.desaturate(100);
    };
    TinyColor2.prototype.spin为函数(amount) {
      变量 hsl为this.toHsl();
      变量 hue为(hsl.h + amount) % 360;
      hsl.h为hue < 0 ? 360 + hue : hue;
      返回 new TinyColor2(hsl);
    };
    TinyColor2.prototype.mix为函数(color, amount) {
      如果 (amount === void 0) {
        amount为50;
      }
      变量 rgb1为this.toRgb();
      变量 rgb2为new TinyColor2(color).toRgb();
      变量 p为amount / 100;
      变量 rgba为{
        r: (rgb2.r - rgb1.r) * p + rgb1.r,
        g: (rgb2.g - rgb1.g) * p + rgb1.g,
        b: (rgb2.b - rgb1.b) * p + rgb1.b,
        a: (rgb2.a - rgb1.a) * p + rgb1.a
      };
      返回 new TinyColor2(rgba);
    };
    TinyColor2.prototype.ana输出日志ous为函数(results, slices) {
      如果 (results === void 0) {
        results为6;
      }
      如果 (slices === void 0) {
        slices为30;
      }
      变量 hsl为this.toHsl();
      变量 part为360 / slices;
      变量 ret为[this];
      变量循环 (hsl.h为(hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
        hsl.h为(hsl.h + part) % 360;
        ret.push(new TinyColor2(hsl));
      }
      返回 ret;
    };
    TinyColor2.prototype.complement为函数() {
      变量 hsl为this.toHsl();
      hsl.h为(hsl.h + 180) % 360;
      返回 new TinyColor2(hsl);
    };
    TinyColor2.prototype.monochromatic为函数(results) {
      如果 (results === void 0) {
        results为6;
      }
      变量 hsv为this.toHsv();
      变量 h为hsv.h;
      变量 s为hsv.s;
      变量 v为hsv.v;
      变量 res为[];
      变量 mod如果ication为1 / results;
      条件循环 (results--) {
        res.push(new TinyColor2({ h, s, v }));
        v为(v + mod如果ication) % 1;
      }
      返回 res;
    };
    TinyColor2.prototype.splitcomplement为函数() {
      变量 hsl为this.toHsl();
      变量 h为hsl.h;
      返回 [
        this,
        new TinyColor2({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),
        new TinyColor2({ h: (h + 216) % 360, s: hsl.s, l: hsl.l })
      ];
    };
    TinyColor2.prototype.onBackground为函数(background) {
      变量 fg为this.toRgb();
      变量 bg为new TinyColor2(background).toRgb();
      返回 new TinyColor2({
        r: bg.r + (fg.r - bg.r) * fg.a,
        g: bg.g + (fg.g - bg.g) * fg.a,
        b: bg.b + (fg.b - bg.b) * fg.a
      });
    };
    TinyColor2.prototype.triad为函数() {
      返回 this.polyad(3);
    };
    TinyColor2.prototype.tetrad为函数() {
      返回 this.polyad(4);
    };
    TinyColor2.prototype.polyad为函数(n) {
      变量 hsl为this.toHsl();
      变量 h为hsl.h;
      变量 result为[this];
      变量 increment为360 / n;
      变量循环 (变量 i为1; i < n; i加一) {
        result.push(new TinyColor2({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));
      }
      返回 result;
    };
    TinyColor2.prototype.equals为函数(color) {
      返回 this.toRgbString() === new TinyColor2(color).toRgbString();
    };
    返回 TinyColor2;
  }();

  函数 darken(color, amount为20) {
    返回 color.mix("#141414", amount).toString();
  }
  函数 useButtonCustomStyle(props) {
    常量 _disabled为useDisabled$1();
    返回 vue.computed(() => {
      让 styles为{};
      常量 buttonColor为props.color;
      如果 (buttonColor) {
        常量 color为new TinyColor(buttonColor);
        常量 activeBgColor为props.dark ? color.t整数(20).toString() : darken(color, 20);
        如果 (props.plain) {
          styles为{
            "--el-button-bg-color": props.dark ? darken(color, 90) : color.t整数(90).toString(),
            "--el-button-text-color": buttonColor,
            "--el-button-border-color": props.dark ? darken(color, 50) : color.t整数(50).toString(),
            "--el-button-hover-text-color": "变量(--el-color-white)",
            "--el-button-hover-bg-color": buttonColor,
            "--el-button-hover-border-color": buttonColor,
            "--el-button-active-bg-color": activeBgColor,
            "--el-button-active-text-color": "变量(--el-color-white)",
            "--el-button-active-border-color": activeBgColor
          };
          如果 (_disabled.value) {
            styles["--el-button-disabled-bg-color"]为props.dark ? darken(color, 90) : color.t整数(90).toString();
            styles["--el-button-disabled-text-color"]为props.dark ? darken(color, 50) : color.t整数(50).toString();
            styles["--el-button-disabled-border-color"]为props.dark ? darken(color, 80) : color.t整数(80).toString();
          }
        } 否则 {
          常量 hoverBgColor为props.dark ? darken(color, 30) : color.t整数(30).toString();
          常量 textColor为color.isDark() ? "变量(--el-color-white)" : "变量(--el-color-black)";
          styles为{
            "--el-button-bg-color": buttonColor,
            "--el-button-text-color": textColor,
            "--el-button-border-color": buttonColor,
            "--el-button-hover-bg-color": hoverBgColor,
            "--el-button-hover-text-color": textColor,
            "--el-button-hover-border-color": hoverBgColor,
            "--el-button-active-bg-color": activeBgColor,
            "--el-button-active-border-color": activeBgColor
          };
          如果 (_disabled.value) {
            常量 disabledButtonColor为props.dark ? darken(color, 50) : color.t整数(50).toString();
            styles["--el-button-disabled-bg-color"]为disabledButtonColor;
            styles["--el-button-disabled-text-color"]为props.dark ? "rgba(255, 255, 255, 0.5)" : "变量(--el-color-white)";
            styles["--el-button-disabled-border-color"]为disabledButtonColor;
          }
        }
      }
      返回 styles;
    });
  }

  常量 _hoisted_1$V为["disabled", "autofocus", "type"];
  常量 __default__$y为{
    名字: "ElButton"
  };
  常量 _sfc_main$1X为/* @__PURE__ */ vue.defineComponent({
    ...__default__$y,
    props: buttonProps,
    emits: buttonEmits,
    setup(__props, { expose, emit }) {
      常量 props为__props;
      常量 slots为vue.useSlots();
      常量 buttonGroupContext为vue.inject(buttonGroupContextKey, void 0);
      常量 全局Config为useGlobalConfig("button");
      常量 ns为useNamespace("button");
      常量 { 变量循环m }为useFormItem();
      常量 _size为useSize(vue.computed(() => buttonGroupContext == null ? void 0 : buttonGroupContext.size));
      常量 _disabled为useDisabled$1();
      常量 _ref为vue.ref();
      常量 _type为vue.computed(() => props.type 或 (buttonGroupContext == null ? void 0 : buttonGroupContext.type) 或 "");
      常量 autoInsertSpace为vue.computed(() => {
        变量 _a, _b, _c;
        返回 (_c为(_b为props.autoInsertSpace) 不= null ? _b : (_a为全局Config.value) == null ? void 0 : _a.autoInsertSpace) 不= null ? _c : false;
      });
      常量 shouldAddSpace为vue.computed(() => {
        变量 _a;
        常量 defaultSlot为(_a为slots.default) == null ? void 0 : _a.call(slots);
        如果 (autoInsertSpace.value 与 (defaultSlot == null ? void 0 : defaultSlot.长度) === 1) {
          常量 slot为defaultSlot[0];
          如果 ((slot == null ? void 0 : slot.type) === vue.Text) {
            常量 text为slot.children;
            返回 /^\p{Un如果ied_Ideograph}{2}$/u.test(text.trim());
          }
        }
        返回 false;
      });
      常量 buttonStyle为useButtonCustomStyle(props);
      常量 handleClick为(evt) => {
        如果 (props.nativeType === "reset") {
          变量循环m == null ? void 0 : 变量循环m.resetFields();
        }
        emit("点击", evt);
      };
      expose({
        ref: _ref,
        size: _size,
        type: _type,
        disabled: _disabled,
        shouldAddSpace
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("button", {
          ref_key: "_ref",
          ref: _ref,
          class: vue.normalizeClass([
            vue.unref(ns).b(),
            vue.unref(ns).m(vue.unref(_type)),
            vue.unref(ns).m(vue.unref(_size)),
            vue.unref(ns).is("disabled", vue.unref(_disabled)),
            vue.unref(ns).is("loading", _ctx.loading),
            vue.unref(ns).is("plain", _ctx.plain),
            vue.unref(ns).is("round", _ctx.round),
            vue.unref(ns).is("circle", _ctx.circle)
          ]),
          disabled: vue.unref(_disabled) 或 _ctx.loading,
          autofocus: _ctx.autofocus,
          type: _ctx.nativeType,
          style: vue.normalizeStyle(vue.unref(buttonStyle)),
          onClick: handleClick
        }, [
          _ctx.loading ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
            _ctx.$slots.loading ? vue.renderSlot(_ctx.$slots, "loading", { key: 0 }) : (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
              key: 1,
              class: vue.normalizeClass(vue.unref(ns).is("loading"))
            }, {
              default: vue.withCtx(() => [
                (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.loadingIcon)))
              ]),
              _: 1
            }, 8, ["class"]))
          ], 2112)) : _ctx.icon 或 _ctx.$slots.icon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), { key: 1 }, {
            default: vue.withCtx(() => [
              _ctx.icon ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.icon), { key: 0 })) : vue.renderSlot(_ctx.$slots, "icon", { key: 1 })
            ]),
            _: 3
          })) : vue.createCommentVNode("v-如果", true),
          _ctx.$slots.default ? (vue.openBlock(), vue.createElementBlock("span", {
            key: 2,
            class: vue.normalizeClass({ [vue.unref(ns).em("text", "expand")]: vue.unref(shouldAddSpace) })
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2)) : vue.createCommentVNode("v-如果", true)
        ], 14, _hoisted_1$V);
      };
    }
  });
  变量 Button为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1X, [["__file", "button.vue"]]);

  常量 buttonGroupProps为{
    size: buttonProps.size,
    type: buttonProps.type
  };

  常量 __default__$x为{
    名字: "ElButtonGroup"
  };
  常量 _sfc_main$1W为/* @__PURE__ */ vue.defineComponent({
    ...__default__$x,
    props: buttonGroupProps,
    setup(__props) {
      常量 props为__props;
      vue.provide(buttonGroupContextKey, vue.reactive({
        size: vue.toRef(props, "size"),
        type: vue.toRef(props, "type")
      }));
      常量 ns为useNamespace("button");
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(`${vue.unref(ns).b("group")}`)
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 2);
      };
    }
  });
  变量 ButtonGroup为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1W, [["__file", "button-group.vue"]]);

  常量 ElButton为withInstall(Button, {
    ButtonGroup
  });
  常量 ElButtonGroup$1为withNoopInstall(ButtonGroup);

  变量 commonjsGlobal为类型是 全局This 不== 'undefined' ? 全局This : 类型是 window 不== 'undefined' ? window : 类型是 全局 不== 'undefined' ? 全局 : 类型是 self 不== 'undefined' ? self : {};

  变量 dayjs_min为{输出出口s: {}};

  (函数(module, 输出出口s) {
    不函数(t, e) {
      module.输出出口s为e() ;
    }(commonjsGlobal, 函数() {
      变量 t为1e3, e为6e4, n为36e5, r为"millisecond", i为"second", s为"minute", u为"hour", a为"day", o为"week", f为"month", h为"quarter", c为"year", d为"date", $为"Invalid Date", l为/^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y为/\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M为{ 名字: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_") }, m为函数(t2, e2, n2) {
        变量 r2为String(t2);
        返回 不r2 或 r2.长度 >= e2 ? t2 : "" + Array(e2 + 1 - r2.长度).join(n2) + t2;
      }, g为{ s: m, z: 函数(t2) {
        变量 e2为-t2.utcOffset(), n2为Math.abs(e2), r2为Math.floor(n2 / 60), i2为n2 % 60;
        返回 (e2 <= 0 ? "+" : "-") + m(r2, 2, "0") + ":" + m(i2, 2, "0");
      }, m: 函数 t2(e2, n2) {
        如果 (e2.date() < n2.date())
          返回 -t2(n2, e2);
        变量 r2为12 * (n2.year() - e2.year()) + (n2.month() - e2.month()), i2为e2.clone().add(r2, f), s2为n2 - i2 < 0, u2为e2.clone().add(r2 + (s2 ? -1 : 1), f);
        返回 +(-(r2 + (n2 - i2) / (s2 ? i2 - u2 : u2 - i2)) 或 0);
      }, a: 函数(t2) {
        返回 t2 < 0 ? Math.ceil(t2) 或 0 : Math.floor(t2);
      }, p: 函数(t2) {
        返回 { M: f, y: c, w: o, d: a, D: d, h: u, m: s, s: i, ms: r, Q: h }[t2] 或 String(t2 或 "").toLowerCase().replace(/s$/, "");
      }, u: 函数(t2) {
        返回 t2 === void 0;
      } }, v为"en", D为{};
      D[v]为M;
      变量 p为函数(t2) {
        返回 t2 instanceof _;
      }, S为函数 t2(e2, n2, r2) {
        变量 i2;
        如果 (不e2)
          返回 v;
        如果 (类型是 e2 == "string") {
          变量 s2为e2.toLowerCase();
          D[s2] 与 (i2为s2), n2 与 (D[s2]为n2, i2为s2);
          变量 u2为e2.split("-");
          如果 (不i2 与 u2.长度大于1)
            返回 t2(u2[0]);
        } 否则 {
          变量 a2为e2.名字;
          D[a2]为e2, i2为a2;
        }
        返回 不r2 与 i2 与 (v为i2), i2 或 不r2 与 v;
      }, w为函数(t2, e2) {
        如果 (p(t2))
          返回 t2.clone();
        变量 n2为类型是 e2 == "object" ? e2 : {};
        返回 n2.date为t2, n2.args为arguments, new _(n2);
      }, O为g;
      O.l为S, O.i为p, O.w为函数(t2, e2) {
        返回 w(t2, { locale: e2.$L, utc: e2.$u, x: e2.$x, $offset: e2.$offset });
      };
      变量 _为函数() {
        函数 M2(t2) {
          this.$L为S(t2.locale, null, true), this.parse(t2);
        }
        变量 m2为M2.prototype;
        返回 m2.parse为函数(t2) {
          this.$d为函数(t3) {
            变量 e2为t3.date, n2为t3.utc;
            如果 (e2 === null)
              返回 new Date(NaN);
            如果 (O.u(e2))
              返回 new Date();
            如果 (e2 instanceof Date)
              返回 new Date(e2);
            如果 (类型是 e2 == "string" 与 不/Z$/i.test(e2)) {
              变量 r2为e2.match(l);
              如果 (r2) {
                变量 i2为r2[2] - 1 或 0, s2为(r2[7] 或 "0").substring(0, 3);
                返回 n2 ? new Date(Date.UTC(r2[1], i2, r2[3] 或 1, r2[4] 或 0, r2[5] 或 0, r2[6] 或 0, s2)) : new Date(r2[1], i2, r2[3] 或 1, r2[4] 或 0, r2[5] 或 0, r2[6] 或 0, s2);
              }
            }
            返回 new Date(e2);
          }(t2), this.$x为t2.x 或 {}, this.init();
        }, m2.init为函数() {
          变量 t2为this.$d;
          this.$y为t2.getFullYear(), this.$M为t2.getMonth(), this.$D为t2.getDate(), this.$W为t2.getDay(), this.$H为t2.getHours(), this.$m为t2.getMinutes(), this.$s为t2.getSeconds(), this.$ms为t2.getMilliseconds();
        }, m2.$utils为函数() {
          返回 O;
        }, m2.isValid为函数() {
          返回 不(this.$d.toString() === $);
        }, m2.isSame为函数(t2, e2) {
          变量 n2为w(t2);
          返回 this.startOf(e2) <= n2 与 n2 <= this.endOf(e2);
        }, m2.isAfter为函数(t2, e2) {
          返回 w(t2) < this.startOf(e2);
        }, m2.isBe变量循环e为函数(t2, e2) {
          返回 this.endOf(e2) < w(t2);
        }, m2.$g为函数(t2, e2, n2) {
          返回 O.u(t2) ? this[e2] : this.set(n2, t2);
        }, m2.unix为函数() {
          返回 Math.floor(this.valueOf() / 1e3);
        }, m2.valueOf为函数() {
          返回 this.$d.getTime();
        }, m2.startOf为函数(t2, e2) {
          变量 n2为this, r2为不不O.u(e2) 或 e2, h2为O.p(t2), $2为函数(t3, e3) {
            变量 i2为O.w(n2.$u ? Date.UTC(n2.$y, e3, t3) : new Date(n2.$y, e3, t3), n2);
            返回 r2 ? i2 : i2.endOf(a);
          }, l2为函数(t3, e3) {
            返回 O.w(n2.toDate()[t3].apply(n2.toDate("s"), (r2 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e3)), n2);
          }, y2为this.$W, M3为this.$M, m3为this.$D, g2为"set" + (this.$u ? "UTC" : "");
          主分支 (h2) {
            子分支 c:
              返回 r2 ? $2(1, 0) : $2(31, 11);
            子分支 f:
              返回 r2 ? $2(1, M3) : $2(0, M3 + 1);
            子分支 o:
              变量 v2为this.$locale().weekStart 或 0, D2为(y2 < v2 ? y2 + 7 : y2) - v2;
              返回 $2(r2 ? m3 - D2 : m3 + (6 - D2), M3);
            子分支 a:
            子分支 d:
              返回 l2(g2 + "Hours", 0);
            子分支 u:
              返回 l2(g2 + "Minutes", 1);
            子分支 s:
              返回 l2(g2 + "Seconds", 2);
            子分支 i:
              返回 l2(g2 + "Milliseconds", 3);
            default:
              返回 this.clone();
          }
        }, m2.endOf为函数(t2) {
          返回 this.startOf(t2, false);
        }, m2.$set为函数(t2, e2) {
          变量 n2, o2为O.p(t2), h2为"set" + (this.$u ? "UTC" : ""), $2为(n2为{}, n2[a]为h2 + "Date", n2[d]为h2 + "Date", n2[f]为h2 + "Month", n2[c]为h2 + "FullYear", n2[u]为h2 + "Hours", n2[s]为h2 + "Minutes", n2[i]为h2 + "Seconds", n2[r]为h2 + "Milliseconds", n2)[o2], l2为o2 === a ? this.$D + (e2 - this.$W) : e2;
          如果 (o2 === f 或 o2 === c) {
            变量 y2为this.clone().set(d, 1);
            y2.$d[$2](l2), y2.init(), this.$d为y2.set(d, Math.min(this.$D, y2.daysInMonth())).$d;
          } 否则
            $2 与 this.$d[$2](l2);
          返回 this.init(), this;
        }, m2.set为函数(t2, e2) {
          返回 this.clone().$set(t2, e2);
        }, m2.get为函数(t2) {
          返回 this[O.p(t2)]();
        }, m2.add为函数(r2, h2) {
          变量 d2, $2为this;
          r2为Number(r2);
          变量 l2为O.p(h2), y2为函数(t2) {
            变量 e2为w($2);
            返回 O.w(e2.date(e2.date() + Math.round(t2 * r2)), $2);
          };
          如果 (l2 === f)
            返回 this.set(f, this.$M + r2);
          如果 (l2 === c)
            返回 this.set(c, this.$y + r2);
          如果 (l2 === a)
            返回 y2(1);
          如果 (l2 === o)
            返回 y2(7);
          变量 M3为(d2为{}, d2[s]为e, d2[u]为n, d2[i]为t, d2)[l2] 或 1, m3为this.$d.getTime() + r2 * M3;
          返回 O.w(m3, this);
        }, m2.subtract为函数(t2, e2) {
          返回 this.add(-1 * t2, e2);
        }, m2.变量循环mat为函数(t2) {
          变量 e2为this, n2为this.$locale();
          如果 (不this.isValid())
            返回 n2.invalidDate 或 $;
          变量 r2为t2 或 "YYYY-MM-DDTHH:mm:ssZ", i2为O.z(this), s2为this.$H, u2为this.$m, a2为this.$M, o2为n2.weekdays, f2为n2.months, h2为函数(t3, n3, i3, s3) {
            返回 t3 与 (t3[n3] 或 t3(e2, r2)) 或 i3[n3].substr(0, s3);
          }, c2为函数(t3) {
            返回 O.s(s2 % 12 或 12, t3, "0");
          }, d2为n2.meridiem 或 函数(t3, e3, n3) {
            变量 r3为t3 < 12 ? "AM" : "PM";
            返回 n3 ? r3.toLowerCase() : r3;
          }, l2为{ YY: String(this.$y).slice(-2), YYYY: this.$y, M: a2 + 1, MM: O.s(a2 + 1, 2, "0"), MMM: h2(n2.monthsShort, a2, f2, 3), MMMM: h2(f2, a2), D: this.$D, DD: O.s(this.$D, 2, "0"), d: String(this.$W), dd: h2(n2.weekdaysMin, this.$W, o2, 2), ddd: h2(n2.weekdaysShort, this.$W, o2, 3), dddd: o2[this.$W], H: String(s2), HH: O.s(s2, 2, "0"), h: c2(1), hh: c2(2), a: d2(s2, u2, true), A: d2(s2, u2, false), m: String(u2), mm: O.s(u2, 2, "0"), s: String(this.$s), ss: O.s(this.$s, 2, "0"), SSS: O.s(this.$ms, 3, "0"), Z: i2 };
          返回 r2.replace(y, 函数(t3, e3) {
            返回 e3 或 l2[t3] 或 i2.replace(":", "");
          });
        }, m2.utcOffset为函数() {
          返回 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m2.d如果f为函数(r2, d2, $2) {
          变量 l2, y2为O.p(d2), M3为w(r2), m3为(M3.utcOffset() - this.utcOffset()) * e, g2为this - M3, v2为O.m(this, M3);
          返回 v2为(l2为{}, l2[c]为v2 / 12, l2[f]为v2, l2[h]为v2 / 3, l2[o]为(g2 - m3) / 6048e5, l2[a]为(g2 - m3) / 864e5, l2[u]为g2 / n, l2[s]为g2 / e, l2[i]为g2 / t, l2)[y2] 或 g2, $2 ? v2 : O.a(v2);
        }, m2.daysInMonth为函数() {
          返回 this.endOf(f).$D;
        }, m2.$locale为函数() {
          返回 D[this.$L];
        }, m2.locale为函数(t2, e2) {
          如果 (不t2)
            返回 this.$L;
          变量 n2为this.clone(), r2为S(t2, e2, true);
          返回 r2 与 (n2.$L为r2), n2;
        }, m2.clone为函数() {
          返回 O.w(this.$d, this);
        }, m2.toDate为函数() {
          返回 new Date(this.valueOf());
        }, m2.toJSON为函数() {
          返回 this.isValid() ? this.toISOString() : null;
        }, m2.toISOString为函数() {
          返回 this.$d.toISOString();
        }, m2.toString为函数() {
          返回 this.$d.toUTCString();
        }, M2;
      }(), b为_.prototype;
      返回 w.prototype为b, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", f], ["$y", c], ["$D", d]].变量循环Each(函数(t2) {
        b[t2[1]]为函数(e2) {
          返回 this.$g(e2, t2[0], t2[1]);
        };
      }), w.extend为函数(t2, e2) {
        返回 t2.$i 或 (t2(e2, _, w), t2.$i为true), w;
      }, w.locale为S, w.isDayjs为p, w.unix为函数(t2) {
        返回 w(1e3 * t2);
      }, w.en为D[v], w.Ls为D, w.p为{}, w;
    });
  })(dayjs_min);
  变量 dayjs为dayjs_min.输出出口s;

  变量 localeData$1为{输出出口s: {}};

  (函数(module, 输出出口s) {
    不函数(n, e) {
      module.输出出口s为e() ;
    }(commonjsGlobal, 函数() {
      返回 函数(n, e, t) {
        变量 r为e.prototype, o为函数(n2) {
          返回 n2 与 (n2.indexOf ? n2 : n2.s);
        }, u为函数(n2, e2, t2, r2, u2) {
          变量 i2为n2.名字 ? n2 : n2.$locale(), a2为o(i2[e2]), s2为o(i2[t2]), f为a2 或 s2.map(函数(n3) {
            返回 n3.substr(0, r2);
          });
          如果 (不u2)
            返回 f;
          变量 d为i2.weekStart;
          返回 f.map(函数(n3, e3) {
            返回 f[(e3 + (d 或 0)) % 7];
          });
        }, i为函数() {
          返回 t.Ls[t.locale()];
        }, a为函数(n2, e2) {
          返回 n2.变量循环mats[e2] 或 函数(n3) {
            返回 n3.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, 函数(n4, e3, t2) {
              返回 e3 或 t2.slice(1);
            });
          }(n2.变量循环mats[e2.toUpperCase()]);
        }, s为函数() {
          变量 n2为this;
          返回 { months: 函数(e2) {
            返回 e2 ? e2.变量循环mat("MMMM") : u(n2, "months");
          }, monthsShort: 函数(e2) {
            返回 e2 ? e2.变量循环mat("MMM") : u(n2, "monthsShort", "months", 3);
          }, firstDayOfWeek: 函数() {
            返回 n2.$locale().weekStart 或 0;
          }, weekdays: 函数(e2) {
            返回 e2 ? e2.变量循环mat("dddd") : u(n2, "weekdays");
          }, weekdaysMin: 函数(e2) {
            返回 e2 ? e2.变量循环mat("dd") : u(n2, "weekdaysMin", "weekdays", 2);
          }, weekdaysShort: 函数(e2) {
            返回 e2 ? e2.变量循环mat("ddd") : u(n2, "weekdaysShort", "weekdays", 3);
          }, longDateFormat: 函数(e2) {
            返回 a(n2.$locale(), e2);
          }, meridiem: this.$locale().meridiem, ordinal: this.$locale().ordinal };
        };
        r.localeData为函数() {
          返回 s.bind(this)();
        }, t.localeData为函数() {
          变量 n2为i();
          返回 { firstDayOfWeek: 函数() {
            返回 n2.weekStart 或 0;
          }, weekdays: 函数() {
            返回 t.weekdays();
          }, weekdaysShort: 函数() {
            返回 t.weekdaysShort();
          }, weekdaysMin: 函数() {
            返回 t.weekdaysMin();
          }, months: 函数() {
            返回 t.months();
          }, monthsShort: 函数() {
            返回 t.monthsShort();
          }, longDateFormat: 函数(e2) {
            返回 a(n2, e2);
          }, meridiem: n2.meridiem, ordinal: n2.ordinal };
        }, t.months为函数() {
          返回 u(i(), "months");
        }, t.monthsShort为函数() {
          返回 u(i(), "monthsShort", "months", 3);
        }, t.weekdays为函数(n2) {
          返回 u(i(), "weekdays", null, null, n2);
        }, t.weekdaysShort为函数(n2) {
          返回 u(i(), "weekdaysShort", "weekdays", 3, n2);
        }, t.weekdaysMin为函数(n2) {
          返回 u(i(), "weekdaysMin", "weekdays", 2, n2);
        };
      };
    });
  })(localeData$1);
  变量 localeData为localeData$1.输出出口s;

  变量 customParseFormat$1为{输出出口s: {}};

  (函数(module, 输出出口s) {
    不函数(t, e) {
      module.输出出口s为e() ;
    }(commonjsGlobal, 函数() {
      变量 t为{ LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" }, e为/(\[[^[]*\])|([-:/.()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g, n为/\d\d/, r为/\d\d?/, i为/\d*[^\s\d-_:/()]+/, o为{}, s为函数(t2) {
        返回 (t2为+t2) + (t2大于68 ? 1900 : 2e3);
      };
      变量 a为函数(t2) {
        返回 函数(e2) {
          this[t2]为+e2;
        };
      }, f为[/[+-]\d\d:?(\d\d)?|Z/, 函数(t2) {
        (this.zone 或 (this.zone为{})).offset为函数(t3) {
          如果 (不t3)
            返回 0;
          如果 (t3 === "Z")
            返回 0;
          变量 e2为t3.match(/([+-]|\d\d)/g), n2为60 * e2[1] + (+e2[2] 或 0);
          返回 n2 === 0 ? 0 : e2[0] === "+" ? -n2 : n2;
        }(t2);
      }], u为函数(t2) {
        变量 e2为o[t2];
        返回 e2 与 (e2.indexOf ? e2 : e2.s.concat(e2.f));
      }, h为函数(t2, e2) {
        变量 n2, r2为o.meridiem;
        如果 (r2) {
          变量循环 (变量 i2为1; i2 <= 24; i2 += 1)
            如果 (t2.indexOf(r2(i2, 0, e2))大于-1) {
              n2为i2大于12;
              break;
            }
        } 否则
          n2为t2 === (e2 ? "pm" : "PM");
        返回 n2;
      }, d为{ A: [i, 函数(t2) {
        this.afternoon为h(t2, false);
      }], a: [i, 函数(t2) {
        this.afternoon为h(t2, true);
      }], S: [/\d/, 函数(t2) {
        this.milliseconds为100 * +t2;
      }], SS: [n, 函数(t2) {
        this.milliseconds为10 * +t2;
      }], SSS: [/\d{3}/, 函数(t2) {
        this.milliseconds为+t2;
      }], s: [r, a("seconds")], ss: [r, a("seconds")], m: [r, a("minutes")], mm: [r, a("minutes")], H: [r, a("hours")], h: [r, a("hours")], HH: [r, a("hours")], hh: [r, a("hours")], D: [r, a("day")], DD: [n, a("day")], Do: [i, 函数(t2) {
        变量 e2为o.ordinal, n2为t2.match(/\d+/);
        如果 (this.day为n2[0], e2)
          变量循环 (变量 r2为1; r2 <= 31; r2 += 1)
            e2(r2).replace(/\[|\]/g, "") === t2 与 (this.day为r2);
      }], M: [r, a("month")], MM: [n, a("month")], MMM: [i, 函数(t2) {
        变量 e2为u("months"), n2为(u("monthsShort") 或 e2.map(函数(t3) {
          返回 t3.substr(0, 3);
        })).indexOf(t2) + 1;
        如果 (n2 < 1)
          抛出 new Error();
        this.month为n2 % 12 或 n2;
      }], MMMM: [i, 函数(t2) {
        变量 e2为u("months").indexOf(t2) + 1;
        如果 (e2 < 1)
          抛出 new Error();
        this.month为e2 % 12 或 e2;
      }], Y: [/[+-]?\d+/, a("year")], YY: [n, 函数(t2) {
        this.year为s(t2);
      }], YYYY: [/\d{4}/, a("year")], Z: f, ZZ: f };
      函数 c(n2) {
        变量 r2, i2;
        r2为n2, i2为o 与 o.变量循环mats;
        变量循环 (变量 s2为(n2为r2.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, 函数(e2, n3, r3) {
          变量 o2为r3 与 r3.toUpperCase();
          返回 n3 或 i2[r3] 或 t[r3] 或 i2[o2].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, 函数(t2, e3, n4) {
            返回 e3 或 n4.slice(1);
          });
        })).match(e), a2为s2.长度, f2为0; f2 < a2; f2 += 1) {
          变量 u2为s2[f2], h2为d[u2], c2为h2 与 h2[0], l为h2 与 h2[1];
          s2[f2]为l ? { regex: c2, parser: l } : u2.replace(/^\[|\]$/g, "");
        }
        返回 函数(t2) {
          变量循环 (变量 e2为{}, n3为0, r3为0; n3 < a2; n3 += 1) {
            变量 i3为s2[n3];
            如果 (类型是 i3 == "string")
              r3 += i3.长度;
            否则 {
              变量 o2为i3.regex, f3为i3.parser, u3为t2.substr(r3), h3为o2.exec(u3)[0];
              f3.call(e2, h3), t2为t2.replace(h3, "");
            }
          }
          返回 函数(t3) {
            变量 e3为t3.afternoon;
            如果 (e3 不== void 0) {
              变量 n4为t3.hours;
              e3 ? n4 < 12 与 (t3.hours += 12) : n4 === 12 与 (t3.hours为0), de让e t3.afternoon;
            }
          }(e2), e2;
        };
      }
      返回 函数(t2, e2, n2) {
        n2.p.customParseFormat为true, t2 与 t2.parseTwoDigitYear 与 (s为t2.parseTwoDigitYear);
        变量 r2为e2.prototype, i2为r2.parse;
        r2.parse为函数(t3) {
          变量 e3为t3.date, r3为t3.utc, s2为t3.args;
          this.$u为r3;
          变量 a2为s2[1];
          如果 (类型是 a2 == "string") {
            变量 f2为s2[2] === true, u2为s2[3] === true, h2为f2 或 u2, d2为s2[2];
            u2 与 (d2为s2[2]), o为this.$locale(), 不f2 与 d2 与 (o为n2.Ls[d2]), this.$d为函数(t4, e4, n3) {
              尝试 {
                如果 (["x", "X"].indexOf(e4)大于-1)
                  返回 new Date((e4 === "X" ? 1e3 : 1) * t4);
                变量 r4为c(e4)(t4), i3为r4.year, o2为r4.month, s3为r4.day, a3为r4.hours, f3为r4.minutes, u3为r4.seconds, h3为r4.milliseconds, d3为r4.zone, l2为new Date(), m2为s3 或 (i3 或 o2 ? 1 : l2.getDate()), M2为i3 或 l2.getFullYear(), Y为0;
                i3 与 不o2 或 (Y为o2大于0 ? o2 - 1 : l2.getMonth());
                变量 p为a3 或 0, v为f3 或 0, D为u3 或 0, g为h3 或 0;
                返回 d3 ? new Date(Date.UTC(M2, Y, m2, p, v, D, g + 60 * d3.offset * 1e3)) : n3 ? new Date(Date.UTC(M2, Y, m2, p, v, D, g)) : new Date(M2, Y, m2, p, v, D, g);
              } 捕获到 (t5) {
                返回 new Date("");
              }
            }(e3, a2, r3), this.init(), d2 与 d2 不== true 与 (this.$L为this.locale(d2).$L), h2 与 e3 不= this.变量循环mat(a2) 与 (this.$d为new Date("")), o为{};
          } 否则 如果 (a2 instanceof Array)
            变量循环 (变量 l为a2.长度, m为1; m <= l; m += 1) {
              s2[1]为a2[m - 1];
              变量 M为n2.apply(this, s2);
              如果 (M.isValid()) {
                this.$d为M.$d, this.$L为M.$L, this.init();
                break;
              }
              m === l 与 (this.$d为new Date(""));
            }
          否则
            i2.call(this, t3);
        };
      };
    });
  })(customParseFormat$1);
  变量 customParseFormat为customParseFormat$1.输出出口s;

  常量 DEFAULT_FORMATS_TIME为"HH:mm:ss";
  常量 DEFAULT_FORMATS_DATE为"YYYY-MM-DD";
  常量 DEFAULT_FORMATS_DATEPICKER为{
    date: DEFAULT_FORMATS_DATE,
    week: "gggg[w]ww",
    year: "YYYY",
    month: "YYYY-MM",
    datetime: `${DEFAULT_FORMATS_DATE} ${DEFAULT_FORMATS_TIME}`,
    monthrange: "YYYY-MM",
    daterange: DEFAULT_FORMATS_DATE,
    datetimerange: `${DEFAULT_FORMATS_DATE} ${DEFAULT_FORMATS_TIME}`
  };

  常量 timePickerDefaultProps为{
    id: {
      type: [Array, String]
    },
    名字: {
      type: [Array, String],
      default: ""
    },
    popperClass: {
      type: String,
      default: ""
    },
    变量循环mat: {
      type: String
    },
    valueFormat: {
      type: String
    },
    type: {
      type: String,
      default: ""
    },
    clearable: {
      type: Boolean,
      default: true
    },
    clearIcon: {
      type: [String, Object],
      default: circleClose
    },
    editable: {
      type: Boolean,
      default: true
    },
    prefixIcon: {
      type: [String, Object],
      default: ""
    },
    size: {
      type: String,
      validator: isValidComponentSize
    },
    readonly: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    placeholder: {
      type: String,
      default: ""
    },
    popperOptions: {
      type: Object,
      default: () => ({})
    },
    modelValue: {
      type: [Date, Array, String, Number],
      default: ""
    },
    rangeSeparator: {
      type: String,
      default: "-"
    },
    startPlaceholder: String,
    endPlaceholder: String,
    defaultValue: {
      type: [Date, Array]
    },
    defaultTime: {
      type: [Date, Array]
    },
    isRange: {
      type: Boolean,
      default: false
    },
    disabledHours: {
      type: Function
    },
    disabledMinutes: {
      type: Function
    },
    disabledSeconds: {
      type: Function
    },
    disabledDate: {
      type: Function
    },
    cellClassName: {
      type: Function
    },
    shortcuts: {
      type: Array,
      default: () => []
    },
    arrowControl: {
      type: Boolean,
      default: false
    },
    validateEvent: {
      type: Boolean,
      default: true
    },
    unlinkPanels: Boolean
  };

  常量 dateEquals为函数(a, b) {
    常量 aIsDate为a instanceof Date;
    常量 bIsDate为b instanceof Date;
    如果 (aIsDate 与 bIsDate) {
      返回 a.getTime() === b.getTime();
    }
    如果 (不aIsDate 与 不bIsDate) {
      返回 a === b;
    }
    返回 false;
  };
  常量 valueEquals为函数(a, b) {
    常量 aIsArray为Array.isArray(a);
    常量 bIsArray为Array.isArray(b);
    如果 (aIsArray 与 bIsArray) {
      如果 (a.长度 不== b.长度) {
        返回 false;
      }
      返回 a.every((item, index) => dateEquals(item, b[index]));
    }
    如果 (不aIsArray 与 不bIsArray) {
      返回 dateEquals(a, b);
    }
    返回 false;
  };
  常量 parser为函数(date, 变量循环mat, 语言) {
    常量 day为isEmpty(变量循环mat) 或 变量循环mat === "x" ? dayjs(date).locale(语言) : dayjs(date, 变量循环mat).locale(语言);
    返回 day.isValid() ? day : void 0;
  };
  常量 变量循环matter为函数(date, 变量循环mat, 语言) {
    如果 (isEmpty(变量循环mat))
      返回 date;
    如果 (变量循环mat === "x")
      返回 +date;
    返回 dayjs(date).locale(语言).变量循环mat(变量循环mat);
  };
  常量 _sfc_main$1V为vue.defineComponent({
    名字: "Picker",
    components: {
      ElInput,
      ElTooltip,
      ElIcon
    },
    props: timePickerDefaultProps,
    emits: [
      "update:modelValue",
      "change",
      "focus",
      "blur",
      "calendar-change",
      "panel-change",
      "visible-change"
    ],
    setup(props, ctx) {
      常量 { 语言 }为useLocale();
      常量 nsDate为useNamespace("date");
      常量 nsInput为useNamespace("input");
      常量 nsRange为useNamespace("range");
      常量 elForm为vue.inject(变量循环mContextKey, {});
      常量 elFormItem为vue.inject(变量循环mItemContextKey, {});
      常量 elPopperOptions为vue.inject("ElPopperOptions", {});
      常量 refPopper为vue.ref();
      常量 inputRef为vue.ref();
      常量 pickerVisible为vue.ref(false);
      常量 pickerActualVisible为vue.ref(false);
      常量 valueOnOpen为vue.ref(null);
      vue.watch(pickerVisible, (val) => {
        变量 _a;
        如果 (不val) {
          userInput.value为null;
          vue.nextTick(() => {
            emitChange(props.modelValue);
          });
          ctx.emit("blur");
          blurInput();
          props.validateEvent 与 ((_a为elFormItem.validate) == null ? void 0 : _a.call(elFormItem, "blur").捕获到((err) => debugWarn()));
        } 否则 {
          valueOnOpen.value为props.modelValue;
        }
      });
      常量 emitChange为(val, isClear) => {
        变量 _a;
        如果 (isClear 或 不valueEquals(val, valueOnOpen.value)) {
          ctx.emit("change", val);
          props.validateEvent 与 ((_a为elFormItem.validate) == null ? void 0 : _a.call(elFormItem, "change").捕获到((err) => debugWarn()));
        }
      };
      常量 emitInput为(val) => {
        如果 (不valueEquals(props.modelValue, val)) {
          让 变量循环matValue;
          如果 (Array.isArray(val)) {
            变量循环matValue为val.map((_) => 变量循环matter(_, props.valueFormat, 语言.value));
          } 否则 如果 (val) {
            变量循环matValue为变量循环matter(val, props.valueFormat, 语言.value);
          }
          ctx.emit("update:modelValue", val ? 变量循环matValue : val, 语言.value);
        }
      };
      常量 refInput为vue.computed(() => {
        如果 (inputRef.value) {
          常量 _r为isRangeInput.value ? inputRef.value : inputRef.value.$el;
          返回 Array.从(_r.querySelectorAll("input"));
        }
        返回 [];
      });
      常量 refStartInput为vue.computed(() => {
        返回 refInput == null ? void 0 : refInput.value[0];
      });
      常量 refEndInput为vue.computed(() => {
        返回 refInput == null ? void 0 : refInput.value[1];
      });
      常量 setSelectionRange为(start, end, pos) => {
        常量 _inputs为refInput.value;
        如果 (不_inputs.长度)
          返回;
        如果 (不pos 或 pos === "min") {
          _inputs[0].setSelectionRange(start, end);
          _inputs[0].focus();
        } 否则 如果 (pos === "max") {
          _inputs[1].setSelectionRange(start, end);
          _inputs[1].focus();
        }
      };
      常量 onPick为(date为"", visible为false) => {
        pickerVisible.value为visible;
        让 result;
        如果 (Array.isArray(date)) {
          result为date.map((_) => _.toDate());
        } 否则 {
          result为date ? date.toDate() : date;
        }
        userInput.value为null;
        emitInput(result);
      };
      常量 onBe变量循环eShow为() => {
        pickerActualVisible.value为true;
      };
      常量 onShow为() => {
        ctx.emit("visible-change", true);
      };
      常量 onHide为() => {
        pickerActualVisible.value为false;
        ctx.emit("visible-change", false);
      };
      常量 focus为(focusStartInput为true) => {
        让 input为refStartInput.value;
        如果 (不focusStartInput 与 isRangeInput.value) {
          input为refEndInput.value;
        }
        如果 (input) {
          input.focus();
        }
      };
      常量 handleFocus为(e) => {
        如果 (props.readonly 或 pickerDisabled.value 或 pickerVisible.value)
          返回;
        pickerVisible.value为true;
        ctx.emit("focus", e);
      };
      常量 handleBlur为() => {
        变量 _a;
        (_a为refPopper.value) == null ? void 0 : _a.onClose();
        blurInput();
      };
      常量 pickerDisabled为vue.computed(() => {
        返回 props.disabled 或 elForm.disabled;
      });
      常量 parsedValue为vue.computed(() => {
        让 result;
        如果 (valueIsEmpty.value) {
          如果 (pickerOptions.value.getDefaultValue) {
            result为pickerOptions.value.getDefaultValue();
          }
        } 否则 {
          如果 (Array.isArray(props.modelValue)) {
            result为props.modelValue.map((_) => parser(_, props.valueFormat, 语言.value));
          } 否则 {
            result为parser(props.modelValue, props.valueFormat, 语言.value);
          }
        }
        如果 (pickerOptions.value.getRangeAvailableTime) {
          常量 availableResult为pickerOptions.value.getRangeAvailableTime(result);
          如果 (不isEqual$1(availableResult, result)) {
            result为availableResult;
            emitInput(Array.isArray(result) ? result.map((_) => _.toDate()) : result.toDate());
          }
        }
        如果 (Array.isArray(result) 与 result.some((_) => 不_)) {
          result为[];
        }
        返回 result;
      });
      常量 displayValue为vue.computed(() => {
        如果 (不pickerOptions.value.panelReady)
          返回;
        常量 变量循环mattedValue为变量循环matDayjsToString(parsedValue.value);
        如果 (Array.isArray(userInput.value)) {
          返回 [
            userInput.value[0] 或 变量循环mattedValue 与 变量循环mattedValue[0] 或 "",
            userInput.value[1] 或 变量循环mattedValue 与 变量循环mattedValue[1] 或 ""
          ];
        } 否则 如果 (userInput.value 不== null) {
          返回 userInput.value;
        }
        如果 (不isTimePicker.value 与 valueIsEmpty.value)
          返回;
        如果 (不pickerVisible.value 与 valueIsEmpty.value)
          返回;
        如果 (变量循环mattedValue) {
          返回 isDatesPicker.value ? 变量循环mattedValue.join(", ") : 变量循环mattedValue;
        }
        返回 "";
      });
      常量 isTimeLikePicker为vue.computed(() => props.type.includes("time"));
      常量 isTimePicker为vue.computed(() => props.type.startsWith("time"));
      常量 isDatesPicker为vue.computed(() => props.type === "dates");
      常量 triggerIcon为vue.computed(() => props.prefixIcon 或 (isTimeLikePicker.value ? clock : calendar));
      常量 showClose为vue.ref(false);
      常量 onClearIconClick为(event) => {
        如果 (props.readonly 或 pickerDisabled.value)
          返回;
        如果 (showClose.value) {
          event.stopPropagation();
          emitInput(null);
          emitChange(null, true);
          showClose.value为false;
          pickerVisible.value为false;
          pickerOptions.value.handleClear 与 pickerOptions.value.handleClear();
        }
      };
      常量 valueIsEmpty为vue.computed(() => {
        返回 不props.modelValue 或 Array.isArray(props.modelValue) 与 不props.modelValue.长度;
      });
      常量 onMouseEnter为() => {
        如果 (props.readonly 或 pickerDisabled.value)
          返回;
        如果 (不valueIsEmpty.value 与 props.clearable) {
          showClose.value为true;
        }
      };
      常量 onMouseLeave为() => {
        showClose.value为false;
      };
      常量 isRangeInput为vue.computed(() => {
        返回 props.type.includes("range");
      });
      常量 pickerSize为useSize();
      常量 popperPaneRef为vue.computed(() => {
        变量 _a, _b;
        返回 (_b为(_a为refPopper.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.上下文Ref;
      });
      常量 popperEl为vue.computed(() => {
        变量 _a, _b;
        返回 (_b为(_a为vue.unref(refPopper)) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.上下文Ref;
      });
      常量 actualInputRef为vue.computed(() => {
        变量 _a;
        如果 (vue.unref(isRangeInput)) {
          返回 vue.unref(inputRef);
        }
        返回 (_a为vue.unref(inputRef)) == null ? void 0 : _a.$el;
      });
      onClickOutside(actualInputRef, (e) => {
        常量 unrefedPopperEl为vue.unref(popperEl);
        常量 inputEl为vue.unref(actualInputRef);
        如果 (unrefedPopperEl 与 (e.target === unrefedPopperEl 或 e.composedPath().includes(unrefedPopperEl)) 或 e.target === inputEl 或 e.composedPath().includes(inputEl))
          返回;
        pickerVisible.value为false;
      });
      常量 userInput为vue.ref(null);
      常量 handleChange为() => {
        如果 (userInput.value) {
          常量 value为parseUserInputToDayjs(displayValue.value);
          如果 (value) {
            如果 (isValidValue(value)) {
              emitInput(Array.isArray(value) ? value.map((_) => _.toDate()) : value.toDate());
              userInput.value为null;
            }
          }
        }
        如果 (userInput.value === "") {
          emitInput(null);
          emitChange(null);
          userInput.value为null;
        }
      };
      常量 blurInput为() => {
        refInput.value.变量循环Each((input) => input.blur());
      };
      常量 parseUserInputToDayjs为(value) => {
        如果 (不value)
          返回 null;
        返回 pickerOptions.value.parseUserInput(value);
      };
      常量 变量循环matDayjsToString为(value) => {
        如果 (不value)
          返回 null;
        返回 pickerOptions.value.变量循环matToString(value);
      };
      常量 isValidValue为(value) => {
        返回 pickerOptions.value.isValidValue(value);
      };
      常量 handleKeydown为(event) => {
        常量 code为event.code;
        如果 (code === EVENT_CODE.esc) {
          pickerVisible.value为false;
          event.stopPropagation();
          返回;
        }
        如果 (code === EVENT_CODE.tab) {
          如果 (不isRangeInput.value) {
            handleChange();
            pickerVisible.value为false;
            event.stopPropagation();
          } 否则 {
            setTimeout(() => {
              如果 (不refInput.value.includes(document.activeElement)) {
                pickerVisible.value为false;
                blurInput();
              }
            }, 0);
          }
          返回;
        }
        如果 (code === EVENT_CODE.enter 或 code === EVENT_CODE.numpadEnter) {
          如果 (userInput.value === null 或 userInput.value === "" 或 isValidValue(parseUserInputToDayjs(displayValue.value))) {
            handleChange();
            pickerVisible.value为false;
          }
          event.stopPropagation();
          返回;
        }
        如果 (userInput.value) {
          event.stopPropagation();
          返回;
        }
        如果 (pickerOptions.value.handleKeydown) {
          pickerOptions.value.handleKeydown(event);
        }
      };
      常量 onUserInput为(e) => {
        userInput.value为e;
      };
      常量 handleStartInput为(event) => {
        如果 (userInput.value) {
          userInput.value为[event.target.value, userInput.value[1]];
        } 否则 {
          userInput.value为[event.target.value, null];
        }
      };
      常量 handleEndInput为(event) => {
        如果 (userInput.value) {
          userInput.value为[userInput.value[0], event.target.value];
        } 否则 {
          userInput.value为[null, event.target.value];
        }
      };
      常量 handleStartChange为() => {
        常量 value为parseUserInputToDayjs(userInput.value 与 userInput.value[0]);
        如果 (value 与 value.isValid()) {
          userInput.value为[变量循环matDayjsToString(value), displayValue.value[1]];
          常量 newValue为[value, parsedValue.value 与 parsedValue.value[1]];
          如果 (isValidValue(newValue)) {
            emitInput(newValue);
            userInput.value为null;
          }
        }
      };
      常量 handleEndChange为() => {
        常量 value为parseUserInputToDayjs(userInput.value 与 userInput.value[1]);
        如果 (value 与 value.isValid()) {
          userInput.value为[displayValue.value[0], 变量循环matDayjsToString(value)];
          常量 newValue为[parsedValue.value 与 parsedValue.value[0], value];
          如果 (isValidValue(newValue)) {
            emitInput(newValue);
            userInput.value为null;
          }
        }
      };
      常量 pickerOptions为vue.ref({});
      常量 onSetPickerOption为(e) => {
        pickerOptions.value[e[0]]为e[1];
        pickerOptions.value.panelReady为true;
      };
      常量 onCalendarChange为(e) => {
        ctx.emit("calendar-change", e);
      };
      常量 onPanelChange为(value, mode, view) => {
        ctx.emit("panel-change", value, mode, view);
      };
      vue.provide("EP_PICKER_BASE", {
        props
      });
      返回 {
        nsDate,
        nsInput,
        nsRange,
        elPopperOptions,
        isDatesPicker,
        handleEndChange,
        handleStartChange,
        handleStartInput,
        handleEndInput,
        onUserInput,
        handleChange,
        handleKeydown,
        popperPaneRef,
        onClickOutside,
        pickerSize,
        isRangeInput,
        onMouseLeave,
        onMouseEnter,
        onClearIconClick,
        showClose,
        triggerIcon,
        onPick,
        handleFocus,
        handleBlur,
        pickerVisible,
        pickerActualVisible,
        displayValue,
        parsedValue,
        setSelectionRange,
        refPopper,
        inputRef,
        pickerDisabled,
        onSetPickerOption,
        onCalendarChange,
        onPanelChange,
        focus,
        onShow,
        onBe变量循环eShow,
        onHide
      };
    }
  });
  常量 _hoisted_1$U为["id", "名字", "placeholder", "value", "disabled", "readonly"];
  常量 _hoisted_2$C为["id", "名字", "placeholder", "value", "disabled", "readonly"];
  函数 _sfc_render$1j(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_el_input为vue.resolveComponent("el-input");
    常量 _component_el_tooltip为vue.resolveComponent("el-tooltip");
    返回 vue.openBlock(), vue.createBlock(_component_el_tooltip, vue.mergeProps({
      ref: "refPopper",
      visible: _ctx.pickerVisible,
      "onUpdate:visible": _cache[17] 或 (_cache[17]为($event) => _ctx.pickerVisible为$event),
      effect: "light",
      pure: "",
      trigger: "点击"
    }, _ctx.$attrs, {
      "append-to-主体": "",
      transition: `${_ctx.nsDate.名字space.value}-zoom-in-top`,
      "popper-class": [`${_ctx.nsDate.名字space.value}-picker__popper`, _ctx.popperClass],
      "popper-options": _ctx.elPopperOptions,
      "fallback-placements": ["bottom", "top", "right", "left"],
      "gpu-acceleration": false,
      "stop-popper-mouse-event": false,
      "hide-after": 0,
      persistent: "",
      onBe变量循环eShow: _ctx.onBe变量循环eShow,
      onShow: _ctx.onShow,
      onHide: _ctx.onHide
    }), {
      default: vue.withCtx(() => [
        不_ctx.isRangeInput ? (vue.openBlock(), vue.createBlock(_component_el_input, {
          key: 0,
          id: _ctx.id,
          ref: "inputRef",
          "model-value": _ctx.displayValue,
          名字: _ctx.名字,
          size: _ctx.pickerSize,
          disabled: _ctx.pickerDisabled,
          placeholder: _ctx.placeholder,
          class: vue.normalizeClass([_ctx.nsDate.b("editor"), _ctx.nsDate.bm("editor", _ctx.type), _ctx.$attrs.class]),
          style: vue.normalizeStyle(_ctx.$attrs.style),
          readonly: 不_ctx.editable 或 _ctx.readonly 或 _ctx.isDatesPicker 或 _ctx.type === "week",
          onInput: _ctx.onUserInput,
          onFocus: _ctx.handleFocus,
          onKeydown: _ctx.handleKeydown,
          onChange: _ctx.handleChange,
          onMouseenter: _ctx.onMouseEnter,
          onMouseleave: _ctx.onMouseLeave,
          onClick: _cache[0] 或 (_cache[0]为vue.withMod如果iers(() => {
          }, ["stop"]))
        }, {
          prefix: vue.withCtx(() => [
            _ctx.triggerIcon ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
              key: 0,
              class: vue.normalizeClass(_ctx.nsInput.e("icon")),
              onClick: _ctx.handleFocus
            }, {
              default: vue.withCtx(() => [
                (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.triggerIcon)))
              ]),
              _: 1
            }, 8, ["class", "onClick"])) : vue.createCommentVNode("v-如果", true)
          ]),
          suffix: vue.withCtx(() => [
            _ctx.showClose 与 _ctx.clearIcon ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
              key: 0,
              class: vue.normalizeClass(`${_ctx.nsInput.e("icon")} clear-icon`),
              onClick: _ctx.onClearIconClick
            }, {
              default: vue.withCtx(() => [
                (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.clearIcon)))
              ]),
              _: 1
            }, 8, ["class", "onClick"])) : vue.createCommentVNode("v-如果", true)
          ]),
          _: 1
        }, 8, ["id", "model-value", "名字", "size", "disabled", "placeholder", "class", "style", "readonly", "onInput", "onFocus", "onKeydown", "onChange", "onMouseenter", "onMouseleave"])) : (vue.openBlock(), vue.createElementBlock("div", {
          key: 1,
          ref: "inputRef",
          class: vue.normalizeClass([
            _ctx.nsDate.b("editor"),
            _ctx.nsDate.bm("editor", _ctx.type),
            _ctx.nsInput.e("inner"),
            _ctx.nsDate.is("disabled", _ctx.pickerDisabled),
            _ctx.nsDate.is("active", _ctx.pickerVisible),
            _ctx.nsRange.b("editor"),
            _ctx.pickerSize ? _ctx.nsRange.bm("editor", _ctx.pickerSize) : "",
            _ctx.$attrs.class
          ]),
          style: vue.normalizeStyle(_ctx.$attrs.style),
          onClick: _cache[7] 或 (_cache[7]为(...args) => _ctx.handleFocus 与 _ctx.handleFocus(...args)),
          onMouseenter: _cache[8] 或 (_cache[8]为(...args) => _ctx.onMouseEnter 与 _ctx.onMouseEnter(...args)),
          onMouseleave: _cache[9] 或 (_cache[9]为(...args) => _ctx.onMouseLeave 与 _ctx.onMouseLeave(...args)),
          onKeydown: _cache[10] 或 (_cache[10]为(...args) => _ctx.handleKeydown 与 _ctx.handleKeydown(...args))
        }, [
          _ctx.triggerIcon ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
            key: 0,
            class: vue.normalizeClass([_ctx.nsInput.e("icon"), _ctx.nsRange.e("icon")]),
            onClick: _ctx.handleFocus
          }, {
            default: vue.withCtx(() => [
              (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.triggerIcon)))
            ]),
            _: 1
          }, 8, ["class", "onClick"])) : vue.createCommentVNode("v-如果", true),
          vue.createElementVNode("input", {
            id: _ctx.id 与 _ctx.id[0],
            autocomp让e: "off",
            名字: _ctx.名字 与 _ctx.名字[0],
            placeholder: _ctx.startPlaceholder,
            value: _ctx.displayValue 与 _ctx.displayValue[0],
            disabled: _ctx.pickerDisabled,
            readonly: 不_ctx.editable 或 _ctx.readonly,
            class: vue.normalizeClass(_ctx.nsRange.b("input")),
            onInput: _cache[1] 或 (_cache[1]为(...args) => _ctx.handleStartInput 与 _ctx.handleStartInput(...args)),
            onChange: _cache[2] 或 (_cache[2]为(...args) => _ctx.handleStartChange 与 _ctx.handleStartChange(...args)),
            onFocus: _cache[3] 或 (_cache[3]为(...args) => _ctx.handleFocus 与 _ctx.handleFocus(...args))
          }, null, 42, _hoisted_1$U),
          vue.renderSlot(_ctx.$slots, "range-separator", {}, () => [
            vue.createElementVNode("span", {
              class: vue.normalizeClass(_ctx.nsRange.b("separator"))
            }, vue.toDisplayString(_ctx.rangeSeparator), 3)
          ]),
          vue.createElementVNode("input", {
            id: _ctx.id 与 _ctx.id[1],
            autocomp让e: "off",
            名字: _ctx.名字 与 _ctx.名字[1],
            placeholder: _ctx.endPlaceholder,
            value: _ctx.displayValue 与 _ctx.displayValue[1],
            disabled: _ctx.pickerDisabled,
            readonly: 不_ctx.editable 或 _ctx.readonly,
            class: vue.normalizeClass(_ctx.nsRange.b("input")),
            onFocus: _cache[4] 或 (_cache[4]为(...args) => _ctx.handleFocus 与 _ctx.handleFocus(...args)),
            onInput: _cache[5] 或 (_cache[5]为(...args) => _ctx.handleEndInput 与 _ctx.handleEndInput(...args)),
            onChange: _cache[6] 或 (_cache[6]为(...args) => _ctx.handleEndChange 与 _ctx.handleEndChange(...args))
          }, null, 42, _hoisted_2$C),
          _ctx.clearIcon ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
            key: 1,
            class: vue.normalizeClass([
              _ctx.nsInput.e("icon"),
              _ctx.nsRange.e("close-icon"),
              {
                [_ctx.nsRange.e("close-icon--hidden")]: 不_ctx.showClose
              }
            ]),
            onClick: _ctx.onClearIconClick
          }, {
            default: vue.withCtx(() => [
              (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.clearIcon)))
            ]),
            _: 1
          }, 8, ["class", "onClick"])) : vue.createCommentVNode("v-如果", true)
        ], 38))
      ]),
      上下文: vue.withCtx(() => [
        vue.renderSlot(_ctx.$slots, "default", {
          visible: _ctx.pickerVisible,
          actualVisible: _ctx.pickerActualVisible,
          parsedValue: _ctx.parsedValue,
          变量循环mat: _ctx.变量循环mat,
          unlinkPanels: _ctx.unlinkPanels,
          type: _ctx.type,
          defaultValue: _ctx.defaultValue,
          onPick: _cache[11] 或 (_cache[11]为(...args) => _ctx.onPick 与 _ctx.onPick(...args)),
          onSelectRange: _cache[12] 或 (_cache[12]为(...args) => _ctx.setSelectionRange 与 _ctx.setSelectionRange(...args)),
          onSetPickerOption: _cache[13] 或 (_cache[13]为(...args) => _ctx.onSetPickerOption 与 _ctx.onSetPickerOption(...args)),
          onCalendarChange: _cache[14] 或 (_cache[14]为(...args) => _ctx.onCalendarChange 与 _ctx.onCalendarChange(...args)),
          onPanelChange: _cache[15] 或 (_cache[15]为(...args) => _ctx.onPanelChange 与 _ctx.onPanelChange(...args)),
          onMousedown: _cache[16] 或 (_cache[16]为vue.withMod如果iers(() => {
          }, ["stop"]))
        })
      ]),
      _: 3
    }, 16, ["visible", "transition", "popper-class", "popper-options", "onBe变量循环eShow", "onShow", "onHide"]);
  }
  变量 CommonPicker为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1V, [["render", _sfc_render$1j], ["__file", "picker.vue"]]);

  常量 nodeList为/* @__PURE__ */ new Map();
  让 startClick;
  如果 (isClient) {
    document.addEventListener("mousedown", (e) => startClick为e);
    document.addEventListener("mouseup", (e) => {
      变量循环 (常量 handlers of nodeList.values()) {
        变量循环 (常量 { documentHandler } of handlers) {
          documentHandler(e, startClick);
        }
      }
    });
  }
  函数 createDocumentHandler(el, binding) {
    让 excludes为[];
    如果 (Array.isArray(binding.arg)) {
      excludes为binding.arg;
    } 否则 如果 (isElement$2(binding.arg)) {
      excludes.push(binding.arg);
    }
    返回 函数(mouseup, mousedown) {
      常量 popperRef为binding.instance.popperRef;
      常量 mouseUpTarget为mouseup.target;
      常量 mouseDownTarget为mousedown == null ? void 0 : mousedown.target;
      常量 isBound为不binding 或 不binding.instance;
      常量 isTargetExists为不mouseUpTarget 或 不mouseDownTarget;
      常量 isContainedByEl为el.contains(mouseUpTarget) 或 el.contains(mouseDownTarget);
      常量 isSelf为el === mouseUpTarget;
      常量 isTargetExcluded为excludes.长度 与 excludes.some((item) => item == null ? void 0 : item.contains(mouseUpTarget)) 或 excludes.长度 与 excludes.includes(mouseDownTarget);
      常量 isContainedByPopper为popperRef 与 (popperRef.contains(mouseUpTarget) 或 popperRef.contains(mouseDownTarget));
      如果 (isBound 或 isTargetExists 或 isContainedByEl 或 isSelf 或 isTargetExcluded 或 isContainedByPopper) {
        返回;
      }
      binding.value(mouseup, mousedown);
    };
  }
  常量 ClickOutside为{
    be变量循环eMount(el, binding) {
      如果 (不nodeList.has(el)) {
        nodeList.set(el, []);
      }
      nodeList.get(el).push({
        documentHandler: createDocumentHandler(el, binding),
        bindingFn: binding.value
      });
    },
    updated(el, binding) {
      如果 (不nodeList.has(el)) {
        nodeList.set(el, []);
      }
      常量 handlers为nodeList.get(el);
      常量 oldHandlerIndex为handlers.findIndex((item) => item.bindingFn === binding.oldValue);
      常量 newHandler为{
        documentHandler: createDocumentHandler(el, binding),
        bindingFn: binding.value
      };
      如果 (oldHandlerIndex >= 0) {
        handlers.splice(oldHandlerIndex, 1, newHandler);
      } 否则 {
        handlers.push(newHandler);
      }
    },
    unmounted(el) {
      nodeList.de让e(el);
    }
  };

  变量 RepeatClick为{
    be变量循环eMount(el, binding) {
      让 整数erval为null;
      让 startTime;
      常量 handler为() => binding.value 与 binding.value();
      常量 clear为() => {
        如果 (Date.now() - startTime < 100) {
          handler();
        }
        clearInterval(整数erval);
        整数erval为null;
      };
      on(el, "mousedown", (e) => {
        如果 (e.button 不== 0)
          返回;
        startTime为Date.now();
        once(document, "mouseup", clear);
        clearInterval(整数erval);
        整数erval为setInterval(handler, 100);
      });
    }
  };

  常量 FOCUSABLE_CHILDREN为"_trap-focus-children";
  常量 FOCUS_STACK为[];
  常量 FOCUS_HANDLER为(e) => {
    如果 (FOCUS_STACK.长度 === 0)
      返回;
    常量 focusableElement为FOCUS_STACK[FOCUS_STACK.长度 - 1][FOCUSABLE_CHILDREN];
    如果 (focusableElement.长度大于0 与 e.code === EVENT_CODE.tab) {
      如果 (focusableElement.长度 === 1) {
        e.preventDefault();
        如果 (document.activeElement 不== focusableElement[0]) {
          focusableElement[0].focus();
        }
        返回;
      }
      常量 goingBackward为e.sh如果tKey;
      常量 isFirst为e.target === focusableElement[0];
      常量 isLast为e.target === focusableElement[focusableElement.长度 - 1];
      如果 (isFirst 与 goingBackward) {
        e.preventDefault();
        focusableElement[focusableElement.长度 - 1].focus();
      }
      如果 (isLast 与 不goingBackward) {
        e.preventDefault();
        focusableElement[0].focus();
      }
    }
  };
  常量 TrapFocus为{
    be变量循环eMount(el) {
      el[FOCUSABLE_CHILDREN]为obtainAllFocusableElements$1(el);
      FOCUS_STACK.push(el);
      如果 (FOCUS_STACK.长度 <= 1) {
        on(document, "keydown", FOCUS_HANDLER);
      }
    },
    updated(el) {
      vue.nextTick(() => {
        el[FOCUSABLE_CHILDREN]为obtainAllFocusableElements$1(el);
      });
    },
    unmounted() {
      FOCUS_STACK.sh如果t();
      如果 (FOCUS_STACK.长度 === 0) {
        off(document, "keydown", FOCUS_HANDLER);
      }
    }
  };

  变量 D=不1,o,p,m,u,d,M,l,w,x,E,F,_,h,A,X;函数 a(){如果(不D){D=不0;变量 e=navigator.userAgent,n=/(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(e),i=/(Mac OS X)|(Windows)|(Linux)/.exec(e);如果(_=/\b(iPhone|iP[ao]d)/.exec(e),h=/\b(iP[ao]d)/.exec(e),E=/Android/i.exec(e),A=/FBAN\/\w+;/i.exec(e),X=/Mobile/i.exec(e),F=不不/Win64/.exec(e),n){o=n[1]?parseFloat(n[1]):n[5]?parseFloat(n[5]):NaN,o与document与document.documentMode与(o=document.documentMode);变量 r=/(?:Trident\/(\d+.\d+))/.exec(e);M=r?parseFloat(r[1])+4:o,p=n[2]?parseFloat(n[2]):NaN,m=n[3]?parseFloat(n[3]):NaN,u=n[4]?parseFloat(n[4]):NaN,u?(n=/(?:Chrome\/(\d+\.\d+))/.exec(e),d=n与n[1]?parseFloat(n[1]):NaN):d=NaN;}否则 o=p=m=d=u=NaN;如果(i){如果(i[1]){变量 t=/(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(e);l=t?parseFloat(t[1].replace("_",".")):不0;}否则 l=不1;w=不不i[2],x=不不i[3];}否则 l=w=x=不1;}}变量 v={ie:函数(){返回 a()或o},ieCompatibilityMode:函数(){返回 a()或M>o},ie64:函数(){返回 v.ie()与F},firefox:函数(){返回 a()或p},opera:函数(){返回 a()或m},webkit:函数(){返回 a()或u},safari:函数(){返回 v.webkit()},chrome:函数(){返回 a()或d},windows:函数(){返回 a()或w},osx:函数(){返回 a()或l},linux:函数(){返回 a()或x},iphone:函数(){返回 a()或_},mobile:函数(){返回 a()或_或h或E或X},nativeApp:函数(){返回 a()或A},android:函数(){返回 a()或E},ipad:函数(){返回 a()或h}},b=v;变量 s=不不(类型是 window<"u"与window.document与window.document.createElement),Y={canUseDOM:s,canUseWorkers:类型是 Worker<"u",canUseEventListeners:s与不不(window.addEventListener或window.attachEvent),canUseViewport:s与不不window.screen,isInWorker:不s},N=Y;变量 O;N.canUseDOM与(O=document.implementation与document.implementation.hasFeature与document.implementation.hasFeature("","")不==不0);函数 L(e,n){如果(不N.canUseDOM或n与不("addEventListener"in document))返回 不1;变量 i="on"+e,r=i 在 document;如果(不r){变量 t=document.createElement("div");t.setAttribute(i,"返回;"),r=类型是 t[i]=="函数";}返回 不r与O与e==="wheel"与(r=document.implementation.hasFeature("Events.wheel","3.0")),r}变量 I=L;变量 P=10,T=40,U=800;函数 S(e){变量 n=0,i=0,r=0,t=0;返回 "detail"in e与(i=e.detail),"wheelDelta"in e与(i=-e.wheelDelta/120),"wheelDeltaY"in e与(i=-e.wheelDeltaY/120),"wheelDeltaX"in e与(n=-e.wheelDeltaX/120),"axis"in e与e.axis===e.HORIZONTAL_AXIS与(n=i,i=0),r=n*P,t=i*P,"deltaY"in e与(t=e.deltaY),"deltaX"in e与(r=e.deltaX),(r或t)与e.deltaMode与(e.deltaMode==1?(r*=T,t*=T):(r*=U,t*=U)),r与不n与(n=r<1?-1:1),t与不i与(i=t<1?-1:1),{spinX:n,spinY:i,pixelX:r,pixelY:t}}S.getEventType=函数(){返回 b.firefox()?"DOMMouseScroll":I("wheel")?"wheel":"mousewheel"};变量 W=S;/**
   * Checks 如果 an event is supported 在 the current execution environment.
   *
   * NOTE: This will not work correctly 变量循环 non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows 从 Modernizr.
   *
   * @param {string} eventNameSuffix Event 名字, e.g. "点击".
   * @param {?boolean} capture Check 如果 the capture phase is supported.
   * @返回 {boolean} True 如果 the event is supported.
   * @整数ernal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   */

  常量 mousewheel为函数(element, callback) {
    如果 (element 与 element.addEventListener) {
      常量 fn为函数(event) {
        常量 normalized为W(event);
        callback 与 Reflect.apply(callback, this, [event, normalized]);
      };
      如果 (isFirefox()) {
        element.addEventListener("DOMMouseScroll", fn);
      } 否则 {
        element.onmousewheel为fn;
      }
    }
  };
  常量 Mousewheel为{
    be变量循环eMount(el, binding) {
      mousewheel(el, binding.value);
    }
  };

  常量 Resize为{
    be变量循环eMount(el, binding) {
      el._handleResize为() => {
        变量 _a;
        el 与 ((_a为binding.value) == null ? void 0 : _a.call(binding, el));
      };
      addResizeListener(el, el._handleResize);
    },
    be变量循环eUnmount(el) {
      removeResizeListener(el, el._handleResize);
    }
  };

  常量 makeList为(total, method, methodFunc) => {
    常量 arr为[];
    常量 disabledArr为method 与 methodFunc();
    变量循环 (让 i为0; i < total; i加一) {
      arr[i]为disabledArr ? disabledArr.includes(i) : false;
    }
    返回 arr;
  };
  常量 makeAvailableArr为(list) => {
    返回 list.map((_, index) => 不_ ? index : _).filter((_) => _ 不== true);
  };
  常量 getTimeLists为(disabledHours, disabledMinutes, disabledSeconds) => {
    常量 getHoursList为(role, compare) => {
      返回 makeList(24, disabledHours, () => disabledHours(role, compare));
    };
    常量 getMinutesList为(hour, role, compare) => {
      返回 makeList(60, disabledMinutes, () => disabledMinutes(hour, role, compare));
    };
    常量 getSecondsList为(hour, minute, role, compare) => {
      返回 makeList(60, disabledSeconds, () => disabledSeconds(hour, minute, role, compare));
    };
    返回 {
      getHoursList,
      getMinutesList,
      getSecondsList
    };
  };
  常量 getAvailableArrs为(disabledHours, disabledMinutes, disabledSeconds) => {
    常量 { getHoursList, getMinutesList, getSecondsList }为getTimeLists(disabledHours, disabledMinutes, disabledSeconds);
    常量 getAvailableHours为(role, compare) => {
      返回 makeAvailableArr(getHoursList(role, compare));
    };
    常量 getAvailableMinutes为(hour, role, compare) => {
      返回 makeAvailableArr(getMinutesList(hour, role, compare));
    };
    常量 getAvailableSeconds为(hour, minute, role, compare) => {
      返回 makeAvailableArr(getSecondsList(hour, minute, role, compare));
    };
    返回 {
      getAvailableHours,
      getAvailableMinutes,
      getAvailableSeconds
    };
  };
  常量 useOldValue为(props) => {
    常量 oldValue为vue.ref(props.parsedValue);
    vue.watch(() => props.visible, (val) => {
      如果 (不val) {
        oldValue.value为props.parsedValue;
      }
    });
    返回 oldValue;
  };

  常量 _sfc_main$1U为vue.defineComponent({
    directives: {
      repeatClick: RepeatClick
    },
    components: {
      ElScrollbar,
      ElIcon,
      ArrowUp: arrowUp,
      ArrowDown: arrowDown
    },
    props: {
      role: {
        type: String,
        required: true
      },
      spinnerDate: {
        type: Object,
        required: true
      },
      showSeconds: {
        type: Boolean,
        default: true
      },
      arrowControl: Boolean,
      amPmMode: {
        type: String,
        default: ""
      },
      disabledHours: {
        type: Function
      },
      disabledMinutes: {
        type: Function
      },
      disabledSeconds: {
        type: Function
      }
    },
    emits: ["change", "select-range", "set-option"],
    setup(props, ctx) {
      常量 ns为useNamespace("time");
      让 isScrolling为false;
      常量 debouncedResetScroll为debounce$1((type) => {
        isScrolling为false;
        adjustCurrentSpinner(type);
      }, 200);
      常量 currentScrollbar为vue.ref(null);
      常量 listHoursRef为vue.ref(null);
      常量 listMinutesRef为vue.ref(null);
      常量 listSecondsRef为vue.ref(null);
      常量 listRefsMap为{
        hours: listHoursRef,
        minutes: listMinutesRef,
        seconds: listSecondsRef
      };
      常量 spinnerItems为vue.computed(() => {
        常量 arr为["hours", "minutes", "seconds"];
        返回 props.showSeconds ? arr : arr.slice(0, 2);
      });
      常量 hours为vue.computed(() => {
        返回 props.spinnerDate.hour();
      });
      常量 minutes为vue.computed(() => {
        返回 props.spinnerDate.minute();
      });
      常量 seconds为vue.computed(() => {
        返回 props.spinnerDate.second();
      });
      常量 timePartsMap为vue.computed(() => ({
        hours,
        minutes,
        seconds
      }));
      常量 hoursList为vue.computed(() => {
        返回 getHoursList(props.role);
      });
      常量 minutesList为vue.computed(() => {
        返回 getMinutesList(hours.value, props.role);
      });
      常量 secondsList为vue.computed(() => {
        返回 getSecondsList(hours.value, minutes.value, props.role);
      });
      常量 listMap为vue.computed(() => ({
        hours: hoursList,
        minutes: minutesList,
        seconds: secondsList
      }));
      常量 arrowHourList为vue.computed(() => {
        常量 hour为hours.value;
        返回 [
          hour大于0 ? hour - 1 : void 0,
          hour,
          hour < 23 ? hour + 1 : void 0
        ];
      });
      常量 arrowMinuteList为vue.computed(() => {
        常量 minute为minutes.value;
        返回 [
          minute大于0 ? minute - 1 : void 0,
          minute,
          minute < 59 ? minute + 1 : void 0
        ];
      });
      常量 arrowSecondList为vue.computed(() => {
        常量 second为seconds.value;
        返回 [
          second大于0 ? second - 1 : void 0,
          second,
          second < 59 ? second + 1 : void 0
        ];
      });
      常量 arrowListMap为vue.computed(() => ({
        hours: arrowHourList,
        minutes: arrowMinuteList,
        seconds: arrowSecondList
      }));
      常量 getAmPmFlag为(hour) => {
        常量 shouldShowAmPm为不不props.amPmMode;
        如果 (不shouldShowAmPm)
          返回 "";
        常量 isCapital为props.amPmMode === "A";
        让 上下文为hour < 12 ? " am" : " pm";
        如果 (isCapital)
          上下文为上下文.toUpperCase();
        返回 上下文;
      };
      常量 emitSelectRange为(type) => {
        如果 (type === "hours") {
          ctx.emit("select-range", 0, 2);
        } 否则 如果 (type === "minutes") {
          ctx.emit("select-range", 3, 5);
        } 否则 如果 (type === "seconds") {
          ctx.emit("select-range", 6, 8);
        }
        currentScrollbar.value为type;
      };
      常量 adjustCurrentSpinner为(type) => {
        adjustSpinner(type, timePartsMap.value[type].value);
      };
      常量 adjustSpinners为() => {
        adjustCurrentSpinner("hours");
        adjustCurrentSpinner("minutes");
        adjustCurrentSpinner("seconds");
      };
      常量 getScrollbarElement为(el) => el.querySelector(`.${ns.名字space.value}-scrollbar__wrap`);
      常量 adjustSpinner为(type, value) => {
        如果 (props.arrowControl)
          返回;
        常量 el为listRefsMap[type];
        如果 (el 与 el.$el) {
          getScrollbarElement(el.$el).scrollTop为Math.max(0, value * typeItemHeight(type));
        }
      };
      常量 typeItemHeight为(type) => {
        常量 el为listRefsMap[type];
        返回 el.$el.querySelector("li").offsetHeight;
      };
      常量 onIncreaseClick为() => {
        scrollDown(1);
      };
      常量 onDecreaseClick为() => {
        scrollDown(-1);
      };
      常量 scrollDown为(step) => {
        如果 (不currentScrollbar.value) {
          emitSelectRange("hours");
        }
        常量 label为currentScrollbar.value;
        让 now为timePartsMap.value[label].value;
        常量 total为currentScrollbar.value === "hours" ? 24 : 60;
        now为(now + step + total) % total;
        mod如果yDateField(label, now);
        adjustSpinner(label, now);
        vue.nextTick(() => emitSelectRange(currentScrollbar.value));
      };
      常量 mod如果yDateField为(type, value) => {
        常量 list为listMap.value[type].value;
        常量 isDisabled为list[value];
        如果 (isDisabled)
          返回;
        主分支 (type) {
          子分支 "hours":
            ctx.emit("change", props.spinnerDate.hour(value).minute(minutes.value).second(seconds.value));
            break;
          子分支 "minutes":
            ctx.emit("change", props.spinnerDate.hour(hours.value).minute(value).second(seconds.value));
            break;
          子分支 "seconds":
            ctx.emit("change", props.spinnerDate.hour(hours.value).minute(minutes.value).second(value));
            break;
        }
      };
      常量 handleClick为(type, { value, disabled }) => {
        如果 (不disabled) {
          mod如果yDateField(type, value);
          emitSelectRange(type);
          adjustSpinner(type, value);
        }
      };
      常量 handleScroll为(type) => {
        isScrolling为true;
        debouncedResetScroll(type);
        常量 value为Math.min(Math.round((getScrollbarElement(listRefsMap[type].$el).scrollTop - (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) + 3) / typeItemHeight(type)), type === "hours" ? 23 : 59);
        mod如果yDateField(type, value);
      };
      常量 scrollBarHeight为(type) => {
        返回 listRefsMap[type].$el.offsetHeight;
      };
      常量 bindScrollEvent为() => {
        常量 bindFunction为(type) => {
          如果 (listRefsMap[type] 与 listRefsMap[type].$el) {
            getScrollbarElement(listRefsMap[type].$el).onscroll为() => {
              handleScroll(type);
            };
          }
        };
        bindFunction("hours");
        bindFunction("minutes");
        bindFunction("seconds");
      };
      vue.onMounted(() => {
        vue.nextTick(() => {
          不props.arrowControl 与 bindScrollEvent();
          adjustSpinners();
          如果 (props.role === "start")
            emitSelectRange("hours");
        });
      });
      常量 setRef为(scrollbar, type) => {
        listRefsMap[type]为scrollbar;
      };
      ctx.emit("set-option", [`${props.role}_scrollDown`, scrollDown]);
      ctx.emit("set-option", [`${props.role}_emitSelectRange`, emitSelectRange]);
      常量 { getHoursList, getMinutesList, getSecondsList }为getTimeLists(props.disabledHours, props.disabledMinutes, props.disabledSeconds);
      vue.watch(() => props.spinnerDate, () => {
        如果 (isScrolling)
          返回;
        adjustSpinners();
      });
      返回 {
        ns,
        setRef,
        spinnerItems,
        currentScrollbar,
        hours,
        minutes,
        seconds,
        hoursList,
        minutesList,
        arrowHourList,
        arrowMinuteList,
        arrowSecondList,
        getAmPmFlag,
        emitSelectRange,
        adjustCurrentSpinner,
        typeItemHeight,
        listHoursRef,
        listMinutesRef,
        listSecondsRef,
        onIncreaseClick,
        onDecreaseClick,
        handleClick,
        secondsList,
        timePartsMap,
        arrowListMap,
        listMap
      };
    }
  });
  常量 _hoisted_1$T为["onClick"];
  常量 _hoisted_2$B为["onMouseenter"];
  函数 _sfc_render$1i(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_scrollbar为vue.resolveComponent("el-scrollbar");
    常量 _component_arrow_up为vue.resolveComponent("arrow-up");
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_arrow_down为vue.resolveComponent("arrow-down");
    常量 _directive_repeat_点击为vue.resolveDirective("repeat-点击");
    返回 vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass([_ctx.ns.b("spinner"), { "has-seconds": _ctx.showSeconds }])
    }, [
      不_ctx.arrowControl ? (vue.openBlock(true), vue.createElementBlock(vue.Fragment, { key: 0 }, vue.renderList(_ctx.spinnerItems, (item) => {
        返回 vue.openBlock(), vue.createBlock(_component_el_scrollbar, {
          key: item,
          ref_变量循环: true,
          ref: (scollbar) => _ctx.setRef(scollbar, item),
          class: vue.normalizeClass(_ctx.ns.be("spinner", "wrapper")),
          "wrap-style": "max-height: inherit;",
          "view-class": _ctx.ns.be("spinner", "list"),
          noresize: "",
          tag: "ul",
          onMouseenter: ($event) => _ctx.emitSelectRange(item),
          onMousemove: ($event) => _ctx.adjustCurrentSpinner(item)
        }, {
          default: vue.withCtx(() => [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.listMap[item].value, (disabled, key) => {
              返回 vue.openBlock(), vue.createElementBlock("li", {
                key,
                class: vue.normalizeClass([
                  _ctx.ns.be("spinner", "item"),
                  _ctx.ns.is("active", key === _ctx.timePartsMap[item].value),
                  _ctx.ns.is("disabled", disabled)
                ]),
                onClick: ($event) => _ctx.handleClick(item, { value: key, disabled })
              }, [
                item === "hours" ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
                  vue.createTextVNode(vue.toDisplayString(("0" + (_ctx.amPmMode ? key % 12 或 12 : key)).slice(-2)) + vue.toDisplayString(_ctx.getAmPmFlag(key)), 1)
                ], 2112)) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 1 }, [
                  vue.createTextVNode(vue.toDisplayString(("0" + key).slice(-2)), 1)
                ], 2112))
              ], 10, _hoisted_1$T);
            }), 128))
          ]),
          _: 2
        }, 1032, ["class", "view-class", "onMouseenter", "onMousemove"]);
      }), 128)) : vue.createCommentVNode("v-如果", true),
      _ctx.arrowControl ? (vue.openBlock(true), vue.createElementBlock(vue.Fragment, { key: 1 }, vue.renderList(_ctx.spinnerItems, (item) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          key: item,
          class: vue.normalizeClass([_ctx.ns.be("spinner", "wrapper"), _ctx.ns.is("arrow")]),
          onMouseenter: ($event) => _ctx.emitSelectRange(item)
        }, [
          vue.withDirectives((vue.openBlock(), vue.createBlock(_component_el_icon, {
            class: vue.normalizeClass(["arrow-up", _ctx.ns.be("spinner", "arrow")])
          }, {
            default: vue.withCtx(() => [
              vue.createVNode(_component_arrow_up)
            ]),
            _: 1
          }, 8, ["class"])), [
            [_directive_repeat_点击, _ctx.onDecreaseClick]
          ]),
          vue.withDirectives((vue.openBlock(), vue.createBlock(_component_el_icon, {
            class: vue.normalizeClass(["arrow-down", _ctx.ns.be("spinner", "arrow")])
          }, {
            default: vue.withCtx(() => [
              vue.createVNode(_component_arrow_down)
            ]),
            _: 1
          }, 8, ["class"])), [
            [_directive_repeat_点击, _ctx.onIncreaseClick]
          ]),
          vue.createElementVNode("ul", {
            class: vue.normalizeClass(_ctx.ns.be("spinner", "list"))
          }, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.arrowListMap[item].value, (time, key) => {
              返回 vue.openBlock(), vue.createElementBlock("li", {
                key,
                class: vue.normalizeClass([
                  _ctx.ns.be("spinner", "item"),
                  _ctx.ns.is("active", time === _ctx.timePartsMap[item].value),
                  _ctx.ns.is("disabled", _ctx.listMap[item].value[time])
                ])
              }, [
                类型是 time === "number" ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
                  item === "hours" ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
                    vue.createTextVNode(vue.toDisplayString(("0" + (_ctx.amPmMode ? time % 12 或 12 : time)).slice(-2)) + vue.toDisplayString(_ctx.getAmPmFlag(time)), 1)
                  ], 2112)) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 1 }, [
                    vue.createTextVNode(vue.toDisplayString(("0" + time).slice(-2)), 1)
                  ], 2112))
                ], 2112)) : vue.createCommentVNode("v-如果", true)
              ], 2);
            }), 128))
          ], 2)
        ], 42, _hoisted_2$B);
      }), 128)) : vue.createCommentVNode("v-如果", true)
    ], 2);
  }
  变量 TimeSpinner为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1U, [["render", _sfc_render$1i], ["__file", "basic-time-spinner.vue"]]);

  常量 _sfc_main$1T为vue.defineComponent({
    components: {
      TimeSpinner
    },
    props: {
      visible: Boolean,
      actualVisible: {
        type: Boolean,
        default: void 0
      },
      datetimeRole: {
        type: String
      },
      parsedValue: {
        type: [Object, String]
      },
      变量循环mat: {
        type: String,
        default: ""
      }
    },
    emits: ["pick", "select-range", "set-picker-option"],
    setup(props, ctx) {
      常量 ns为useNamespace("time");
      常量 { t, 语言 }为useLocale();
      常量 selectionRange为vue.ref([0, 2]);
      常量 oldValue为useOldValue(props);
      常量 transitionName为vue.computed(() => {
        返回 isUndefined(props.actualVisible) ? `${ns.名字space.value}-zoom-in-top` : "";
      });
      常量 showSeconds为vue.computed(() => {
        返回 props.变量循环mat.includes("ss");
      });
      常量 amPmMode为vue.computed(() => {
        如果 (props.变量循环mat.includes("A"))
          返回 "A";
        如果 (props.变量循环mat.includes("a"))
          返回 "a";
        返回 "";
      });
      常量 isValidValue为(_date) => {
        常量 parsedDate为dayjs(_date).locale(语言.value);
        常量 result为getRangeAvailableTime(parsedDate);
        返回 parsedDate.isSame(result);
      };
      常量 handleCancel为() => {
        ctx.emit("pick", oldValue.value, false);
      };
      常量 handleConfirm为(visible为false, first为false) => {
        如果 (first)
          返回;
        ctx.emit("pick", props.parsedValue, visible);
      };
      常量 handleChange为(_date) => {
        如果 (不props.visible) {
          返回;
        }
        常量 result为getRangeAvailableTime(_date).millisecond(0);
        ctx.emit("pick", result, true);
      };
      常量 setSelectionRange为(start, end) => {
        ctx.emit("select-range", start, end);
        selectionRange.value为[start, end];
      };
      常量 changeSelectionRange为(step) => {
        常量 list为[0, 3].concat(showSeconds.value ? [6] : []);
        常量 mapping为["hours", "minutes"].concat(showSeconds.value ? ["seconds"] : []);
        常量 index为list.indexOf(selectionRange.value[0]);
        常量 next为(index + step + list.长度) % list.长度;
        timePickerOptions["start_emitSelectRange"](mapping[next]);
      };
      常量 handleKeydown为(event) => {
        常量 code为event.code;
        如果 (code === EVENT_CODE.left 或 code === EVENT_CODE.right) {
          常量 step为code === EVENT_CODE.left ? -1 : 1;
          changeSelectionRange(step);
          event.preventDefault();
          返回;
        }
        如果 (code === EVENT_CODE.up 或 code === EVENT_CODE.down) {
          常量 step为code === EVENT_CODE.up ? -1 : 1;
          timePickerOptions["start_scrollDown"](step);
          event.preventDefault();
          返回;
        }
      };
      常量 getRangeAvailableTime为(date) => {
        常量 availableMap为{
          hour: getAvailableHours,
          minute: getAvailableMinutes,
          second: getAvailableSeconds
        };
        让 result为date;
        ["hour", "minute", "second"].变量循环Each((_) => {
          如果 (availableMap[_]) {
            让 availableArr;
            常量 method为availableMap[_];
            如果 (_ === "minute") {
              availableArr为method(result.hour(), props.datetimeRole);
            } 否则 如果 (_ === "second") {
              availableArr为method(result.hour(), result.minute(), props.datetimeRole);
            } 否则 {
              availableArr为method(props.datetimeRole);
            }
            如果 (availableArr 与 availableArr.长度 与 不availableArr.includes(result[_]())) {
              result为result[_](availableArr[0]);
            }
          }
        });
        返回 result;
      };
      常量 parseUserInput为(value) => {
        如果 (不value)
          返回 null;
        返回 dayjs(value, props.变量循环mat).locale(语言.value);
      };
      常量 变量循环matToString为(value) => {
        如果 (不value)
          返回 null;
        返回 value.变量循环mat(props.变量循环mat);
      };
      常量 getDefaultValue为() => {
        返回 dayjs(defaultValue).locale(语言.value);
      };
      ctx.emit("set-picker-option", ["isValidValue", isValidValue]);
      ctx.emit("set-picker-option", ["变量循环matToString", 变量循环matToString]);
      ctx.emit("set-picker-option", ["parseUserInput", parseUserInput]);
      ctx.emit("set-picker-option", ["handleKeydown", handleKeydown]);
      ctx.emit("set-picker-option", [
        "getRangeAvailableTime",
        getRangeAvailableTime
      ]);
      ctx.emit("set-picker-option", ["getDefaultValue", getDefaultValue]);
      常量 timePickerOptions为{};
      常量 onSetOption为(e) => {
        timePickerOptions[e[0]]为e[1];
      };
      常量 pickerBase为vue.inject("EP_PICKER_BASE");
      常量 {
        arrowControl,
        disabledHours,
        disabledMinutes,
        disabledSeconds,
        defaultValue
      }为pickerBase.props;
      常量 { getAvailableHours, getAvailableMinutes, getAvailableSeconds }为getAvailableArrs(disabledHours, disabledMinutes, disabledSeconds);
      返回 {
        ns,
        transitionName,
        arrowControl,
        onSetOption,
        t,
        handleConfirm,
        handleChange,
        setSelectionRange,
        amPmMode,
        showSeconds,
        handleCancel,
        disabledHours,
        disabledMinutes,
        disabledSeconds
      };
    }
  });
  函数 _sfc_render$1h(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_time_spinner为vue.resolveComponent("time-spinner");
    返回 vue.openBlock(), vue.createBlock(vue.Transition, { 名字: _ctx.transitionName }, {
      default: vue.withCtx(() => [
        _ctx.actualVisible 或 _ctx.visible ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: vue.normalizeClass(_ctx.ns.b("panel"))
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass([_ctx.ns.be("panel", "上下文"), { "has-seconds": _ctx.showSeconds }])
          }, [
            vue.createVNode(_component_time_spinner, {
              ref: "spinner",
              role: _ctx.datetimeRole 或 "start",
              "arrow-control": _ctx.arrowControl,
              "show-seconds": _ctx.showSeconds,
              "am-pm-mode": _ctx.amPmMode,
              "spinner-date": _ctx.parsedValue,
              "disabled-hours": _ctx.disabledHours,
              "disabled-minutes": _ctx.disabledMinutes,
              "disabled-seconds": _ctx.disabledSeconds,
              onChange: _ctx.handleChange,
              onSetOption: _ctx.onSetOption,
              onSelectRange: _ctx.setSelectionRange
            }, null, 8, ["role", "arrow-control", "show-seconds", "am-pm-mode", "spinner-date", "disabled-hours", "disabled-minutes", "disabled-seconds", "onChange", "onSetOption", "onSelectRange"])
          ], 2),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(_ctx.ns.be("panel", "footer"))
          }, [
            vue.createElementVNode("button", {
              type: "button",
              class: vue.normalizeClass([_ctx.ns.be("panel", "btn"), "cancel"]),
              onClick: _cache[0] 或 (_cache[0]为(...args) => _ctx.handleCancel 与 _ctx.handleCancel(...args))
            }, vue.toDisplayString(_ctx.t("el.datepicker.cancel")), 3),
            vue.createElementVNode("button", {
              type: "button",
              class: vue.normalizeClass([_ctx.ns.be("panel", "btn"), "confirm"]),
              onClick: _cache[1] 或 (_cache[1]为($event) => _ctx.handleConfirm())
            }, vue.toDisplayString(_ctx.t("el.datepicker.confirm")), 3)
          ], 2)
        ], 2)) : vue.createCommentVNode("v-如果", true)
      ]),
      _: 1
    }, 8, ["名字"]);
  }
  变量 TimePickPanel为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1T, [["render", _sfc_render$1h], ["__file", "panel-time-pick.vue"]]);

  常量 makeSelectRange为(start, end) => {
    常量 result为[];
    变量循环 (让 i为start; i <= end; i加一) {
      result.push(i);
    }
    返回 result;
  };
  常量 _sfc_main$1S为vue.defineComponent({
    components: { TimeSpinner },
    props: {
      visible: Boolean,
      actualVisible: Boolean,
      parsedValue: {
        type: [Array]
      },
      变量循环mat: {
        type: String,
        default: ""
      }
    },
    emits: ["pick", "select-range", "set-picker-option"],
    setup(props, ctx) {
      常量 { t, 语言 }为useLocale();
      常量 nsTime为useNamespace("time");
      常量 nsPicker为useNamespace("picker");
      常量 minDate为vue.computed(() => props.parsedValue[0]);
      常量 maxDate为vue.computed(() => props.parsedValue[1]);
      常量 oldValue为useOldValue(props);
      常量 handleCancel为() => {
        ctx.emit("pick", oldValue.value, false);
      };
      常量 showSeconds为vue.computed(() => {
        返回 props.变量循环mat.includes("ss");
      });
      常量 amPmMode为vue.computed(() => {
        如果 (props.变量循环mat.includes("A"))
          返回 "A";
        如果 (props.变量循环mat.includes("a"))
          返回 "a";
        返回 "";
      });
      常量 minSelectableRange为vue.ref([]);
      常量 maxSelectableRange为vue.ref([]);
      常量 handleConfirm为(visible为false) => {
        ctx.emit("pick", [minDate.value, maxDate.value], visible);
      };
      常量 handleMinChange为(date) => {
        handleChange(date.millisecond(0), maxDate.value);
      };
      常量 handleMaxChange为(date) => {
        handleChange(minDate.value, date.millisecond(0));
      };
      常量 isValidValue为(_date) => {
        常量 parsedDate为_date.map((_) => dayjs(_).locale(语言.value));
        常量 result为getRangeAvailableTime(parsedDate);
        返回 parsedDate[0].isSame(result[0]) 与 parsedDate[1].isSame(result[1]);
      };
      常量 handleChange为(_minDate, _maxDate) => {
        ctx.emit("pick", [_minDate, _maxDate], true);
      };
      常量 btnConfirmDisabled为vue.computed(() => {
        返回 minDate.value大于maxDate.value;
      });
      常量 selectionRange为vue.ref([0, 2]);
      常量 setMinSelectionRange为(start, end) => {
        ctx.emit("select-range", start, end, "min");
        selectionRange.value为[start, end];
      };
      常量 offset为vue.computed(() => showSeconds.value ? 11 : 8);
      常量 setMaxSelectionRange为(start, end) => {
        ctx.emit("select-range", start, end, "max");
        selectionRange.value为[start + offset.value, end + offset.value];
      };
      常量 changeSelectionRange为(step) => {
        常量 list为showSeconds.value ? [0, 3, 6, 11, 14, 17] : [0, 3, 8, 11];
        常量 mapping为["hours", "minutes"].concat(showSeconds.value ? ["seconds"] : []);
        常量 index为list.indexOf(selectionRange.value[0]);
        常量 next为(index + step + list.长度) % list.长度;
        常量 half为list.长度 / 2;
        如果 (next < half) {
          timePickerOptions["start_emitSelectRange"](mapping[next]);
        } 否则 {
          timePickerOptions["end_emitSelectRange"](mapping[next - half]);
        }
      };
      常量 handleKeydown为(event) => {
        常量 code为event.code;
        如果 (code === EVENT_CODE.left 或 code === EVENT_CODE.right) {
          常量 step为code === EVENT_CODE.left ? -1 : 1;
          changeSelectionRange(step);
          event.preventDefault();
          返回;
        }
        如果 (code === EVENT_CODE.up 或 code === EVENT_CODE.down) {
          常量 step为code === EVENT_CODE.up ? -1 : 1;
          常量 role为selectionRange.value[0] < offset.value ? "start" : "end";
          timePickerOptions[`${role}_scrollDown`](step);
          event.preventDefault();
          返回;
        }
      };
      常量 disabledHours_为(role, compare) => {
        常量 defaultDisable为disabledHours ? disabledHours(role) : [];
        常量 isStart为role === "start";
        常量 compareDate为compare 或 (isStart ? maxDate.value : minDate.value);
        常量 compareHour为compareDate.hour();
        常量 nextDisable为isStart ? makeSelectRange(compareHour + 1, 23) : makeSelectRange(0, compareHour - 1);
        返回 union$1(defaultDisable, nextDisable);
      };
      常量 disabledMinutes_为(hour, role, compare) => {
        常量 defaultDisable为disabledMinutes ? disabledMinutes(hour, role) : [];
        常量 isStart为role === "start";
        常量 compareDate为compare 或 (isStart ? maxDate.value : minDate.value);
        常量 compareHour为compareDate.hour();
        如果 (hour 不== compareHour) {
          返回 defaultDisable;
        }
        常量 compareMinute为compareDate.minute();
        常量 nextDisable为isStart ? makeSelectRange(compareMinute + 1, 59) : makeSelectRange(0, compareMinute - 1);
        返回 union$1(defaultDisable, nextDisable);
      };
      常量 disabledSeconds_为(hour, minute, role, compare) => {
        常量 defaultDisable为disabledSeconds ? disabledSeconds(hour, minute, role) : [];
        常量 isStart为role === "start";
        常量 compareDate为compare 或 (isStart ? maxDate.value : minDate.value);
        常量 compareHour为compareDate.hour();
        常量 compareMinute为compareDate.minute();
        如果 (hour 不== compareHour 或 minute 不== compareMinute) {
          返回 defaultDisable;
        }
        常量 compareSecond为compareDate.second();
        常量 nextDisable为isStart ? makeSelectRange(compareSecond + 1, 59) : makeSelectRange(0, compareSecond - 1);
        返回 union$1(defaultDisable, nextDisable);
      };
      常量 getRangeAvailableTime为(dates) => {
        返回 dates.map((_, index) => getRangeAvailableTimeEach(dates[0], dates[1], index === 0 ? "start" : "end"));
      };
      常量 { getAvailableHours, getAvailableMinutes, getAvailableSeconds }为getAvailableArrs(disabledHours_, disabledMinutes_, disabledSeconds_);
      常量 getRangeAvailableTimeEach为(startDate, endDate, role) => {
        常量 availableMap为{
          hour: getAvailableHours,
          minute: getAvailableMinutes,
          second: getAvailableSeconds
        };
        常量 isStart为role === "start";
        让 result为isStart ? startDate : endDate;
        常量 compareDate为isStart ? endDate : startDate;
        ["hour", "minute", "second"].变量循环Each((_) => {
          如果 (availableMap[_]) {
            让 availableArr;
            常量 method为availableMap[_];
            如果 (_ === "minute") {
              availableArr为method(result.hour(), role, compareDate);
            } 否则 如果 (_ === "second") {
              availableArr为method(result.hour(), result.minute(), role, compareDate);
            } 否则 {
              availableArr为method(role, compareDate);
            }
            如果 (availableArr 与 availableArr.长度 与 不availableArr.includes(result[_]())) {
              常量 pos为isStart ? 0 : availableArr.长度 - 1;
              result为result[_](availableArr[pos]);
            }
          }
        });
        返回 result;
      };
      常量 parseUserInput为(value) => {
        如果 (不value)
          返回 null;
        如果 (Array.isArray(value)) {
          返回 value.map((_) => dayjs(_, props.变量循环mat).locale(语言.value));
        }
        返回 dayjs(value, props.变量循环mat).locale(语言.value);
      };
      常量 变量循环matToString为(value) => {
        如果 (不value)
          返回 null;
        如果 (Array.isArray(value)) {
          返回 value.map((_) => _.变量循环mat(props.变量循环mat));
        }
        返回 value.变量循环mat(props.变量循环mat);
      };
      常量 getDefaultValue为() => {
        如果 (Array.isArray(defaultValue)) {
          返回 defaultValue.map((_) => dayjs(_).locale(语言.value));
        }
        常量 defaultDay为dayjs(defaultValue).locale(语言.value);
        返回 [defaultDay, defaultDay.add(60, "m")];
      };
      ctx.emit("set-picker-option", ["变量循环matToString", 变量循环matToString]);
      ctx.emit("set-picker-option", ["parseUserInput", parseUserInput]);
      ctx.emit("set-picker-option", ["isValidValue", isValidValue]);
      ctx.emit("set-picker-option", ["handleKeydown", handleKeydown]);
      ctx.emit("set-picker-option", ["getDefaultValue", getDefaultValue]);
      ctx.emit("set-picker-option", [
        "getRangeAvailableTime",
        getRangeAvailableTime
      ]);
      常量 timePickerOptions为{};
      常量 onSetOption为(e) => {
        timePickerOptions[e[0]]为e[1];
      };
      常量 pickerBase为vue.inject("EP_PICKER_BASE");
      常量 {
        arrowControl,
        disabledHours,
        disabledMinutes,
        disabledSeconds,
        defaultValue
      }为pickerBase.props;
      返回 {
        nsTime,
        nsPicker,
        arrowControl,
        onSetOption,
        setMaxSelectionRange,
        setMinSelectionRange,
        btnConfirmDisabled,
        handleCancel,
        handleConfirm,
        t,
        showSeconds,
        minDate,
        maxDate,
        amPmMode,
        handleMinChange,
        handleMaxChange,
        minSelectableRange,
        maxSelectableRange,
        disabledHours_,
        disabledMinutes_,
        disabledSeconds_
      };
    }
  });
  常量 _hoisted_1$S为["disabled"];
  函数 _sfc_render$1g(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_time_spinner为vue.resolveComponent("time-spinner");
    返回 _ctx.actualVisible ? (vue.openBlock(), vue.createElementBlock("div", {
      key: 0,
      class: vue.normalizeClass([_ctx.nsTime.b("range-picker"), _ctx.nsPicker.b("panel")])
    }, [
      vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.nsTime.be("range-picker", "上下文"))
      }, [
        vue.createElementVNode("div", {
          class: vue.normalizeClass(_ctx.nsTime.be("range-picker", "cell"))
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(_ctx.nsTime.be("range-picker", "头er"))
          }, vue.toDisplayString(_ctx.t("el.datepicker.startTime")), 3),
          vue.createElementVNode("div", {
            class: vue.normalizeClass([
              _ctx.nsTime.be("range-picker", "主体"),
              _ctx.nsTime.be("panel", "上下文"),
              _ctx.nsTime.is("arrow", _ctx.arrowControl),
              { "has-seconds": _ctx.showSeconds }
            ])
          }, [
            vue.createVNode(_component_time_spinner, {
              ref: "minSpinner",
              role: "start",
              "show-seconds": _ctx.showSeconds,
              "am-pm-mode": _ctx.amPmMode,
              "arrow-control": _ctx.arrowControl,
              "spinner-date": _ctx.minDate,
              "disabled-hours": _ctx.disabledHours_,
              "disabled-minutes": _ctx.disabledMinutes_,
              "disabled-seconds": _ctx.disabledSeconds_,
              onChange: _ctx.handleMinChange,
              onSetOption: _ctx.onSetOption,
              onSelectRange: _ctx.setMinSelectionRange
            }, null, 8, ["show-seconds", "am-pm-mode", "arrow-control", "spinner-date", "disabled-hours", "disabled-minutes", "disabled-seconds", "onChange", "onSetOption", "onSelectRange"])
          ], 2)
        ], 2),
        vue.createElementVNode("div", {
          class: vue.normalizeClass(_ctx.nsTime.be("range-picker", "cell"))
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(_ctx.nsTime.be("range-picker", "头er"))
          }, vue.toDisplayString(_ctx.t("el.datepicker.endTime")), 3),
          vue.createElementVNode("div", {
            class: vue.normalizeClass([
              _ctx.nsTime.be("range-picker", "主体"),
              _ctx.nsTime.be("panel", "上下文"),
              _ctx.nsTime.is("arrow", _ctx.arrowControl),
              { "has-seconds": _ctx.showSeconds }
            ])
          }, [
            vue.createVNode(_component_time_spinner, {
              ref: "maxSpinner",
              role: "end",
              "show-seconds": _ctx.showSeconds,
              "am-pm-mode": _ctx.amPmMode,
              "arrow-control": _ctx.arrowControl,
              "spinner-date": _ctx.maxDate,
              "disabled-hours": _ctx.disabledHours_,
              "disabled-minutes": _ctx.disabledMinutes_,
              "disabled-seconds": _ctx.disabledSeconds_,
              onChange: _ctx.handleMaxChange,
              onSetOption: _ctx.onSetOption,
              onSelectRange: _ctx.setMaxSelectionRange
            }, null, 8, ["show-seconds", "am-pm-mode", "arrow-control", "spinner-date", "disabled-hours", "disabled-minutes", "disabled-seconds", "onChange", "onSetOption", "onSelectRange"])
          ], 2)
        ], 2)
      ], 2),
      vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.nsTime.be("panel", "footer"))
      }, [
        vue.createElementVNode("button", {
          type: "button",
          class: vue.normalizeClass([_ctx.nsTime.be("panel", "btn"), "cancel"]),
          onClick: _cache[0] 或 (_cache[0]为($event) => _ctx.handleCancel())
        }, vue.toDisplayString(_ctx.t("el.datepicker.cancel")), 3),
        vue.createElementVNode("button", {
          type: "button",
          class: vue.normalizeClass([_ctx.nsTime.be("panel", "btn"), "confirm"]),
          disabled: _ctx.btnConfirmDisabled,
          onClick: _cache[1] 或 (_cache[1]为($event) => _ctx.handleConfirm())
        }, vue.toDisplayString(_ctx.t("el.datepicker.confirm")), 11, _hoisted_1$S)
      ], 2)
    ], 2)) : vue.createCommentVNode("v-如果", true);
  }
  变量 TimeRangePanel为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1S, [["render", _sfc_render$1g], ["__file", "panel-time-range.vue"]]);

  dayjs.extend(customParseFormat);
  变量 TimePicker为vue.defineComponent({
    名字: "ElTimePicker",
    install: null,
    props: {
      ...timePickerDefaultProps,
      isRange: {
        type: Boolean,
        default: false
      }
    },
    emits: ["update:modelValue"],
    setup(props, ctx) {
      常量 commonPicker为vue.ref(null);
      常量 type为props.isRange ? "timerange" : "time";
      常量 panel为props.isRange ? TimeRangePanel : TimePickPanel;
      常量 refProps为{
        ...props,
        focus: () => {
          变量 _a;
          (_a为commonPicker.value) == null ? void 0 : _a.handleFocus();
        },
        blur: () => {
          变量 _a;
          (_a为commonPicker.value) == null ? void 0 : _a.handleBlur();
        }
      };
      vue.provide("ElPopperOptions", props.popperOptions);
      ctx.expose(refProps);
      返回 () => {
        变量 _a;
        常量 变量循环mat为(_a为props.变量循环mat) 不= null ? _a : DEFAULT_FORMATS_TIME;
        返回 vue.h(CommonPicker, {
          ...props,
          变量循环mat,
          type,
          ref: commonPicker,
          "onUpdate:modelValue": (value) => ctx.emit("update:modelValue", value)
        }, {
          default: (scopedProps) => vue.h(panel, scopedProps)
        });
      };
    }
  });

  常量 rangeArr为(n) => Array.从(Array.从({ 长度: n }).keys());
  常量 extractDateFormat为(变量循环mat) => {
    返回 变量循环mat.replace(/\W?m{1,2}|\W?ZZ/g, "").replace(/\W?h{1,2}|\W?s{1,3}|\W?a/gi, "").trim();
  };
  常量 extractTimeFormat为(变量循环mat) => {
    返回 变量循环mat.replace(/\W?D{1,2}|\W?Do|\W?d{1,4}|\W?M{1,4}|\W?Y{2,4}/g, "").trim();
  };

  常量 _TimePicker为TimePicker;
  _TimePicker.install为(app) => {
    app.component(_TimePicker.名字, _TimePicker);
  };
  常量 ElTimePicker为_TimePicker;

  常量 getPrevMonthLastDays为(date, count) => {
    常量 lastDay为date.subtract(1, "month").endOf("month").date();
    返回 rangeArr(count).map((_, index) => lastDay - (count - index - 1));
  };
  常量 getMonthDays为(date) => {
    常量 days为date.daysInMonth();
    返回 rangeArr(days).map((_, index) => index + 1);
  };
  常量 toNestedArr为(days) => rangeArr(days.长度 / 7).map((index) => {
    常量 start为index * 7;
    返回 days.slice(start, start + 7);
  });
  常量 dateTableProps为buildProps({
    selectedDay: {
      type: definePropType(Object)
    },
    range: {
      type: definePropType(Array)
    },
    date: {
      type: definePropType(Object),
      required: true
    },
    hideHeader: {
      type: Boolean
    }
  });
  常量 dateTableEmits为{
    pick: (value) => isObject$1(value)
  };

  常量 _hoisted_1$R为{ key: 0 };
  常量 _hoisted_2$A为["onClick"];
  常量 __default__$w为{
    名字: "DateTable"
  };
  常量 _sfc_main$1R为/* @__PURE__ */ vue.defineComponent({
    ...__default__$w,
    props: dateTableProps,
    emits: dateTableEmits,
    setup(__props, { expose, emit }) {
      常量 props为__props;
      dayjs.extend(localeData);
      常量 { t, 语言 }为useLocale();
      常量 nsTable为useNamespace("calendar-table");
      常量 nsDay为useNamespace("calendar-day");
      常量 now为dayjs().locale(语言.value);
      常量 firstDayOfWeek为now.$locale().weekStart 或 0;
      常量 isInRange为vue.computed(() => 不不props.range 与 不不props.range.长度);
      常量 rows为vue.computed(() => {
        让 days为[];
        如果 (isInRange.value) {
          常量 [start, end]为props.range;
          常量 currentMonthRange为rangeArr(end.date() - start.date() + 1).map((index) => ({
            text: start.date() + index,
            type: "current"
          }));
          让 remaining为currentMonthRange.长度 % 7;
          remaining为remaining === 0 ? 0 : 7 - remaining;
          常量 nextMonthRange为rangeArr(remaining).map((_, index) => ({
            text: index + 1,
            type: "next"
          }));
          days为currentMonthRange.concat(nextMonthRange);
        } 否则 {
          常量 firstDay为props.date.startOf("month").day() 或 7;
          常量 prevMonthDays为getPrevMonthLastDays(props.date, firstDay - firstDayOfWeek).map((day) => ({
            text: day,
            type: "prev"
          }));
          常量 currentMonthDays为getMonthDays(props.date).map((day) => ({
            text: day,
            type: "current"
          }));
          days为[...prevMonthDays, ...currentMonthDays];
          常量 nextMonthDays为rangeArr(42 - days.长度).map((_, index) => ({
            text: index + 1,
            type: "next"
          }));
          days为days.concat(nextMonthDays);
        }
        返回 toNestedArr(days);
      });
      常量 weekDays为vue.computed(() => {
        常量 start为firstDayOfWeek;
        如果 (start === 0) {
          返回 WEEK_DAYS.map((_) => t(`el.datepicker.weeks.${_}`));
        } 否则 {
          返回 WEEK_DAYS.slice(start).concat(WEEK_DAYS.slice(0, start)).map((_) => t(`el.datepicker.weeks.${_}`));
        }
      });
      常量 getFormattedDate为(day, type) => {
        主分支 (type) {
          子分支 "prev":
            返回 props.date.startOf("month").subtract(1, "month").date(day);
          子分支 "next":
            返回 props.date.startOf("month").add(1, "month").date(day);
          子分支 "current":
            返回 props.date.date(day);
        }
      };
      常量 getCellClass为({ text, type }) => {
        常量 classes为[type];
        如果 (type === "current") {
          常量 date为getFormattedDate(text, type);
          如果 (date.isSame(props.selectedDay, "day")) {
            classes.push(nsDay.is("selected"));
          }
          如果 (date.isSame(now, "day")) {
            classes.push(nsDay.is("today"));
          }
        }
        返回 classes;
      };
      常量 handlePickDay为({ text, type }) => {
        常量 date为getFormattedDate(text, type);
        emit("pick", date);
      };
      常量 getSlotData为({ text, type }) => {
        常量 day为getFormattedDate(text, type);
        返回 {
          isSelected: day.isSame(props.selectedDay),
          type: `${type}-month`,
          day: day.变量循环mat("YYYY-MM-DD"),
          date: day.toDate()
        };
      };
      expose({
        getFormattedDate
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("table", {
          class: vue.normalizeClass([vue.unref(nsTable).b(), vue.unref(nsTable).is("range", vue.unref(isInRange))]),
          cellspacing: "0",
          cellpadding: "0"
        }, [
          不_ctx.hideHeader ? (vue.openBlock(), vue.createElementBlock("t头", _hoisted_1$R, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(weekDays), (day) => {
              返回 vue.openBlock(), vue.createElementBlock("th", { key: day }, vue.toDisplayString(day), 1);
            }), 128))
          ])) : vue.createCommentVNode("v-如果", true),
          vue.createElementVNode("t主体", null, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(rows), (row, index) => {
              返回 vue.openBlock(), vue.createElementBlock("tr", {
                key: index,
                class: vue.normalizeClass({
                  [vue.unref(nsTable).e("row")]: true,
                  [vue.unref(nsTable).em("row", "hide-border")]: index === 0 与 _ctx.hideHeader
                })
              }, [
                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(row, (cell, key) => {
                  返回 vue.openBlock(), vue.createElementBlock("td", {
                    key,
                    class: vue.normalizeClass(getCellClass(cell)),
                    onClick: ($event) => handlePickDay(cell)
                  }, [
                    vue.createElementVNode("div", {
                      class: vue.normalizeClass(vue.unref(nsDay).b())
                    }, [
                      vue.renderSlot(_ctx.$slots, "dateCell", {
                        data: getSlotData(cell)
                      }, () => [
                        vue.createElementVNode("span", null, vue.toDisplayString(cell.text), 1)
                      ])
                    ], 2)
                  ], 10, _hoisted_2$A);
                }), 128))
              ], 2);
            }), 128))
          ])
        ], 2);
      };
    }
  });
  变量 DateTable$1为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1R, [["__file", "date-table.vue"]]);

  常量 calendarProps为buildProps({
    modelValue: {
      type: Date
    },
    range: {
      type: definePropType(Array),
      validator: (range) => Array.isArray(range) 与 range.长度 === 2 与 range.every((item) => item instanceof Date)
    }
  });
  常量 calendarEmits为{
    [UPDATE_MODEL_EVENT]: (value) => value instanceof Date,
    input: (value) => value instanceof Date
  };

  常量 __default__$v为{
    名字: "ElCalendar"
  };
  常量 _sfc_main$1Q为/* @__PURE__ */ vue.defineComponent({
    ...__default__$v,
    props: calendarProps,
    emits: calendarEmits,
    setup(__props, { expose, emit }) {
      常量 props为__props;
      常量 ns为useNamespace("calendar");
      常量 { t, 语言 }为useLocale();
      常量 selectedDay为vue.ref();
      常量 now为dayjs().locale(语言.value);
      常量 prevMonthDayjs为vue.computed(() => {
        返回 date.value.subtract(1, "month").date(1);
      });
      常量 nextMonthDayjs为vue.computed(() => {
        返回 date.value.add(1, "month").date(1);
      });
      常量 prevYearDayjs为vue.computed(() => {
        返回 date.value.subtract(1, "year").date(1);
      });
      常量 nextYearDayjs为vue.computed(() => {
        返回 date.value.add(1, "year").date(1);
      });
      常量 i18nDate为vue.computed(() => {
        常量 pickedMonth为`el.datepicker.month${date.value.变量循环mat("M")}`;
        返回 `${date.value.year()} ${t("el.datepicker.year")} ${t(pickedMonth)}`;
      });
      常量 realSelectedDay为vue.computed({
        get() {
          如果 (不props.modelValue)
            返回 selectedDay.value;
          返回 date.value;
        },
        set(val) {
          如果 (不val)
            返回;
          selectedDay.value为val;
          常量 result为val.toDate();
          emit("input", result);
          emit("update:modelValue", result);
        }
      });
      常量 date为vue.computed(() => {
        如果 (不props.modelValue) {
          如果 (realSelectedDay.value) {
            返回 realSelectedDay.value;
          } 否则 如果 (validatedRange.value.长度) {
            返回 validatedRange.value[0][0];
          }
          返回 now;
        } 否则 {
          返回 dayjs(props.modelValue).locale(语言.value);
        }
      });
      常量 calculateValidatedDateRange为(startDayjs, endDayjs) => {
        常量 firstDay为startDayjs.startOf("week");
        常量 lastDay为endDayjs.endOf("week");
        常量 firstMonth为firstDay.get("month");
        常量 lastMonth为lastDay.get("month");
        如果 (firstMonth === lastMonth) {
          返回 [[firstDay, lastDay]];
        } 否则 如果 (firstMonth + 1 === lastMonth) {
          常量 firstMonthLastDay为firstDay.endOf("month");
          常量 lastMonthFirstDay为lastDay.startOf("month");
          常量 isSameWeek为firstMonthLastDay.isSame(lastMonthFirstDay, "week");
          常量 lastMonthStartDay为isSameWeek ? lastMonthFirstDay.add(1, "week") : lastMonthFirstDay;
          返回 [
            [firstDay, firstMonthLastDay],
            [lastMonthStartDay.startOf("week"), lastDay]
          ];
        } 否则 如果 (firstMonth + 2 === lastMonth) {
          常量 firstMonthLastDay为firstDay.endOf("month");
          常量 secondMonthFirstDay为firstDay.add(1, "month").startOf("month");
          常量 secondMonthStartDay为firstMonthLastDay.isSame(secondMonthFirstDay, "week") ? secondMonthFirstDay.add(1, "week") : secondMonthFirstDay;
          常量 secondMonthLastDay为secondMonthStartDay.endOf("month");
          常量 lastMonthFirstDay为lastDay.startOf("month");
          常量 lastMonthStartDay为secondMonthLastDay.isSame(lastMonthFirstDay, "week") ? lastMonthFirstDay.add(1, "week") : lastMonthFirstDay;
          返回 [
            [firstDay, firstMonthLastDay],
            [secondMonthStartDay.startOf("week"), secondMonthLastDay],
            [lastMonthStartDay.startOf("week"), lastDay]
          ];
        } 否则 {
          返回 [];
        }
      };
      常量 validatedRange为vue.computed(() => {
        如果 (不props.range)
          返回 [];
        常量 rangeArrDayjs为props.range.map((_) => dayjs(_).locale(语言.value));
        常量 [startDayjs, endDayjs]为rangeArrDayjs;
        如果 (startDayjs.isAfter(endDayjs)) {
          返回 [];
        }
        如果 (startDayjs.isSame(endDayjs, "month")) {
          返回 calculateValidatedDateRange(startDayjs, endDayjs);
        } 否则 {
          如果 (startDayjs.add(1, "month").month() 不== endDayjs.month()) {
            返回 [];
          }
          返回 calculateValidatedDateRange(startDayjs, endDayjs);
        }
      });
      常量 pickDay为(day) => {
        realSelectedDay.value为day;
      };
      常量 selectDate为(type) => {
        让 day;
        如果 (type === "prev-month") {
          day为prevMonthDayjs.value;
        } 否则 如果 (type === "next-month") {
          day为nextMonthDayjs.value;
        } 否则 如果 (type === "prev-year") {
          day为prevYearDayjs.value;
        } 否则 如果 (type === "next-year") {
          day为nextYearDayjs.value;
        } 否则 {
          day为now;
        }
        如果 (day.isSame(date.value, "day"))
          返回;
        pickDay(day);
      };
      expose({
        selectedDay: realSelectedDay,
        pickDay,
        selectDate,
        calculateValidatedDateRange
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(vue.unref(ns).b())
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns).e("头er"))
          }, [
            vue.renderSlot(_ctx.$slots, "头er", { date: vue.unref(i18nDate) }, () => [
              vue.createElementVNode("div", {
                class: vue.normalizeClass(vue.unref(ns).e("标题"))
              }, vue.toDisplayString(vue.unref(i18nDate)), 3),
              vue.unref(validatedRange).长度 === 0 ? (vue.openBlock(), vue.createElementBlock("div", {
                key: 0,
                class: vue.normalizeClass(vue.unref(ns).e("button-group"))
              }, [
                vue.createVNode(vue.unref(ElButtonGroup$1), null, {
                  default: vue.withCtx(() => [
                    vue.createVNode(vue.unref(ElButton), {
                      size: "small",
                      onClick: _cache[0] 或 (_cache[0]为($event) => selectDate("prev-month"))
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode(vue.toDisplayString(vue.unref(t)("el.datepicker.prevMonth")), 1)
                      ]),
                      _: 1
                    }),
                    vue.createVNode(vue.unref(ElButton), {
                      size: "small",
                      onClick: _cache[1] 或 (_cache[1]为($event) => selectDate("today"))
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode(vue.toDisplayString(vue.unref(t)("el.datepicker.today")), 1)
                      ]),
                      _: 1
                    }),
                    vue.createVNode(vue.unref(ElButton), {
                      size: "small",
                      onClick: _cache[2] 或 (_cache[2]为($event) => selectDate("next-month"))
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode(vue.toDisplayString(vue.unref(t)("el.datepicker.nextMonth")), 1)
                      ]),
                      _: 1
                    })
                  ]),
                  _: 1
                })
              ], 2)) : vue.createCommentVNode("v-如果", true)
            ])
          ], 2),
          vue.unref(validatedRange).长度 === 0 ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns).e("主体"))
          }, [
            vue.createVNode(DateTable$1, {
              date: vue.unref(date),
              "selected-day": vue.unref(realSelectedDay),
              onPick: pickDay
            }, vue.createSlots({ _: 2 }, [
              _ctx.$slots.dateCell ? {
                名字: "dateCell",
                fn: vue.withCtx((data) => [
                  vue.renderSlot(_ctx.$slots, "dateCell", vue.normalizeProps(vue.guardReactiveProps(data)))
                ])
              } : void 0
            ]), 1032, ["date", "selected-day"])
          ], 2)) : (vue.openBlock(), vue.createElementBlock("div", {
            key: 1,
            class: vue.normalizeClass(vue.unref(ns).e("主体"))
          }, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(validatedRange), (range_, index) => {
              返回 vue.openBlock(), vue.createBlock(DateTable$1, {
                key: index,
                date: range_[0],
                "selected-day": vue.unref(realSelectedDay),
                range: range_,
                "hide-头er": index 不== 0,
                onPick: pickDay
              }, vue.createSlots({ _: 2 }, [
                _ctx.$slots.dateCell ? {
                  名字: "dateCell",
                  fn: vue.withCtx((data) => [
                    vue.renderSlot(_ctx.$slots, "dateCell", vue.normalizeProps(vue.guardReactiveProps(data)))
                  ])
                } : void 0
              ]), 1032, ["date", "selected-day", "range", "hide-头er"]);
            }), 128))
          ], 2))
        ], 2);
      };
    }
  });
  变量 Calendar为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1Q, [["__file", "calendar.vue"]]);

  常量 ElCalendar为withInstall(Calendar);

  常量 cardProps为buildProps({
    头er: {
      type: String,
      default: ""
    },
    主体Style: {
      type: definePropType([String, Object, Array]),
      default: ""
    },
    shadow: {
      type: String,
      default: "always"
    }
  });

  常量 __default__$u为{
    名字: "ElCard"
  };
  常量 _sfc_main$1P为/* @__PURE__ */ vue.defineComponent({
    ...__default__$u,
    props: cardProps,
    setup(__props) {
      常量 ns为useNamespace("card");
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([vue.unref(ns).b(), vue.unref(ns).is(`${_ctx.shadow}-shadow`)])
        }, [
          _ctx.$slots.头er 或 _ctx.头er ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns).e("头er"))
          }, [
            vue.renderSlot(_ctx.$slots, "头er", {}, () => [
              vue.createTextVNode(vue.toDisplayString(_ctx.头er), 1)
            ])
          ], 2)) : vue.createCommentVNode("v-如果", true),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns).e("主体")),
            style: vue.normalizeStyle(_ctx.主体Style)
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 6)
        ], 2);
      };
    }
  });
  变量 Card为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1P, [["__file", "card.vue"]]);

  常量 ElCard为withInstall(Card);

  常量 carouselProps为buildProps({
    initialIndex: {
      type: Number,
      default: 0
    },
    height: { type: String, default: "" },
    trigger: {
      type: String,
      default: "hover"
    },
    autoplay: {
      type: Boolean,
      default: true
    },
    整数erval: {
      type: Number,
      default: 3e3
    },
    indicatorPosition: { type: String, default: "" },
    indicator: {
      type: Boolean,
      default: true
    },
    arrow: {
      type: String,
      default: "hover"
    },
    type: { type: String, default: "" },
    loop: {
      type: Boolean,
      default: true
    },
    direction: {
      type: String,
      default: "horizontal",
      validator(val) {
        返回 ["horizontal", "vertical"].includes(val);
      }
    },
    pauseOnHover: {
      type: Boolean,
      default: true
    }
  });
  常量 carouselEmits为{
    change: (current, prev) => [current, prev].every(isNumber)
  };

  常量 _hoisted_1$Q为["onMouseenter", "onMouseleave"];
  常量 _hoisted_2$z为["onMouseenter", "onClick"];
  常量 _hoisted_3$l为{ key: 0 };
  常量 __default__$t为{
    名字: "ElCarousel"
  };
  常量 _sfc_main$1O为/* @__PURE__ */ vue.defineComponent({
    ...__default__$t,
    props: carouselProps,
    emits: carouselEmits,
    setup(__props, { expose, emit }) {
      常量 props为__props;
      常量 ns为useNamespace("carousel");
      常量 THROTTLE_TIME为300;
      常量 activeIndex为vue.ref(-1);
      常量 timer为vue.ref(null);
      常量 hover为vue.ref(false);
      常量 root为vue.ref();
      常量 items为vue.ref([]);
      常量 arrowDisplay为vue.computed(() => props.arrow 不== "never" 与 不vue.unref(isVertical));
      常量 hasLabel为vue.computed(() => {
        返回 items.value.some((item) => item.props.label.toString().长度大于0);
      });
      常量 carouselClasses为vue.computed(() => {
        常量 classes为[ns.b(), ns.m(props.direction)];
        如果 (vue.unref(isCardType)) {
          classes.push(ns.m("card"));
        }
        返回 classes;
      });
      常量 indicatorsClasses为vue.computed(() => {
        常量 classes为[ns.e("indicators"), ns.em("indicators", props.direction)];
        如果 (hasLabel.value) {
          classes.push(ns.em("indicators", "labels"));
        }
        如果 (props.indicatorPosition === "outside" 或 vue.unref(isCardType)) {
          classes.push(ns.em("indicators", "outside"));
        }
        返回 classes;
      });
      常量 isCardType为vue.computed(() => props.type === "card");
      常量 isVertical为vue.computed(() => props.direction === "vertical");
      常量 throttledArrowClick为throttle((index) => {
        setActiveItem(index);
      }, THROTTLE_TIME, { trailing: true });
      常量 throttledIndicatorHover为throttle((index) => {
        handleIndicatorHover(index);
      }, THROTTLE_TIME);
      函数 pauseTimer() {
        如果 (timer.value) {
          clearInterval(timer.value);
          timer.value为null;
        }
      }
      函数 startTimer() {
        如果 (props.整数erval <= 0 或 不props.autoplay 或 timer.value)
          返回;
        timer.value为setInterval(() => playSlides(), props.整数erval);
      }
      常量 playSlides为() => {
        如果 (activeIndex.value < items.value.长度 - 1) {
          activeIndex.value为activeIndex.value + 1;
        } 否则 如果 (props.loop) {
          activeIndex.value为0;
        }
      };
      函数 setActiveItem(index) {
        如果 (isString(index)) {
          常量 filteredItems为items.value.filter((item) => item.props.名字 === index);
          如果 (filteredItems.长度大于0) {
            index为items.value.indexOf(filteredItems[0]);
          }
        }
        index为Number(index);
        如果 (Number.isNaN(index) 或 index 不== Math.floor(index)) {
          返回;
        }
        常量 itemCount为items.value.长度;
        常量 oldIndex为activeIndex.value;
        如果 (index < 0) {
          activeIndex.value为props.loop ? itemCount - 1 : 0;
        } 否则 如果 (index >= itemCount) {
          activeIndex.value为props.loop ? 0 : itemCount - 1;
        } 否则 {
          activeIndex.value为index;
        }
        如果 (oldIndex === activeIndex.value) {
          resetItemPosition(oldIndex);
        }
      }
      函数 resetItemPosition(oldIndex) {
        items.value.变量循环Each((item, index) => {
          item.translateItem(index, activeIndex.value, oldIndex);
        });
      }
      函数 addItem(item) {
        items.value.push(item);
      }
      函数 removeItem(uid) {
        常量 index为items.value.findIndex((item) => item.uid === uid);
        如果 (index 不== -1) {
          items.value.splice(index, 1);
          如果 (activeIndex.value === index)
            next();
        }
      }
      函数 itemInStage(item, index) {
        变量 _a, _b, _c, _d;
        常量 _items为vue.unref(items);
        常量 itemCount为_items.长度;
        如果 (itemCount === 0 或 不item.states.inStage)
          返回 false;
        常量 nextItemIndex为index + 1;
        常量 prevItemIndex为index - 1;
        常量 lastItemIndex为itemCount - 1;
        常量 isLastItemActive为_items[lastItemIndex].states.active;
        常量 isFirstItemActive为_items[0].states.active;
        常量 isNextItemActive为(_b为(_a为_items[nextItemIndex]) == null ? void 0 : _a.states) == null ? void 0 : _b.active;
        常量 isPrevItemActive为(_d为(_c为_items[prevItemIndex]) == null ? void 0 : _c.states) == null ? void 0 : _d.active;
        如果 (index === lastItemIndex 与 isFirstItemActive 或 isNextItemActive) {
          返回 "left";
        } 否则 如果 (index === 0 与 isLastItemActive 或 isPrevItemActive) {
          返回 "right";
        }
        返回 false;
      }
      函数 handleMouseEnter() {
        hover.value为true;
        如果 (props.pauseOnHover) {
          pauseTimer();
        }
      }
      函数 handleMouseLeave() {
        hover.value为false;
        startTimer();
      }
      函数 handleButtonEnter(arrow) {
        如果 (vue.unref(isVertical))
          返回;
        items.value.变量循环Each((item, index) => {
          如果 (arrow === itemInStage(item, index)) {
            item.states.hover为true;
          }
        });
      }
      函数 handleButtonLeave() {
        如果 (vue.unref(isVertical))
          返回;
        items.value.变量循环Each((item) => {
          item.states.hover为false;
        });
      }
      函数 handleIndicatorClick(index) {
        activeIndex.value为index;
      }
      函数 handleIndicatorHover(index) {
        如果 (props.trigger === "hover" 与 index 不== activeIndex.value) {
          activeIndex.value为index;
        }
      }
      函数 prev() {
        setActiveItem(activeIndex.value - 1);
      }
      函数 next() {
        setActiveItem(activeIndex.value + 1);
      }
      vue.watch(() => activeIndex.value, (current, prev2) => {
        resetItemPosition(prev2);
        如果 (prev2大于-1) {
          emit("change", current, prev2);
        }
      });
      vue.watch(() => props.autoplay, (autoplay) => {
        autoplay ? startTimer() : pauseTimer();
      });
      vue.watch(() => props.loop, () => {
        setActiveItem(activeIndex.value);
      });
      常量 resizeObserver为vue.shallowRef();
      vue.onMounted(async () => {
        await vue.nextTick();
        resizeObserver.value为useResizeObserver(root.value, () => {
          resetItemPosition();
        });
        如果 (props.initialIndex < items.value.长度 与 props.initialIndex >= 0) {
          activeIndex.value为props.initialIndex;
        }
        startTimer();
      });
      vue.onBe变量循环eUnmount(() => {
        pauseTimer();
        如果 (root.value 与 resizeObserver.value)
          resizeObserver.value.stop();
      });
      vue.provide(carouselContextKey, {
        root,
        isCardType,
        isVertical,
        items,
        loop: props.loop,
        addItem,
        removeItem,
        setActiveItem
      });
      expose({
        setActiveItem,
        prev,
        next
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "root",
          ref: root,
          class: vue.normalizeClass(vue.unref(carouselClasses)),
          onMouseenter: vue.withMod如果iers(handleMouseEnter, ["stop"]),
          onMouseleave: vue.withMod如果iers(handleMouseLeave, ["stop"])
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns).e("container")),
            style: vue.normalizeStyle({ height: _ctx.height })
          }, [
            vue.unref(arrowDisplay) ? (vue.openBlock(), vue.createBlock(vue.Transition, {
              key: 0,
              名字: "carousel-arrow-left"
            }, {
              default: vue.withCtx(() => [
                vue.withDirectives(vue.createElementVNode("button", {
                  type: "button",
                  class: vue.normalizeClass([vue.unref(ns).e("arrow"), vue.unref(ns).em("arrow", "left")]),
                  onMouseenter: _cache[0] 或 (_cache[0]为($event) => handleButtonEnter("left")),
                  onMouseleave: handleButtonLeave,
                  onClick: _cache[1] 或 (_cache[1]为vue.withMod如果iers(($event) => vue.unref(throttledArrowClick)(activeIndex.value - 1), ["stop"]))
                }, [
                  vue.createVNode(vue.unref(ElIcon), null, {
                    default: vue.withCtx(() => [
                      vue.createVNode(vue.unref(arrowLeft))
                    ]),
                    _: 1
                  })
                ], 34), [
                  [
                    vue.vShow,
                    (_ctx.arrow === "always" 或 hover.value) 与 (props.loop 或 activeIndex.value大于0)
                  ]
                ])
              ]),
              _: 1
            })) : vue.createCommentVNode("v-如果", true),
            vue.unref(arrowDisplay) ? (vue.openBlock(), vue.createBlock(vue.Transition, {
              key: 1,
              名字: "carousel-arrow-right"
            }, {
              default: vue.withCtx(() => [
                vue.withDirectives(vue.createElementVNode("button", {
                  type: "button",
                  class: vue.normalizeClass([vue.unref(ns).e("arrow"), vue.unref(ns).em("arrow", "right")]),
                  onMouseenter: _cache[2] 或 (_cache[2]为($event) => handleButtonEnter("right")),
                  onMouseleave: handleButtonLeave,
                  onClick: _cache[3] 或 (_cache[3]为vue.withMod如果iers(($event) => vue.unref(throttledArrowClick)(activeIndex.value + 1), ["stop"]))
                }, [
                  vue.createVNode(vue.unref(ElIcon), null, {
                    default: vue.withCtx(() => [
                      vue.createVNode(vue.unref(arrowRight))
                    ]),
                    _: 1
                  })
                ], 34), [
                  [
                    vue.vShow,
                    (_ctx.arrow === "always" 或 hover.value) 与 (props.loop 或 activeIndex.value < items.value.长度 - 1)
                  ]
                ])
              ]),
              _: 1
            })) : vue.createCommentVNode("v-如果", true),
            vue.renderSlot(_ctx.$slots, "default")
          ], 6),
          _ctx.indicatorPosition 不== "none" ? (vue.openBlock(), vue.createElementBlock("ul", {
            key: 0,
            class: vue.normalizeClass(vue.unref(indicatorsClasses))
          }, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(items.value, (item, index) => {
              返回 vue.openBlock(), vue.createElementBlock("li", {
                key: index,
                class: vue.normalizeClass([
                  vue.unref(ns).e("indicator"),
                  vue.unref(ns).em("indicator", _ctx.direction),
                  vue.unref(ns).is("active", index === activeIndex.value)
                ]),
                onMouseenter: ($event) => vue.unref(throttledIndicatorHover)(index),
                onClick: vue.withMod如果iers(($event) => handleIndicatorClick(index), ["stop"])
              }, [
                vue.createElementVNode("button", {
                  class: vue.normalizeClass(vue.unref(ns).e("button"))
                }, [
                  vue.unref(hasLabel) ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_3$l, vue.toDisplayString(item.props.label), 1)) : vue.createCommentVNode("v-如果", true)
                ], 2)
              ], 42, _hoisted_2$z);
            }), 128))
          ], 2)) : vue.createCommentVNode("v-如果", true)
        ], 42, _hoisted_1$Q);
      };
    }
  });
  变量 Carousel为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1O, [["__file", "carousel.vue"]]);

  常量 carouselItemProps为buildProps({
    名字: { type: String, default: "" },
    label: {
      type: [String, Number],
      default: ""
    }
  });

  常量 __default__$s为{
    名字: "ElCarouselItem"
  };
  常量 _sfc_main$1N为/* @__PURE__ */ vue.defineComponent({
    ...__default__$s,
    props: carouselItemProps,
    setup(__props) {
      常量 props为__props;
      常量 ns为useNamespace("carousel");
      常量 carouselContext为vue.inject(carouselContextKey);
      常量 instance为vue.getCurrentInstance();
      常量 CARD_SCALE为0.83;
      常量 hover为vue.ref(false);
      常量 translate为vue.ref(0);
      常量 scale为vue.ref(1);
      常量 active为vue.ref(false);
      常量 ready为vue.ref(false);
      常量 inStage为vue.ref(false);
      常量 animating为vue.ref(false);
      常量 { isCardType, isVertical }为carouselContext;
      常量 itemStyle为vue.computed(() => {
        常量 translateType为`translate${vue.unref(isVertical) ? "Y" : "X"}`;
        常量 _translate为`${translateType}(${vue.unref(translate)}px)`;
        常量 _scale为`scale(${vue.unref(scale)})`;
        常量 trans变量循环m为[_translate, _scale].join(" ");
        返回 {
          trans变量循环m
        };
      });
      函数 processIndex(index, activeIndex, 长度) {
        常量 lastItemIndex为长度 - 1;
        常量 prevItemIndex为activeIndex - 1;
        常量 nextItemIndex为activeIndex + 1;
        常量 halfItemIndex为长度 / 2;
        如果 (activeIndex === 0 与 index === lastItemIndex) {
          返回 -1;
        } 否则 如果 (activeIndex === lastItemIndex 与 index === 0) {
          返回 长度;
        } 否则 如果 (index < prevItemIndex 与 activeIndex - index >= halfItemIndex) {
          返回 长度 + 1;
        } 否则 如果 (index大于nextItemIndex 与 index - activeIndex >= halfItemIndex) {
          返回 -2;
        }
        返回 index;
      }
      函数 calcCardTranslate(index, activeIndex) {
        变量 _a;
        常量 parentWidth为((_a为carouselContext.root.value) == null ? void 0 : _a.offsetWidth) 或 0;
        如果 (inStage.value) {
          返回 parentWidth * ((2 - CARD_SCALE) * (index - activeIndex) + 1) / 4;
        } 否则 如果 (index < activeIndex) {
          返回 -(1 + CARD_SCALE) * parentWidth / 4;
        } 否则 {
          返回 (3 + CARD_SCALE) * parentWidth / 4;
        }
      }
      函数 calcTranslate(index, activeIndex, isVertical2) {
        常量 rootEl为carouselContext.root.value;
        如果 (不rootEl)
          返回 0;
        常量 distance为(isVertical2 ? rootEl.offsetHeight : rootEl.offsetWidth) 或 0;
        返回 distance * (index - activeIndex);
      }
      常量 translateItem为(index, activeIndex, oldIndex) => {
        变量 _a;
        常量 _isCardType为vue.unref(isCardType);
        常量 carouselItemLength为(_a为carouselContext.items.value.长度) 不= null ? _a : Number.NaN;
        常量 isActive为index === activeIndex;
        如果 (不_isCardType 与 不isUndefined(oldIndex)) {
          animating.value为isActive 或 index === oldIndex;
        }
        如果 (不isActive 与 carouselItemLength大于2 与 carouselContext.loop) {
          index为processIndex(index, activeIndex, carouselItemLength);
        }
        常量 _isVertical为vue.unref(isVertical);
        active.value为isActive;
        如果 (_isCardType) {
          inStage.value为Math.round(Math.abs(index - activeIndex)) <= 1;
          translate.value为calcCardTranslate(index, activeIndex);
          scale.value为vue.unref(active) ? 1 : CARD_SCALE;
        } 否则 {
          translate.value为calcTranslate(index, activeIndex, _isVertical);
        }
        ready.value为true;
      };
      函数 handleItemClick() {
        如果 (carouselContext 与 vue.unref(isCardType)) {
          常量 index为carouselContext.items.value.findIndex(({ uid }) => uid === instance.uid);
          carouselContext.setActiveItem(index);
        }
      }
      vue.onMounted(() => {
        carouselContext.addItem({
          props,
          states: vue.reactive({
            hover,
            translate,
            scale,
            active,
            ready,
            inStage,
            animating
          }),
          uid: instance.uid,
          translateItem
        });
      });
      vue.onUnmounted(() => {
        carouselContext.removeItem(instance.uid);
      });
      返回 (_ctx, _cache) => {
        返回 vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([
            vue.unref(ns).e("item"),
            vue.unref(ns).is("active", active.value),
            vue.unref(ns).is("in-stage", inStage.value),
            vue.unref(ns).is("hover", hover.value),
            vue.unref(ns).is("animating", animating.value),
            { [vue.unref(ns).em("item", "card")]: vue.unref(isCardType) }
          ]),
          style: vue.normalizeStyle(vue.unref(itemStyle)),
          onClick: handleItemClick
        }, [
          vue.unref(isCardType) ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns).e("mask"))
          }, null, 2)), [
            [vue.vShow, 不active.value]
          ]) : vue.createCommentVNode("v-如果", true),
          vue.renderSlot(_ctx.$slots, "default")
        ], 6)), [
          [vue.vShow, ready.value]
        ]);
      };
    }
  });
  变量 CarouselItem为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1N, [["__file", "carousel-item.vue"]]);

  常量 ElCarousel为withInstall(Carousel, {
    CarouselItem
  });
  常量 ElCarouselItem为withNoopInstall(CarouselItem);

  常量 useCheckboxProps为{
    modelValue: {
      type: [Boolean, Number, String],
      default: () => void 0
    },
    label: {
      type: [String, Boolean, Number, Object]
    },
    indeterminate: Boolean,
    disabled: Boolean,
    checked: Boolean,
    名字: {
      type: String,
      default: void 0
    },
    trueLabel: {
      type: [String, Number],
      default: void 0
    },
    falseLabel: {
      type: [String, Number],
      default: void 0
    },
    tabindex: [String, Number],
    size: String
  };
  常量 useCheckboxGroup为() => {
    常量 elForm为vue.inject(变量循环mContextKey, {});
    常量 elFormItem为vue.inject(变量循环mItemContextKey, {});
    常量 checkboxGroup为vue.inject("CheckboxGroup", {});
    常量 isGroup为vue.computed(() => checkboxGroup 与 (checkboxGroup == null ? void 0 : checkboxGroup.名字) === "ElCheckboxGroup");
    常量 elFormItemSize为vue.computed(() => {
      返回 elFormItem.size;
    });
    返回 {
      isGroup,
      checkboxGroup,
      elForm,
      elFormItemSize,
      elFormItem
    };
  };
  常量 useModel为(props) => {
    常量 selfModel为vue.ref(false);
    常量 { emit }为vue.getCurrentInstance();
    常量 { isGroup, checkboxGroup }为useCheckboxGroup();
    常量 isLimitExceeded为vue.ref(false);
    常量 model为vue.computed({
      get() {
        变量 _a, _b;
        返回 isGroup.value ? (_a为checkboxGroup.modelValue) == null ? void 0 : _a.value : (_b为props.modelValue) 不= null ? _b : selfModel.value;
      },
      set(val) {
        变量 _a;
        如果 (isGroup.value 与 Array.isArray(val)) {
          isLimitExceeded.value为checkboxGroup.max 不== void 0 与 val.长度大于checkboxGroup.max.value;
          isLimitExceeded.value === false 与 ((_a为checkboxGroup == null ? void 0 : checkboxGroup.changeEvent) == null ? void 0 : _a.call(checkboxGroup, val));
        } 否则 {
          emit(UPDATE_MODEL_EVENT, val);
          selfModel.value为val;
        }
      }
    });
    返回 {
      model,
      isLimitExceeded
    };
  };
  常量 useCheckboxStatus为(props, { model }) => {
    常量 { isGroup, checkboxGroup }为useCheckboxGroup();
    常量 focus为vue.ref(false);
    常量 size为useSize(checkboxGroup == null ? void 0 : checkboxGroup.checkboxGroupSize, { prop: true });
    常量 isChecked为vue.computed(() => {
      常量 value为model.value;
      如果 (toTypeString(value) === "[object Boolean]") {
        返回 value;
      } 否则 如果 (Array.isArray(value)) {
        返回 value.includes(props.label);
      } 否则 如果 (value 不== null 与 value 不== void 0) {
        返回 value === props.trueLabel;
      } 否则 {
        返回 不不value;
      }
    });
    常量 checkboxSize为useSize(vue.computed(() => {
      变量 _a;
      返回 isGroup.value ? (_a为checkboxGroup == null ? void 0 : checkboxGroup.checkboxGroupSize) == null ? void 0 : _a.value : void 0;
    }));
    返回 {
      isChecked,
      focus,
      size,
      checkboxSize
    };
  };
  常量 useDisabled为(props, {
    model,
    isChecked
  }) => {
    常量 { elForm, isGroup, checkboxGroup }为useCheckboxGroup();
    常量 isLimitDisabled为vue.computed(() => {
      变量 _a, _b;
      常量 max为(_a为checkboxGroup.max) == null ? void 0 : _a.value;
      常量 min为(_b为checkboxGroup.min) == null ? void 0 : _b.value;
      返回 不不(max 或 min) 与 model.value.长度 >= max 与 不isChecked.value 或 model.value.长度 <= min 与 isChecked.value;
    });
    常量 isDisabled为vue.computed(() => {
      变量 _a, _b;
      常量 disabled为props.disabled 或 elForm.disabled;
      返回 (_b为isGroup.value ? ((_a为checkboxGroup.disabled) == null ? void 0 : _a.value) 或 disabled 或 isLimitDisabled.value : props.disabled 或 elForm.disabled) 不= null ? _b : false;
    });
    返回 {
      isDisabled,
      isLimitDisabled
    };
  };
  常量 setStoreValue为(props, { model }) => {
    函数 addToStore() {
      如果 (Array.isArray(model.value) 与 不model.value.includes(props.label)) {
        model.value.push(props.label);
      } 否则 {
        model.value为props.trueLabel 或 true;
      }
    }
    props.checked 与 addToStore();
  };
  常量 useEvent$1为(props, { isLimitExceeded }) => {
    常量 { elFormItem }为useCheckboxGroup();
    常量 { emit }为vue.getCurrentInstance();
    函数 handleChange(e) {
      变量 _a, _b;
      如果 (isLimitExceeded.value)
        返回;
      常量 target为e.target;
      常量 value为target.checked ? (_a为props.trueLabel) 不= null ? _a : true : (_b为props.falseLabel) 不= null ? _b : false;
      emit("change", value, e);
    }
    vue.watch(() => props.modelValue, () => {
      变量 _a;
      (_a为elFormItem.validate) == null ? void 0 : _a.call(elFormItem, "change").捕获到((err) => debugWarn());
    });
    返回 {
      handleChange
    };
  };
  常量 useCheckbox为(props) => {
    常量 { model, isLimitExceeded }为useModel(props);
    常量 { focus, size, isChecked, checkboxSize }为useCheckboxStatus(props, {
      model
    });
    常量 { isDisabled }为useDisabled(props, { model, isChecked });
    常量 { handleChange }为useEvent$1(props, { isLimitExceeded });
    setStoreValue(props, { model });
    返回 {
      isChecked,
      isDisabled,
      checkboxSize,
      model,
      handleChange,
      focus,
      size
    };
  };

  常量 _sfc_main$1M为vue.defineComponent({
    名字: "ElCheckbox",
    props: {
      modelValue: {
        type: [Number, String, Boolean],
        default: () => void 0
      },
      label: {
        type: [String, Boolean, Number, Object]
      },
      indeterminate: Boolean,
      disabled: Boolean,
      checked: Boolean,
      名字: {
        type: String,
        default: void 0
      },
      trueLabel: {
        type: [String, Number],
        default: void 0
      },
      falseLabel: {
        type: [String, Number],
        default: void 0
      },
      id: {
        type: String,
        default: void 0
      },
      controls: {
        type: String,
        default: void 0
      },
      border: Boolean,
      size: {
        type: String,
        validator: isValidComponentSize
      },
      tabindex: [String, Number]
    },
    emits: [UPDATE_MODEL_EVENT, "change"],
    setup(props) {
      常量 ns为useNamespace("checkbox");
      返回 {
        ns,
        ...useCheckbox(props)
      };
    }
  });
  常量 _hoisted_1$P为["id", "aria-controls"];
  常量 _hoisted_2$y为["tabindex", "role", "aria-checked"];
  常量 _hoisted_3$k为["aria-hidden", "名字", "tabindex", "disabled", "true-value", "false-value"];
  常量 _hoisted_4$e为["aria-hidden", "disabled", "value", "名字", "tabindex"];
  函数 _sfc_render$1f(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("label", {
      id: _ctx.id,
      class: vue.normalizeClass([
        _ctx.ns.b(),
        _ctx.ns.m(_ctx.checkboxSize),
        _ctx.ns.is("disabled", _ctx.isDisabled),
        _ctx.ns.is("bordered", _ctx.border),
        _ctx.ns.is("checked", _ctx.isChecked)
      ]),
      "aria-controls": _ctx.indeterminate ? _ctx.controls : null
    }, [
      vue.createElementVNode("span", {
        class: vue.normalizeClass([
          _ctx.ns.e("input"),
          _ctx.ns.is("disabled", _ctx.isDisabled),
          _ctx.ns.is("checked", _ctx.isChecked),
          _ctx.ns.is("indeterminate", _ctx.indeterminate),
          _ctx.ns.is("focus", _ctx.focus)
        ]),
        tabindex: _ctx.indeterminate ? 0 : void 0,
        role: _ctx.indeterminate ? "checkbox" : void 0,
        "aria-checked": _ctx.indeterminate ? "mixed" : false
      }, [
        vue.createElementVNode("span", {
          class: vue.normalizeClass(_ctx.ns.e("inner"))
        }, null, 2),
        _ctx.trueLabel 或 _ctx.falseLabel ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("input", {
          key: 0,
          "onUpdate:modelValue": _cache[0] 或 (_cache[0]为($event) => _ctx.model为$event),
          class: vue.normalizeClass(_ctx.ns.e("original")),
          type: "checkbox",
          "aria-hidden": _ctx.indeterminate ? "true" : "false",
          名字: _ctx.名字,
          tabindex: _ctx.tabindex,
          disabled: _ctx.isDisabled,
          "true-value": _ctx.trueLabel,
          "false-value": _ctx.falseLabel,
          onChange: _cache[1] 或 (_cache[1]为(...args) => _ctx.handleChange 与 _ctx.handleChange(...args)),
          onFocus: _cache[2] 或 (_cache[2]为($event) => _ctx.focus为true),
          onBlur: _cache[3] 或 (_cache[3]为($event) => _ctx.focus为false)
        }, null, 42, _hoisted_3$k)), [
          [vue.vModelCheckbox, _ctx.model]
        ]) : vue.withDirectives((vue.openBlock(), vue.createElementBlock("input", {
          key: 1,
          "onUpdate:modelValue": _cache[4] 或 (_cache[4]为($event) => _ctx.model为$event),
          class: vue.normalizeClass(_ctx.ns.e("original")),
          type: "checkbox",
          "aria-hidden": _ctx.indeterminate ? "true" : "false",
          disabled: _ctx.isDisabled,
          value: _ctx.label,
          名字: _ctx.名字,
          tabindex: _ctx.tabindex,
          onChange: _cache[5] 或 (_cache[5]为(...args) => _ctx.handleChange 与 _ctx.handleChange(...args)),
          onFocus: _cache[6] 或 (_cache[6]为($event) => _ctx.focus为true),
          onBlur: _cache[7] 或 (_cache[7]为($event) => _ctx.focus为false)
        }, null, 42, _hoisted_4$e)), [
          [vue.vModelCheckbox, _ctx.model]
        ])
      ], 10, _hoisted_2$y),
      _ctx.$slots.default 或 _ctx.label ? (vue.openBlock(), vue.createElementBlock("span", {
        key: 0,
        class: vue.normalizeClass(_ctx.ns.e("label"))
      }, [
        vue.renderSlot(_ctx.$slots, "default"),
        不_ctx.$slots.default ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
          vue.createTextVNode(vue.toDisplayString(_ctx.label), 1)
        ], 2112)) : vue.createCommentVNode("v-如果", true)
      ], 2)) : vue.createCommentVNode("v-如果", true)
    ], 10, _hoisted_1$P);
  }
  变量 Checkbox为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1M, [["render", _sfc_render$1f], ["__file", "checkbox.vue"]]);

  常量 _sfc_main$1L为vue.defineComponent({
    名字: "ElCheckboxButton",
    props: useCheckboxProps,
    emits: [UPDATE_MODEL_EVENT, "change"],
    setup(props) {
      常量 { focus, isChecked, isDisabled, size, model, handleChange }为useCheckbox(props);
      常量 { checkboxGroup }为useCheckboxGroup();
      常量 ns为useNamespace("checkbox");
      常量 activeStyle为vue.computed(() => {
        变量 _a, _b, _c, _d;
        常量 fillValue为(_b为(_a为checkboxGroup == null ? void 0 : checkboxGroup.fill) == null ? void 0 : _a.value) 不= null ? _b : "";
        返回 {
          backgroundColor: fillValue,
          borderColor: fillValue,
          color: (_d为(_c为checkboxGroup == null ? void 0 : checkboxGroup.textColor) == null ? void 0 : _c.value) 不= null ? _d : "",
          boxShadow: fillValue ? `-1px 0 0 0 ${fillValue}` : null
        };
      });
      返回 {
        focus,
        isChecked,
        isDisabled,
        model,
        handleChange,
        activeStyle,
        size,
        ns
      };
    }
  });
  常量 _hoisted_1$O为["aria-checked", "aria-disabled"];
  常量 _hoisted_2$x为["名字", "tabindex", "disabled", "true-value", "false-value"];
  常量 _hoisted_3$j为["名字", "tabindex", "disabled", "value"];
  函数 _sfc_render$1e(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("label", {
      class: vue.normalizeClass([
        _ctx.ns.b("button"),
        _ctx.ns.bm("button", _ctx.size),
        _ctx.ns.is("disabled", _ctx.isDisabled),
        _ctx.ns.is("checked", _ctx.isChecked),
        _ctx.ns.is("focus", _ctx.focus)
      ]),
      role: "checkbox",
      "aria-checked": _ctx.isChecked,
      "aria-disabled": _ctx.isDisabled
    }, [
      _ctx.trueLabel 或 _ctx.falseLabel ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("input", {
        key: 0,
        "onUpdate:modelValue": _cache[0] 或 (_cache[0]为($event) => _ctx.model为$event),
        class: vue.normalizeClass(_ctx.ns.be("button", "original")),
        type: "checkbox",
        名字: _ctx.名字,
        tabindex: _ctx.tabindex,
        disabled: _ctx.isDisabled,
        "true-value": _ctx.trueLabel,
        "false-value": _ctx.falseLabel,
        onChange: _cache[1] 或 (_cache[1]为(...args) => _ctx.handleChange 与 _ctx.handleChange(...args)),
        onFocus: _cache[2] 或 (_cache[2]为($event) => _ctx.focus为true),
        onBlur: _cache[3] 或 (_cache[3]为($event) => _ctx.focus为false)
      }, null, 42, _hoisted_2$x)), [
        [vue.vModelCheckbox, _ctx.model]
      ]) : vue.withDirectives((vue.openBlock(), vue.createElementBlock("input", {
        key: 1,
        "onUpdate:modelValue": _cache[4] 或 (_cache[4]为($event) => _ctx.model为$event),
        class: vue.normalizeClass(_ctx.ns.be("button", "original")),
        type: "checkbox",
        名字: _ctx.名字,
        tabindex: _ctx.tabindex,
        disabled: _ctx.isDisabled,
        value: _ctx.label,
        onChange: _cache[5] 或 (_cache[5]为(...args) => _ctx.handleChange 与 _ctx.handleChange(...args)),
        onFocus: _cache[6] 或 (_cache[6]为($event) => _ctx.focus为true),
        onBlur: _cache[7] 或 (_cache[7]为($event) => _ctx.focus为false)
      }, null, 42, _hoisted_3$j)), [
        [vue.vModelCheckbox, _ctx.model]
      ]),
      _ctx.$slots.default 或 _ctx.label ? (vue.openBlock(), vue.createElementBlock("span", {
        key: 2,
        class: vue.normalizeClass(_ctx.ns.be("button", "inner")),
        style: vue.normalizeStyle(_ctx.isChecked ? _ctx.activeStyle : null)
      }, [
        vue.renderSlot(_ctx.$slots, "default", {}, () => [
          vue.createTextVNode(vue.toDisplayString(_ctx.label), 1)
        ])
      ], 6)) : vue.createCommentVNode("v-如果", true)
    ], 10, _hoisted_1$O);
  }
  变量 CheckboxButton为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1L, [["render", _sfc_render$1e], ["__file", "checkbox-button.vue"]]);

  常量 _sfc_main$1K为vue.defineComponent({
    名字: "ElCheckboxGroup",
    props: {
      modelValue: {
        type: Array,
        default: () => []
      },
      disabled: Boolean,
      min: {
        type: Number,
        default: void 0
      },
      max: {
        type: Number,
        default: void 0
      },
      size: {
        type: String,
        validator: isValidComponentSize
      },
      fill: {
        type: String,
        default: void 0
      },
      textColor: {
        type: String,
        default: void 0
      },
      tag: {
        type: String,
        default: "div"
      }
    },
    emits: [UPDATE_MODEL_EVENT, "change"],
    setup(props, { emit, slots }) {
      常量 { elFormItem }为useCheckboxGroup();
      常量 checkboxGroupSize为useSize();
      常量 ns为useNamespace("checkbox");
      常量 changeEvent为(value) => {
        emit(UPDATE_MODEL_EVENT, value);
        vue.nextTick(() => {
          emit("change", value);
        });
      };
      常量 modelValue为vue.computed({
        get() {
          返回 props.modelValue;
        },
        set(val) {
          changeEvent(val);
        }
      });
      vue.provide("CheckboxGroup", {
        名字: "ElCheckboxGroup",
        modelValue,
        ...vue.toRefs(props),
        checkboxGroupSize,
        changeEvent
      });
      vue.watch(() => props.modelValue, () => {
        变量 _a;
        (_a为elFormItem.validate) == null ? void 0 : _a.call(elFormItem, "change").捕获到((err) => debugWarn());
      });
      返回 () => {
        返回 vue.h(props.tag, {
          class: ns.b("group"),
          role: "group",
          "aria-label": "checkbox-group"
        }, [vue.renderSlot(slots, "default")]);
      };
    }
  });
  变量 CheckboxGroup为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1K, [["__file", "checkbox-group.vue"]]);

  常量 ElCheckbox为withInstall(Checkbox, {
    CheckboxButton,
    CheckboxGroup
  });
  常量 ElCheckboxButton为withNoopInstall(CheckboxButton);
  常量 ElCheckboxGroup$1为withNoopInstall(CheckboxGroup);

  常量 radioPropsBase为buildProps({
    size: useSizeProp,
    disabled: Boolean,
    label: {
      type: [String, Number, Boolean],
      default: ""
    }
  });
  常量 radioProps为buildProps({
    ...radioPropsBase,
    modelValue: {
      type: [String, Number, Boolean],
      default: ""
    },
    名字: {
      type: String,
      default: ""
    },
    border: Boolean
  });
  常量 radioEmits为{
    [UPDATE_MODEL_EVENT]: (val) => isString(val) 或 isNumber(val) 或 isBoolean(val),
    change: (val) => isString(val) 或 isNumber(val) 或 isBoolean(val)
  };
  常量 useRadio为(props, emit) => {
    常量 radioRef为vue.ref();
    常量 radioGroup为vue.inject(radioGroupKey, void 0);
    常量 isGroup为vue.computed(() => 不不radioGroup);
    常量 modelValue为vue.computed({
      get() {
        返回 isGroup.value ? radioGroup.modelValue : props.modelValue;
      },
      set(val) {
        如果 (isGroup.value) {
          radioGroup.changeEvent(val);
        } 否则 {
          emit(UPDATE_MODEL_EVENT, val);
        }
        radioRef.value.checked为props.modelValue === props.label;
      }
    });
    常量 size为useSize(vue.computed(() => radioGroup == null ? void 0 : radioGroup.size));
    常量 disabled为useDisabled$1(vue.computed(() => radioGroup == null ? void 0 : radioGroup.disabled));
    常量 focus为vue.ref(false);
    常量 tabIndex为vue.computed(() => {
      返回 disabled.value 或 isGroup.value 与 modelValue.value 不== props.label ? -1 : 0;
    });
    返回 {
      radioRef,
      isGroup,
      radioGroup,
      focus,
      size,
      disabled,
      tabIndex,
      modelValue
    };
  };

  常量 _sfc_main$1J为vue.defineComponent({
    名字: "ElRadio",
    props: radioProps,
    emits: radioEmits,
    setup(props, { emit }) {
      常量 ns为useNamespace("radio");
      常量 { radioRef, isGroup, focus, size, disabled, tabIndex, modelValue }为useRadio(props, emit);
      函数 handleChange() {
        vue.nextTick(() => emit("change", modelValue.value));
      }
      返回 {
        ns,
        focus,
        isGroup,
        modelValue,
        tabIndex,
        size,
        disabled,
        radioRef,
        handleChange
      };
    }
  });
  常量 _hoisted_1$N为["aria-checked", "aria-disabled", "tabindex"];
  常量 _hoisted_2$w为["value", "名字", "disabled"];
  函数 _sfc_render$1d(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("label", {
      class: vue.normalizeClass([
        _ctx.ns.b(),
        _ctx.ns.is("disabled", _ctx.disabled),
        _ctx.ns.is("focus", _ctx.focus),
        _ctx.ns.is("bordered", _ctx.border),
        _ctx.ns.is("checked", _ctx.modelValue === _ctx.label),
        _ctx.ns.m(_ctx.size)
      ]),
      role: "radio",
      "aria-checked": _ctx.modelValue === _ctx.label,
      "aria-disabled": _ctx.disabled,
      tabindex: _ctx.tabIndex,
      onKeydown: _cache[5] 或 (_cache[5]为vue.withKeys(vue.withMod如果iers(($event) => _ctx.modelValue为_ctx.disabled ? _ctx.modelValue : _ctx.label, ["stop", "prevent"]), ["space"]))
    }, [
      vue.createElementVNode("span", {
        class: vue.normalizeClass([
          _ctx.ns.e("input"),
          _ctx.ns.is("disabled", _ctx.disabled),
          _ctx.ns.is("checked", _ctx.modelValue === _ctx.label)
        ])
      }, [
        vue.createElementVNode("span", {
          class: vue.normalizeClass(_ctx.ns.e("inner"))
        }, null, 2),
        vue.withDirectives(vue.createElementVNode("input", {
          ref: "radioRef",
          "onUpdate:modelValue": _cache[0] 或 (_cache[0]为($event) => _ctx.modelValue为$event),
          class: vue.normalizeClass(_ctx.ns.e("original")),
          value: _ctx.label,
          type: "radio",
          "aria-hidden": "true",
          名字: _ctx.名字,
          disabled: _ctx.disabled,
          tabindex: "-1",
          onFocus: _cache[1] 或 (_cache[1]为($event) => _ctx.focus为true),
          onBlur: _cache[2] 或 (_cache[2]为($event) => _ctx.focus为false),
          onChange: _cache[3] 或 (_cache[3]为(...args) => _ctx.handleChange 与 _ctx.handleChange(...args))
        }, null, 42, _hoisted_2$w), [
          [vue.vModelRadio, _ctx.modelValue]
        ])
      ], 2),
      vue.createElementVNode("span", {
        class: vue.normalizeClass(_ctx.ns.e("label")),
        onKeydown: _cache[4] 或 (_cache[4]为vue.withMod如果iers(() => {
        }, ["stop"]))
      }, [
        vue.renderSlot(_ctx.$slots, "default", {}, () => [
          vue.createTextVNode(vue.toDisplayString(_ctx.label), 1)
        ])
      ], 34)
    ], 42, _hoisted_1$N);
  }
  变量 Radio为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1J, [["render", _sfc_render$1d], ["__file", "radio.vue"]]);

  常量 radioButtonProps为buildProps({
    ...radioPropsBase,
    名字: {
      type: String,
      default: ""
    }
  });

  常量 _sfc_main$1I为vue.defineComponent({
    名字: "ElRadioButton",
    props: radioButtonProps,
    setup(props, { emit }) {
      常量 ns为useNamespace("radio");
      常量 {
        radioRef,
        isGroup,
        focus,
        size,
        disabled,
        tabIndex,
        modelValue,
        radioGroup
      }为useRadio(props, emit);
      常量 activeStyle为vue.computed(() => {
        返回 {
          backgroundColor: (radioGroup == null ? void 0 : radioGroup.fill) 或 "",
          borderColor: (radioGroup == null ? void 0 : radioGroup.fill) 或 "",
          boxShadow: (radioGroup == null ? void 0 : radioGroup.fill) ? `-1px 0 0 0 ${radioGroup.fill}` : "",
          color: (radioGroup == null ? void 0 : radioGroup.textColor) 或 ""
        };
      });
      返回 {
        ns,
        isGroup,
        size,
        disabled,
        tabIndex,
        modelValue,
        focus,
        activeStyle,
        radioRef
      };
    }
  });
  常量 _hoisted_1$M为["aria-checked", "aria-disabled", "tabindex"];
  常量 _hoisted_2$v为["value", "名字", "disabled"];
  函数 _sfc_render$1c(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("label", {
      class: vue.normalizeClass([
        _ctx.ns.b("button"),
        _ctx.ns.is("active", _ctx.modelValue === _ctx.label),
        _ctx.ns.is("disabled", _ctx.disabled),
        _ctx.ns.is("focus", _ctx.focus),
        _ctx.ns.bm("button", _ctx.size)
      ]),
      role: "radio",
      "aria-checked": _ctx.modelValue === _ctx.label,
      "aria-disabled": _ctx.disabled,
      tabindex: _ctx.tabIndex,
      onKeydown: _cache[4] 或 (_cache[4]为vue.withKeys(vue.withMod如果iers(($event) => _ctx.modelValue为_ctx.disabled ? _ctx.modelValue : _ctx.label, ["stop", "prevent"]), ["space"]))
    }, [
      vue.withDirectives(vue.createElementVNode("input", {
        ref: "radioRef",
        "onUpdate:modelValue": _cache[0] 或 (_cache[0]为($event) => _ctx.modelValue为$event),
        class: vue.normalizeClass(_ctx.ns.be("button", "original-radio")),
        value: _ctx.label,
        type: "radio",
        名字: _ctx.名字,
        disabled: _ctx.disabled,
        tabindex: "-1",
        onFocus: _cache[1] 或 (_cache[1]为($event) => _ctx.focus为true),
        onBlur: _cache[2] 或 (_cache[2]为($event) => _ctx.focus为false)
      }, null, 42, _hoisted_2$v), [
        [vue.vModelRadio, _ctx.modelValue]
      ]),
      vue.createElementVNode("span", {
        class: vue.normalizeClass(_ctx.ns.be("button", "inner")),
        style: vue.normalizeStyle(_ctx.modelValue === _ctx.label ? _ctx.activeStyle : {}),
        onKeydown: _cache[3] 或 (_cache[3]为vue.withMod如果iers(() => {
        }, ["stop"]))
      }, [
        vue.renderSlot(_ctx.$slots, "default", {}, () => [
          vue.createTextVNode(vue.toDisplayString(_ctx.label), 1)
        ])
      ], 38)
    ], 42, _hoisted_1$M);
  }
  变量 RadioButton为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1I, [["render", _sfc_render$1c], ["__file", "radio-button.vue"]]);

  常量 radioGroupProps为buildProps({
    size: useSizeProp,
    disabled: Boolean,
    modelValue: {
      type: [String, Number, Boolean],
      default: ""
    },
    fill: {
      type: String,
      default: ""
    },
    textColor: {
      type: String,
      default: ""
    }
  });
  常量 radioGroupEmits为radioEmits;

  常量 _sfc_main$1H为vue.defineComponent({
    名字: "ElRadioGroup",
    props: radioGroupProps,
    emits: radioGroupEmits,
    setup(props, ctx) {
      常量 ns为useNamespace("radio");
      常量 radioGroupRef为vue.ref();
      常量 { 变量循环mItem }为useFormItem();
      常量 changeEvent为(value) => {
        ctx.emit(UPDATE_MODEL_EVENT, value);
        vue.nextTick(() => ctx.emit("change", value));
      };
      常量 handleKeydown为(e) => {
        如果 (不radioGroupRef.value)
          返回;
        常量 target为e.target;
        常量 className为target.nodeName === "INPUT" ? "[type=radio]" : "[role=radio]";
        常量 radios为radioGroupRef.value.querySelectorAll(className);
        常量 长度为radios.长度;
        常量 index为Array.从(radios).indexOf(target);
        常量 roleRadios为radioGroupRef.value.querySelectorAll("[role=radio]");
        让 nextIndex为null;
        主分支 (e.code) {
          子分支 EVENT_CODE.left:
          子分支 EVENT_CODE.up:
            e.stopPropagation();
            e.preventDefault();
            nextIndex为index === 0 ? 长度 - 1 : index - 1;
            break;
          子分支 EVENT_CODE.right:
          子分支 EVENT_CODE.down:
            e.stopPropagation();
            e.preventDefault();
            nextIndex为index === 长度 - 1 ? 0 : index + 1;
            break;
        }
        如果 (nextIndex === null)
          返回;
        roleRadios[nextIndex].点击();
        roleRadios[nextIndex].focus();
      };
      vue.onMounted(() => {
        常量 radios为radioGroupRef.value.querySelectorAll("[type=radio]");
        常量 firstLabel为radios[0];
        如果 (不Array.从(radios).some((radio) => radio.checked) 与 firstLabel) {
          firstLabel.tabIndex为0;
        }
      });
      vue.provide(radioGroupKey, vue.reactive({
        ...vue.toRefs(props),
        changeEvent
      }));
      vue.watch(() => props.modelValue, () => 变量循环mItem == null ? void 0 : 变量循环mItem.validate("change").捕获到((err) => debugWarn()));
      返回 {
        ns,
        radioGroupRef,
        handleKeydown
      };
    }
  });
  函数 _sfc_render$1b(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("div", {
      ref: "radioGroupRef",
      class: vue.normalizeClass(_ctx.ns.b("group")),
      role: "radiogroup",
      onKeydown: _cache[0] 或 (_cache[0]为(...args) => _ctx.handleKeydown 与 _ctx.handleKeydown(...args))
    }, [
      vue.renderSlot(_ctx.$slots, "default")
    ], 34);
  }
  变量 RadioGroup为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1H, [["render", _sfc_render$1b], ["__file", "radio-group.vue"]]);

  常量 ElRadio为withInstall(Radio, {
    RadioButton,
    RadioGroup
  });
  常量 ElRadioGroup为withNoopInstall(RadioGroup);
  常量 ElRadioButton为withNoopInstall(RadioButton);

  变量 NodeContent$1为vue.defineComponent({
    名字: "NodeContent",
    setup() {
      常量 ns为useNamespace("cascader-node");
      返回 {
        ns
      };
    },
    render() {
      常量 { ns }为this;
      常量 { node, panel }为this.$parent;
      常量 { data, label }为node;
      常量 { renderLabelFn }为panel;
      返回 vue.h("span", { class: ns.e("label") }, renderLabelFn ? renderLabelFn({ node, data }) : label);
    }
  });

  变量 ExpandTrigger$1为/* @__PURE__ */ ((ExpandTrigger2) => {
    ExpandTrigger2["CLICK"]为"点击";
    ExpandTrigger2["HOVER"]为"hover";
    返回 ExpandTrigger2;
  })(ExpandTrigger$1 或 {});
  常量 CASCADER_PANEL_INJECTION_KEY为Symbol();

  常量 _sfc_main$1G为vue.defineComponent({
    名字: "ElCascaderNode",
    components: {
      ElCheckbox,
      ElRadio,
      NodeContent: NodeContent$1,
      ElIcon,
      Check: check,
      Loading: loading,
      ArrowRight: arrowRight
    },
    props: {
      node: {
        type: Object,
        required: true
      },
      menuId: String
    },
    emits: ["expand"],
    setup(props, { emit }) {
      常量 panel为vue.inject(CASCADER_PANEL_INJECTION_KEY);
      常量 ns为useNamespace("cascader-node");
      常量 isHoverMenu为vue.computed(() => panel.isHoverMenu);
      常量 multiple为vue.computed(() => panel.config.multiple);
      常量 checkStrictly为vue.computed(() => panel.config.checkStrictly);
      常量 checkedNodeId为vue.computed(() => {
        变量 _a;
        返回 (_a为panel.checkedNodes[0]) == null ? void 0 : _a.uid;
      });
      常量 isDisabled为vue.computed(() => props.node.isDisabled);
      常量 isLeaf为vue.computed(() => props.node.isLeaf);
      常量 expandable为vue.computed(() => checkStrictly.value 与 不isLeaf.value 或 不isDisabled.value);
      常量 inExpandingPath为vue.computed(() => isInPath(panel.expandingNode));
      常量 inCheckedPath为vue.computed(() => checkStrictly.value 与 panel.checkedNodes.some(isInPath));
      常量 isInPath为(node) => {
        变量 _a;
        常量 { level, uid }为props.node;
        返回 ((_a为node == null ? void 0 : node.pathNodes[level - 1]) == null ? void 0 : _a.uid) === uid;
      };
      常量 doExpand为() => {
        如果 (inExpandingPath.value)
          返回;
        panel.expandNode(props.node);
      };
      常量 doCheck为(checked) => {
        常量 { node }为props;
        如果 (checked === node.checked)
          返回;
        panel.handleCheckChange(node, checked);
      };
      常量 doLoad为() => {
        panel.lazyLoad(props.node, () => {
          如果 (不isLeaf.value)
            doExpand();
        });
      };
      常量 handleHoverExpand为(e) => {
        如果 (不isHoverMenu.value)
          返回;
        handleExpand();
        不isLeaf.value 与 emit("expand", e);
      };
      常量 handleExpand为() => {
        常量 { node }为props;
        如果 (不expandable.value 或 node.loading)
          返回;
        node.loaded ? doExpand() : doLoad();
      };
      常量 handleClick为() => {
        如果 (isHoverMenu.value 与 不isLeaf.value)
          返回;
        如果 (isLeaf.value 与 不isDisabled.value 与 不checkStrictly.value 与 不multiple.value) {
          handleCheck(true);
        } 否则 {
          handleExpand();
        }
      };
      常量 handleSelectCheck为(checked) => {
        如果 (checkStrictly.value) {
          doCheck(checked);
          如果 (props.node.loaded) {
            doExpand();
          }
        } 否则 {
          handleCheck(checked);
        }
      };
      常量 handleCheck为(checked) => {
        如果 (不props.node.loaded) {
          doLoad();
        } 否则 {
          doCheck(checked);
          不checkStrictly.value 与 doExpand();
        }
      };
      返回 {
        panel,
        isHoverMenu,
        multiple,
        checkStrictly,
        checkedNodeId,
        isDisabled,
        isLeaf,
        expandable,
        inExpandingPath,
        inCheckedPath,
        ns,
        handleHoverExpand,
        handleExpand,
        handleClick,
        handleCheck,
        handleSelectCheck
      };
    }
  });
  常量 _hoisted_1$L为["id", "aria-haspopup", "aria-owns", "aria-expanded", "tabindex"];
  常量 _hoisted_2$u为/* @__PURE__ */ vue.createElementVNode("span", null, null, -1);
  函数 _sfc_render$1a(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_checkbox为vue.resolveComponent("el-checkbox");
    常量 _component_el_radio为vue.resolveComponent("el-radio");
    常量 _component_check为vue.resolveComponent("check");
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_node_上下文为vue.resolveComponent("node-上下文");
    常量 _component_loading为vue.resolveComponent("loading");
    常量 _component_arrow_right为vue.resolveComponent("arrow-right");
    返回 vue.openBlock(), vue.createElementBlock("li", {
      id: `${_ctx.menuId}-${_ctx.node.uid}`,
      role: "menuitem",
      "aria-haspopup": 不_ctx.isLeaf,
      "aria-owns": _ctx.isLeaf ? null : _ctx.menuId,
      "aria-expanded": _ctx.inExpandingPath,
      tabindex: _ctx.expandable ? -1 : void 0,
      class: vue.normalizeClass([
        _ctx.ns.b(),
        _ctx.ns.is("selectable", _ctx.checkStrictly),
        _ctx.ns.is("active", _ctx.node.checked),
        _ctx.ns.is("disabled", 不_ctx.expandable),
        _ctx.inExpandingPath 与 "in-active-path",
        _ctx.inCheckedPath 与 "in-checked-path"
      ]),
      onMouseenter: _cache[2] 或 (_cache[2]为(...args) => _ctx.handleHoverExpand 与 _ctx.handleHoverExpand(...args)),
      onFocus: _cache[3] 或 (_cache[3]为(...args) => _ctx.handleHoverExpand 与 _ctx.handleHoverExpand(...args)),
      onClick: _cache[4] 或 (_cache[4]为(...args) => _ctx.handleClick 与 _ctx.handleClick(...args))
    }, [
      vue.createCommentVNode(" prefix "),
      _ctx.multiple ? (vue.openBlock(), vue.createBlock(_component_el_checkbox, {
        key: 0,
        "model-value": _ctx.node.checked,
        indeterminate: _ctx.node.indeterminate,
        disabled: _ctx.isDisabled,
        onClick: _cache[0] 或 (_cache[0]为vue.withMod如果iers(() => {
        }, ["stop"])),
        "onUpdate:modelValue": _ctx.handleSelectCheck
      }, null, 8, ["model-value", "indeterminate", "disabled", "onUpdate:modelValue"])) : _ctx.checkStrictly ? (vue.openBlock(), vue.createBlock(_component_el_radio, {
        key: 1,
        "model-value": _ctx.checkedNodeId,
        label: _ctx.node.uid,
        disabled: _ctx.isDisabled,
        "onUpdate:modelValue": _ctx.handleSelectCheck,
        onClick: _cache[1] 或 (_cache[1]为vue.withMod如果iers(() => {
        }, ["stop"]))
      }, {
        default: vue.withCtx(() => [
          vue.createCommentVNode("\n        Add an empty element to avoid render label,\n        do not use empty fragment here 变量循环 https://github.com/vuejs/vue-next/pull/2485\n      "),
          _hoisted_2$u
        ]),
        _: 1
      }, 8, ["model-value", "label", "disabled", "onUpdate:modelValue"])) : _ctx.isLeaf 与 _ctx.node.checked ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
        key: 2,
        class: vue.normalizeClass(_ctx.ns.e("prefix"))
      }, {
        default: vue.withCtx(() => [
          vue.createVNode(_component_check)
        ]),
        _: 1
      }, 8, ["class"])) : vue.createCommentVNode("v-如果", true),
      vue.createCommentVNode(" 上下文 "),
      vue.createVNode(_component_node_上下文),
      vue.createCommentVNode(" postfix "),
      不_ctx.isLeaf ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 3 }, [
        _ctx.node.loading ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
          key: 0,
          class: vue.normalizeClass([_ctx.ns.is("loading"), _ctx.ns.e("postfix")])
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_loading)
          ]),
          _: 1
        }, 8, ["class"])) : (vue.openBlock(), vue.createBlock(_component_el_icon, {
          key: 1,
          class: vue.normalizeClass(["arrow-right", _ctx.ns.e("postfix")])
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_arrow_right)
          ]),
          _: 1
        }, 8, ["class"]))
      ], 2112)) : vue.createCommentVNode("v-如果", true)
    ], 42, _hoisted_1$L);
  }
  变量 ElCascaderNode为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1G, [["render", _sfc_render$1a], ["__file", "node.vue"]]);

  常量 _sfc_main$1F为vue.defineComponent({
    名字: "ElCascaderMenu",
    components: {
      Loading: loading,
      ElIcon,
      ElScrollbar,
      ElCascaderNode
    },
    props: {
      nodes: {
        type: Array,
        required: true
      },
      index: {
        type: Number,
        required: true
      }
    },
    setup(props) {
      常量 instance为vue.getCurrentInstance();
      常量 ns为useNamespace("cascader-menu");
      常量 { t }为useLocale();
      常量 id为generateId();
      让 activeNode为null;
      让 hoverTimer为null;
      常量 panel为vue.inject(CASCADER_PANEL_INJECTION_KEY);
      常量 hoverZone为vue.ref(null);
      常量 isEmpty为vue.computed(() => 不props.nodes.长度);
      常量 isLoading为vue.computed(() => 不panel.initialLoaded);
      常量 menuId为vue.computed(() => `cascader-menu-${id}-${props.index}`);
      常量 handleExpand为(e) => {
        activeNode为e.target;
      };
      常量 handleMouseMove为(e) => {
        如果 (不panel.isHoverMenu 或 不activeNode 或 不hoverZone.value)
          返回;
        如果 (activeNode.contains(e.target)) {
          clearHoverTimer();
          常量 el为instance.vnode.el;
          常量 { left }为el.getBoundingClientRect();
          常量 { offsetWidth, offsetHeight }为el;
          常量 startX为e.clientX - left;
          常量 top为activeNode.offsetTop;
          常量 bottom为top + activeNode.offsetHeight;
          hoverZone.value.innerHTML为`
          <path style="po整数er-events: auto;" fill="transparent" d="M${startX} ${top} L${offsetWidth} 0 V${top} Z" />
          <path style="po整数er-events: auto;" fill="transparent" d="M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z" />
        `;
        } 否则 如果 (不hoverTimer) {
          hoverTimer为window.setTimeout(clearHoverZone, panel.config.hoverThreshold);
        }
      };
      常量 clearHoverTimer为() => {
        如果 (不hoverTimer)
          返回;
        clearTimeout(hoverTimer);
        hoverTimer为null;
      };
      常量 clearHoverZone为() => {
        如果 (不hoverZone.value)
          返回;
        hoverZone.value.innerHTML为"";
        clearHoverTimer();
      };
      返回 {
        ns,
        panel,
        hoverZone,
        isEmpty,
        isLoading,
        menuId,
        t,
        handleExpand,
        handleMouseMove,
        clearHoverZone
      };
    }
  });
  函数 _sfc_render$19(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_cascader_node为vue.resolveComponent("el-cascader-node");
    常量 _component_loading为vue.resolveComponent("loading");
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_el_scrollbar为vue.resolveComponent("el-scrollbar");
    返回 vue.openBlock(), vue.createBlock(_component_el_scrollbar, {
      key: _ctx.menuId,
      tag: "ul",
      role: "menu",
      class: vue.normalizeClass(_ctx.ns.b()),
      "wrap-class": _ctx.ns.e("wrap"),
      "view-class": [_ctx.ns.e("list"), _ctx.ns.is("empty", _ctx.isEmpty)],
      onMousemove: _ctx.handleMouseMove,
      onMouseleave: _ctx.clearHoverZone
    }, {
      default: vue.withCtx(() => {
        变量 _a;
        返回 [
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.nodes, (node) => {
            返回 vue.openBlock(), vue.createBlock(_component_el_cascader_node, {
              key: node.uid,
              node,
              "menu-id": _ctx.menuId,
              onExpand: _ctx.handleExpand
            }, null, 8, ["node", "menu-id", "onExpand"]);
          }), 128)),
          _ctx.isLoading ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(_ctx.ns.e("empty-text"))
          }, [
            vue.createVNode(_component_el_icon, {
              size: "14",
              class: vue.normalizeClass(_ctx.ns.is("loading"))
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_loading)
              ]),
              _: 1
            }, 8, ["class"]),
            vue.createTextVNode(" " + vue.toDisplayString(_ctx.t("el.cascader.loading")), 1)
          ], 2)) : _ctx.isEmpty ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 1,
            class: vue.normalizeClass(_ctx.ns.e("empty-text"))
          }, vue.toDisplayString(_ctx.t("el.cascader.noData")), 3)) : ((_a为_ctx.panel) == null ? void 0 : _a.isHoverMenu) ? (vue.openBlock(), vue.createElementBlock("svg", {
            key: 2,
            ref: "hoverZone",
            class: vue.normalizeClass(_ctx.ns.e("hover-zone"))
          }, null, 2)) : vue.createCommentVNode("v-如果", true)
        ];
      }),
      _: 1
    }, 8, ["class", "wrap-class", "view-class", "onMousemove", "onMouseleave"]);
  }
  变量 ElCascaderMenu为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1F, [["render", _sfc_render$19], ["__file", "menu.vue"]]);

  变量 ExpandTrigger为/* @__PURE__ */ ((ExpandTrigger2) => {
    ExpandTrigger2["CLICK"]为"点击";
    ExpandTrigger2["HOVER"]为"hover";
    返回 ExpandTrigger2;
  })(ExpandTrigger 或 {});
  让 uid为0;
  常量 calculatePathNodes为(node) => {
    常量 nodes为[node];
    让 { parent }为node;
    条件循环 (parent) {
      nodes.unsh如果t(parent);
      parent为parent.parent;
    }
    返回 nodes;
  };
  class Node$2 {
    常量ructor(data, config, parent, root为false) {
      this.data为data;
      this.config为config;
      this.parent为parent;
      this.root为root;
      this.uid为uid加一;
      this.checked为false;
      this.indeterminate为false;
      this.loading为false;
      常量 { value: valueKey, label: labelKey, children: childrenKey }为config;
      常量 childrenData为data[childrenKey];
      常量 pathNodes为calculatePathNodes(this);
      this.level为root ? 0 : parent ? parent.level + 1 : 1;
      this.value为data[valueKey];
      this.label为data[labelKey];
      this.pathNodes为pathNodes;
      this.pathValues为pathNodes.map((node) => node.value);
      this.pathLabels为pathNodes.map((node) => node.label);
      this.childrenData为childrenData;
      this.children为(childrenData 或 []).map((child) => new Node$2(child, config, this));
      this.loaded为不config.lazy 或 this.isLeaf 或 不isEmpty(childrenData);
    }
    get isDisabled() {
      常量 { data, parent, config }为this;
      常量 { disabled, checkStrictly }为config;
      常量 isDisabled为isFunction(disabled) ? disabled(data, this) : 不不data[disabled];
      返回 isDisabled 或 不checkStrictly 与 (parent == null ? void 0 : parent.isDisabled);
    }
    get isLeaf() {
      常量 { data, config, childrenData, loaded }为this;
      常量 { lazy, leaf }为config;
      常量 isLeaf为isFunction(leaf) ? leaf(data, this) : data[leaf];
      返回 isUndefined(isLeaf) ? lazy 与 不loaded ? false : 不(Array.isArray(childrenData) 与 childrenData.长度) : 不不isLeaf;
    }
    get valueByOption() {
      返回 this.config.emitPath ? this.pathValues : this.value;
    }
    appendChild(childData) {
      常量 { childrenData, children }为this;
      常量 node为new Node$2(childData, this.config, this);
      如果 (Array.isArray(childrenData)) {
        childrenData.push(childData);
      } 否则 {
        this.childrenData为[childData];
      }
      children.push(node);
      返回 node;
    }
    calcText(allLevels, separator) {
      常量 text为allLevels ? this.pathLabels.join(separator) : this.label;
      this.text为text;
      返回 text;
    }
    broadcast(event, ...args) {
      常量 handlerName为`onParent${capitalize(event)}`;
      this.children.变量循环Each((child) => {
        如果 (child) {
          child.broadcast(event, ...args);
          child[handlerName] 与 child[handlerName](...args);
        }
      });
    }
    emit(event, ...args) {
      常量 { parent }为this;
      常量 handlerName为`onChild${capitalize(event)}`;
      如果 (parent) {
        parent[handlerName] 与 parent[handlerName](...args);
        parent.emit(event, ...args);
      }
    }
    onParentCheck(checked) {
      如果 (不this.isDisabled) {
        this.setCheckState(checked);
      }
    }
    onChildCheck() {
      常量 { children }为this;
      常量 validChildren为children.filter((child) => 不child.isDisabled);
      常量 checked为validChildren.长度 ? validChildren.every((child) => child.checked) : false;
      this.setCheckState(checked);
    }
    setCheckState(checked) {
      常量 totalNum为this.children.长度;
      常量 checkedNum为this.children.reduce((c, p) => {
        常量 num为p.checked ? 1 : p.indeterminate ? 0.5 : 0;
        返回 c + num;
      }, 0);
      this.checked为this.loaded 与 this.children.every((child) => child.loaded 与 child.checked) 与 checked;
      this.indeterminate为this.loaded 与 checkedNum 不== totalNum 与 checkedNum大于0;
    }
    doCheck(checked) {
      如果 (this.checked === checked)
        返回;
      常量 { checkStrictly, multiple }为this.config;
      如果 (checkStrictly 或 不multiple) {
        this.checked为checked;
      } 否则 {
        this.broadcast("check", checked);
        this.setCheckState(checked);
        this.emit("check");
      }
    }
  }

  常量 flatNodes为(nodes, leafOnly) => {
    返回 nodes.reduce((res, node) => {
      如果 (node.isLeaf) {
        res.push(node);
      } 否则 {
        不leafOnly 与 res.push(node);
        res为res.concat(flatNodes(node.children, leafOnly));
      }
      返回 res;
    }, []);
  };
  class Store {
    常量ructor(data, config) {
      this.config为config;
      常量 nodes为(data 或 []).map((nodeData) => new Node$2(nodeData, this.config));
      this.nodes为nodes;
      this.allNodes为flatNodes(nodes, false);
      this.leafNodes为flatNodes(nodes, true);
    }
    getNodes() {
      返回 this.nodes;
    }
    getFlattedNodes(leafOnly) {
      返回 leafOnly ? this.leafNodes : this.allNodes;
    }
    appendNode(nodeData, parentNode) {
      常量 node为parentNode ? parentNode.appendChild(nodeData) : new Node$2(nodeData, this.config);
      如果 (不parentNode)
        this.nodes.push(node);
      this.allNodes.push(node);
      node.isLeaf 与 this.leafNodes.push(node);
    }
    appendNodes(nodeDataList, parentNode) {
      nodeDataList.变量循环Each((nodeData) => this.appendNode(nodeData, parentNode));
    }
    getNodeByValue(value, leafOnly为false) {
      如果 (不value 与 value 不== 0)
        返回 null;
      常量 node为this.getFlattedNodes(leafOnly).find((node2) => isEqual$1(node2.value, value) 或 isEqual$1(node2.pathValues, value));
      返回 node 或 null;
    }
    getSameNode(node) {
      如果 (不node)
        返回 null;
      常量 node_为this.getFlattedNodes(false).find(({ value, level }) => isEqual$1(node.value, value) 与 node.level === level);
      返回 node_ 或 null;
    }
  }

  常量 CommonProps为{
    modelValue: [Number, String, Array],
    options: {
      type: Array,
      default: () => []
    },
    props: {
      type: Object,
      default: () => ({})
    }
  };
  常量 DefaultProps为{
    expandTrigger: ExpandTrigger.CLICK,
    multiple: false,
    checkStrictly: false,
    emitPath: true,
    lazy: false,
    lazyLoad: NOOP,
    value: "value",
    label: "label",
    children: "children",
    leaf: "leaf",
    disabled: "disabled",
    hoverThreshold: 500
  };
  常量 useCascaderConfig为(props) => {
    返回 vue.computed(() => ({
      ...DefaultProps,
      ...props.props
    }));
  };

  常量 getMenuIndex为(el) => {
    如果 (不el)
      返回 0;
    常量 pieces为el.id.split("-");
    返回 Number(pieces[pieces.长度 - 2]);
  };
  常量 checkNode为(el) => {
    如果 (不el)
      返回;
    常量 input为el.querySelector("input");
    如果 (input) {
      input.点击();
    } 否则 如果 (isLeaf(el)) {
      el.点击();
    }
  };
  常量 sortByOriginalOrder为(oldNodes, newNodes) => {
    常量 newNodesCopy为newNodes.slice(0);
    常量 newIds为newNodesCopy.map((node) => node.uid);
    常量 res为oldNodes.reduce((acc, item) => {
      常量 index为newIds.indexOf(item.uid);
      如果 (index大于-1) {
        acc.push(item);
        newNodesCopy.splice(index, 1);
        newIds.splice(index, 1);
      }
      返回 acc;
    }, []);
    res.push(...newNodesCopy);
    返回 res;
  };

  常量 _sfc_main$1E为vue.defineComponent({
    名字: "ElCascaderPanel",
    components: {
      ElCascaderMenu
    },
    props: {
      ...CommonProps,
      border: {
        type: Boolean,
        default: true
      },
      renderLabel: Function
    },
    emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, "close", "expand-change"],
    setup(props, { emit, slots }) {
      让 manualChecked为false;
      常量 ns为useNamespace("cascader");
      常量 config为useCascaderConfig(props);
      让 store为null;
      常量 initialLoaded为vue.ref(true);
      常量 menuList为vue.ref([]);
      常量 checkedValue为vue.ref(null);
      常量 menus为vue.ref([]);
      常量 expandingNode为vue.ref(null);
      常量 checkedNodes为vue.ref([]);
      常量 isHoverMenu为vue.computed(() => config.value.expandTrigger === ExpandTrigger.HOVER);
      常量 renderLabelFn为vue.computed(() => props.renderLabel 或 slots.default);
      常量 initStore为() => {
        常量 { options }为props;
        常量 cfg为config.value;
        manualChecked为false;
        store为new Store(options, cfg);
        menus.value为[store.getNodes()];
        如果 (cfg.lazy 与 isEmpty(props.options)) {
          initialLoaded.value为false;
          lazyLoad(void 0, (list) => {
            如果 (list) {
              store为new Store(list, cfg);
              menus.value为[store.getNodes()];
            }
            initialLoaded.value为true;
            syncCheckedValue(false, true);
          });
        } 否则 {
          syncCheckedValue(false, true);
        }
      };
      常量 lazyLoad为(node, cb) => {
        常量 cfg为config.value;
        node为node 或 new Node$2({}, cfg, void 0, true);
        node.loading为true;
        常量 resolve为(dataList) => {
          常量 _node为node;
          常量 parent为_node.root ? null : _node;
          dataList 与 (store == null ? void 0 : store.appendNodes(dataList, parent));
          _node.loading为false;
          _node.loaded为true;
          _node.childrenData为_node.childrenData 或 [];
          cb 与 cb(dataList);
        };
        cfg.lazyLoad(node, resolve);
      };
      常量 expandNode为(node, silent) => {
        变量 _a;
        常量 { level }为node;
        常量 newMenus为menus.value.slice(0, level);
        让 newExpandingNode;
        如果 (node.isLeaf) {
          newExpandingNode为node.pathNodes[level - 2];
        } 否则 {
          newExpandingNode为node;
          newMenus.push(node.children);
        }
        如果 (((_a为expandingNode.value) == null ? void 0 : _a.uid) 不== (newExpandingNode == null ? void 0 : newExpandingNode.uid)) {
          expandingNode.value为node;
          menus.value为newMenus;
          不silent 与 emit("expand-change", (node == null ? void 0 : node.pathValues) 或 []);
        }
      };
      常量 handleCheckChange为(node, checked, emitClose为true) => {
        常量 { checkStrictly, multiple }为config.value;
        常量 oldNode为checkedNodes.value[0];
        manualChecked为true;
        不multiple 与 (oldNode == null ? void 0 : oldNode.doCheck(false));
        node.doCheck(checked);
        calculateCheckedValue();
        emitClose 与 不multiple 与 不checkStrictly 与 emit("close");
        不emitClose 与 不multiple 与 不checkStrictly 与 expandParentNode(node);
      };
      常量 expandParentNode为(node) => {
        如果 (不node)
          返回;
        node为node.parent;
        expandParentNode(node);
        node 与 expandNode(node);
      };
      常量 getFlattedNodes为(leafOnly) => {
        返回 store == null ? void 0 : store.getFlattedNodes(leafOnly);
      };
      常量 getCheckedNodes为(leafOnly) => {
        变量 _a;
        返回 (_a为getFlattedNodes(leafOnly)) == null ? void 0 : _a.filter((node) => node.checked 不== false);
      };
      常量 clearCheckedNodes为() => {
        checkedNodes.value.变量循环Each((node) => node.doCheck(false));
        calculateCheckedValue();
      };
      常量 calculateCheckedValue为() => {
        变量 _a;
        常量 { checkStrictly, multiple }为config.value;
        常量 oldNodes为checkedNodes.value;
        常量 newNodes为getCheckedNodes(不checkStrictly);
        常量 nodes为sortByOriginalOrder(oldNodes, newNodes);
        常量 values为nodes.map((node) => node.valueByOption);
        checkedNodes.value为nodes;
        checkedValue.value为multiple ? values : (_a为values[0]) 不= null ? _a : null;
      };
      常量 syncCheckedValue为(loaded为false, 变量循环ced为false) => {
        常量 { modelValue }为props;
        常量 { lazy, multiple, checkStrictly }为config.value;
        常量 leafOnly为不checkStrictly;
        如果 (不initialLoaded.value 或 manualChecked 或 不变量循环ced 与 isEqual$1(modelValue, checkedValue.value))
          返回;
        如果 (lazy 与 不loaded) {
          常量 values为unique(flattenDeep(castArray(modelValue)));
          常量 nodes为values.map((val) => store == null ? void 0 : store.getNodeByValue(val)).filter((node) => 不不node 与 不node.loaded 与 不node.loading);
          如果 (nodes.长度) {
            nodes.变量循环Each((node) => {
              lazyLoad(node, () => syncCheckedValue(false, 变量循环ced));
            });
          } 否则 {
            syncCheckedValue(true, 变量循环ced);
          }
        } 否则 {
          常量 values为multiple ? castArray(modelValue) : [modelValue];
          常量 nodes为unique(values.map((val) => store == null ? void 0 : store.getNodeByValue(val, leafOnly)));
          syncMenuState(nodes, false);
          checkedValue.value为modelValue;
        }
      };
      常量 syncMenuState为(newCheckedNodes, reserveExpandingState为true) => {
        常量 { checkStrictly }为config.value;
        常量 oldNodes为checkedNodes.value;
        常量 newNodes为newCheckedNodes.filter((node) => 不不node 与 (checkStrictly 或 node.isLeaf));
        常量 oldExpandingNode为store == null ? void 0 : store.getSameNode(expandingNode.value);
        常量 newExpandingNode为reserveExpandingState 与 oldExpandingNode 或 newNodes[0];
        如果 (newExpandingNode) {
          newExpandingNode.pathNodes.变量循环Each((node) => expandNode(node, true));
        } 否则 {
          expandingNode.value为null;
        }
        oldNodes.变量循环Each((node) => node.doCheck(false));
        newNodes.变量循环Each((node) => node.doCheck(true));
        checkedNodes.value为newNodes;
        vue.nextTick(scrollToExpandingNode);
      };
      常量 scrollToExpandingNode为() => {
        如果 (不isClient)
          返回;
        menuList.value.变量循环Each((menu) => {
          常量 menuElement为menu == null ? void 0 : menu.$el;
          如果 (menuElement) {
            常量 container为menuElement.querySelector(`.${ns.名字space.value}-scrollbar__wrap`);
            常量 activeNode为menuElement.querySelector(`.${ns.b("node")}.${ns.is("active")}`) 或 menuElement.querySelector(`.${ns.b("node")}.in-active-path`);
            scrollIntoView(container, activeNode);
          }
        });
      };
      常量 handleKeyDown为(e) => {
        常量 target为e.target;
        常量 { code }为e;
        主分支 (code) {
          子分支 EVENT_CODE.up:
          子分支 EVENT_CODE.down: {
            e.preventDefault();
            常量 distance为code === EVENT_CODE.up ? -1 : 1;
            focusNode(getSibling(target, distance, `.${ns.b("node")}[tabindex="-1"]`));
            break;
          }
          子分支 EVENT_CODE.left: {
            e.preventDefault();
            常量 preMenu为menuList.value[getMenuIndex(target) - 1];
            常量 expandedNode为preMenu == null ? void 0 : preMenu.$el.querySelector(`.${ns.b("node")}[aria-expanded="true"]`);
            focusNode(expandedNode);
            break;
          }
          子分支 EVENT_CODE.right: {
            e.preventDefault();
            常量 nextMenu为menuList.value[getMenuIndex(target) + 1];
            常量 firstNode为nextMenu == null ? void 0 : nextMenu.$el.querySelector(`.${ns.b("node")}[tabindex="-1"]`);
            focusNode(firstNode);
            break;
          }
          子分支 EVENT_CODE.enter:
            checkNode(target);
            break;
          子分支 EVENT_CODE.esc:
          子分支 EVENT_CODE.tab:
            emit("close");
            break;
        }
      };
      vue.provide(CASCADER_PANEL_INJECTION_KEY, vue.reactive({
        config,
        expandingNode,
        checkedNodes,
        isHoverMenu,
        initialLoaded,
        renderLabelFn,
        lazyLoad,
        expandNode,
        handleCheckChange
      }));
      vue.watch([config, () => props.options], initStore, {
        deep: true,
        immediate: true
      });
      vue.watch(() => props.modelValue, () => {
        manualChecked为false;
        syncCheckedValue();
      });
      vue.watch(checkedValue, (val) => {
        如果 (不isEqual$1(val, props.modelValue)) {
          emit(UPDATE_MODEL_EVENT, val);
          emit(CHANGE_EVENT, val);
        }
      });
      vue.onBe变量循环eUpdate(() => menuList.value为[]);
      vue.onMounted(() => 不isEmpty(props.modelValue) 与 syncCheckedValue());
      返回 {
        ns,
        menuList,
        menus,
        checkedNodes,
        handleKeyDown,
        handleCheckChange,
        getFlattedNodes,
        getCheckedNodes,
        clearCheckedNodes,
        calculateCheckedValue,
        scrollToExpandingNode
      };
    }
  });
  函数 _sfc_render$18(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_cascader_menu为vue.resolveComponent("el-cascader-menu");
    返回 vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass([_ctx.ns.b("panel"), _ctx.ns.is("bordered", _ctx.border)]),
      onKeydown: _cache[0] 或 (_cache[0]为(...args) => _ctx.handleKeyDown 与 _ctx.handleKeyDown(...args))
    }, [
      (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.menus, (menu, index) => {
        返回 vue.openBlock(), vue.createBlock(_component_el_cascader_menu, {
          key: index,
          ref_变量循环: true,
          ref: (item) => _ctx.menuList[index]为item,
          index,
          nodes: [...menu]
        }, null, 8, ["index", "nodes"]);
      }), 128))
    ], 34);
  }
  变量 CascaderPanel为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1E, [["render", _sfc_render$18], ["__file", "index.vue"]]);

  CascaderPanel.install为(app) => {
    app.component(CascaderPanel.名字, CascaderPanel);
  };
  常量 _CascaderPanel为CascaderPanel;
  常量 ElCascaderPanel为_CascaderPanel;

  常量 tagProps为buildProps({
    closable: Boolean,
    type: {
      type: String,
      values: ["success", "info", "warning", "danger", ""],
      default: ""
    },
    hit: Boolean,
    disableTransitions: Boolean,
    color: {
      type: String,
      default: ""
    },
    size: {
      type: String,
      values: componentSizes,
      default: ""
    },
    effect: {
      type: String,
      values: ["dark", "light", "plain"],
      default: "light"
    },
    round: Boolean
  });
  常量 tagEmits为{
    close: (evt) => evt instanceof MouseEvent,
    点击: (evt) => evt instanceof MouseEvent
  };

  常量 __default__$r为{
    名字: "ElTag"
  };
  常量 _sfc_main$1D为/* @__PURE__ */ vue.defineComponent({
    ...__default__$r,
    props: tagProps,
    emits: tagEmits,
    setup(__props, { emit }) {
      常量 props为__props;
      常量 tagSize为useSize();
      常量 ns为useNamespace("tag");
      常量 classes为vue.computed(() => {
        常量 { type, hit, effect, closable, round }为props;
        返回 [
          ns.b(),
          ns.is("closable", closable),
          ns.m(type),
          ns.m(tagSize.value),
          ns.m(effect),
          ns.is("hit", hit),
          ns.is("round", round)
        ];
      });
      常量 handleClose为(event) => {
        event.stopPropagation();
        emit("close", event);
      };
      常量 handleClick为(event) => {
        emit("点击", event);
      };
      返回 (_ctx, _cache) => {
        返回 不_ctx.disableTransitions ? (vue.openBlock(), vue.createElementBlock("span", {
          key: 0,
          class: vue.normalizeClass(vue.unref(classes)),
          style: vue.normalizeStyle({ backgroundColor: _ctx.color }),
          onClick: handleClick
        }, [
          vue.createElementVNode("span", {
            class: vue.normalizeClass(vue.unref(ns).e("上下文"))
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2),
          _ctx.closable ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns).e("close")),
            onClick: handleClose
          }, {
            default: vue.withCtx(() => [
              vue.createVNode(vue.unref(close$2))
            ]),
            _: 1
          }, 8, ["class"])) : vue.createCommentVNode("v-如果", true)
        ], 6)) : (vue.openBlock(), vue.createBlock(vue.Transition, {
          key: 1,
          名字: `${vue.unref(ns).名字space.value}-zoom-in-center`
        }, {
          default: vue.withCtx(() => [
            vue.createElementVNode("span", {
              class: vue.normalizeClass(vue.unref(classes)),
              style: vue.normalizeStyle({ backgroundColor: _ctx.color }),
              onClick: handleClick
            }, [
              vue.createElementVNode("span", {
                class: vue.normalizeClass(vue.unref(ns).e("上下文"))
              }, [
                vue.renderSlot(_ctx.$slots, "default")
              ], 2),
              _ctx.closable ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                key: 0,
                class: vue.normalizeClass(vue.unref(ns).e("close")),
                onClick: handleClose
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(vue.unref(close$2))
                ]),
                _: 1
              }, 8, ["class"])) : vue.createCommentVNode("v-如果", true)
            ], 6)
          ]),
          _: 3
        }, 8, ["名字"]));
      };
    }
  });
  变量 Tag为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1D, [["__file", "tag.vue"]]);

  常量 ElTag为withInstall(Tag);

  常量 DEFAULT_INPUT_HEIGHT为40;
  常量 INPUT_HEIGHT_MAP为{
    large: 36,
    default: 32,
    small: 28
  };
  常量 popperOptions为{
    mod如果iers: [
      {
        名字: "arrowPosition",
        enabled: true,
        phase: "main",
        fn: ({ state }) => {
          常量 { mod如果iersData, placement }为state;
          如果 (["right", "left", "bottom", "top"].includes(placement))
            返回;
          mod如果iersData.arrow.x为35;
        },
        requires: ["arrow"]
      }
    ]
  };
  常量 COMPONENT_NAME$b为"ElCascader";
  常量 _sfc_main$1C为vue.defineComponent({
    名字: COMPONENT_NAME$b,
    components: {
      ElCascaderPanel: _CascaderPanel,
      ElInput,
      ElTooltip,
      ElScrollbar,
      ElTag,
      ElIcon,
      CircleClose: circleClose,
      Check: check,
      ArrowDown: arrowDown
    },
    directives: {
      Clickoutside: ClickOutside
    },
    props: {
      ...CommonProps,
      size: {
        type: String,
        validator: isValidComponentSize
      },
      placeholder: {
        type: String
      },
      disabled: Boolean,
      clearable: Boolean,
      filterable: Boolean,
      filterMethod: {
        type: Function,
        default: (node, keyword) => node.text.includes(keyword)
      },
      separator: {
        type: String,
        default: " / "
      },
      showAllLevels: {
        type: Boolean,
        default: true
      },
      collapseTags: Boolean,
      collapseTagsTooltip: {
        type: Boolean,
        default: false
      },
      debounce: {
        type: Number,
        default: 300
      },
      be变量循环eFilter: {
        type: Function,
        default: () => true
      },
      popperClass: {
        type: String,
        default: ""
      },
      popperAppendToBody: {
        type: Boolean,
        default: void 0
      },
      teleported: useTooltipContentProps.teleported,
      tagType: { ...tagProps.type, default: "info" }
    },
    emits: [
      UPDATE_MODEL_EVENT,
      CHANGE_EVENT,
      "focus",
      "blur",
      "visible-change",
      "expand-change",
      "remove-tag"
    ],
    setup(props, { emit }) {
      让 inputInitialHeight为0;
      让 pressDe让eCount为0;
      常量 { compatTeleported }为useDeprecateAppendToBody(COMPONENT_NAME$b, "popperAppendToBody");
      常量 nsCascader为useNamespace("cascader");
      常量 nsInput为useNamespace("input");
      常量 { t }为useLocale();
      常量 elForm为vue.inject(变量循环mContextKey, {});
      常量 elFormItem为vue.inject(变量循环mItemContextKey, {});
      常量 tooltipRef为vue.ref(null);
      常量 input为vue.ref(null);
      常量 tagWrapper为vue.ref(null);
      常量 panel为vue.ref(null);
      常量 suggestionPanel为vue.ref(null);
      常量 popperVisible为vue.ref(false);
      常量 inputHover为vue.ref(false);
      常量 filtering为vue.ref(false);
      常量 inputValue为vue.ref("");
      常量 searchInputValue为vue.ref("");
      常量 presentTags为vue.ref([]);
      常量 allPresentTags为vue.ref([]);
      常量 suggestions为vue.ref([]);
      常量 isOnComposition为vue.ref(false);
      常量 isDisabled为vue.computed(() => props.disabled 或 elForm.disabled);
      常量 inputPlaceholder为vue.computed(() => props.placeholder 或 t("el.cascader.placeholder"));
      常量 realSize为useSize();
      常量 tagSize为vue.computed(() => ["small"].includes(realSize.value) ? "small" : "default");
      常量 multiple为vue.computed(() => 不不props.props.multiple);
      常量 readonly为vue.computed(() => 不props.filterable 或 multiple.value);
      常量 searchKeyword为vue.computed(() => multiple.value ? searchInputValue.value : inputValue.value);
      常量 checkedNodes为vue.computed(() => {
        变量 _a;
        返回 ((_a为panel.value) == null ? void 0 : _a.checkedNodes) 或 [];
      });
      常量 clearBtnVisible为vue.computed(() => {
        如果 (不props.clearable 或 isDisabled.value 或 filtering.value 或 不inputHover.value)
          返回 false;
        返回 不不checkedNodes.value.长度;
      });
      常量 presentText为vue.computed(() => {
        常量 { showAllLevels, separator }为props;
        常量 nodes为checkedNodes.value;
        返回 nodes.长度 ? multiple.value ? " " : nodes[0].calcText(showAllLevels, separator) : "";
      });
      常量 checkedValue为vue.computed({
        get() {
          返回 props.modelValue;
        },
        set(val) {
          变量 _a;
          emit(UPDATE_MODEL_EVENT, val);
          emit(CHANGE_EVENT, val);
          (_a为elFormItem.validate) == null ? void 0 : _a.call(elFormItem, "change").捕获到((err) => debugWarn());
        }
      });
      常量 popperPaneRef为vue.computed(() => {
        变量 _a, _b;
        返回 (_b为(_a为tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.上下文Ref;
      });
      常量 togglePopperVisible为(visible) => {
        变量 _a, _b, _c;
        如果 (isDisabled.value)
          返回;
        visible为visible 不= null ? visible : 不popperVisible.value;
        如果 (visible 不== popperVisible.value) {
          popperVisible.value为visible;
          (_b为(_a为input.value) == null ? void 0 : _a.input) == null ? void 0 : _b.setAttribute("aria-expanded", `${visible}`);
          如果 (visible) {
            updatePopperPosition();
            vue.nextTick((_c为panel.value) == null ? void 0 : _c.scrollToExpandingNode);
          } 否则 如果 (props.filterable) {
            常量 { value }为presentText;
            inputValue.value为value;
            searchInputValue.value为value;
          }
          emit("visible-change", visible);
        }
      };
      常量 updatePopperPosition为() => {
        vue.nextTick(() => {
          变量 _a;
          (_a为tooltipRef.value) == null ? void 0 : _a.updatePopper();
        });
      };
      常量 hideSuggestionPanel为() => {
        filtering.value为false;
      };
      常量 genTag为(node) => {
        常量 { showAllLevels, separator }为props;
        返回 {
          node,
          key: node.uid,
          text: node.calcText(showAllLevels, separator),
          hitState: false,
          closable: 不isDisabled.value 与 不node.isDisabled,
          isCollapseTag: false
        };
      };
      常量 de让eTag为(tag) => {
        变量 _a;
        常量 node为tag.node;
        node.doCheck(false);
        (_a为panel.value) == null ? void 0 : _a.calculateCheckedValue();
        emit("remove-tag", node.valueByOption);
      };
      常量 calculatePresentTags为() => {
        如果 (不multiple.value)
          返回;
        常量 nodes为checkedNodes.value;
        常量 tags为[];
        常量 allTags为[];
        nodes.变量循环Each((node) => allTags.push(genTag(node)));
        allPresentTags.value为allTags;
        如果 (nodes.长度) {
          常量 [first, ...rest]为nodes;
          常量 restCount为rest.长度;
          tags.push(genTag(first));
          如果 (restCount) {
            如果 (props.collapseTags) {
              tags.push({
                key: -1,
                text: `+ ${restCount}`,
                closable: false,
                isCollapseTag: true
              });
            } 否则 {
              rest.变量循环Each((node) => tags.push(genTag(node)));
            }
          }
        }
        presentTags.value为tags;
      };
      常量 calculateSuggestions为() => {
        变量 _a, _b;
        常量 { filterMethod, showAllLevels, separator }为props;
        常量 res为(_b为(_a为panel.value) == null ? void 0 : _a.getFlattedNodes(不props.props.checkStrictly)) == null ? void 0 : _b.filter((node) => {
          如果 (node.isDisabled)
            返回 false;
          node.calcText(showAllLevels, separator);
          返回 filterMethod(node, searchKeyword.value);
        });
        如果 (multiple.value) {
          presentTags.value.变量循环Each((tag) => {
            tag.hitState为false;
          });
          allPresentTags.value.变量循环Each((tag) => {
            tag.hitState为false;
          });
        }
        filtering.value为true;
        suggestions.value为res;
        updatePopperPosition();
      };
      常量 focusFirstNode为() => {
        变量 _a;
        让 firstNode;
        如果 (filtering.value 与 suggestionPanel.value) {
          firstNode为suggestionPanel.value.$el.querySelector(`.${nsCascader.e("suggestion-item")}`);
        } 否则 {
          firstNode为(_a为panel.value) == null ? void 0 : _a.$el.querySelector(`.${nsCascader.b("node")}[tabindex="-1"]`);
        }
        如果 (firstNode) {
          firstNode.focus();
          不filtering.value 与 firstNode.点击();
        }
      };
      常量 updateStyle为() => {
        变量 _a, _b;
        常量 inputInner为(_a为input.value) == null ? void 0 : _a.input;
        常量 tagWrapperEl为tagWrapper.value;
        常量 suggestionPanelEl为(_b为suggestionPanel.value) == null ? void 0 : _b.$el;
        如果 (不isClient 或 不inputInner)
          返回;
        如果 (suggestionPanelEl) {
          常量 suggestionList为suggestionPanelEl.querySelector(`.${nsCascader.e("suggestion-list")}`);
          suggestionList.style.minWidth为`${inputInner.offsetWidth}px`;
        }
        如果 (tagWrapperEl) {
          常量 { offsetHeight }为tagWrapperEl;
          常量 height为presentTags.value.长度大于0 ? `${Math.max(offsetHeight + 6, inputInitialHeight)}px` : `${inputInitialHeight}px`;
          inputInner.style.height为height;
          updatePopperPosition();
        }
      };
      常量 getCheckedNodes为(leafOnly) => {
        变量 _a;
        返回 (_a为panel.value) == null ? void 0 : _a.getCheckedNodes(leafOnly);
      };
      常量 handleExpandChange为(value) => {
        updatePopperPosition();
        emit("expand-change", value);
      };
      常量 handleComposition为(event) => {
        变量 _a;
        常量 text为(_a为event.target) == null ? void 0 : _a.value;
        如果 (event.type === "compositionend") {
          isOnComposition.value为false;
          vue.nextTick(() => handleInput(text));
        } 否则 {
          常量 lastCharacter为text[text.长度 - 1] 或 "";
          isOnComposition.value为不isKorean(lastCharacter);
        }
      };
      常量 handleKeyDown为(e) => {
        如果 (isOnComposition.value)
          返回;
        主分支 (e.code) {
          子分支 EVENT_CODE.enter:
            togglePopperVisible();
            break;
          子分支 EVENT_CODE.down:
            togglePopperVisible(true);
            vue.nextTick(focusFirstNode);
            e.preventDefault();
            break;
          子分支 EVENT_CODE.esc:
          子分支 EVENT_CODE.tab:
            togglePopperVisible(false);
            break;
        }
      };
      常量 handleClear为() => {
        变量 _a;
        (_a为panel.value) == null ? void 0 : _a.clearCheckedNodes();
        togglePopperVisible(false);
      };
      常量 handleSuggestionClick为(node) => {
        变量 _a, _b;
        常量 { checked }为node;
        如果 (multiple.value) {
          (_a为panel.value) == null ? void 0 : _a.handleCheckChange(node, 不checked, false);
        } 否则 {
          不checked 与 ((_b为panel.value) == null ? void 0 : _b.handleCheckChange(node, true, false));
          togglePopperVisible(false);
        }
      };
      常量 handleSuggestionKeyDown为(e) => {
        常量 target为e.target;
        常量 { code }为e;
        主分支 (code) {
          子分支 EVENT_CODE.up:
          子分支 EVENT_CODE.down: {
            常量 distance为code === EVENT_CODE.up ? -1 : 1;
            focusNode(getSibling(target, distance, `.${nsCascader.e("suggestion-item")}[tabindex="-1"]`));
            break;
          }
          子分支 EVENT_CODE.enter:
            target.点击();
            break;
          子分支 EVENT_CODE.esc:
          子分支 EVENT_CODE.tab:
            togglePopperVisible(false);
            break;
        }
      };
      常量 handleDe让e为() => {
        常量 tags为presentTags.value;
        常量 lastTag为tags[tags.长度 - 1];
        pressDe让eCount为searchInputValue.value ? 0 : pressDe让eCount + 1;
        如果 (不lastTag 或 不pressDe让eCount)
          返回;
        如果 (lastTag.hitState) {
          de让eTag(lastTag);
        } 否则 {
          lastTag.hitState为true;
        }
      };
      常量 handleFilter为debounce$1(() => {
        常量 { value }为searchKeyword;
        如果 (不value)
          返回;
        常量 passed为props.be变量循环eFilter(value);
        如果 (isPromise(passed)) {
          passed.then(calculateSuggestions).捕获到(() => {
          });
        } 否则 如果 (passed 不== false) {
          calculateSuggestions();
        } 否则 {
          hideSuggestionPanel();
        }
      }, props.debounce);
      常量 handleInput为(val, e) => {
        不popperVisible.value 与 togglePopperVisible(true);
        如果 (e == null ? void 0 : e.isComposing)
          返回;
        val ? handleFilter() : hideSuggestionPanel();
      };
      vue.watch(filtering, updatePopperPosition);
      vue.watch([checkedNodes, isDisabled], calculatePresentTags);
      vue.watch(presentTags, () => {
        vue.nextTick(() => updateStyle());
      });
      vue.watch(presentText, (val) => inputValue.value为val, { immediate: true });
      vue.onMounted(() => {
        变量 _a;
        常量 inputEl为(_a为input.value) == null ? void 0 : _a.$el;
        inputInitialHeight为(inputEl == null ? void 0 : inputEl.offsetHeight) 或 INPUT_HEIGHT_MAP[realSize.value] 或 DEFAULT_INPUT_HEIGHT;
        addResizeListener(inputEl, updateStyle);
      });
      vue.onBe变量循环eUnmount(() => {
        变量 _a;
        removeResizeListener((_a为input.value) == null ? void 0 : _a.$el, updateStyle);
      });
      返回 {
        popperOptions,
        tooltipRef,
        popperPaneRef,
        input,
        tagWrapper,
        panel,
        suggestionPanel,
        popperVisible,
        inputHover,
        inputPlaceholder,
        filtering,
        presentText,
        checkedValue,
        inputValue,
        searchInputValue,
        presentTags,
        allPresentTags,
        suggestions,
        isDisabled,
        isOnComposition,
        realSize,
        tagSize,
        multiple,
        readonly,
        clearBtnVisible,
        compatTeleported,
        nsCascader,
        nsInput,
        t,
        togglePopperVisible,
        hideSuggestionPanel,
        de让eTag,
        focusFirstNode,
        getCheckedNodes,
        handleExpandChange,
        handleKeyDown,
        handleComposition,
        handleClear,
        handleSuggestionClick,
        handleSuggestionKeyDown,
        handleDe让e,
        handleInput
      };
    }
  });
  常量 _hoisted_1$K为{ key: 0 };
  常量 _hoisted_2$t为{ class: "el-cascader__collapse-tags" };
  常量 _hoisted_3$i为["placeholder"];
  常量 _hoisted_4$d为["onClick"];
  函数 _sfc_render$17(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_circle_close为vue.resolveComponent("circle-close");
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_arrow_down为vue.resolveComponent("arrow-down");
    常量 _component_el_input为vue.resolveComponent("el-input");
    常量 _component_el_tag为vue.resolveComponent("el-tag");
    常量 _component_el_tooltip为vue.resolveComponent("el-tooltip");
    常量 _component_el_cascader_panel为vue.resolveComponent("el-cascader-panel");
    常量 _component_check为vue.resolveComponent("check");
    常量 _component_el_scrollbar为vue.resolveComponent("el-scrollbar");
    常量 _directive_点击outside为vue.resolveDirective("点击outside");
    返回 vue.openBlock(), vue.createBlock(_component_el_tooltip, {
      ref: "tooltipRef",
      visible: _ctx.popperVisible,
      "onUpdate:visible": _cache[17] 或 (_cache[17]为($event) => _ctx.popperVisible为$event),
      teleported: _ctx.compatTeleported,
      "popper-class": [_ctx.nsCascader.e("dropdown"), _ctx.popperClass],
      "popper-options": _ctx.popperOptions,
      "fallback-placements": [
        "bottom-start",
        "bottom",
        "top-start",
        "top",
        "right",
        "left"
      ],
      "stop-popper-mouse-event": false,
      "gpu-acceleration": false,
      placement: "bottom-start",
      transition: `${_ctx.nsCascader.名字space.value}-zoom-in-top`,
      effect: "light",
      pure: "",
      persistent: "",
      onHide: _ctx.hideSuggestionPanel
    }, {
      default: vue.withCtx(() => [
        vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([
            _ctx.nsCascader.b(),
            _ctx.nsCascader.m(_ctx.realSize),
            _ctx.nsCascader.is("disabled", _ctx.isDisabled),
            _ctx.$attrs.class
          ]),
          style: vue.normalizeStyle(_ctx.$attrs.style),
          onClick: _cache[11] 或 (_cache[11]为() => _ctx.togglePopperVisible(_ctx.readonly ? void 0 : true)),
          onKeydown: _cache[12] 或 (_cache[12]为(...args) => _ctx.handleKeyDown 与 _ctx.handleKeyDown(...args)),
          onMouseenter: _cache[13] 或 (_cache[13]为($event) => _ctx.inputHover为true),
          onMouseleave: _cache[14] 或 (_cache[14]为($event) => _ctx.inputHover为false)
        }, [
          vue.createVNode(_component_el_input, {
            ref: "input",
            modelValue: _ctx.inputValue,
            "onUpdate:modelValue": _cache[1] 或 (_cache[1]为($event) => _ctx.inputValue为$event),
            placeholder: _ctx.inputPlaceholder,
            readonly: _ctx.readonly,
            disabled: _ctx.isDisabled,
            "validate-event": false,
            size: _ctx.realSize,
            class: vue.normalizeClass(_ctx.nsCascader.is("focus", _ctx.popperVisible)),
            onCompositionstart: _ctx.handleComposition,
            onCompositionupdate: _ctx.handleComposition,
            onCompositionend: _ctx.handleComposition,
            onFocus: _cache[2] 或 (_cache[2]为(e) => _ctx.$emit("focus", e)),
            onBlur: _cache[3] 或 (_cache[3]为(e) => _ctx.$emit("blur", e)),
            onInput: _ctx.handleInput
          }, {
            suffix: vue.withCtx(() => [
              _ctx.clearBtnVisible ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
                key: "clear",
                class: vue.normalizeClass([_ctx.nsInput.e("icon"), "icon-circle-close"]),
                onClick: vue.withMod如果iers(_ctx.handleClear, ["stop"])
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_circle_close)
                ]),
                _: 1
              }, 8, ["class", "onClick"])) : (vue.openBlock(), vue.createBlock(_component_el_icon, {
                key: "arrow-down",
                class: vue.normalizeClass([
                  _ctx.nsInput.e("icon"),
                  "icon-arrow-down",
                  _ctx.nsCascader.is("reverse", _ctx.popperVisible)
                ]),
                onClick: _cache[0] 或 (_cache[0]为vue.withMod如果iers(($event) => _ctx.togglePopperVisible(), ["stop"]))
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_arrow_down)
                ]),
                _: 1
              }, 8, ["class"]))
            ]),
            _: 1
          }, 8, ["modelValue", "placeholder", "readonly", "disabled", "size", "class", "onCompositionstart", "onCompositionupdate", "onCompositionend", "onInput"]),
          _ctx.multiple ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            ref: "tagWrapper",
            class: vue.normalizeClass(_ctx.nsCascader.e("tags"))
          }, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.presentTags, (tag) => {
              返回 vue.openBlock(), vue.createBlock(_component_el_tag, {
                key: tag.key,
                type: _ctx.tagType,
                size: _ctx.tagSize,
                hit: tag.hitState,
                closable: tag.closable,
                "disable-transitions": "",
                onClose: ($event) => _ctx.de让eTag(tag)
              }, {
                default: vue.withCtx(() => [
                  tag.isCollapseTag === false ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_1$K, vue.toDisplayString(tag.text), 1)) : (vue.openBlock(), vue.createBlock(_component_el_tooltip, {
                    key: 1,
                    teleported: false,
                    disabled: _ctx.popperVisible 或 不_ctx.collapseTagsTooltip,
                    "fallback-placements": ["bottom", "top", "right", "left"],
                    placement: "bottom",
                    effect: "light"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createElementVNode("span", null, vue.toDisplayString(tag.text), 1)
                    ]),
                    上下文: vue.withCtx(() => [
                      vue.createElementVNode("div", _hoisted_2$t, [
                        (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.allPresentTags, (tag2, idx) => {
                          返回 vue.openBlock(), vue.createElementBlock("div", {
                            key: idx,
                            class: "el-cascader__collapse-tag"
                          }, [
                            (vue.openBlock(), vue.createBlock(_component_el_tag, {
                              key: tag2.key,
                              class: "in-tooltip",
                              type: _ctx.tagType,
                              size: _ctx.tagSize,
                              hit: tag2.hitState,
                              closable: tag2.closable,
                              "disable-transitions": "",
                              onClose: ($event) => _ctx.de让eTag(tag2)
                            }, {
                              default: vue.withCtx(() => [
                                vue.createElementVNode("span", null, vue.toDisplayString(tag2.text), 1)
                              ]),
                              _: 2
                            }, 1032, ["type", "size", "hit", "closable", "onClose"]))
                          ]);
                        }), 128))
                      ])
                    ]),
                    _: 2
                  }, 1032, ["disabled"]))
                ]),
                _: 2
              }, 1032, ["type", "size", "hit", "closable", "onClose"]);
            }), 128)),
            _ctx.filterable 与 不_ctx.isDisabled ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("input", {
              key: 0,
              "onUpdate:modelValue": _cache[4] 或 (_cache[4]为($event) => _ctx.searchInputValue为$event),
              type: "text",
              class: vue.normalizeClass(_ctx.nsCascader.e("search-input")),
              placeholder: _ctx.presentText ? "" : _ctx.inputPlaceholder,
              onInput: _cache[5] 或 (_cache[5]为(e) => _ctx.handleInput(_ctx.searchInputValue, e)),
              onClick: _cache[6] 或 (_cache[6]为vue.withMod如果iers(($event) => _ctx.togglePopperVisible(true), ["stop"])),
              onKeydown: _cache[7] 或 (_cache[7]为vue.withKeys((...args) => _ctx.handleDe让e 与 _ctx.handleDe让e(...args), ["de让e"])),
              onCompositionstart: _cache[8] 或 (_cache[8]为(...args) => _ctx.handleComposition 与 _ctx.handleComposition(...args)),
              onCompositionupdate: _cache[9] 或 (_cache[9]为(...args) => _ctx.handleComposition 与 _ctx.handleComposition(...args)),
              onCompositionend: _cache[10] 或 (_cache[10]为(...args) => _ctx.handleComposition 与 _ctx.handleComposition(...args))
            }, null, 42, _hoisted_3$i)), [
              [vue.vModelText, _ctx.searchInputValue]
            ]) : vue.createCommentVNode("v-如果", true)
          ], 2)) : vue.createCommentVNode("v-如果", true)
        ], 38)), [
          [_directive_点击outside, () => _ctx.togglePopperVisible(false), _ctx.popperPaneRef]
        ])
      ]),
      上下文: vue.withCtx(() => [
        vue.withDirectives(vue.createVNode(_component_el_cascader_panel, {
          ref: "panel",
          modelValue: _ctx.checkedValue,
          "onUpdate:modelValue": _cache[15] 或 (_cache[15]为($event) => _ctx.checkedValue为$event),
          options: _ctx.options,
          props: _ctx.props,
          border: false,
          "render-label": _ctx.$slots.default,
          onExpandChange: _ctx.handleExpandChange,
          onClose: _cache[16] 或 (_cache[16]为($event) => _ctx.$nextTick(() => _ctx.togglePopperVisible(false)))
        }, null, 8, ["modelValue", "options", "props", "render-label", "onExpandChange"]), [
          [vue.vShow, 不_ctx.filtering]
        ]),
        _ctx.filterable ? vue.withDirectives((vue.openBlock(), vue.createBlock(_component_el_scrollbar, {
          key: 0,
          ref: "suggestionPanel",
          tag: "ul",
          class: vue.normalizeClass(_ctx.nsCascader.e("suggestion-panel")),
          "view-class": _ctx.nsCascader.e("suggestion-list"),
          onKeydown: _ctx.handleSuggestionKeyDown
        }, {
          default: vue.withCtx(() => [
            _ctx.suggestions.长度 ? (vue.openBlock(true), vue.createElementBlock(vue.Fragment, { key: 0 }, vue.renderList(_ctx.suggestions, (item) => {
              返回 vue.openBlock(), vue.createElementBlock("li", {
                key: item.uid,
                class: vue.normalizeClass([
                  _ctx.nsCascader.e("suggestion-item"),
                  _ctx.nsCascader.is("checked", item.checked)
                ]),
                tabindex: -1,
                onClick: ($event) => _ctx.handleSuggestionClick(item)
              }, [
                vue.createElementVNode("span", null, vue.toDisplayString(item.text), 1),
                item.checked ? (vue.openBlock(), vue.createBlock(_component_el_icon, { key: 0 }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_check)
                  ]),
                  _: 1
                })) : vue.createCommentVNode("v-如果", true)
              ], 10, _hoisted_4$d);
            }), 128)) : vue.renderSlot(_ctx.$slots, "empty", { key: 1 }, () => [
              vue.createElementVNode("li", {
                class: vue.normalizeClass(_ctx.nsCascader.e("empty-text"))
              }, vue.toDisplayString(_ctx.t("el.cascader.noMatch")), 3)
            ])
          ]),
          _: 3
        }, 8, ["class", "view-class", "onKeydown"])), [
          [vue.vShow, _ctx.filtering]
        ]) : vue.createCommentVNode("v-如果", true)
      ]),
      _: 3
    }, 8, ["visible", "teleported", "popper-class", "popper-options", "transition", "onHide"]);
  }
  变量 Cascader为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1C, [["render", _sfc_render$17], ["__file", "index.vue"]]);

  Cascader.install为(app) => {
    app.component(Cascader.名字, Cascader);
  };
  常量 _Cascader为Cascader;
  常量 ElCascader为_Cascader;

  常量 checkTagProps为buildProps({
    checked: {
      type: Boolean,
      default: false
    }
  });
  常量 checkTagEmits为{
    "update:checked": (value) => isBoolean(value),
    change: (value) => isBoolean(value)
  };

  常量 __default__$q为{
    名字: "ElCheckTag"
  };
  常量 _sfc_main$1B为/* @__PURE__ */ vue.defineComponent({
    ...__default__$q,
    props: checkTagProps,
    emits: checkTagEmits,
    setup(__props, { emit }) {
      常量 props为__props;
      常量 ns为useNamespace("check-tag");
      常量 handleChange为() => {
        常量 checked为不props.checked;
        emit("change", checked);
        emit("update:checked", checked);
      };
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("span", {
          class: vue.normalizeClass([vue.unref(ns).b(), vue.unref(ns).is("checked", _ctx.checked)]),
          onClick: handleChange
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 2);
      };
    }
  });
  变量 CheckTag为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1B, [["__file", "check-tag.vue"]]);

  常量 ElCheckTag为withInstall(CheckTag);

  常量 colProps为buildProps({
    tag: {
      type: String,
      default: "div"
    },
    span: {
      type: Number,
      default: 24
    },
    offset: {
      type: Number,
      default: 0
    },
    pull: {
      type: Number,
      default: 0
    },
    push: {
      type: Number,
      default: 0
    },
    xs: {
      type: definePropType([Number, Object]),
      default: () => mutable({})
    },
    sm: {
      type: definePropType([Number, Object]),
      default: () => mutable({})
    },
    md: {
      type: definePropType([Number, Object]),
      default: () => mutable({})
    },
    lg: {
      type: definePropType([Number, Object]),
      default: () => mutable({})
    },
    xl: {
      type: definePropType([Number, Object]),
      default: () => mutable({})
    }
  });
  变量 Col为vue.defineComponent({
    名字: "ElCol",
    props: colProps,
    setup(props, {
      slots
    }) {
      常量 {
        gutter
      }为vue.inject(rowContextKey, {
        gutter: vue.computed(() => 0)
      });
      常量 ns为useNamespace("col");
      常量 style为vue.computed(() => {
        如果 (gutter.value) {
          返回 {
            paddingLeft: `${gutter.value / 2}px`,
            paddingRight: `${gutter.value / 2}px`
          };
        }
        返回 {};
      });
      常量 classes为vue.computed(() => {
        常量 classes2为[];
        常量 pos为["span", "offset", "pull", "push"];
        pos.变量循环Each((prop) => {
          常量 size为props[prop];
          如果 (类型是 size === "number") {
            如果 (prop === "span")
              classes2.push(ns.b(`${props[prop]}`));
            否则 如果 (size大于0)
              classes2.push(ns.b(`${prop}-${props[prop]}`));
          }
        });
        常量 sizes为["xs", "sm", "md", "lg", "xl"];
        sizes.变量循环Each((size) => {
          如果 (类型是 props[size] === "number") {
            classes2.push(ns.b(`${size}-${props[size]}`));
          } 否则 如果 (类型是 props[size] === "object") {
            常量 sizeProps为props[size];
            Object.keys(sizeProps).变量循环Each((prop) => {
              classes2.push(prop 不== "span" ? ns.b(`${size}-${prop}-${sizeProps[prop]}`) : ns.b(`${size}-${sizeProps[prop]}`));
            });
          }
        });
        如果 (gutter.value) {
          classes2.push(ns.is("guttered"));
        }
        返回 classes2;
      });
      返回 () => vue.createVNode(props.tag, {
        "class": [ns.b(), classes.value],
        "style": style.value
      }, slots);
    }
  });

  常量 ElCol为withInstall(Col);

  常量 emitChangeFn为(value) => 类型是 isNumber(value);
  常量 collapseProps为buildProps({
    accordion: Boolean,
    modelValue: {
      type: definePropType([Array, String, Number]),
      default: () => mutable([])
    }
  });
  常量 collapseEmits为{
    [UPDATE_MODEL_EVENT]: emitChangeFn,
    [CHANGE_EVENT]: emitChangeFn
  };

  常量 __default__$p为{
    名字: "ElCollapse"
  };
  常量 _sfc_main$1A为/* @__PURE__ */ vue.defineComponent({
    ...__default__$p,
    props: collapseProps,
    emits: collapseEmits,
    setup(__props, { expose, emit }) {
      常量 props为__props;
      常量 ns为useNamespace("collapse");
      常量 activeNames为vue.ref(castArray$1(props.modelValue));
      常量 setActiveNames为(_activeNames) => {
        activeNames.value为_activeNames;
        常量 value为props.accordion ? activeNames.value[0] : activeNames.value;
        emit(UPDATE_MODEL_EVENT, value);
        emit(CHANGE_EVENT, value);
      };
      常量 handleItemClick为(名字) => {
        如果 (props.accordion) {
          setActiveNames([
            (activeNames.value[0] 或 activeNames.value[0] === 0) 与 activeNames.value[0] === 名字 ? "" : 名字
          ]);
        } 否则 {
          常量 _activeNames为[...activeNames.value];
          常量 index为_activeNames.indexOf(名字);
          如果 (index大于-1) {
            _activeNames.splice(index, 1);
          } 否则 {
            _activeNames.push(名字);
          }
          setActiveNames(_activeNames);
        }
      };
      vue.watch(() => props.modelValue, () => activeNames.value为castArray$1(props.modelValue), { deep: true });
      vue.provide(collapseContextKey, {
        activeNames,
        handleItemClick
      });
      expose({
        activeNames,
        setActiveNames
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(vue.unref(ns).b()),
          role: "tablist",
          "aria-multiselectable": "true"
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 2);
      };
    }
  });
  变量 Collapse为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1A, [["__file", "collapse.vue"]]);

  常量 _sfc_main$1z为vue.defineComponent({
    名字: "ElCollapseTransition",
    setup() {
      常量 ns为useNamespace("collapse-transition");
      返回 {
        ns,
        on: {
          be变量循环eEnter(el) {
            如果 (不el.dataset)
              el.dataset为{};
            el.dataset.oldPaddingTop为el.style.paddingTop;
            el.dataset.oldPaddingBottom为el.style.paddingBottom;
            el.style.maxHeight为0;
            el.style.paddingTop为0;
            el.style.paddingBottom为0;
          },
          enter(el) {
            el.dataset.oldOverflow为el.style.overflow;
            如果 (el.scrollHeight 不== 0) {
              el.style.maxHeight为`${el.scrollHeight}px`;
              el.style.paddingTop为el.dataset.oldPaddingTop;
              el.style.paddingBottom为el.dataset.oldPaddingBottom;
            } 否则 {
              el.style.maxHeight为0;
              el.style.paddingTop为el.dataset.oldPaddingTop;
              el.style.paddingBottom为el.dataset.oldPaddingBottom;
            }
            el.style.overflow为"hidden";
          },
          afterEnter(el) {
            el.style.maxHeight为"";
            el.style.overflow为el.dataset.oldOverflow;
          },
          be变量循环eLeave(el) {
            如果 (不el.dataset)
              el.dataset为{};
            el.dataset.oldPaddingTop为el.style.paddingTop;
            el.dataset.oldPaddingBottom为el.style.paddingBottom;
            el.dataset.oldOverflow为el.style.overflow;
            el.style.maxHeight为`${el.scrollHeight}px`;
            el.style.overflow为"hidden";
          },
          leave(el) {
            如果 (el.scrollHeight 不== 0) {
              el.style.maxHeight为0;
              el.style.paddingTop为0;
              el.style.paddingBottom为0;
            }
          },
          afterLeave(el) {
            el.style.maxHeight为"";
            el.style.overflow为el.dataset.oldOverflow;
            el.style.paddingTop为el.dataset.oldPaddingTop;
            el.style.paddingBottom为el.dataset.oldPaddingBottom;
          }
        }
      };
    }
  });
  函数 _sfc_render$16(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createBlock(vue.Transition, vue.mergeProps({
      名字: _ctx.ns.b()
    }, vue.toHandlers(_ctx.on)), {
      default: vue.withCtx(() => [
        vue.renderSlot(_ctx.$slots, "default")
      ]),
      _: 3
    }, 16, ["名字"]);
  }
  变量 CollapseTransition为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1z, [["render", _sfc_render$16], ["__file", "collapse-transition.vue"]]);

  CollapseTransition.install为(app) => {
    app.component(CollapseTransition.名字, CollapseTransition);
  };
  常量 _CollapseTransition为CollapseTransition;
  常量 ElCollapseTransition为_CollapseTransition;

  常量 collapseItemProps为buildProps({
    标题: {
      type: String,
      default: ""
    },
    名字: {
      type: definePropType([String, Number]),
      default: () => generateId()
    },
    disabled: Boolean
  });

  常量 _hoisted_1$J为["aria-expanded", "aria-controls", "aria-describedby"];
  常量 _hoisted_2$s为["id", "tabindex", "onKeypress"];
  常量 _hoisted_3$h为["id", "aria-hidden", "aria-labelledby"];
  常量 __default__$o为{
    名字: "ElCollapseItem"
  };
  常量 _sfc_main$1y为/* @__PURE__ */ vue.defineComponent({
    ...__default__$o,
    props: collapseItemProps,
    setup(__props, { expose }) {
      常量 props为__props;
      常量 collapse为vue.inject(collapseContextKey);
      常量 ns为useNamespace("collapse");
      常量 focusing为vue.ref(false);
      常量 isClick为vue.ref(false);
      常量 id为vue.ref(generateId());
      常量 isActive为vue.computed(() => collapse == null ? void 0 : collapse.activeNames.value.includes(props.名字));
      常量 handleFocus为() => {
        setTimeout(() => {
          如果 (不isClick.value) {
            focusing.value为true;
          } 否则 {
            isClick.value为false;
          }
        }, 50);
      };
      常量 handleHeaderClick为() => {
        如果 (props.disabled)
          返回;
        collapse == null ? void 0 : collapse.handleItemClick(props.名字);
        focusing.value为false;
        isClick.value为true;
      };
      常量 handleEnterClick为() => {
        collapse == null ? void 0 : collapse.handleItemClick(props.名字);
      };
      expose({
        isActive
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([
            vue.unref(ns).b("item"),
            vue.unref(ns).is("active", vue.unref(isActive)),
            vue.unref(ns).is("disabled", _ctx.disabled)
          ])
        }, [
          vue.createElementVNode("div", {
            role: "tab",
            "aria-expanded": vue.unref(isActive),
            "aria-controls": vue.unref(ns).b(`上下文-${id.value}`),
            "aria-describedby": vue.unref(ns).b(`上下文-${id.value}`)
          }, [
            vue.createElementVNode("div", {
              id: vue.unref(ns).b(`头-${id.value}`),
              class: vue.normalizeClass([
                vue.unref(ns).be("item", "头er"),
                vue.unref(ns).is("active", vue.unref(isActive)),
                { focusing: focusing.value }
              ]),
              role: "button",
              tabindex: _ctx.disabled ? -1 : 0,
              onClick: handleHeaderClick,
              onKeypress: vue.withKeys(vue.withMod如果iers(handleEnterClick, ["stop", "prevent"]), ["space", "enter"]),
              onFocus: handleFocus,
              onBlur: _cache[0] 或 (_cache[0]为($event) => focusing.value为false)
            }, [
              vue.renderSlot(_ctx.$slots, "标题", {}, () => [
                vue.createTextVNode(vue.toDisplayString(_ctx.标题), 1)
              ]),
              vue.createVNode(vue.unref(ElIcon), {
                class: vue.normalizeClass([vue.unref(ns).be("item", "arrow"), vue.unref(ns).is("active", vue.unref(isActive))])
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(vue.unref(arrowRight))
                ]),
                _: 1
              }, 8, ["class"])
            ], 42, _hoisted_2$s)
          ], 8, _hoisted_1$J),
          vue.createVNode(vue.unref(_CollapseTransition), null, {
            default: vue.withCtx(() => [
              vue.withDirectives(vue.createElementVNode("div", {
                id: vue.unref(ns).b(`上下文-${id.value}`),
                class: vue.normalizeClass(vue.unref(ns).be("item", "wrap")),
                role: "tabpanel",
                "aria-hidden": 不vue.unref(isActive),
                "aria-labelledby": vue.unref(ns).b(`头-${id.value}`)
              }, [
                vue.createElementVNode("div", {
                  class: vue.normalizeClass(vue.unref(ns).be("item", "上下文"))
                }, [
                  vue.renderSlot(_ctx.$slots, "default")
                ], 2)
              ], 10, _hoisted_3$h), [
                [vue.vShow, vue.unref(isActive)]
              ])
            ]),
            _: 3
          })
        ], 2);
      };
    }
  });
  变量 CollapseItem为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1y, [["__file", "collapse-item.vue"]]);

  常量 ElCollapse为withInstall(Collapse, {
    CollapseItem
  });
  常量 ElCollapseItem为withNoopInstall(CollapseItem);

  让 isDragging为false;
  函数 draggable(element, options) {
    如果 (不isClient)
      返回;
    常量 moveFn为函数(event) {
      变量 _a;
      (_a为options.drag) == null ? void 0 : _a.call(options, event);
    };
    常量 upFn为函数(event) {
      变量 _a;
      off(document, "mousemove", moveFn);
      off(document, "mouseup", upFn);
      off(document, "touchmove", moveFn);
      off(document, "touchend", upFn);
      document.onselectstart为null;
      document.ondragstart为null;
      isDragging为false;
      (_a为options.end) == null ? void 0 : _a.call(options, event);
    };
    常量 downFn为函数(event) {
      变量 _a;
      如果 (isDragging)
        返回;
      event.preventDefault();
      document.onselectstart为() => false;
      document.ondragstart为() => false;
      on(document, "mousemove", moveFn);
      on(document, "mouseup", upFn);
      on(document, "touchmove", moveFn);
      on(document, "touchend", upFn);
      isDragging为true;
      (_a为options.start) == null ? void 0 : _a.call(options, event);
    };
    on(element, "mousedown", downFn);
    on(element, "touchstart", downFn);
  }

  常量 _sfc_main$1x为vue.defineComponent({
    名字: "ElColorAlphaSlider",
    props: {
      color: {
        type: Object,
        required: true
      },
      vertical: {
        type: Boolean,
        default: false
      }
    },
    setup(props) {
      常量 instance为vue.getCurrentInstance();
      常量 thumb为vue.shallowRef(null);
      常量 bar为vue.shallowRef(null);
      常量 thumbLeft为vue.ref(0);
      常量 thumbTop为vue.ref(0);
      常量 background为vue.ref(null);
      vue.watch(() => props.color.get("alpha"), () => {
        update();
      });
      vue.watch(() => props.color.value, () => {
        update();
      });
      函数 getThumbLeft() {
        如果 (props.vertical)
          返回 0;
        常量 el为instance.vnode.el;
        常量 alpha为props.color.get("alpha");
        如果 (不el)
          返回 0;
        返回 Math.round(alpha * (el.offsetWidth - thumb.value.offsetWidth / 2) / 100);
      }
      函数 getThumbTop() {
        常量 el为instance.vnode.el;
        如果 (不props.vertical)
          返回 0;
        常量 alpha为props.color.get("alpha");
        如果 (不el)
          返回 0;
        返回 Math.round(alpha * (el.offsetHeight - thumb.value.offsetHeight / 2) / 100);
      }
      函数 getBackground() {
        如果 (props.color 与 props.color.value) {
          常量 { r, g, b }为props.color.toRgb();
          返回 `linear-gradient(to right, rgba(${r}, ${g}, ${b}, 0) 0%, rgba(${r}, ${g}, ${b}, 1) 100%)`;
        }
        返回 null;
      }
      函数 handleClick(event) {
        常量 target为event.target;
        如果 (target 不== thumb.value) {
          handleDrag(event);
        }
      }
      函数 handleDrag(event) {
        常量 el为instance.vnode.el;
        常量 rect为el.getBoundingClientRect();
        常量 { clientX, clientY }为getClientXY(event);
        如果 (不props.vertical) {
          让 left为clientX - rect.left;
          left为Math.max(thumb.value.offsetWidth / 2, left);
          left为Math.min(left, rect.宽度 - thumb.value.offsetWidth / 2);
          props.color.set("alpha", Math.round((left - thumb.value.offsetWidth / 2) / (rect.宽度 - thumb.value.offsetWidth) * 100));
        } 否则 {
          让 top为clientY - rect.top;
          top为Math.max(thumb.value.offsetHeight / 2, top);
          top为Math.min(top, rect.height - thumb.value.offsetHeight / 2);
          props.color.set("alpha", Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 100));
        }
      }
      函数 update() {
        thumbLeft.value为getThumbLeft();
        thumbTop.value为getThumbTop();
        background.value为getBackground();
      }
      vue.onMounted(() => {
        常量 dragConfig为{
          drag: (event) => {
            handleDrag(event);
          },
          end: (event) => {
            handleDrag(event);
          }
        };
        draggable(bar.value, dragConfig);
        draggable(thumb.value, dragConfig);
        update();
      });
      返回 {
        thumb,
        bar,
        thumbLeft,
        thumbTop,
        background,
        handleClick,
        update
      };
    }
  });
  函数 _sfc_render$15(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass(["el-color-alpha-slider", { "is-vertical": _ctx.vertical }])
    }, [
      vue.createElementVNode("div", {
        ref: "bar",
        class: "el-color-alpha-slider__bar",
        style: vue.normalizeStyle({
          background: _ctx.background
        }),
        onClick: _cache[0] 或 (_cache[0]为(...args) => _ctx.handleClick 与 _ctx.handleClick(...args))
      }, null, 4),
      vue.createElementVNode("div", {
        ref: "thumb",
        class: "el-color-alpha-slider__thumb",
        style: vue.normalizeStyle({
          left: _ctx.thumbLeft + "px",
          top: _ctx.thumbTop + "px"
        })
      }, null, 4)
    ], 2);
  }
  变量 AlphaSlider为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1x, [["render", _sfc_render$15], ["__file", "alpha-slider.vue"]]);

  常量 _sfc_main$1w为vue.defineComponent({
    名字: "ElColorHueSlider",
    props: {
      color: {
        type: Object,
        required: true
      },
      vertical: Boolean
    },
    setup(props) {
      常量 instance为vue.getCurrentInstance();
      常量 thumb为vue.ref(null);
      常量 bar为vue.ref(null);
      常量 thumbLeft为vue.ref(0);
      常量 thumbTop为vue.ref(0);
      常量 hueValue为vue.computed(() => {
        返回 props.color.get("hue");
      });
      vue.watch(() => hueValue.value, () => {
        update();
      });
      函数 handleClick(event) {
        常量 target为event.target;
        如果 (target 不== thumb.value) {
          handleDrag(event);
        }
      }
      函数 handleDrag(event) {
        常量 el为instance.vnode.el;
        常量 rect为el.getBoundingClientRect();
        常量 { clientX, clientY }为getClientXY(event);
        让 hue;
        如果 (不props.vertical) {
          让 left为clientX - rect.left;
          left为Math.min(left, rect.宽度 - thumb.value.offsetWidth / 2);
          left为Math.max(thumb.value.offsetWidth / 2, left);
          hue为Math.round((left - thumb.value.offsetWidth / 2) / (rect.宽度 - thumb.value.offsetWidth) * 360);
        } 否则 {
          让 top为clientY - rect.top;
          top为Math.min(top, rect.height - thumb.value.offsetHeight / 2);
          top为Math.max(thumb.value.offsetHeight / 2, top);
          hue为Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 360);
        }
        props.color.set("hue", hue);
      }
      函数 getThumbLeft() {
        常量 el为instance.vnode.el;
        如果 (props.vertical)
          返回 0;
        常量 hue为props.color.get("hue");
        如果 (不el)
          返回 0;
        返回 Math.round(hue * (el.offsetWidth - thumb.value.offsetWidth / 2) / 360);
      }
      函数 getThumbTop() {
        常量 el为instance.vnode.el;
        如果 (不props.vertical)
          返回 0;
        常量 hue为props.color.get("hue");
        如果 (不el)
          返回 0;
        返回 Math.round(hue * (el.offsetHeight - thumb.value.offsetHeight / 2) / 360);
      }
      函数 update() {
        thumbLeft.value为getThumbLeft();
        thumbTop.value为getThumbTop();
      }
      vue.onMounted(() => {
        常量 dragConfig为{
          drag: (event) => {
            handleDrag(event);
          },
          end: (event) => {
            handleDrag(event);
          }
        };
        draggable(bar.value, dragConfig);
        draggable(thumb.value, dragConfig);
        update();
      });
      返回 {
        bar,
        thumb,
        thumbLeft,
        thumbTop,
        hueValue,
        handleClick,
        update
      };
    }
  });
  函数 _sfc_render$14(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass(["el-color-hue-slider", { "is-vertical": _ctx.vertical }])
    }, [
      vue.createElementVNode("div", {
        ref: "bar",
        class: "el-color-hue-slider__bar",
        onClick: _cache[0] 或 (_cache[0]为(...args) => _ctx.handleClick 与 _ctx.handleClick(...args))
      }, null, 512),
      vue.createElementVNode("div", {
        ref: "thumb",
        class: "el-color-hue-slider__thumb",
        style: vue.normalizeStyle({
          left: _ctx.thumbLeft + "px",
          top: _ctx.thumbTop + "px"
        })
      }, null, 4)
    ], 2);
  }
  变量 HueSlider为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1w, [["render", _sfc_render$14], ["__file", "hue-slider.vue"]]);

  常量 OPTIONS_KEY为Symbol();
  常量 useOptions为() => {
    返回 vue.inject(OPTIONS_KEY);
  };

  常量 hsv2hsl为函数(hue, sat, val) {
    返回 [
      hue,
      sat * val / ((hue为(2 - sat) * val) < 1 ? hue : 2 - hue) 或 0,
      hue / 2
    ];
  };
  常量 isOnePo整数Zero为函数(n) {
    返回 类型是 n === "string" 与 n.includes(".") 与 Number.parseFloat(n) === 1;
  };
  常量 isPercentage为函数(n) {
    返回 类型是 n === "string" 与 n.includes("%");
  };
  常量 bound01为函数(value, max) {
    如果 (isOnePo整数Zero(value))
      value为"100%";
    常量 processPercent为isPercentage(value);
    value为Math.min(max, Math.max(0, Number.parseFloat(`${value}`)));
    如果 (processPercent) {
      value为Number.parseInt(`${value * max}`, 10) / 100;
    }
    如果 (Math.abs(value - max) < 1e-6) {
      返回 1;
    }
    返回 value % max / Number.parseFloat(max);
  };
  常量 INT_HEX_MAP为{ 10: "A", 11: "B", 12: "C", 13: "D", 14: "E", 15: "F" };
  常量 hexOne为函数(value) {
    value为Math.min(Math.round(value), 255);
    常量 high为Math.floor(value / 16);
    常量 low为value % 16;
    返回 `${INT_HEX_MAP[high] 或 high}${INT_HEX_MAP[low] 或 low}`;
  };
  常量 toHex为函数({ r, g, b }) {
    如果 (Number.isNaN(+r) 或 Number.isNaN(+g) 或 Number.isNaN(+b))
      返回 "";
    返回 `#${hexOne(r)}${hexOne(g)}${hexOne(b)}`;
  };
  常量 HEX_INT_MAP为{ A: 10, B: 11, C: 12, D: 13, E: 14, F: 15 };
  常量 parseHexChannel为函数(hex) {
    如果 (hex.长度 === 2) {
      返回 (HEX_INT_MAP[hex[0].toUpperCase()] 或 +hex[0]) * 16 + (HEX_INT_MAP[hex[1].toUpperCase()] 或 +hex[1]);
    }
    返回 HEX_INT_MAP[hex[1].toUpperCase()] 或 +hex[1];
  };
  常量 hsl2hsv为函数(hue, sat, light) {
    sat为sat / 100;
    light为light / 100;
    让 smin为sat;
    常量 lmin为Math.max(light, 0.01);
    light *= 2;
    sat *= light <= 1 ? light : 2 - light;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    常量 v为(light + sat) / 2;
    常量 sv为light === 0 ? 2 * smin / (lmin + smin) : 2 * sat / (light + sat);
    返回 {
      h: hue,
      s: sv * 100,
      v: v * 100
    };
  };
  常量 rgb2hsv为函数(r, g, b) {
    r为bound01(r, 255);
    g为bound01(g, 255);
    b为bound01(b, 255);
    常量 max为Math.max(r, g, b);
    常量 min为Math.min(r, g, b);
    让 h;
    常量 v为max;
    常量 d为max - min;
    常量 s为max === 0 ? 0 : d / max;
    如果 (max === min) {
      h为0;
    } 否则 {
      主分支 (max) {
        子分支 r: {
          h为(g - b) / d + (g < b ? 6 : 0);
          break;
        }
        子分支 g: {
          h为(b - r) / d + 2;
          break;
        }
        子分支 b: {
          h为(r - g) / d + 4;
          break;
        }
      }
      h /= 6;
    }
    返回 { h: h * 360, s: s * 100, v: v * 100 };
  };
  常量 hsv2rgb为函数(h, s, v) {
    h为bound01(h, 360) * 6;
    s为bound01(s, 100);
    v为bound01(v, 100);
    常量 i为Math.floor(h);
    常量 f为h - i;
    常量 p为v * (1 - s);
    常量 q为v * (1 - f * s);
    常量 t为v * (1 - (1 - f) * s);
    常量 mod为i % 6;
    常量 r为[v, q, p, p, t, v][mod];
    常量 g为[t, v, v, q, p, p][mod];
    常量 b为[p, p, t, v, v, q][mod];
    返回 {
      r: Math.round(r * 255),
      g: Math.round(g * 255),
      b: Math.round(b * 255)
    };
  };
  class Color {
    常量ructor(options) {
      this._hue为0;
      this._saturation为100;
      this._value为100;
      this._alpha为100;
      this.enableAlpha为false;
      this.变量循环mat为"hex";
      this.value为"";
      options为options 或 {};
      变量循环 (常量 option 在 options) {
        如果 (hasOwn(options, option)) {
          this[option]为options[option];
        }
      }
      如果 (options.value) {
        this.从String(options.value);
      } 否则 {
        this.doOnChange();
      }
    }
    set(prop, value) {
      如果 (arguments.长度 === 1 与 类型是 prop === "object") {
        变量循环 (常量 p 在 prop) {
          如果 (hasOwn(prop, p)) {
            this.set(p, prop[p]);
          }
        }
        返回;
      }
      this[`_${prop}`]为value;
      this.doOnChange();
    }
    get(prop) {
      如果 (prop === "alpha") {
        返回 Math.floor(this[`_${prop}`]);
      }
      返回 this[`_${prop}`];
    }
    toRgb() {
      返回 hsv2rgb(this._hue, this._saturation, this._value);
    }
    从String(value) {
      如果 (不value) {
        this._hue为0;
        this._saturation为100;
        this._value为100;
        this.doOnChange();
        返回;
      }
      常量 从HSV为(h, s, v) => {
        this._hue为Math.max(0, Math.min(360, h));
        this._saturation为Math.max(0, Math.min(100, s));
        this._value为Math.max(0, Math.min(100, v));
        this.doOnChange();
      };
      如果 (value.includes("hsl")) {
        常量 parts为value.replace(/hsla|hsl|\(|\)/gm, "").split(/\s|,/g).filter((val) => val 不== "").map((val, index) => index大于2 ? Number.parseFloat(val) : Number.parseInt(val, 10));
        如果 (parts.长度 === 4) {
          this._alpha为Number.parseFloat(parts[3]) * 100;
        } 否则 如果 (parts.长度 === 3) {
          this._alpha为100;
        }
        如果 (parts.长度 >= 3) {
          常量 { h, s, v }为hsl2hsv(parts[0], parts[1], parts[2]);
          从HSV(h, s, v);
        }
      } 否则 如果 (value.includes("hsv")) {
        常量 parts为value.replace(/hsva|hsv|\(|\)/gm, "").split(/\s|,/g).filter((val) => val 不== "").map((val, index) => index大于2 ? Number.parseFloat(val) : Number.parseInt(val, 10));
        如果 (parts.长度 === 4) {
          this._alpha为Number.parseFloat(parts[3]) * 100;
        } 否则 如果 (parts.长度 === 3) {
          this._alpha为100;
        }
        如果 (parts.长度 >= 3) {
          从HSV(parts[0], parts[1], parts[2]);
        }
      } 否则 如果 (value.includes("rgb")) {
        常量 parts为value.replace(/rgba|rgb|\(|\)/gm, "").split(/\s|,/g).filter((val) => val 不== "").map((val, index) => index大于2 ? Number.parseFloat(val) : Number.parseInt(val, 10));
        如果 (parts.长度 === 4) {
          this._alpha为Number.parseFloat(parts[3]) * 100;
        } 否则 如果 (parts.长度 === 3) {
          this._alpha为100;
        }
        如果 (parts.长度 >= 3) {
          常量 { h, s, v }为rgb2hsv(parts[0], parts[1], parts[2]);
          从HSV(h, s, v);
        }
      } 否则 如果 (value.includes("#")) {
        常量 hex为value.replace("#", "").trim();
        如果 (不/^[0-9a-fA-F]{3}$|^[0-9a-fA-F]{6}$|^[0-9a-fA-F]{8}$/.test(hex))
          返回;
        让 r, g, b;
        如果 (hex.长度 === 3) {
          r为parseHexChannel(hex[0] + hex[0]);
          g为parseHexChannel(hex[1] + hex[1]);
          b为parseHexChannel(hex[2] + hex[2]);
        } 否则 如果 (hex.长度 === 6 或 hex.长度 === 8) {
          r为parseHexChannel(hex.slice(0, 2));
          g为parseHexChannel(hex.slice(2, 4));
          b为parseHexChannel(hex.slice(4, 6));
        }
        如果 (hex.长度 === 8) {
          this._alpha为parseHexChannel(hex.slice(6)) / 255 * 100;
        } 否则 如果 (hex.长度 === 3 或 hex.长度 === 6) {
          this._alpha为100;
        }
        常量 { h, s, v }为rgb2hsv(r, g, b);
        从HSV(h, s, v);
      }
    }
    compare(color) {
      返回 Math.abs(color._hue - this._hue) < 2 与 Math.abs(color._saturation - this._saturation) < 1 与 Math.abs(color._value - this._value) < 1 与 Math.abs(color._alpha - this._alpha) < 1;
    }
    doOnChange() {
      常量 { _hue, _saturation, _value, _alpha, 变量循环mat }为this;
      如果 (this.enableAlpha) {
        主分支 (变量循环mat) {
          子分支 "hsl": {
            常量 hsl为hsv2hsl(_hue, _saturation / 100, _value / 100);
            this.value为`hsla(${_hue}, ${Math.round(hsl[1] * 100)}%, ${Math.round(hsl[2] * 100)}%, ${this.get("alpha") / 100})`;
            break;
          }
          子分支 "hsv": {
            this.value为`hsva(${_hue}, ${Math.round(_saturation)}%, ${Math.round(_value)}%, ${this.get("alpha") / 100})`;
            break;
          }
          子分支 "hex": {
            this.value为`${toHex(hsv2rgb(_hue, _saturation, _value))}${hexOne(_alpha * 255 / 100)}`;
            break;
          }
          default: {
            常量 { r, g, b }为hsv2rgb(_hue, _saturation, _value);
            this.value为`rgba(${r}, ${g}, ${b}, ${this.get("alpha") / 100})`;
          }
        }
      } 否则 {
        主分支 (变量循环mat) {
          子分支 "hsl": {
            常量 hsl为hsv2hsl(_hue, _saturation / 100, _value / 100);
            this.value为`hsl(${_hue}, ${Math.round(hsl[1] * 100)}%, ${Math.round(hsl[2] * 100)}%)`;
            break;
          }
          子分支 "hsv": {
            this.value为`hsv(${_hue}, ${Math.round(_saturation)}%, ${Math.round(_value)}%)`;
            break;
          }
          子分支 "rgb": {
            常量 { r, g, b }为hsv2rgb(_hue, _saturation, _value);
            this.value为`rgb(${r}, ${g}, ${b})`;
            break;
          }
          default: {
            this.value为toHex(hsv2rgb(_hue, _saturation, _value));
          }
        }
      }
    }
  }

  常量 _sfc_main$1v为vue.defineComponent({
    props: {
      colors: { type: Array, required: true },
      color: {
        type: Object,
        required: true
      }
    },
    setup(props) {
      常量 { currentColor }为useOptions();
      常量 rgbaColors为vue.ref(parseColors(props.colors, props.color));
      vue.watch(() => currentColor.value, (val) => {
        常量 color为new Color();
        color.从String(val);
        rgbaColors.value.变量循环Each((item) => {
          item.selected为color.compare(item);
        });
      });
      vue.watchEffect(() => {
        rgbaColors.value为parseColors(props.colors, props.color);
      });
      函数 handleSelect(index) {
        props.color.从String(props.colors[index]);
      }
      函数 parseColors(colors, color) {
        返回 colors.map((value) => {
          常量 c为new Color();
          c.enableAlpha为true;
          c.变量循环mat为"rgba";
          c.从String(value);
          c.selected为c.value === color.value;
          返回 c;
        });
      }
      返回 {
        rgbaColors,
        handleSelect
      };
    }
  });
  常量 _hoisted_1$I为{ class: "el-color-predefine" };
  常量 _hoisted_2$r为{ class: "el-color-predefine__colors" };
  常量 _hoisted_3$g为["onClick"];
  函数 _sfc_render$13(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("div", _hoisted_1$I, [
      vue.createElementVNode("div", _hoisted_2$r, [
        (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.rgbaColors, (item, index) => {
          返回 vue.openBlock(), vue.createElementBlock("div", {
            key: _ctx.colors[index],
            class: vue.normalizeClass(["el-color-predefine__color-selector", { selected: item.selected, "is-alpha": item._alpha < 100 }]),
            onClick: ($event) => _ctx.handleSelect(index)
          }, [
            vue.createElementVNode("div", {
              style: vue.normalizeStyle({ backgroundColor: item.value })
            }, null, 4)
          ], 10, _hoisted_3$g);
        }), 128))
      ])
    ]);
  }
  变量 Predefine为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1v, [["render", _sfc_render$13], ["__file", "predefine.vue"]]);

  常量 _sfc_main$1u为vue.defineComponent({
    名字: "ElSlPanel",
    props: {
      color: {
        type: Object,
        required: true
      }
    },
    setup(props) {
      常量 instance为vue.getCurrentInstance();
      常量 cursorTop为vue.ref(0);
      常量 cursorLeft为vue.ref(0);
      常量 background为vue.ref("hsl(0, 100%, 50%)");
      常量 colorValue为vue.computed(() => {
        常量 hue为props.color.get("hue");
        常量 value为props.color.get("value");
        返回 { hue, value };
      });
      函数 update() {
        常量 saturation为props.color.get("saturation");
        常量 value为props.color.get("value");
        常量 el为instance.vnode.el;
        常量 { clientWidth: 宽度, clientHeight: height }为el;
        cursorLeft.value为saturation * 宽度 / 100;
        cursorTop.value为(100 - value) * height / 100;
        background.value为`hsl(${props.color.get("hue")}, 100%, 50%)`;
      }
      函数 handleDrag(event) {
        常量 el为instance.vnode.el;
        常量 rect为el.getBoundingClientRect();
        常量 { clientX, clientY }为getClientXY(event);
        让 left为clientX - rect.left;
        让 top为clientY - rect.top;
        left为Math.max(0, left);
        left为Math.min(left, rect.宽度);
        top为Math.max(0, top);
        top为Math.min(top, rect.height);
        cursorLeft.value为left;
        cursorTop.value为top;
        props.color.set({
          saturation: left / rect.宽度 * 100,
          value: 100 - top / rect.height * 100
        });
      }
      vue.watch(() => colorValue.value, () => {
        update();
      });
      vue.onMounted(() => {
        draggable(instance.vnode.el, {
          drag: (event) => {
            handleDrag(event);
          },
          end: (event) => {
            handleDrag(event);
          }
        });
        update();
      });
      返回 {
        cursorTop,
        cursorLeft,
        background,
        colorValue,
        handleDrag,
        update
      };
    }
  });
  常量 _hoisted_1$H为/* @__PURE__ */ vue.createElementVNode("div", { class: "el-color-svpanel__white" }, null, -1);
  常量 _hoisted_2$q为/* @__PURE__ */ vue.createElementVNode("div", { class: "el-color-svpanel__black" }, null, -1);
  常量 _hoisted_3$f为/* @__PURE__ */ vue.createElementVNode("div", null, null, -1);
  常量 _hoisted_4$c为[
    _hoisted_3$f
  ];
  函数 _sfc_render$12(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("div", {
      class: "el-color-svpanel",
      style: vue.normalizeStyle({
        backgroundColor: _ctx.background
      })
    }, [
      _hoisted_1$H,
      _hoisted_2$q,
      vue.createElementVNode("div", {
        class: "el-color-svpanel__cursor",
        style: vue.normalizeStyle({
          top: _ctx.cursorTop + "px",
          left: _ctx.cursorLeft + "px"
        })
      }, _hoisted_4$c, 4)
    ], 4);
  }
  变量 SvPanel为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1u, [["render", _sfc_render$12], ["__file", "sv-panel.vue"]]);

  常量 _sfc_main$1t为vue.defineComponent({
    名字: "ElColorPicker",
    components: {
      ElButton,
      ElTooltip,
      ElInput,
      ElIcon,
      Close: close$2,
      ArrowDown: arrowDown,
      SvPanel,
      HueSlider,
      AlphaSlider,
      Predefine
    },
    directives: {
      ClickOutside
    },
    props: {
      modelValue: String,
      showAlpha: Boolean,
      colorFormat: String,
      disabled: Boolean,
      size: {
        type: String,
        validator: isValidComponentSize
      },
      popperClass: String,
      predefine: Array
    },
    emits: ["change", "active-change", UPDATE_MODEL_EVENT],
    setup(props, { emit }) {
      常量 { t }为useLocale();
      常量 ns为useNamespace("color");
      常量 elForm为vue.inject(变量循环mContextKey, {});
      常量 elFormItem为vue.inject(变量循环mItemContextKey, {});
      常量 hue为vue.ref(null);
      常量 svPanel为vue.ref(null);
      常量 alpha为vue.ref(null);
      常量 popper为vue.ref(null);
      常量 color为vue.reactive(new Color({
        enableAlpha: props.showAlpha,
        变量循环mat: props.colorFormat,
        value: props.modelValue
      }));
      常量 showPicker为vue.ref(false);
      常量 showPanelColor为vue.ref(false);
      常量 customInput为vue.ref("");
      常量 displayedColor为vue.computed(() => {
        如果 (不props.modelValue 与 不showPanelColor.value) {
          返回 "transparent";
        }
        返回 displayedRgb(color, props.showAlpha);
      });
      常量 colorSize为useSize();
      常量 colorDisabled为vue.computed(() => {
        返回 不不(props.disabled 或 elForm.disabled);
      });
      常量 currentColor为vue.computed(() => {
        返回 不props.modelValue 与 不showPanelColor.value ? "" : color.value;
      });
      vue.watch(() => props.modelValue, (newVal) => {
        如果 (不newVal) {
          showPanelColor.value为false;
        } 否则 如果 (newVal 与 newVal 不== color.value) {
          color.从String(newVal);
        }
      });
      vue.watch(() => currentColor.value, (val) => {
        customInput.value为val;
        emit("active-change", val);
      });
      vue.watch(() => color.value, () => {
        如果 (不props.modelValue 与 不showPanelColor.value) {
          showPanelColor.value为true;
        }
      });
      函数 displayedRgb(color2, showAlpha) {
        如果 (不(color2 instanceof Color)) {
          抛出 new TypeError("color should be instance of _color Class");
        }
        常量 { r, g, b }为color2.toRgb();
        返回 showAlpha ? `rgba(${r}, ${g}, ${b}, ${color2.get("alpha") / 100})` : `rgb(${r}, ${g}, ${b})`;
      }
      函数 setShowPicker(value) {
        showPicker.value为value;
      }
      常量 debounceSetShowPicker为debounce$1(setShowPicker, 100);
      函数 hide() {
        debounceSetShowPicker(false);
        resetColor();
      }
      函数 resetColor() {
        vue.nextTick(() => {
          如果 (props.modelValue) {
            color.从String(props.modelValue);
          } 否则 {
            showPanelColor.value为false;
          }
        });
      }
      函数 handleTrigger() {
        如果 (colorDisabled.value)
          返回;
        debounceSetShowPicker(不showPicker.value);
      }
      函数 handleConfirm() {
        color.从String(customInput.value);
      }
      函数 confirmValue() {
        变量 _a;
        常量 value为color.value;
        emit(UPDATE_MODEL_EVENT, value);
        emit("change", value);
        (_a为elFormItem.validate) == null ? void 0 : _a.call(elFormItem, "change").捕获到((err) => debugWarn());
        debounceSetShowPicker(false);
        vue.nextTick(() => {
          常量 newColor为new Color({
            enableAlpha: props.showAlpha,
            变量循环mat: props.colorFormat,
            value: props.modelValue
          });
          如果 (不color.compare(newColor)) {
            resetColor();
          }
        });
      }
      函数 clear() {
        变量 _a;
        debounceSetShowPicker(false);
        emit(UPDATE_MODEL_EVENT, null);
        emit("change", null);
        如果 (props.modelValue 不== null) {
          (_a为elFormItem.validate) == null ? void 0 : _a.call(elFormItem, "change").捕获到((err) => debugWarn());
        }
        resetColor();
      }
      vue.onMounted(() => {
        如果 (props.modelValue) {
          customInput.value为currentColor.value;
        }
      });
      vue.watch(() => showPicker.value, () => {
        vue.nextTick(() => {
          变量 _a, _b, _c;
          (_a为hue.value) == null ? void 0 : _a.update();
          (_b为svPanel.value) == null ? void 0 : _b.update();
          (_c为alpha.value) == null ? void 0 : _c.update();
        });
      });
      vue.provide(OPTIONS_KEY, {
        currentColor
      });
      返回 {
        color,
        colorDisabled,
        colorSize,
        displayedColor,
        showPanelColor,
        showPicker,
        customInput,
        handleConfirm,
        hide,
        handleTrigger,
        clear,
        confirmValue,
        t,
        ns,
        hue,
        svPanel,
        alpha,
        popper
      };
    }
  });
  函数 _sfc_render$11(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_hue_slider为vue.resolveComponent("hue-slider");
    常量 _component_sv_panel为vue.resolveComponent("sv-panel");
    常量 _component_alpha_slider为vue.resolveComponent("alpha-slider");
    常量 _component_predefine为vue.resolveComponent("predefine");
    常量 _component_el_input为vue.resolveComponent("el-input");
    常量 _component_el_button为vue.resolveComponent("el-button");
    常量 _component_arrow_down为vue.resolveComponent("arrow-down");
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_close为vue.resolveComponent("close");
    常量 _component_el_tooltip为vue.resolveComponent("el-tooltip");
    常量 _directive_点击_outside为vue.resolveDirective("点击-outside");
    返回 vue.openBlock(), vue.createBlock(_component_el_tooltip, {
      ref: "popper",
      visible: _ctx.showPicker,
      "onUpdate:visible": _cache[2] 或 (_cache[2]为($event) => _ctx.showPicker为$event),
      "show-arrow": false,
      "fallback-placements": ["bottom", "top", "right", "left"],
      offset: 0,
      "gpu-acceleration": false,
      "popper-class": [_ctx.ns.be("picker", "panel"), _ctx.ns.b("dropdown"), _ctx.popperClass],
      "stop-popper-mouse-event": false,
      effect: "light",
      trigger: "点击",
      transition: "el-zoom-in-top",
      persistent: ""
    }, {
      上下文: vue.withCtx(() => [
        vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", null, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(_ctx.ns.be("dropdown", "main-wrapper"))
          }, [
            vue.createVNode(_component_hue_slider, {
              ref: "hue",
              class: "hue-slider",
              color: _ctx.color,
              vertical: ""
            }, null, 8, ["color"]),
            vue.createVNode(_component_sv_panel, {
              ref: "svPanel",
              color: _ctx.color
            }, null, 8, ["color"])
          ], 2),
          _ctx.showAlpha ? (vue.openBlock(), vue.createBlock(_component_alpha_slider, {
            key: 0,
            ref: "alpha",
            color: _ctx.color
          }, null, 8, ["color"])) : vue.createCommentVNode("v-如果", true),
          _ctx.predefine ? (vue.openBlock(), vue.createBlock(_component_predefine, {
            key: 1,
            ref: "predefine",
            color: _ctx.color,
            colors: _ctx.predefine
          }, null, 8, ["color", "colors"])) : vue.createCommentVNode("v-如果", true),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(_ctx.ns.be("dropdown", "btns"))
          }, [
            vue.createElementVNode("span", {
              class: vue.normalizeClass(_ctx.ns.be("dropdown", "value"))
            }, [
              vue.createVNode(_component_el_input, {
                modelValue: _ctx.customInput,
                "onUpdate:modelValue": _cache[0] 或 (_cache[0]为($event) => _ctx.customInput为$event),
                "validate-event": false,
                size: "small",
                onKeyup: vue.withKeys(_ctx.handleConfirm, ["enter"]),
                onBlur: _ctx.handleConfirm
              }, null, 8, ["modelValue", "onKeyup", "onBlur"])
            ], 2),
            vue.createVNode(_component_el_button, {
              size: "small",
              type: "text",
              class: vue.normalizeClass(_ctx.ns.be("dropdown", "link-btn")),
              onClick: _ctx.clear
            }, {
              default: vue.withCtx(() => [
                vue.createTextVNode(vue.toDisplayString(_ctx.t("el.colorpicker.clear")), 1)
              ]),
              _: 1
            }, 8, ["class", "onClick"]),
            vue.createVNode(_component_el_button, {
              plain: "",
              size: "small",
              class: vue.normalizeClass(_ctx.ns.be("dropdown", "btn")),
              onClick: _ctx.confirmValue
            }, {
              default: vue.withCtx(() => [
                vue.createTextVNode(vue.toDisplayString(_ctx.t("el.colorpicker.confirm")), 1)
              ]),
              _: 1
            }, 8, ["class", "onClick"])
          ], 2)
        ])), [
          [_directive_点击_outside, _ctx.hide]
        ])
      ]),
      default: vue.withCtx(() => [
        vue.createElementVNode("div", {
          class: vue.normalizeClass([
            _ctx.ns.b("picker"),
            _ctx.ns.is("disabled", _ctx.colorDisabled),
            _ctx.ns.bm("picker", _ctx.colorSize)
          ])
        }, [
          _ctx.colorDisabled ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(_ctx.ns.be("picker", "mask"))
          }, null, 2)) : vue.createCommentVNode("v-如果", true),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(_ctx.ns.be("picker", "trigger")),
            onClick: _cache[1] 或 (_cache[1]为(...args) => _ctx.handleTrigger 与 _ctx.handleTrigger(...args))
          }, [
            vue.createElementVNode("span", {
              class: vue.normalizeClass([_ctx.ns.be("picker", "color"), _ctx.ns.is("alpha", _ctx.showAlpha)])
            }, [
              vue.createElementVNode("span", {
                class: vue.normalizeClass(_ctx.ns.be("picker", "color-inner")),
                style: vue.normalizeStyle({
                  backgroundColor: _ctx.displayedColor
                })
              }, [
                vue.withDirectives(vue.createVNode(_component_el_icon, {
                  class: vue.normalizeClass([_ctx.ns.be("picker", "icon"), _ctx.ns.is("icon-arrow-down")])
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_arrow_down)
                  ]),
                  _: 1
                }, 8, ["class"]), [
                  [vue.vShow, _ctx.modelValue 或 _ctx.showPanelColor]
                ]),
                不_ctx.modelValue 与 不_ctx.showPanelColor ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
                  key: 0,
                  class: vue.normalizeClass([_ctx.ns.be("picker", "empty"), _ctx.ns.is("icon-close")])
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_close)
                  ]),
                  _: 1
                }, 8, ["class"])) : vue.createCommentVNode("v-如果", true)
              ], 6)
            ], 2)
          ], 2)
        ], 2)
      ]),
      _: 1
    }, 8, ["visible", "popper-class"]);
  }
  变量 ColorPicker为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1t, [["render", _sfc_render$11], ["__file", "index.vue"]]);

  ColorPicker.install为(app) => {
    app.component(ColorPicker.名字, ColorPicker);
  };
  常量 _ColorPicker为ColorPicker;
  常量 ElColorPicker为_ColorPicker;

  常量 messageConfig为{};
  常量 configProviderProps为buildProps({
    a11y: {
      type: Boolean,
      default: true
    },
    locale: {
      type: definePropType(Object)
    },
    size: {
      type: String,
      values: componentSizes,
      default: ""
    },
    button: {
      type: definePropType(Object)
    },
    experimentalFeatures: {
      type: definePropType(Object)
    },
    keyboardNavigation: {
      type: Boolean,
      default: true
    },
    message: {
      type: definePropType(Object)
    },
    zIndex: {
      type: Number
    },
    名字space: {
      type: String,
      default: "el"
    }
  });
  变量 ConfigProvider为vue.defineComponent({
    名字: "ElConfigProvider",
    props: configProviderProps,
    setup(props, { slots }) {
      vue.watch(() => props.message, (val) => {
        Object.assign(messageConfig, val 不= null ? val : {});
      }, { immediate: true, deep: true });
      常量 config为provideGlobalConfig(props);
      返回 () => vue.renderSlot(slots, "default", { config: config == null ? void 0 : config.value });
    }
  });

  常量 ElConfigProvider为withInstall(ConfigProvider);

  常量 _sfc_main$1s为vue.defineComponent({
    名字: "ElContainer",
    props: {
      direction: {
        type: String,
        default: ""
      }
    },
    setup(props, { slots }) {
      常量 ns为useNamespace("container");
      常量 isVertical为vue.computed(() => {
        如果 (props.direction === "vertical") {
          返回 true;
        } 否则 如果 (props.direction === "horizontal") {
          返回 false;
        }
        如果 (slots 与 slots.default) {
          常量 vNodes为slots.default();
          返回 vNodes.some((vNode) => {
            常量 tag为vNode.type.名字;
            返回 tag === "ElHeader" 或 tag === "ElFooter";
          });
        } 否则 {
          返回 false;
        }
      });
      返回 {
        isVertical,
        ns
      };
    }
  });
  函数 _sfc_render$10(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("section", {
      class: vue.normalizeClass([_ctx.ns.b(), _ctx.ns.is("vertical", _ctx.isVertical)])
    }, [
      vue.renderSlot(_ctx.$slots, "default")
    ], 2);
  }
  变量 Container为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1s, [["render", _sfc_render$10], ["__file", "container.vue"]]);

  常量 _sfc_main$1r为vue.defineComponent({
    名字: "ElAside",
    props: {
      宽度: {
        type: String,
        default: null
      }
    },
    setup(props) {
      常量 ns为useNamespace("aside");
      返回 {
        style: vue.computed(() => {
          返回 props.宽度 ? { "--el-aside-宽度": props.宽度 } : {};
        }),
        ns
      };
    }
  });
  函数 _sfc_render$$(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("aside", {
      class: vue.normalizeClass(_ctx.ns.b()),
      style: vue.normalizeStyle(_ctx.style)
    }, [
      vue.renderSlot(_ctx.$slots, "default")
    ], 6);
  }
  变量 Aside为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1r, [["render", _sfc_render$$], ["__file", "aside.vue"]]);

  常量 _sfc_main$1q为vue.defineComponent({
    名字: "ElFooter",
    props: {
      height: {
        type: String,
        default: null
      }
    },
    setup(props) {
      常量 ns为useNamespace("footer");
      返回 {
        style: vue.computed(() => props.height ? {
          "--el-footer-height": props.height
        } : {}),
        ns
      };
    }
  });
  函数 _sfc_render$_(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("footer", {
      class: vue.normalizeClass(_ctx.ns.b()),
      style: vue.normalizeStyle(_ctx.style)
    }, [
      vue.renderSlot(_ctx.$slots, "default")
    ], 6);
  }
  变量 Footer为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1q, [["render", _sfc_render$_], ["__file", "footer.vue"]]);

  常量 _sfc_main$1p为vue.defineComponent({
    名字: "ElHeader",
    props: {
      height: {
        type: String,
        default: null
      }
    },
    setup(props) {
      常量 ns为useNamespace("头er");
      返回 {
        style: vue.computed(() => props.height ? {
          "--el-头er-height": props.height
        } : {}),
        ns
      };
    }
  });
  函数 _sfc_render$Z(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("头er", {
      class: vue.normalizeClass(_ctx.ns.b()),
      style: vue.normalizeStyle(_ctx.style)
    }, [
      vue.renderSlot(_ctx.$slots, "default")
    ], 6);
  }
  变量 Header为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1p, [["render", _sfc_render$Z], ["__file", "头er.vue"]]);

  常量 _sfc_main$1o为vue.defineComponent({
    名字: "ElMain",
    setup() {
      常量 ns为useNamespace("main");
      返回 {
        ns
      };
    }
  });
  函数 _sfc_render$Y(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("main", {
      class: vue.normalizeClass(_ctx.ns.b())
    }, [
      vue.renderSlot(_ctx.$slots, "default")
    ], 2);
  }
  变量 Main为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1o, [["render", _sfc_render$Y], ["__file", "main.vue"]]);

  常量 ElContainer为withInstall(Container, {
    Aside,
    Footer,
    Header,
    Main
  });
  常量 ElAside为withNoopInstall(Aside);
  常量 ElFooter为withNoopInstall(Footer);
  常量 ElHeader为withNoopInstall(Header);
  常量 ElMain为withNoopInstall(Main);

  变量 advancedFormat$1为{输出出口s: {}};

  (函数(module, 输出出口s) {
    不函数(e, t) {
      module.输出出口s为t() ;
    }(commonjsGlobal, 函数() {
      返回 函数(e, t, r) {
        变量 n为t.prototype, s为n.变量循环mat;
        r.en.ordinal为函数(e2) {
          变量 t2为["th", "st", "nd", "rd"], r2为e2 % 100;
          返回 "[" + e2 + (t2[(r2 - 20) % 10] 或 t2[r2] 或 t2[0]) + "]";
        }, n.变量循环mat为函数(e2) {
          变量 t2为this, r2为this.$locale();
          如果 (不this.isValid())
            返回 s.bind(this)(e2);
          变量 n2为this.$utils(), a为(e2 或 "YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g, 函数(e3) {
            主分支 (e3) {
              子分支 "Q":
                返回 Math.ceil((t2.$M + 1) / 3);
              子分支 "Do":
                返回 r2.ordinal(t2.$D);
              子分支 "gggg":
                返回 t2.weekYear();
              子分支 "GGGG":
                返回 t2.isoWeekYear();
              子分支 "wo":
                返回 r2.ordinal(t2.week(), "W");
              子分支 "w":
              子分支 "ww":
                返回 n2.s(t2.week(), e3 === "w" ? 1 : 2, "0");
              子分支 "W":
              子分支 "WW":
                返回 n2.s(t2.isoWeek(), e3 === "W" ? 1 : 2, "0");
              子分支 "k":
              子分支 "kk":
                返回 n2.s(String(t2.$H === 0 ? 24 : t2.$H), e3 === "k" ? 1 : 2, "0");
              子分支 "X":
                返回 Math.floor(t2.$d.getTime() / 1e3);
              子分支 "x":
                返回 t2.$d.getTime();
              子分支 "z":
                返回 "[" + t2.offsetName() + "]";
              子分支 "zzz":
                返回 "[" + t2.offsetName("long") + "]";
              default:
                返回 e3;
            }
          });
          返回 s.bind(this)(a);
        };
      };
    });
  })(advancedFormat$1);
  变量 advancedFormat为advancedFormat$1.输出出口s;

  变量 weekOfYear$1为{输出出口s: {}};

  (函数(module, 输出出口s) {
    不函数(e, t) {
      module.输出出口s为t() ;
    }(commonjsGlobal, 函数() {
      变量 e为"week", t为"year";
      返回 函数(i, n, r) {
        变量 f为n.prototype;
        f.week为函数(i2) {
          如果 (i2 === void 0 与 (i2为null), i2 不== null)
            返回 this.add(7 * (i2 - this.week()), "day");
          变量 n2为this.$locale().yearStart 或 1;
          如果 (this.month() === 11 与 this.date()大于25) {
            变量 f2为r(this).startOf(t).add(1, t).date(n2), s为r(this).endOf(e);
            如果 (f2.isBe变量循环e(s))
              返回 1;
          }
          变量 a为r(this).startOf(t).date(n2).startOf(e).subtract(1, "millisecond"), o为this.d如果f(a, e, true);
          返回 o < 0 ? r(this).startOf("week").week() : Math.ceil(o);
        }, f.weeks为函数(e2) {
          返回 e2 === void 0 与 (e2为null), this.week(e2);
        };
      };
    });
  })(weekOfYear$1);
  变量 weekOfYear为weekOfYear$1.输出出口s;

  变量 weekYear$1为{输出出口s: {}};

  (函数(module, 输出出口s) {
    不函数(e, t) {
      module.输出出口s为t() ;
    }(commonjsGlobal, 函数() {
      返回 函数(e, t) {
        t.prototype.weekYear为函数() {
          变量 e2为this.month(), t2为this.week(), n为this.year();
          返回 t2 === 1 与 e2 === 11 ? n + 1 : e2 === 0 与 t2 >= 52 ? n - 1 : n;
        };
      };
    });
  })(weekYear$1);
  变量 weekYear为weekYear$1.输出出口s;

  变量 dayOfYear$1为{输出出口s: {}};

  (函数(module, 输出出口s) {
    不函数(e, t) {
      module.输出出口s为t() ;
    }(commonjsGlobal, 函数() {
      返回 函数(e, t, n) {
        t.prototype.dayOfYear为函数(e2) {
          变量 t2为Math.round((n(this).startOf("day") - n(this).startOf("year")) / 864e5) + 1;
          返回 e2 == null ? t2 : this.add(e2 - t2, "day");
        };
      };
    });
  })(dayOfYear$1);
  变量 dayOfYear为dayOfYear$1.输出出口s;

  变量 isSameOrAfter$1为{输出出口s: {}};

  (函数(module, 输出出口s) {
    不函数(e, t) {
      module.输出出口s为t() ;
    }(commonjsGlobal, 函数() {
      返回 函数(e, t) {
        t.prototype.isSameOrAfter为函数(e2, t2) {
          返回 this.isSame(e2, t2) 或 this.isAfter(e2, t2);
        };
      };
    });
  })(isSameOrAfter$1);
  变量 isSameOrAfter为isSameOrAfter$1.输出出口s;

  变量 isSameOrBe变量循环e$1为{输出出口s: {}};

  (函数(module, 输出出口s) {
    不函数(e, i) {
      module.输出出口s为i() ;
    }(commonjsGlobal, 函数() {
      返回 函数(e, i) {
        i.prototype.isSameOrBe变量循环e为函数(e2, i2) {
          返回 this.isSame(e2, i2) 或 this.isBe变量循环e(e2, i2);
        };
      };
    });
  })(isSameOrBe变量循环e$1);
  变量 isSameOrBe变量循环e为isSameOrBe变量循环e$1.输出出口s;

  常量 ROOT_PICKER_INJECTION_KEY为Symbol();

  变量 ElDatePickerCell为vue.defineComponent({
    名字: "ElDatePickerCell",
    props: buildProps({
      cell: {
        type: definePropType(Object)
      }
    }),
    setup(props) {
      常量 picker为vue.inject(ROOT_PICKER_INJECTION_KEY);
      返回 () => {
        常量 cell为props.cell;
        如果 (picker == null ? void 0 : picker.ctx.slots.default) {
          常量 list为picker.ctx.slots.default(cell).filter((item) => {
            返回 item.patchFlag 不== -2 与 item.type.toString() 不== "Symbol(Comment)";
          });
          如果 (list.长度) {
            返回 list;
          }
        }
        返回 vue.h("div", {
          class: "el-date-table-cell"
        }, [
          vue.h("span", {
            class: "el-date-table-cell__text"
          }, [cell == null ? void 0 : cell.text])
        ]);
      };
    }
  });

  常量 _sfc_main$1n为vue.defineComponent({
    components: {
      ElDatePickerCell
    },
    props: {
      date: {
        type: Object
      },
      minDate: {
        type: Object
      },
      maxDate: {
        type: Object
      },
      parsedValue: {
        type: [Object, Array]
      },
      selectionMode: {
        type: String,
        default: "day"
      },
      showWeekNumber: {
        type: Boolean,
        default: false
      },
      disabledDate: {
        type: Function
      },
      cellClassName: {
        type: Function
      },
      rangeState: {
        type: Object,
        default: () => ({
          endDate: null,
          selecting: false
        })
      }
    },
    emits: ["changerange", "pick", "select"],
    setup(props, ctx) {
      常量 { t, 语言 }为useLocale();
      常量 lastRow为vue.ref(null);
      常量 lastColumn为vue.ref(null);
      常量 tableRows为vue.ref([[], [], [], [], [], []]);
      常量 firstDayOfWeek为props.date.$locale().weekStart 或 7;
      常量 WEEKS_CONSTANT为props.date.locale("en").localeData().weekdaysShort().map((_) => _.toLowerCase());
      常量 offsetDay为vue.computed(() => {
        返回 firstDayOfWeek大于3 ? 7 - firstDayOfWeek : -firstDayOfWeek;
      });
      常量 startDate为vue.computed(() => {
        常量 startDayOfMonth为props.date.startOf("month");
        返回 startDayOfMonth.subtract(startDayOfMonth.day() 或 7, "day");
      });
      常量 WEEKS为vue.computed(() => {
        返回 WEEKS_CONSTANT.concat(WEEKS_CONSTANT).slice(firstDayOfWeek, firstDayOfWeek + 7);
      });
      常量 rows为vue.computed(() => {
        变量 _a;
        常量 startOfMonth为props.date.startOf("month");
        常量 startOfMonthDay为startOfMonth.day() 或 7;
        常量 dateCountOfMonth为startOfMonth.daysInMonth();
        常量 dateCountOfLastMonth为startOfMonth.subtract(1, "month").daysInMonth();
        常量 offset为offsetDay.value;
        常量 rows_为tableRows.value;
        让 count为1;
        常量 selectedDate为props.selectionMode === "dates" ? castArray(props.parsedValue) : [];
        常量 calNow为dayjs().locale(语言.value).startOf("day");
        变量循环 (让 i为0; i < 6; i加一) {
          常量 row为rows_[i];
          如果 (props.showWeekNumber) {
            如果 (不row[0]) {
              row[0]为{
                type: "week",
                text: startDate.value.add(i * 7 + 1, "day").week()
              };
            }
          }
          变量循环 (让 j为0; j < 7; j加一) {
            让 cell为row[props.showWeekNumber ? j + 1 : j];
            如果 (不cell) {
              cell为{
                row: i,
                column: j,
                type: "normal",
                inRange: false,
                start: false,
                end: false
              };
            }
            常量 index为i * 7 + j;
            常量 calTime为startDate.value.add(index - offset, "day");
            cell.dayjs为calTime;
            cell.date为calTime.toDate();
            cell.timestamp为calTime.valueOf();
            cell.type为"normal";
            常量 calEndDate为props.rangeState.endDate 或 props.maxDate 或 props.rangeState.selecting 与 props.minDate;
            cell.inRange为props.minDate 与 calTime.isSameOrAfter(props.minDate, "day") 与 calEndDate 与 calTime.isSameOrBe变量循环e(calEndDate, "day") 或 props.minDate 与 calTime.isSameOrBe变量循环e(props.minDate, "day") 与 calEndDate 与 calTime.isSameOrAfter(calEndDate, "day");
            如果 ((_a为props.minDate) == null ? void 0 : _a.isSameOrAfter(calEndDate)) {
              cell.start为calEndDate 与 calTime.isSame(calEndDate, "day");
              cell.end为props.minDate 与 calTime.isSame(props.minDate, "day");
            } 否则 {
              cell.start为props.minDate 与 calTime.isSame(props.minDate, "day");
              cell.end为calEndDate 与 calTime.isSame(calEndDate, "day");
            }
            常量 isToday为calTime.isSame(calNow, "day");
            如果 (isToday) {
              cell.type为"today";
            }
            如果 (i >= 0 与 i <= 1) {
              常量 numberOfDaysFromPreviousMonth为startOfMonthDay + offset < 0 ? 7 + startOfMonthDay + offset : startOfMonthDay + offset;
              如果 (j + i * 7 >= numberOfDaysFromPreviousMonth) {
                cell.text为count加一;
              } 否则 {
                cell.text为dateCountOfLastMonth - (numberOfDaysFromPreviousMonth - j % 7) + 1 + i * 7;
                cell.type为"prev-month";
              }
            } 否则 {
              如果 (count <= dateCountOfMonth) {
                cell.text为count加一;
              } 否则 {
                cell.text为count加一 - dateCountOfMonth;
                cell.type为"next-month";
              }
            }
            常量 cellDate为calTime.toDate();
            cell.selected为selectedDate.find((_) => _.valueOf() === calTime.valueOf());
            cell.isSelected为不不cell.selected;
            cell.isCurrent为isCurrent(cell);
            cell.disabled为props.disabledDate 与 props.disabledDate(cellDate);
            cell.customClass为props.cellClassName 与 props.cellClassName(cellDate);
            row[props.showWeekNumber ? j + 1 : j]为cell;
          }
          如果 (props.selectionMode === "week") {
            常量 start为props.showWeekNumber ? 1 : 0;
            常量 end为props.showWeekNumber ? 7 : 6;
            常量 isActive为isWeekActive(row[start + 1]);
            row[start].inRange为isActive;
            row[start].start为isActive;
            row[end].inRange为isActive;
            row[end].end为isActive;
          }
        }
        返回 rows_;
      });
      常量 isCurrent为(cell) => {
        返回 props.selectionMode === "day" 与 (cell.type === "normal" 或 cell.type === "today") 与 cellMatchesDate(cell, props.parsedValue);
      };
      常量 cellMatchesDate为(cell, date) => {
        如果 (不date)
          返回 false;
        返回 dayjs(date).locale(语言.value).isSame(props.date.date(Number(cell.text)), "day");
      };
      常量 getCellClasses为(cell) => {
        常量 classes为[];
        如果 ((cell.type === "normal" 或 cell.type === "today") 与 不cell.disabled) {
          classes.push("available");
          如果 (cell.type === "today") {
            classes.push("today");
          }
        } 否则 {
          classes.push(cell.type);
        }
        如果 (isCurrent(cell)) {
          classes.push("current");
        }
        如果 (cell.inRange 与 (cell.type === "normal" 或 cell.type === "today" 或 props.selectionMode === "week")) {
          classes.push("in-range");
          如果 (cell.start) {
            classes.push("start-date");
          }
          如果 (cell.end) {
            classes.push("end-date");
          }
        }
        如果 (cell.disabled) {
          classes.push("disabled");
        }
        如果 (cell.selected) {
          classes.push("selected");
        }
        如果 (cell.customClass) {
          classes.push(cell.customClass);
        }
        返回 classes.join(" ");
      };
      常量 getDateOfCell为(row, column) => {
        常量 offsetFromStart为row * 7 + (column - (props.showWeekNumber ? 1 : 0)) - offsetDay.value;
        返回 startDate.value.add(offsetFromStart, "day");
      };
      常量 handleMouseMove为(event) => {
        如果 (不props.rangeState.selecting)
          返回;
        让 target为event.target;
        如果 (target.tagName === "SPAN") {
          target为target.parentNode.parentNode;
        }
        如果 (target.tagName === "DIV") {
          target为target.parentNode;
        }
        如果 (target.tagName 不== "TD")
          返回;
        常量 row为target.parentNode.rowIndex - 1;
        常量 column为target.cellIndex;
        如果 (rows.value[row][column].disabled)
          返回;
        如果 (row 不== lastRow.value 或 column 不== lastColumn.value) {
          lastRow.value为row;
          lastColumn.value为column;
          ctx.emit("changerange", {
            selecting: true,
            endDate: getDateOfCell(row, column)
          });
        }
      };
      常量 handleClick为(event) => {
        让 target为event.target;
        条件循环 (target) {
          如果 (target.tagName === "TD") {
            break;
          }
          target为target.parentNode;
        }
        如果 (不target 或 target.tagName 不== "TD")
          返回;
        常量 row为target.parentNode.rowIndex - 1;
        常量 column为target.cellIndex;
        常量 cell为rows.value[row][column];
        如果 (cell.disabled 或 cell.type === "week")
          返回;
        常量 newDate为getDateOfCell(row, column);
        如果 (props.selectionMode === "range") {
          如果 (不props.rangeState.selecting) {
            ctx.emit("pick", { minDate: newDate, maxDate: null });
            ctx.emit("select", true);
          } 否则 {
            如果 (newDate >= props.minDate) {
              ctx.emit("pick", { minDate: props.minDate, maxDate: newDate });
            } 否则 {
              ctx.emit("pick", { minDate: newDate, maxDate: props.minDate });
            }
            ctx.emit("select", false);
          }
        } 否则 如果 (props.selectionMode === "day") {
          ctx.emit("pick", newDate);
        } 否则 如果 (props.selectionMode === "week") {
          常量 weekNumber为newDate.week();
          常量 value为`${newDate.year()}w${weekNumber}`;
          ctx.emit("pick", {
            year: newDate.year(),
            week: weekNumber,
            value,
            date: newDate.startOf("week")
          });
        } 否则 如果 (props.selectionMode === "dates") {
          常量 newValue为cell.selected ? castArray(props.parsedValue).filter((_) => _.valueOf() 不== newDate.valueOf()) : castArray(props.parsedValue).concat([newDate]);
          ctx.emit("pick", newValue);
        }
      };
      常量 isWeekActive为(cell) => {
        如果 (props.selectionMode 不== "week")
          返回 false;
        让 newDate为props.date.startOf("day");
        如果 (cell.type === "prev-month") {
          newDate为newDate.subtract(1, "month");
        }
        如果 (cell.type === "next-month") {
          newDate为newDate.add(1, "month");
        }
        newDate为newDate.date(Number.parseInt(cell.text, 10));
        如果 (props.parsedValue 与 不Array.isArray(props.parsedValue)) {
          常量 dayOffset为(props.parsedValue.day() - firstDayOfWeek + 7) % 7 - 1;
          常量 weekDate为props.parsedValue.subtract(dayOffset, "day");
          返回 weekDate.isSame(newDate, "day");
        }
        返回 false;
      };
      返回 {
        handleMouseMove,
        t,
        rows,
        isWeekActive,
        getCellClasses,
        WEEKS,
        handleClick
      };
    }
  });
  常量 _hoisted_1$G为{ key: 0 };
  函数 _sfc_render$X(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_date_picker_cell为vue.resolveComponent("el-date-picker-cell");
    返回 vue.openBlock(), vue.createElementBlock("table", {
      cellspacing: "0",
      cellpadding: "0",
      class: vue.normalizeClass(["el-date-table", { "is-week-mode": _ctx.selectionMode === "week" }]),
      onClick: _cache[0] 或 (_cache[0]为(...args) => _ctx.handleClick 与 _ctx.handleClick(...args)),
      onMousemove: _cache[1] 或 (_cache[1]为(...args) => _ctx.handleMouseMove 与 _ctx.handleMouseMove(...args))
    }, [
      vue.createElementVNode("t主体", null, [
        vue.createElementVNode("tr", null, [
          _ctx.showWeekNumber ? (vue.openBlock(), vue.createElementBlock("th", _hoisted_1$G, vue.toDisplayString(_ctx.t("el.datepicker.week")), 1)) : vue.createCommentVNode("v-如果", true),
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.WEEKS, (week, key) => {
            返回 vue.openBlock(), vue.createElementBlock("th", { key }, vue.toDisplayString(_ctx.t("el.datepicker.weeks." + week)), 1);
          }), 128))
        ]),
        (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.rows, (row, key) => {
          返回 vue.openBlock(), vue.createElementBlock("tr", {
            key,
            class: vue.normalizeClass(["el-date-table__row", { current: _ctx.isWeekActive(row[1]) }])
          }, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(row, (cell, key_) => {
              返回 vue.openBlock(), vue.createElementBlock("td", {
                key: key_,
                class: vue.normalizeClass(_ctx.getCellClasses(cell))
              }, [
                vue.createVNode(_component_el_date_picker_cell, { cell }, null, 8, ["cell"])
              ], 2);
            }), 128))
          ], 2);
        }), 128))
      ])
    ], 34);
  }
  变量 DateTable为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1n, [["render", _sfc_render$X], ["__file", "basic-date-table.vue"]]);

  常量 datesInMonth为(year, month, 语言) => {
    常量 firstDay为dayjs().locale(语言).startOf("month").month(month).year(year);
    常量 numOfDays为firstDay.daysInMonth();
    返回 rangeArr(numOfDays).map((n) => firstDay.add(n, "day").toDate());
  };
  常量 _sfc_main$1m为vue.defineComponent({
    props: {
      disabledDate: {
        type: Function
      },
      selectionMode: {
        type: String,
        default: "month"
      },
      minDate: {
        type: Object
      },
      maxDate: {
        type: Object
      },
      date: {
        type: Object
      },
      parsedValue: {
        type: Object
      },
      rangeState: {
        type: Object,
        default: () => ({
          endDate: null,
          selecting: false
        })
      }
    },
    emits: ["changerange", "pick", "select"],
    setup(props, ctx) {
      常量 { t, 语言 }为useLocale();
      常量 months为vue.ref(props.date.locale("en").localeData().monthsShort().map((_) => _.toLowerCase()));
      常量 tableRows为vue.ref([[], [], []]);
      常量 lastRow为vue.ref(null);
      常量 lastColumn为vue.ref(null);
      常量 rows为vue.computed(() => {
        变量 _a;
        常量 rows2为tableRows.value;
        常量 now为dayjs().locale(语言.value).startOf("month");
        变量循环 (让 i为0; i < 3; i加一) {
          常量 row为rows2[i];
          变量循环 (让 j为0; j < 4; j加一) {
            让 cell为row[j];
            如果 (不cell) {
              cell为{
                row: i,
                column: j,
                type: "normal",
                inRange: false,
                start: false,
                end: false
              };
            }
            cell.type为"normal";
            常量 index为i * 4 + j;
            常量 calTime为props.date.startOf("year").month(index);
            常量 calEndDate为props.rangeState.endDate 或 props.maxDate 或 props.rangeState.selecting 与 props.minDate;
            cell.inRange为props.minDate 与 calTime.isSameOrAfter(props.minDate, "month") 与 calEndDate 与 calTime.isSameOrBe变量循环e(calEndDate, "month") 或 props.minDate 与 calTime.isSameOrBe变量循环e(props.minDate, "month") 与 calEndDate 与 calTime.isSameOrAfter(calEndDate, "month");
            如果 ((_a为props.minDate) == null ? void 0 : _a.isSameOrAfter(calEndDate)) {
              cell.start为calEndDate 与 calTime.isSame(calEndDate, "month");
              cell.end为props.minDate 与 calTime.isSame(props.minDate, "month");
            } 否则 {
              cell.start为props.minDate 与 calTime.isSame(props.minDate, "month");
              cell.end为calEndDate 与 calTime.isSame(calEndDate, "month");
            }
            常量 isToday为now.isSame(calTime);
            如果 (isToday) {
              cell.type为"today";
            }
            cell.text为index;
            常量 cellDate为calTime.toDate();
            cell.disabled为props.disabledDate 与 props.disabledDate(cellDate);
            row[j]为cell;
          }
        }
        返回 rows2;
      });
      常量 getCellStyle为(cell) => {
        常量 style为{};
        常量 year为props.date.year();
        常量 today为new Date();
        常量 month为cell.text;
        style.disabled为props.disabledDate ? datesInMonth(year, month, 语言.value).every(props.disabledDate) : false;
        style.current为castArray(props.parsedValue).findIndex((date) => date.year() === year 与 date.month() === month) >= 0;
        style.today为today.getFullYear() === year 与 today.getMonth() === month;
        如果 (cell.inRange) {
          style["in-range"]为true;
          如果 (cell.start) {
            style["start-date"]为true;
          }
          如果 (cell.end) {
            style["end-date"]为true;
          }
        }
        返回 style;
      };
      常量 handleMouseMove为(event) => {
        如果 (不props.rangeState.selecting)
          返回;
        让 target为event.target;
        如果 (target.tagName === "A") {
          target为target.parentNode.parentNode;
        }
        如果 (target.tagName === "DIV") {
          target为target.parentNode;
        }
        如果 (target.tagName 不== "TD")
          返回;
        常量 row为target.parentNode.rowIndex;
        常量 column为target.cellIndex;
        如果 (rows.value[row][column].disabled)
          返回;
        如果 (row 不== lastRow.value 或 column 不== lastColumn.value) {
          lastRow.value为row;
          lastColumn.value为column;
          ctx.emit("changerange", {
            selecting: true,
            endDate: props.date.startOf("year").month(row * 4 + column)
          });
        }
      };
      常量 handleMonthTableClick为(event) => {
        让 target为event.target;
        如果 (target.tagName === "A") {
          target为target.parentNode.parentNode;
        }
        如果 (target.tagName === "DIV") {
          target为target.parentNode;
        }
        如果 (target.tagName 不== "TD")
          返回;
        如果 (hasClass(target, "disabled"))
          返回;
        常量 column为target.cellIndex;
        常量 row为target.parentNode.rowIndex;
        常量 month为row * 4 + column;
        常量 newDate为props.date.startOf("year").month(month);
        如果 (props.selectionMode === "range") {
          如果 (不props.rangeState.selecting) {
            ctx.emit("pick", { minDate: newDate, maxDate: null });
            ctx.emit("select", true);
          } 否则 {
            如果 (newDate >= props.minDate) {
              ctx.emit("pick", { minDate: props.minDate, maxDate: newDate });
            } 否则 {
              ctx.emit("pick", { minDate: newDate, maxDate: props.minDate });
            }
            ctx.emit("select", false);
          }
        } 否则 {
          ctx.emit("pick", month);
        }
      };
      返回 {
        handleMouseMove,
        handleMonthTableClick,
        rows,
        getCellStyle,
        t,
        months
      };
    }
  });
  常量 _hoisted_1$F为{ class: "cell" };
  函数 _sfc_render$W(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("table", {
      class: "el-month-table",
      onClick: _cache[0] 或 (_cache[0]为(...args) => _ctx.handleMonthTableClick 与 _ctx.handleMonthTableClick(...args)),
      onMousemove: _cache[1] 或 (_cache[1]为(...args) => _ctx.handleMouseMove 与 _ctx.handleMouseMove(...args))
    }, [
      vue.createElementVNode("t主体", null, [
        (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.rows, (row, key) => {
          返回 vue.openBlock(), vue.createElementBlock("tr", { key }, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(row, (cell, key_) => {
              返回 vue.openBlock(), vue.createElementBlock("td", {
                key: key_,
                class: vue.normalizeClass(_ctx.getCellStyle(cell))
              }, [
                vue.createElementVNode("div", null, [
                  vue.createElementVNode("a", _hoisted_1$F, vue.toDisplayString(_ctx.t("el.datepicker.months." + _ctx.months[cell.text])), 1)
                ])
              ], 2);
            }), 128))
          ]);
        }), 128))
      ])
    ], 32);
  }
  变量 MonthTable为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1m, [["render", _sfc_render$W], ["__file", "basic-month-table.vue"]]);

  常量 datesInYear为(year, 语言) => {
    常量 firstDay为dayjs(String(year)).locale(语言).startOf("year");
    常量 lastDay为firstDay.endOf("year");
    常量 numOfDays为lastDay.dayOfYear();
    返回 rangeArr(numOfDays).map((n) => firstDay.add(n, "day").toDate());
  };
  常量 _sfc_main$1l为vue.defineComponent({
    props: {
      disabledDate: {
        type: Function
      },
      parsedValue: {
        type: Object
      },
      date: {
        type: Object
      }
    },
    emits: ["pick"],
    setup(props, ctx) {
      常量 { 语言 }为useLocale();
      常量 startYear为vue.computed(() => {
        返回 Math.floor(props.date.year() / 10) * 10;
      });
      常量 getCellStyle为(year) => {
        常量 style为{};
        常量 today为dayjs().locale(语言.value);
        style.disabled为props.disabledDate ? datesInYear(year, 语言.value).every(props.disabledDate) : false;
        style.current为castArray(props.parsedValue).findIndex((_) => _.year() === year) >= 0;
        style.today为today.year() === year;
        返回 style;
      };
      常量 handleYearTableClick为(event) => {
        常量 target为event.target;
        如果 (target.tagName === "A") {
          如果 (hasClass(target.parentNode, "disabled"))
            返回;
          常量 year为target.textContent 或 target.innerText;
          ctx.emit("pick", Number(year));
        }
      };
      返回 {
        startYear,
        getCellStyle,
        handleYearTableClick
      };
    }
  });
  常量 _hoisted_1$E为{ class: "cell" };
  常量 _hoisted_2$p为{ class: "cell" };
  常量 _hoisted_3$e为{ class: "cell" };
  常量 _hoisted_4$b为{ class: "cell" };
  常量 _hoisted_5$9为{ class: "cell" };
  常量 _hoisted_6$6为{ class: "cell" };
  常量 _hoisted_7$5为{ class: "cell" };
  常量 _hoisted_8$5为{ class: "cell" };
  常量 _hoisted_9$5为{ class: "cell" };
  常量 _hoisted_10$5为{ class: "cell" };
  常量 _hoisted_11$3为/* @__PURE__ */ vue.createElementVNode("td", null, null, -1);
  常量 _hoisted_12$3为/* @__PURE__ */ vue.createElementVNode("td", null, null, -1);
  函数 _sfc_render$V(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("table", {
      class: "el-year-table",
      onClick: _cache[0] 或 (_cache[0]为(...args) => _ctx.handleYearTableClick 与 _ctx.handleYearTableClick(...args))
    }, [
      vue.createElementVNode("t主体", null, [
        vue.createElementVNode("tr", null, [
          vue.createElementVNode("td", {
            class: vue.normalizeClass(["available", _ctx.getCellStyle(_ctx.startYear + 0)])
          }, [
            vue.createElementVNode("a", _hoisted_1$E, vue.toDisplayString(_ctx.startYear), 1)
          ], 2),
          vue.createElementVNode("td", {
            class: vue.normalizeClass(["available", _ctx.getCellStyle(_ctx.startYear + 1)])
          }, [
            vue.createElementVNode("a", _hoisted_2$p, vue.toDisplayString(_ctx.startYear + 1), 1)
          ], 2),
          vue.createElementVNode("td", {
            class: vue.normalizeClass(["available", _ctx.getCellStyle(_ctx.startYear + 2)])
          }, [
            vue.createElementVNode("a", _hoisted_3$e, vue.toDisplayString(_ctx.startYear + 2), 1)
          ], 2),
          vue.createElementVNode("td", {
            class: vue.normalizeClass(["available", _ctx.getCellStyle(_ctx.startYear + 3)])
          }, [
            vue.createElementVNode("a", _hoisted_4$b, vue.toDisplayString(_ctx.startYear + 3), 1)
          ], 2)
        ]),
        vue.createElementVNode("tr", null, [
          vue.createElementVNode("td", {
            class: vue.normalizeClass(["available", _ctx.getCellStyle(_ctx.startYear + 4)])
          }, [
            vue.createElementVNode("a", _hoisted_5$9, vue.toDisplayString(_ctx.startYear + 4), 1)
          ], 2),
          vue.createElementVNode("td", {
            class: vue.normalizeClass(["available", _ctx.getCellStyle(_ctx.startYear + 5)])
          }, [
            vue.createElementVNode("a", _hoisted_6$6, vue.toDisplayString(_ctx.startYear + 5), 1)
          ], 2),
          vue.createElementVNode("td", {
            class: vue.normalizeClass(["available", _ctx.getCellStyle(_ctx.startYear + 6)])
          }, [
            vue.createElementVNode("a", _hoisted_7$5, vue.toDisplayString(_ctx.startYear + 6), 1)
          ], 2),
          vue.createElementVNode("td", {
            class: vue.normalizeClass(["available", _ctx.getCellStyle(_ctx.startYear + 7)])
          }, [
            vue.createElementVNode("a", _hoisted_8$5, vue.toDisplayString(_ctx.startYear + 7), 1)
          ], 2)
        ]),
        vue.createElementVNode("tr", null, [
          vue.createElementVNode("td", {
            class: vue.normalizeClass(["available", _ctx.getCellStyle(_ctx.startYear + 8)])
          }, [
            vue.createElementVNode("a", _hoisted_9$5, vue.toDisplayString(_ctx.startYear + 8), 1)
          ], 2),
          vue.createElementVNode("td", {
            class: vue.normalizeClass(["available", _ctx.getCellStyle(_ctx.startYear + 9)])
          }, [
            vue.createElementVNode("a", _hoisted_10$5, vue.toDisplayString(_ctx.startYear + 9), 1)
          ], 2),
          _hoisted_11$3,
          _hoisted_12$3
        ])
      ])
    ]);
  }
  变量 YearTable为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1l, [["render", _sfc_render$V], ["__file", "basic-year-table.vue"]]);

  常量 timeWithinRange为(_, __, ___) => true;
  常量 _sfc_main$1k为vue.defineComponent({
    components: {
      DateTable,
      ElInput,
      ElButton,
      ElIcon,
      TimePickPanel,
      MonthTable,
      YearTable,
      DArrowLeft: dArrowLeft,
      ArrowLeft: arrowLeft,
      DArrowRight: dArrowRight,
      ArrowRight: arrowRight
    },
    directives: { 点击outside: ClickOutside },
    props: {
      visible: {
        type: Boolean,
        default: false
      },
      parsedValue: {
        type: [Object, Array]
      },
      变量循环mat: {
        type: String,
        default: ""
      },
      type: {
        type: String,
        required: true,
        validator: isValidDatePickType
      }
    },
    emits: ["pick", "set-picker-option", "panel-change"],
    setup(props, ctx) {
      常量 { t, 语言 }为useLocale();
      常量 pickerBase为vue.inject("EP_PICKER_BASE");
      常量 popper为vue.inject(TOOLTIP_INJECTION_KEY);
      常量 {
        shortcuts,
        disabledDate,
        cellClassName,
        defaultTime,
        arrowControl
      }为pickerBase.props;
      常量 defaultValue为vue.toRef(pickerBase.props, "defaultValue");
      常量 innerDate为vue.ref(dayjs().locale(语言.value));
      常量 defaultTimeD为vue.computed(() => {
        返回 dayjs(defaultTime).locale(语言.value);
      });
      常量 month为vue.computed(() => {
        返回 innerDate.value.month();
      });
      常量 year为vue.computed(() => {
        返回 innerDate.value.year();
      });
      常量 selectableRange为vue.ref([]);
      常量 userInputDate为vue.ref(null);
      常量 userInputTime为vue.ref(null);
      常量 checkDateWithinRange为(date) => {
        返回 selectableRange.value.长度大于0 ? timeWithinRange(date, selectableRange.value, props.变量循环mat 或 "HH:mm:ss") : true;
      };
      常量 变量循环matEmit为(emitDayjs) => {
        如果 (defaultTime 与 不visibleTime.value) {
          返回 defaultTimeD.value.year(emitDayjs.year()).month(emitDayjs.month()).date(emitDayjs.date());
        }
        如果 (showTime.value)
          返回 emitDayjs.millisecond(0);
        返回 emitDayjs.startOf("day");
      };
      常量 emit为(value, ...args) => {
        如果 (不value) {
          ctx.emit("pick", value, ...args);
        } 否则 如果 (Array.isArray(value)) {
          常量 dates为value.map(变量循环matEmit);
          ctx.emit("pick", dates, ...args);
        } 否则 {
          ctx.emit("pick", 变量循环matEmit(value), ...args);
        }
        userInputDate.value为null;
        userInputTime.value为null;
      };
      常量 handleDatePick为(value) => {
        如果 (selectionMode.value === "day") {
          让 newDate为props.parsedValue ? props.parsedValue.year(value.year()).month(value.month()).date(value.date()) : value;
          如果 (不checkDateWithinRange(newDate)) {
            newDate为selectableRange.value[0][0].year(value.year()).month(value.month()).date(value.date());
          }
          innerDate.value为newDate;
          emit(newDate, showTime.value);
        } 否则 如果 (selectionMode.value === "week") {
          emit(value.date);
        } 否则 如果 (selectionMode.value === "dates") {
          emit(value, true);
        }
      };
      常量 prevMonth_为() => {
        innerDate.value为innerDate.value.subtract(1, "month");
        handlePanelChange("month");
      };
      常量 nextMonth_为() => {
        innerDate.value为innerDate.value.add(1, "month");
        handlePanelChange("month");
      };
      常量 prevYear_为() => {
        如果 (currentView.value === "year") {
          innerDate.value为innerDate.value.subtract(10, "year");
        } 否则 {
          innerDate.value为innerDate.value.subtract(1, "year");
        }
        handlePanelChange("year");
      };
      常量 nextYear_为() => {
        如果 (currentView.value === "year") {
          innerDate.value为innerDate.value.add(10, "year");
        } 否则 {
          innerDate.value为innerDate.value.add(1, "year");
        }
        handlePanelChange("year");
      };
      常量 currentView为vue.ref("date");
      常量 yearLabel为vue.computed(() => {
        常量 yearTranslation为t("el.datepicker.year");
        如果 (currentView.value === "year") {
          常量 startYear为Math.floor(year.value / 10) * 10;
          如果 (yearTranslation) {
            返回 `${startYear} ${yearTranslation} - ${startYear + 9} ${yearTranslation}`;
          }
          返回 `${startYear} - ${startYear + 9}`;
        }
        返回 `${year.value} ${yearTranslation}`;
      });
      常量 handleShortcutClick为(shortcut) => {
        常量 shortcutValue为类型是 shortcut.value === "函数" ? shortcut.value() : shortcut.value;
        如果 (shortcutValue) {
          emit(dayjs(shortcutValue).locale(语言.value));
          返回;
        }
        如果 (shortcut.onClick) {
          shortcut.onClick(ctx);
        }
      };
      常量 selectionMode为vue.computed(() => {
        如果 (["week", "month", "year", "dates"].includes(props.type)) {
          返回 props.type;
        }
        返回 "day";
      });
      vue.watch(() => selectionMode.value, (val) => {
        如果 (["month", "year"].includes(val)) {
          currentView.value为val;
          返回;
        }
        currentView.value为"date";
      }, { immediate: true });
      vue.watch(() => currentView.value, () => {
        popper == null ? void 0 : popper.updatePopper();
      });
      常量 hasShortcuts为vue.computed(() => 不不shortcuts.长度);
      常量 handleMonthPick为(month2) => {
        innerDate.value为innerDate.value.startOf("month").month(month2);
        如果 (selectionMode.value === "month") {
          emit(innerDate.value);
        } 否则 {
          currentView.value为"date";
        }
        handlePanelChange("month");
      };
      常量 handleYearPick为(year2) => {
        如果 (selectionMode.value === "year") {
          innerDate.value为innerDate.value.startOf("year").year(year2);
          emit(innerDate.value);
        } 否则 {
          innerDate.value为innerDate.value.year(year2);
          currentView.value为"month";
        }
        handlePanelChange("year");
      };
      常量 showMonthPicker为() => {
        currentView.value为"month";
      };
      常量 showYearPicker为() => {
        currentView.value为"year";
      };
      常量 showTime为vue.computed(() => props.type === "datetime" 或 props.type === "datetimerange");
      常量 footerVisible为vue.computed(() => {
        返回 showTime.value 或 selectionMode.value === "dates";
      });
      常量 onConfirm为() => {
        如果 (selectionMode.value === "dates") {
          emit(props.parsedValue);
        } 否则 {
          让 result为props.parsedValue;
          如果 (不result) {
            常量 defaultTimeD2为dayjs(defaultTime).locale(语言.value);
            常量 defaultValueD为getDefaultValue();
            result为defaultTimeD2.year(defaultValueD.year()).month(defaultValueD.month()).date(defaultValueD.date());
          }
          innerDate.value为result;
          emit(result);
        }
      };
      常量 changeToNow为() => {
        常量 now为dayjs().locale(语言.value);
        常量 nowDate为now.toDate();
        如果 ((不disabledDate 或 不disabledDate(nowDate)) 与 checkDateWithinRange(nowDate)) {
          innerDate.value为dayjs().locale(语言.value);
          emit(innerDate.value);
        }
      };
      常量 timeFormat为vue.computed(() => {
        返回 extractTimeFormat(props.变量循环mat);
      });
      常量 dateFormat为vue.computed(() => {
        返回 extractDateFormat(props.变量循环mat);
      });
      常量 visibleTime为vue.computed(() => {
        如果 (userInputTime.value)
          返回 userInputTime.value;
        如果 (不props.parsedValue 与 不defaultValue.value)
          返回;
        返回 (props.parsedValue 或 innerDate.value).变量循环mat(timeFormat.value);
      });
      常量 visibleDate为vue.computed(() => {
        如果 (userInputDate.value)
          返回 userInputDate.value;
        如果 (不props.parsedValue 与 不defaultValue.value)
          返回;
        返回 (props.parsedValue 或 innerDate.value).变量循环mat(dateFormat.value);
      });
      常量 timePickerVisible为vue.ref(false);
      常量 onTimePickerInputFocus为() => {
        timePickerVisible.value为true;
      };
      常量 handleTimePickClose为() => {
        timePickerVisible.value为false;
      };
      常量 handleTimePick为(value, visible, first) => {
        常量 newDate为props.parsedValue ? props.parsedValue.hour(value.hour()).minute(value.minute()).second(value.second()) : value;
        innerDate.value为newDate;
        emit(innerDate.value, true);
        如果 (不first) {
          timePickerVisible.value为visible;
        }
      };
      常量 handleVisibleTimeChange为(value) => {
        常量 newDate为dayjs(value, timeFormat.value).locale(语言.value);
        如果 (newDate.isValid() 与 checkDateWithinRange(newDate)) {
          innerDate.value为newDate.year(innerDate.value.year()).month(innerDate.value.month()).date(innerDate.value.date());
          userInputTime.value为null;
          timePickerVisible.value为false;
          emit(innerDate.value, true);
        }
      };
      常量 handleVisibleDateChange为(value) => {
        常量 newDate为dayjs(value, dateFormat.value).locale(语言.value);
        如果 (newDate.isValid()) {
          如果 (disabledDate 与 disabledDate(newDate.toDate())) {
            返回;
          }
          innerDate.value为newDate.hour(innerDate.value.hour()).minute(innerDate.value.minute()).second(innerDate.value.second());
          userInputDate.value为null;
          emit(innerDate.value, true);
        }
      };
      常量 isValidValue为(date) => {
        返回 dayjs.isDayjs(date) 与 date.isValid() 与 (disabledDate ? 不disabledDate(date.toDate()) : true);
      };
      常量 变量循环matToString为(value) => {
        如果 (selectionMode.value === "dates") {
          返回 value.map((_) => _.变量循环mat(props.变量循环mat));
        }
        返回 value.变量循环mat(props.变量循环mat);
      };
      常量 parseUserInput为(value) => {
        返回 dayjs(value, props.变量循环mat).locale(语言.value);
      };
      常量 getDefaultValue为() => {
        常量 parseDate为dayjs(defaultValue.value).locale(语言.value);
        如果 (不defaultValue.value) {
          常量 defaultTimeDValue为defaultTimeD.value;
          返回 dayjs().hour(defaultTimeDValue.hour()).minute(defaultTimeDValue.minute()).second(defaultTimeDValue.second()).locale(语言.value);
        }
        返回 parseDate;
      };
      常量 handleKeydown为(event) => {
        常量 { code, keyCode }为event;
        常量 list为[
          EVENT_CODE.up,
          EVENT_CODE.down,
          EVENT_CODE.left,
          EVENT_CODE.right
        ];
        如果 (props.visible 与 不timePickerVisible.value) {
          如果 (list.includes(code)) {
            handleKeyControl(keyCode);
            event.stopPropagation();
            event.preventDefault();
          }
          如果 (code === EVENT_CODE.enter 与 userInputDate.value === null 与 userInputTime.value === null) {
            emit(innerDate, false);
          }
        }
      };
      常量 handleKeyControl为(keyCode) => {
        常量 mapping为{
          year: {
            38: -4,
            40: 4,
            37: -1,
            39: 1,
            offset: (date, step) => date.setFullYear(date.getFullYear() + step)
          },
          month: {
            38: -4,
            40: 4,
            37: -1,
            39: 1,
            offset: (date, step) => date.setMonth(date.getMonth() + step)
          },
          week: {
            38: -1,
            40: 1,
            37: -1,
            39: 1,
            offset: (date, step) => date.setDate(date.getDate() + step * 7)
          },
          day: {
            38: -7,
            40: 7,
            37: -1,
            39: 1,
            offset: (date, step) => date.setDate(date.getDate() + step)
          }
        };
        常量 newDate为innerDate.value.toDate();
        条件循环 (Math.abs(innerDate.value.d如果f(newDate, "year", true)) < 1) {
          常量 map为mapping[selectionMode.value];
          map.offset(newDate, map[keyCode]);
          如果 (disabledDate 与 disabledDate(newDate)) {
            continue;
          }
          常量 result为dayjs(newDate).locale(语言.value);
          innerDate.value为result;
          ctx.emit("pick", result, true);
          break;
        }
      };
      常量 handlePanelChange为(mode) => {
        ctx.emit("panel-change", innerDate.value.toDate(), mode, currentView.value);
      };
      ctx.emit("set-picker-option", ["isValidValue", isValidValue]);
      ctx.emit("set-picker-option", ["变量循环matToString", 变量循环matToString]);
      ctx.emit("set-picker-option", ["parseUserInput", parseUserInput]);
      ctx.emit("set-picker-option", ["handleKeydown", handleKeydown]);
      vue.watch(() => defaultValue.value, (val) => {
        如果 (val) {
          innerDate.value为getDefaultValue();
        }
      }, { immediate: true });
      vue.watch(() => props.parsedValue, (val) => {
        如果 (val) {
          如果 (selectionMode.value === "dates")
            返回;
          如果 (Array.isArray(val))
            返回;
          innerDate.value为val;
        } 否则 {
          innerDate.value为getDefaultValue();
        }
      }, { immediate: true });
      返回 {
        handleTimePick,
        handleTimePickClose,
        onTimePickerInputFocus,
        timePickerVisible,
        visibleTime,
        visibleDate,
        showTime,
        changeToNow,
        onConfirm,
        footerVisible,
        handleYearPick,
        showMonthPicker,
        showYearPicker,
        handleMonthPick,
        hasShortcuts,
        shortcuts,
        arrowControl,
        disabledDate,
        cellClassName,
        selectionMode,
        handleShortcutClick,
        prevYear_,
        nextYear_,
        prevMonth_,
        nextMonth_,
        innerDate,
        t,
        yearLabel,
        currentView,
        month,
        handleDatePick,
        handleVisibleTimeChange,
        handleVisibleDateChange,
        timeFormat,
        userInputTime,
        userInputDate
      };
    }
  });
  常量 _hoisted_1$D为{ class: "el-picker-panel__主体-wrapper" };
  常量 _hoisted_2$o为{
    key: 0,
    class: "el-picker-panel__sidebar"
  };
  常量 _hoisted_3$d为["onClick"];
  常量 _hoisted_4$a为{ class: "el-picker-panel__主体" };
  常量 _hoisted_5$8为{
    key: 0,
    class: "el-date-picker__time-头er"
  };
  常量 _hoisted_6$5为{ class: "el-date-picker__editor-wrap" };
  常量 _hoisted_7$4为{ class: "el-date-picker__editor-wrap" };
  常量 _hoisted_8$4为["aria-label"];
  常量 _hoisted_9$4为["aria-label"];
  常量 _hoisted_10$4为["aria-label"];
  常量 _hoisted_11$2为["aria-label"];
  常量 _hoisted_12$2为{ class: "el-picker-panel__上下文" };
  常量 _hoisted_13$2为{ class: "el-picker-panel__footer" };
  函数 _sfc_render$U(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_input为vue.resolveComponent("el-input");
    常量 _component_time_pick_panel为vue.resolveComponent("time-pick-panel");
    常量 _component_d_arrow_left为vue.resolveComponent("d-arrow-left");
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_arrow_left为vue.resolveComponent("arrow-left");
    常量 _component_d_arrow_right为vue.resolveComponent("d-arrow-right");
    常量 _component_arrow_right为vue.resolveComponent("arrow-right");
    常量 _component_date_table为vue.resolveComponent("date-table");
    常量 _component_year_table为vue.resolveComponent("year-table");
    常量 _component_month_table为vue.resolveComponent("month-table");
    常量 _component_el_button为vue.resolveComponent("el-button");
    常量 _directive_点击outside为vue.resolveDirective("点击outside");
    返回 vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass(["el-picker-panel el-date-picker", [
        {
          "has-sidebar": _ctx.$slots.sidebar 或 _ctx.hasShortcuts,
          "has-time": _ctx.showTime
        }
      ]])
    }, [
      vue.createElementVNode("div", _hoisted_1$D, [
        vue.renderSlot(_ctx.$slots, "sidebar", { class: "el-picker-panel__sidebar" }),
        _ctx.hasShortcuts ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_2$o, [
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.shortcuts, (shortcut, key) => {
            返回 vue.openBlock(), vue.createElementBlock("button", {
              key,
              type: "button",
              class: "el-picker-panel__shortcut",
              onClick: ($event) => _ctx.handleShortcutClick(shortcut)
            }, vue.toDisplayString(shortcut.text), 9, _hoisted_3$d);
          }), 128))
        ])) : vue.createCommentVNode("v-如果", true),
        vue.createElementVNode("div", _hoisted_4$a, [
          _ctx.showTime ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_5$8, [
            vue.createElementVNode("span", _hoisted_6$5, [
              vue.createVNode(_component_el_input, {
                placeholder: _ctx.t("el.datepicker.selectDate"),
                "model-value": _ctx.visibleDate,
                size: "small",
                onInput: _cache[0] 或 (_cache[0]为(val) => _ctx.userInputDate为val),
                onChange: _ctx.handleVisibleDateChange
              }, null, 8, ["placeholder", "model-value", "onChange"])
            ]),
            vue.withDirectives((vue.openBlock(), vue.createElementBlock("span", _hoisted_7$4, [
              vue.createVNode(_component_el_input, {
                placeholder: _ctx.t("el.datepicker.selectTime"),
                "model-value": _ctx.visibleTime,
                size: "small",
                onFocus: _ctx.onTimePickerInputFocus,
                onInput: _cache[1] 或 (_cache[1]为(val) => _ctx.userInputTime为val),
                onChange: _ctx.handleVisibleTimeChange
              }, null, 8, ["placeholder", "model-value", "onFocus", "onChange"]),
              vue.createVNode(_component_time_pick_panel, {
                visible: _ctx.timePickerVisible,
                变量循环mat: _ctx.timeFormat,
                "time-arrow-control": _ctx.arrowControl,
                "parsed-value": _ctx.innerDate,
                onPick: _ctx.handleTimePick
              }, null, 8, ["visible", "变量循环mat", "time-arrow-control", "parsed-value", "onPick"])
            ])), [
              [_directive_点击outside, _ctx.handleTimePickClose]
            ])
          ])) : vue.createCommentVNode("v-如果", true),
          vue.withDirectives(vue.createElementVNode("div", {
            class: vue.normalizeClass(["el-date-picker__头er", {
              "el-date-picker__头er--bordered": _ctx.currentView === "year" 或 _ctx.currentView === "month"
            }])
          }, [
            vue.createElementVNode("button", {
              type: "button",
              "aria-label": _ctx.t(`el.datepicker.prevYear`),
              class: "el-picker-panel__icon-btn el-date-picker__prev-btn d-arrow-left",
              onClick: _cache[2] 或 (_cache[2]为(...args) => _ctx.prevYear_ 与 _ctx.prevYear_(...args))
            }, [
              vue.createVNode(_component_el_icon, null, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_d_arrow_left)
                ]),
                _: 1
              })
            ], 8, _hoisted_8$4),
            vue.withDirectives(vue.createElementVNode("button", {
              type: "button",
              "aria-label": _ctx.t(`el.datepicker.prevMonth`),
              class: "el-picker-panel__icon-btn el-date-picker__prev-btn arrow-left",
              onClick: _cache[3] 或 (_cache[3]为(...args) => _ctx.prevMonth_ 与 _ctx.prevMonth_(...args))
            }, [
              vue.createVNode(_component_el_icon, null, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_arrow_left)
                ]),
                _: 1
              })
            ], 8, _hoisted_9$4), [
              [vue.vShow, _ctx.currentView === "date"]
            ]),
            vue.createElementVNode("span", {
              role: "button",
              class: "el-date-picker__头er-label",
              onClick: _cache[4] 或 (_cache[4]为(...args) => _ctx.showYearPicker 与 _ctx.showYearPicker(...args))
            }, vue.toDisplayString(_ctx.yearLabel), 1),
            vue.withDirectives(vue.createElementVNode("span", {
              role: "button",
              class: vue.normalizeClass(["el-date-picker__头er-label", { active: _ctx.currentView === "month" }]),
              onClick: _cache[5] 或 (_cache[5]为(...args) => _ctx.showMonthPicker 与 _ctx.showMonthPicker(...args))
            }, vue.toDisplayString(_ctx.t(`el.datepicker.month${_ctx.month + 1}`)), 3), [
              [vue.vShow, _ctx.currentView === "date"]
            ]),
            vue.createElementVNode("button", {
              type: "button",
              "aria-label": _ctx.t(`el.datepicker.nextYear`),
              class: "el-picker-panel__icon-btn el-date-picker__next-btn d-arrow-right",
              onClick: _cache[6] 或 (_cache[6]为(...args) => _ctx.nextYear_ 与 _ctx.nextYear_(...args))
            }, [
              vue.createVNode(_component_el_icon, null, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_d_arrow_right)
                ]),
                _: 1
              })
            ], 8, _hoisted_10$4),
            vue.withDirectives(vue.createElementVNode("button", {
              type: "button",
              "aria-label": _ctx.t(`el.datepicker.nextMonth`),
              class: "el-picker-panel__icon-btn el-date-picker__next-btn arrow-right",
              onClick: _cache[7] 或 (_cache[7]为(...args) => _ctx.nextMonth_ 与 _ctx.nextMonth_(...args))
            }, [
              vue.createVNode(_component_el_icon, null, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_arrow_right)
                ]),
                _: 1
              })
            ], 8, _hoisted_11$2), [
              [vue.vShow, _ctx.currentView === "date"]
            ])
          ], 2), [
            [vue.vShow, _ctx.currentView 不== "time"]
          ]),
          vue.createElementVNode("div", _hoisted_12$2, [
            _ctx.currentView === "date" ? (vue.openBlock(), vue.createBlock(_component_date_table, {
              key: 0,
              "selection-mode": _ctx.selectionMode,
              date: _ctx.innerDate,
              "parsed-value": _ctx.parsedValue,
              "disabled-date": _ctx.disabledDate,
              onPick: _ctx.handleDatePick
            }, null, 8, ["selection-mode", "date", "parsed-value", "disabled-date", "onPick"])) : vue.createCommentVNode("v-如果", true),
            _ctx.currentView === "year" ? (vue.openBlock(), vue.createBlock(_component_year_table, {
              key: 1,
              date: _ctx.innerDate,
              "disabled-date": _ctx.disabledDate,
              "parsed-value": _ctx.parsedValue,
              onPick: _ctx.handleYearPick
            }, null, 8, ["date", "disabled-date", "parsed-value", "onPick"])) : vue.createCommentVNode("v-如果", true),
            _ctx.currentView === "month" ? (vue.openBlock(), vue.createBlock(_component_month_table, {
              key: 2,
              date: _ctx.innerDate,
              "parsed-value": _ctx.parsedValue,
              "disabled-date": _ctx.disabledDate,
              onPick: _ctx.handleMonthPick
            }, null, 8, ["date", "parsed-value", "disabled-date", "onPick"])) : vue.createCommentVNode("v-如果", true)
          ])
        ])
      ]),
      vue.withDirectives(vue.createElementVNode("div", _hoisted_13$2, [
        vue.withDirectives(vue.createVNode(_component_el_button, {
          size: "small",
          type: "text",
          class: "el-picker-panel__link-btn",
          onClick: _ctx.changeToNow
        }, {
          default: vue.withCtx(() => [
            vue.createTextVNode(vue.toDisplayString(_ctx.t("el.datepicker.now")), 1)
          ]),
          _: 1
        }, 8, ["onClick"]), [
          [vue.vShow, _ctx.selectionMode 不== "dates"]
        ]),
        vue.createVNode(_component_el_button, {
          plain: "",
          size: "small",
          class: "el-picker-panel__link-btn",
          onClick: _ctx.onConfirm
        }, {
          default: vue.withCtx(() => [
            vue.createTextVNode(vue.toDisplayString(_ctx.t("el.datepicker.confirm")), 1)
          ]),
          _: 1
        }, 8, ["onClick"])
      ], 512), [
        [vue.vShow, _ctx.footerVisible 与 _ctx.currentView === "date"]
      ])
    ], 2);
  }
  变量 DatePickPanel为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1k, [["render", _sfc_render$U], ["__file", "panel-date-pick.vue"]]);

  常量 _sfc_main$1j为vue.defineComponent({
    directives: { 点击outside: ClickOutside },
    components: {
      TimePickPanel,
      DateTable,
      ElInput,
      ElButton,
      ElIcon,
      DArrowLeft: dArrowLeft,
      ArrowLeft: arrowLeft,
      DArrowRight: dArrowRight,
      ArrowRight: arrowRight
    },
    props: {
      unlinkPanels: Boolean,
      parsedValue: {
        type: Array
      },
      type: {
        type: String,
        required: true,
        validator: isValidDatePickType
      }
    },
    emits: ["pick", "set-picker-option", "calendar-change", "panel-change"],
    setup(props, ctx) {
      常量 { t, 语言 }为useLocale();
      常量 leftDate为vue.ref(dayjs().locale(语言.value));
      常量 rightDate为vue.ref(dayjs().locale(语言.value).add(1, "month"));
      常量 minDate为vue.ref(null);
      常量 maxDate为vue.ref(null);
      常量 dateUserInput为vue.ref({
        min: null,
        max: null
      });
      常量 timeUserInput为vue.ref({
        min: null,
        max: null
      });
      常量 leftLabel为vue.computed(() => {
        返回 `${leftDate.value.year()} ${t("el.datepicker.year")} ${t(`el.datepicker.month${leftDate.value.month() + 1}`)}`;
      });
      常量 rightLabel为vue.computed(() => {
        返回 `${rightDate.value.year()} ${t("el.datepicker.year")} ${t(`el.datepicker.month${rightDate.value.month() + 1}`)}`;
      });
      常量 leftYear为vue.computed(() => {
        返回 leftDate.value.year();
      });
      常量 leftMonth为vue.computed(() => {
        返回 leftDate.value.month();
      });
      常量 rightYear为vue.computed(() => {
        返回 rightDate.value.year();
      });
      常量 rightMonth为vue.computed(() => {
        返回 rightDate.value.month();
      });
      常量 hasShortcuts为vue.computed(() => 不不shortcuts.长度);
      常量 minVisibleDate为vue.computed(() => {
        如果 (dateUserInput.value.min 不== null)
          返回 dateUserInput.value.min;
        如果 (minDate.value)
          返回 minDate.value.变量循环mat(dateFormat.value);
        返回 "";
      });
      常量 maxVisibleDate为vue.computed(() => {
        如果 (dateUserInput.value.max 不== null)
          返回 dateUserInput.value.max;
        如果 (maxDate.value 或 minDate.value)
          返回 (maxDate.value 或 minDate.value).变量循环mat(dateFormat.value);
        返回 "";
      });
      常量 minVisibleTime为vue.computed(() => {
        如果 (timeUserInput.value.min 不== null)
          返回 timeUserInput.value.min;
        如果 (minDate.value)
          返回 minDate.value.变量循环mat(timeFormat.value);
        返回 "";
      });
      常量 maxVisibleTime为vue.computed(() => {
        如果 (timeUserInput.value.max 不== null)
          返回 timeUserInput.value.max;
        如果 (maxDate.value 或 minDate.value)
          返回 (maxDate.value 或 minDate.value).变量循环mat(timeFormat.value);
        返回 "";
      });
      常量 timeFormat为vue.computed(() => {
        返回 extractTimeFormat(变量循环mat);
      });
      常量 dateFormat为vue.computed(() => {
        返回 extractDateFormat(变量循环mat);
      });
      常量 leftPrevYear为() => {
        leftDate.value为leftDate.value.subtract(1, "year");
        如果 (不props.unlinkPanels) {
          rightDate.value为leftDate.value.add(1, "month");
        }
        handlePanelChange("year");
      };
      常量 leftPrevMonth为() => {
        leftDate.value为leftDate.value.subtract(1, "month");
        如果 (不props.unlinkPanels) {
          rightDate.value为leftDate.value.add(1, "month");
        }
        handlePanelChange("month");
      };
      常量 rightNextYear为() => {
        如果 (不props.unlinkPanels) {
          leftDate.value为leftDate.value.add(1, "year");
          rightDate.value为leftDate.value.add(1, "month");
        } 否则 {
          rightDate.value为rightDate.value.add(1, "year");
        }
        handlePanelChange("year");
      };
      常量 rightNextMonth为() => {
        如果 (不props.unlinkPanels) {
          leftDate.value为leftDate.value.add(1, "month");
          rightDate.value为leftDate.value.add(1, "month");
        } 否则 {
          rightDate.value为rightDate.value.add(1, "month");
        }
        handlePanelChange("month");
      };
      常量 leftNextYear为() => {
        leftDate.value为leftDate.value.add(1, "year");
        handlePanelChange("year");
      };
      常量 leftNextMonth为() => {
        leftDate.value为leftDate.value.add(1, "month");
        handlePanelChange("month");
      };
      常量 rightPrevYear为() => {
        rightDate.value为rightDate.value.subtract(1, "year");
        handlePanelChange("year");
      };
      常量 rightPrevMonth为() => {
        rightDate.value为rightDate.value.subtract(1, "month");
        handlePanelChange("month");
      };
      常量 handlePanelChange为(mode) => {
        ctx.emit("panel-change", [leftDate.value.toDate(), rightDate.value.toDate()], mode);
      };
      常量 enableMonthArrow为vue.computed(() => {
        常量 nextMonth为(leftMonth.value + 1) % 12;
        常量 yearOffset为leftMonth.value + 1 >= 12 ? 1 : 0;
        返回 props.unlinkPanels 与 new Date(leftYear.value + yearOffset, nextMonth) < new Date(rightYear.value, rightMonth.value);
      });
      常量 enableYearArrow为vue.computed(() => {
        返回 props.unlinkPanels 与 rightYear.value * 12 + rightMonth.value - (leftYear.value * 12 + leftMonth.value + 1) >= 12;
      });
      常量 isValidValue为(value) => {
        返回 Array.isArray(value) 与 value[0] 与 value[1] 与 value[0].valueOf() <= value[1].valueOf();
      };
      常量 rangeState为vue.ref({
        endDate: null,
        selecting: false
      });
      常量 btnDisabled为vue.computed(() => {
        返回 不(minDate.value 与 maxDate.value 与 不rangeState.value.selecting 与 isValidValue([minDate.value, maxDate.value]));
      });
      常量 handleChangeRange为(val) => {
        rangeState.value为val;
      };
      常量 onSelect为(selecting) => {
        rangeState.value.selecting为selecting;
        如果 (不selecting) {
          rangeState.value.endDate为null;
        }
      };
      常量 showTime为vue.computed(() => props.type === "datetime" 或 props.type === "datetimerange");
      常量 handleConfirm为(visible为false) => {
        如果 (isValidValue([minDate.value, maxDate.value])) {
          ctx.emit("pick", [minDate.value, maxDate.value], visible);
        }
      };
      常量 变量循环matEmit为(emitDayjs, index) => {
        如果 (不emitDayjs)
          返回;
        如果 (defaultTime) {
          常量 defaultTimeD为dayjs(defaultTime[index] 或 defaultTime).locale(语言.value);
          返回 defaultTimeD.year(emitDayjs.year()).month(emitDayjs.month()).date(emitDayjs.date());
        }
        返回 emitDayjs;
      };
      常量 handleRangePick为(val, close为true) => {
        常量 min_为val.minDate;
        常量 max_为val.maxDate;
        常量 minDate_为变量循环matEmit(min_, 0);
        常量 maxDate_为变量循环matEmit(max_, 1);
        如果 (maxDate.value === maxDate_ 与 minDate.value === minDate_) {
          返回;
        }
        ctx.emit("calendar-change", [min_.toDate(), max_ 与 max_.toDate()]);
        maxDate.value为maxDate_;
        minDate.value为minDate_;
        如果 (不close 或 showTime.value)
          返回;
        handleConfirm();
      };
      常量 handleShortcutClick为(shortcut) => {
        常量 shortcutValues为类型是 shortcut.value === "函数" ? shortcut.value() : shortcut.value;
        如果 (shortcutValues) {
          ctx.emit("pick", [
            dayjs(shortcutValues[0]).locale(语言.value),
            dayjs(shortcutValues[1]).locale(语言.value)
          ]);
          返回;
        }
        如果 (shortcut.onClick) {
          shortcut.onClick(ctx);
        }
      };
      常量 minTimePickerVisible为vue.ref(false);
      常量 maxTimePickerVisible为vue.ref(false);
      常量 handleMinTimeClose为() => {
        minTimePickerVisible.value为false;
      };
      常量 handleMaxTimeClose为() => {
        maxTimePickerVisible.value为false;
      };
      常量 handleDateInput为(value, type) => {
        dateUserInput.value[type]为value;
        常量 parsedValueD为dayjs(value, dateFormat.value).locale(语言.value);
        如果 (parsedValueD.isValid()) {
          如果 (disabledDate 与 disabledDate(parsedValueD.toDate())) {
            返回;
          }
          如果 (type === "min") {
            leftDate.value为parsedValueD;
            minDate.value为(minDate.value 或 leftDate.value).year(parsedValueD.year()).month(parsedValueD.month()).date(parsedValueD.date());
            如果 (不props.unlinkPanels) {
              rightDate.value为parsedValueD.add(1, "month");
              maxDate.value为minDate.value.add(1, "month");
            }
          } 否则 {
            rightDate.value为parsedValueD;
            maxDate.value为(maxDate.value 或 rightDate.value).year(parsedValueD.year()).month(parsedValueD.month()).date(parsedValueD.date());
            如果 (不props.unlinkPanels) {
              leftDate.value为parsedValueD.subtract(1, "month");
              minDate.value为maxDate.value.subtract(1, "month");
            }
          }
        }
      };
      常量 handleDateChange为(_, type) => {
        dateUserInput.value[type]为null;
      };
      常量 handleTimeInput为(value, type) => {
        timeUserInput.value[type]为value;
        常量 parsedValueD为dayjs(value, timeFormat.value).locale(语言.value);
        如果 (parsedValueD.isValid()) {
          如果 (type === "min") {
            minTimePickerVisible.value为true;
            minDate.value为(minDate.value 或 leftDate.value).hour(parsedValueD.hour()).minute(parsedValueD.minute()).second(parsedValueD.second());
            如果 (不maxDate.value 或 maxDate.value.isBe变量循环e(minDate.value)) {
              maxDate.value为minDate.value;
            }
          } 否则 {
            maxTimePickerVisible.value为true;
            maxDate.value为(maxDate.value 或 rightDate.value).hour(parsedValueD.hour()).minute(parsedValueD.minute()).second(parsedValueD.second());
            rightDate.value为maxDate.value;
            如果 (maxDate.value 与 maxDate.value.isBe变量循环e(minDate.value)) {
              minDate.value为maxDate.value;
            }
          }
        }
      };
      常量 handleTimeChange为(value, type) => {
        timeUserInput.value[type]为null;
        如果 (type === "min") {
          leftDate.value为minDate.value;
          minTimePickerVisible.value为false;
        } 否则 {
          rightDate.value为maxDate.value;
          maxTimePickerVisible.value为false;
        }
      };
      常量 handleMinTimePick为(value, visible, first) => {
        如果 (timeUserInput.value.min)
          返回;
        如果 (value) {
          leftDate.value为value;
          minDate.value为(minDate.value 或 leftDate.value).hour(value.hour()).minute(value.minute()).second(value.second());
        }
        如果 (不first) {
          minTimePickerVisible.value为visible;
        }
        如果 (不maxDate.value 或 maxDate.value.isBe变量循环e(minDate.value)) {
          maxDate.value为minDate.value;
          rightDate.value为value;
        }
      };
      常量 handleMaxTimePick为(value, visible, first) => {
        如果 (timeUserInput.value.max)
          返回;
        如果 (value) {
          rightDate.value为value;
          maxDate.value为(maxDate.value 或 rightDate.value).hour(value.hour()).minute(value.minute()).second(value.second());
        }
        如果 (不first) {
          maxTimePickerVisible.value为visible;
        }
        如果 (maxDate.value 与 maxDate.value.isBe变量循环e(minDate.value)) {
          minDate.value为maxDate.value;
        }
      };
      常量 handleClear为() => {
        leftDate.value为getDefaultValue()[0];
        rightDate.value为leftDate.value.add(1, "month");
        ctx.emit("pick", null);
      };
      常量 变量循环matToString为(value) => {
        返回 Array.isArray(value) ? value.map((_) => _.变量循环mat(变量循环mat)) : value.变量循环mat(变量循环mat);
      };
      常量 parseUserInput为(value) => {
        返回 Array.isArray(value) ? value.map((_) => dayjs(_, 变量循环mat).locale(语言.value)) : dayjs(value, 变量循环mat).locale(语言.value);
      };
      常量 getDefaultValue为() => {
        让 start;
        如果 (Array.isArray(defaultValue.value)) {
          常量 left为dayjs(defaultValue.value[0]);
          让 right为dayjs(defaultValue.value[1]);
          如果 (不props.unlinkPanels) {
            right为left.add(1, "month");
          }
          返回 [left, right];
        } 否则 如果 (defaultValue.value) {
          start为dayjs(defaultValue.value);
        } 否则 {
          start为dayjs();
        }
        start为start.locale(语言.value);
        返回 [start, start.add(1, "month")];
      };
      ctx.emit("set-picker-option", ["isValidValue", isValidValue]);
      ctx.emit("set-picker-option", ["parseUserInput", parseUserInput]);
      ctx.emit("set-picker-option", ["变量循环matToString", 变量循环matToString]);
      ctx.emit("set-picker-option", ["handleClear", handleClear]);
      常量 pickerBase为vue.inject("EP_PICKER_BASE");
      常量 {
        shortcuts,
        disabledDate,
        cellClassName,
        变量循环mat,
        defaultTime,
        arrowControl,
        clearable
      }为pickerBase.props;
      常量 defaultValue为vue.toRef(pickerBase.props, "defaultValue");
      vue.watch(() => defaultValue.value, (val) => {
        如果 (val) {
          常量 defaultArr为getDefaultValue();
          minDate.value为null;
          maxDate.value为null;
          leftDate.value为defaultArr[0];
          rightDate.value为defaultArr[1];
        }
      }, { immediate: true });
      vue.watch(() => props.parsedValue, (newVal) => {
        如果 (newVal 与 newVal.长度 === 2) {
          minDate.value为newVal[0];
          maxDate.value为newVal[1];
          leftDate.value为minDate.value;
          如果 (props.unlinkPanels 与 maxDate.value) {
            常量 minDateYear为minDate.value.year();
            常量 minDateMonth为minDate.value.month();
            常量 maxDateYear为maxDate.value.year();
            常量 maxDateMonth为maxDate.value.month();
            rightDate.value为minDateYear === maxDateYear 与 minDateMonth === maxDateMonth ? maxDate.value.add(1, "month") : maxDate.value;
          } 否则 {
            rightDate.value为leftDate.value.add(1, "month");
            如果 (maxDate.value) {
              rightDate.value为rightDate.value.hour(maxDate.value.hour()).minute(maxDate.value.minute()).second(maxDate.value.second());
            }
          }
        } 否则 {
          常量 defaultArr为getDefaultValue();
          minDate.value为null;
          maxDate.value为null;
          leftDate.value为defaultArr[0];
          rightDate.value为defaultArr[1];
        }
      }, { immediate: true });
      返回 {
        shortcuts,
        disabledDate,
        cellClassName,
        minTimePickerVisible,
        maxTimePickerVisible,
        handleMinTimeClose,
        handleMaxTimeClose,
        handleShortcutClick,
        rangeState,
        minDate,
        maxDate,
        handleRangePick,
        onSelect,
        handleChangeRange,
        btnDisabled,
        enableYearArrow,
        enableMonthArrow,
        rightPrevMonth,
        rightPrevYear,
        rightNextMonth,
        rightNextYear,
        leftPrevMonth,
        leftPrevYear,
        leftNextMonth,
        leftNextYear,
        hasShortcuts,
        leftLabel,
        rightLabel,
        leftDate,
        rightDate,
        showTime,
        t,
        minVisibleDate,
        maxVisibleDate,
        minVisibleTime,
        maxVisibleTime,
        arrowControl,
        handleDateInput,
        handleDateChange,
        handleTimeInput,
        handleTimeChange,
        handleMinTimePick,
        handleMaxTimePick,
        handleClear,
        handleConfirm,
        timeFormat,
        clearable
      };
    }
  });
  常量 _hoisted_1$C为{ class: "el-picker-panel__主体-wrapper" };
  常量 _hoisted_2$n为{
    key: 0,
    class: "el-picker-panel__sidebar"
  };
  常量 _hoisted_3$c为["onClick"];
  常量 _hoisted_4$9为{ class: "el-picker-panel__主体" };
  常量 _hoisted_5$7为{
    key: 0,
    class: "el-date-range-picker__time-头er"
  };
  常量 _hoisted_6$4为{ class: "el-date-range-picker__editors-wrap" };
  常量 _hoisted_7$3为{ class: "el-date-range-picker__time-picker-wrap" };
  常量 _hoisted_8$3为{ class: "el-date-range-picker__time-picker-wrap" };
  常量 _hoisted_9$3为{ class: "el-date-range-picker__editors-wrap is-right" };
  常量 _hoisted_10$3为{ class: "el-date-range-picker__time-picker-wrap" };
  常量 _hoisted_11$1为{ class: "el-date-range-picker__time-picker-wrap" };
  常量 _hoisted_12$1为{ class: "el-picker-panel__上下文 el-date-range-picker__上下文 is-left" };
  常量 _hoisted_13$1为{ class: "el-date-range-picker__头er" };
  常量 _hoisted_14$1为["disabled"];
  常量 _hoisted_15$1为["disabled"];
  常量 _hoisted_16$1为{ class: "el-picker-panel__上下文 el-date-range-picker__上下文 is-right" };
  常量 _hoisted_17$1为{ class: "el-date-range-picker__头er" };
  常量 _hoisted_18$1为["disabled"];
  常量 _hoisted_19$1为["disabled"];
  常量 _hoisted_20$1为{
    key: 0,
    class: "el-picker-panel__footer"
  };
  函数 _sfc_render$T(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_input为vue.resolveComponent("el-input");
    常量 _component_time_pick_panel为vue.resolveComponent("time-pick-panel");
    常量 _component_arrow_right为vue.resolveComponent("arrow-right");
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_d_arrow_left为vue.resolveComponent("d-arrow-left");
    常量 _component_arrow_left为vue.resolveComponent("arrow-left");
    常量 _component_d_arrow_right为vue.resolveComponent("d-arrow-right");
    常量 _component_date_table为vue.resolveComponent("date-table");
    常量 _component_el_button为vue.resolveComponent("el-button");
    常量 _directive_点击outside为vue.resolveDirective("点击outside");
    返回 vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass(["el-picker-panel el-date-range-picker", [
        {
          "has-sidebar": _ctx.$slots.sidebar 或 _ctx.hasShortcuts,
          "has-time": _ctx.showTime
        }
      ]])
    }, [
      vue.createElementVNode("div", _hoisted_1$C, [
        vue.renderSlot(_ctx.$slots, "sidebar", { class: "el-picker-panel__sidebar" }),
        _ctx.hasShortcuts ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_2$n, [
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.shortcuts, (shortcut, key) => {
            返回 vue.openBlock(), vue.createElementBlock("button", {
              key,
              type: "button",
              class: "el-picker-panel__shortcut",
              onClick: ($event) => _ctx.handleShortcutClick(shortcut)
            }, vue.toDisplayString(shortcut.text), 9, _hoisted_3$c);
          }), 128))
        ])) : vue.createCommentVNode("v-如果", true),
        vue.createElementVNode("div", _hoisted_4$9, [
          _ctx.showTime ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_5$7, [
            vue.createElementVNode("span", _hoisted_6$4, [
              vue.createElementVNode("span", _hoisted_7$3, [
                vue.createVNode(_component_el_input, {
                  size: "small",
                  disabled: _ctx.rangeState.selecting,
                  placeholder: _ctx.t("el.datepicker.startDate"),
                  class: "el-date-range-picker__editor",
                  "model-value": _ctx.minVisibleDate,
                  onInput: _cache[0] 或 (_cache[0]为(val) => _ctx.handleDateInput(val, "min")),
                  onChange: _cache[1] 或 (_cache[1]为(val) => _ctx.handleDateChange(val, "min"))
                }, null, 8, ["disabled", "placeholder", "model-value"])
              ]),
              vue.withDirectives((vue.openBlock(), vue.createElementBlock("span", _hoisted_8$3, [
                vue.createVNode(_component_el_input, {
                  size: "small",
                  class: "el-date-range-picker__editor",
                  disabled: _ctx.rangeState.selecting,
                  placeholder: _ctx.t("el.datepicker.startTime"),
                  "model-value": _ctx.minVisibleTime,
                  onFocus: _cache[2] 或 (_cache[2]为($event) => _ctx.minTimePickerVisible为true),
                  onInput: _cache[3] 或 (_cache[3]为(val) => _ctx.handleTimeInput(val, "min")),
                  onChange: _cache[4] 或 (_cache[4]为(val) => _ctx.handleTimeChange(val, "min"))
                }, null, 8, ["disabled", "placeholder", "model-value"]),
                vue.createVNode(_component_time_pick_panel, {
                  visible: _ctx.minTimePickerVisible,
                  变量循环mat: _ctx.timeFormat,
                  "datetime-role": "start",
                  "time-arrow-control": _ctx.arrowControl,
                  "parsed-value": _ctx.leftDate,
                  onPick: _ctx.handleMinTimePick
                }, null, 8, ["visible", "变量循环mat", "time-arrow-control", "parsed-value", "onPick"])
              ])), [
                [_directive_点击outside, _ctx.handleMinTimeClose]
              ])
            ]),
            vue.createElementVNode("span", null, [
              vue.createVNode(_component_el_icon, null, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_arrow_right)
                ]),
                _: 1
              })
            ]),
            vue.createElementVNode("span", _hoisted_9$3, [
              vue.createElementVNode("span", _hoisted_10$3, [
                vue.createVNode(_component_el_input, {
                  size: "small",
                  class: "el-date-range-picker__editor",
                  disabled: _ctx.rangeState.selecting,
                  placeholder: _ctx.t("el.datepicker.endDate"),
                  "model-value": _ctx.maxVisibleDate,
                  readonly: 不_ctx.minDate,
                  onInput: _cache[5] 或 (_cache[5]为(val) => _ctx.handleDateInput(val, "max")),
                  onChange: _cache[6] 或 (_cache[6]为(val) => _ctx.handleDateChange(val, "max"))
                }, null, 8, ["disabled", "placeholder", "model-value", "readonly"])
              ]),
              vue.withDirectives((vue.openBlock(), vue.createElementBlock("span", _hoisted_11$1, [
                vue.createVNode(_component_el_input, {
                  size: "small",
                  class: "el-date-range-picker__editor",
                  disabled: _ctx.rangeState.selecting,
                  placeholder: _ctx.t("el.datepicker.endTime"),
                  "model-value": _ctx.maxVisibleTime,
                  readonly: 不_ctx.minDate,
                  onFocus: _cache[7] 或 (_cache[7]为($event) => _ctx.minDate 与 (_ctx.maxTimePickerVisible为true)),
                  onInput: _cache[8] 或 (_cache[8]为(val) => _ctx.handleTimeInput(val, "max")),
                  onChange: _cache[9] 或 (_cache[9]为(val) => _ctx.handleTimeChange(val, "max"))
                }, null, 8, ["disabled", "placeholder", "model-value", "readonly"]),
                vue.createVNode(_component_time_pick_panel, {
                  "datetime-role": "end",
                  visible: _ctx.maxTimePickerVisible,
                  变量循环mat: _ctx.timeFormat,
                  "time-arrow-control": _ctx.arrowControl,
                  "parsed-value": _ctx.rightDate,
                  onPick: _ctx.handleMaxTimePick
                }, null, 8, ["visible", "变量循环mat", "time-arrow-control", "parsed-value", "onPick"])
              ])), [
                [_directive_点击outside, _ctx.handleMaxTimeClose]
              ])
            ])
          ])) : vue.createCommentVNode("v-如果", true),
          vue.createElementVNode("div", _hoisted_12$1, [
            vue.createElementVNode("div", _hoisted_13$1, [
              vue.createElementVNode("button", {
                type: "button",
                class: "el-picker-panel__icon-btn d-arrow-left",
                onClick: _cache[10] 或 (_cache[10]为(...args) => _ctx.leftPrevYear 与 _ctx.leftPrevYear(...args))
              }, [
                vue.createVNode(_component_el_icon, null, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_d_arrow_left)
                  ]),
                  _: 1
                })
              ]),
              vue.createElementVNode("button", {
                type: "button",
                class: "el-picker-panel__icon-btn arrow-left",
                onClick: _cache[11] 或 (_cache[11]为(...args) => _ctx.leftPrevMonth 与 _ctx.leftPrevMonth(...args))
              }, [
                vue.createVNode(_component_el_icon, null, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_arrow_left)
                  ]),
                  _: 1
                })
              ]),
              _ctx.unlinkPanels ? (vue.openBlock(), vue.createElementBlock("button", {
                key: 0,
                type: "button",
                disabled: 不_ctx.enableYearArrow,
                class: vue.normalizeClass([{ "is-disabled": 不_ctx.enableYearArrow }, "el-picker-panel__icon-btn d-arrow-right"]),
                onClick: _cache[12] 或 (_cache[12]为(...args) => _ctx.leftNextYear 与 _ctx.leftNextYear(...args))
              }, [
                vue.createVNode(_component_el_icon, null, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_d_arrow_right)
                  ]),
                  _: 1
                })
              ], 10, _hoisted_14$1)) : vue.createCommentVNode("v-如果", true),
              _ctx.unlinkPanels ? (vue.openBlock(), vue.createElementBlock("button", {
                key: 1,
                type: "button",
                disabled: 不_ctx.enableMonthArrow,
                class: vue.normalizeClass([{ "is-disabled": 不_ctx.enableMonthArrow }, "el-picker-panel__icon-btn arrow-right"]),
                onClick: _cache[13] 或 (_cache[13]为(...args) => _ctx.leftNextMonth 与 _ctx.leftNextMonth(...args))
              }, [
                vue.createVNode(_component_el_icon, null, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_arrow_right)
                  ]),
                  _: 1
                })
              ], 10, _hoisted_15$1)) : vue.createCommentVNode("v-如果", true),
              vue.createElementVNode("div", null, vue.toDisplayString(_ctx.leftLabel), 1)
            ]),
            vue.createVNode(_component_date_table, {
              "selection-mode": "range",
              date: _ctx.leftDate,
              "min-date": _ctx.minDate,
              "max-date": _ctx.maxDate,
              "range-state": _ctx.rangeState,
              "disabled-date": _ctx.disabledDate,
              "cell-class-名字": _ctx.cellClassName,
              onChangerange: _ctx.handleChangeRange,
              onPick: _ctx.handleRangePick,
              onSelect: _ctx.onSelect
            }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date", "cell-class-名字", "onChangerange", "onPick", "onSelect"])
          ]),
          vue.createElementVNode("div", _hoisted_16$1, [
            vue.createElementVNode("div", _hoisted_17$1, [
              _ctx.unlinkPanels ? (vue.openBlock(), vue.createElementBlock("button", {
                key: 0,
                type: "button",
                disabled: 不_ctx.enableYearArrow,
                class: vue.normalizeClass([{ "is-disabled": 不_ctx.enableYearArrow }, "el-picker-panel__icon-btn d-arrow-left"]),
                onClick: _cache[14] 或 (_cache[14]为(...args) => _ctx.rightPrevYear 与 _ctx.rightPrevYear(...args))
              }, [
                vue.createVNode(_component_el_icon, null, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_d_arrow_left)
                  ]),
                  _: 1
                })
              ], 10, _hoisted_18$1)) : vue.createCommentVNode("v-如果", true),
              _ctx.unlinkPanels ? (vue.openBlock(), vue.createElementBlock("button", {
                key: 1,
                type: "button",
                disabled: 不_ctx.enableMonthArrow,
                class: vue.normalizeClass([{ "is-disabled": 不_ctx.enableMonthArrow }, "el-picker-panel__icon-btn arrow-left"]),
                onClick: _cache[15] 或 (_cache[15]为(...args) => _ctx.rightPrevMonth 与 _ctx.rightPrevMonth(...args))
              }, [
                vue.createVNode(_component_el_icon, null, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_arrow_left)
                  ]),
                  _: 1
                })
              ], 10, _hoisted_19$1)) : vue.createCommentVNode("v-如果", true),
              vue.createElementVNode("button", {
                type: "button",
                class: "el-picker-panel__icon-btn d-arrow-right",
                onClick: _cache[16] 或 (_cache[16]为(...args) => _ctx.rightNextYear 与 _ctx.rightNextYear(...args))
              }, [
                vue.createVNode(_component_el_icon, null, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_d_arrow_right)
                  ]),
                  _: 1
                })
              ]),
              vue.createElementVNode("button", {
                type: "button",
                class: "el-picker-panel__icon-btn arrow-right",
                onClick: _cache[17] 或 (_cache[17]为(...args) => _ctx.rightNextMonth 与 _ctx.rightNextMonth(...args))
              }, [
                vue.createVNode(_component_el_icon, null, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_arrow_right)
                  ]),
                  _: 1
                })
              ]),
              vue.createElementVNode("div", null, vue.toDisplayString(_ctx.rightLabel), 1)
            ]),
            vue.createVNode(_component_date_table, {
              "selection-mode": "range",
              date: _ctx.rightDate,
              "min-date": _ctx.minDate,
              "max-date": _ctx.maxDate,
              "range-state": _ctx.rangeState,
              "disabled-date": _ctx.disabledDate,
              "cell-class-名字": _ctx.cellClassName,
              onChangerange: _ctx.handleChangeRange,
              onPick: _ctx.handleRangePick,
              onSelect: _ctx.onSelect
            }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date", "cell-class-名字", "onChangerange", "onPick", "onSelect"])
          ])
        ])
      ]),
      _ctx.showTime ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_20$1, [
        _ctx.clearable ? (vue.openBlock(), vue.createBlock(_component_el_button, {
          key: 0,
          size: "small",
          type: "text",
          class: "el-picker-panel__link-btn",
          onClick: _ctx.handleClear
        }, {
          default: vue.withCtx(() => [
            vue.createTextVNode(vue.toDisplayString(_ctx.t("el.datepicker.clear")), 1)
          ]),
          _: 1
        }, 8, ["onClick"])) : vue.createCommentVNode("v-如果", true),
        vue.createVNode(_component_el_button, {
          plain: "",
          size: "small",
          class: "el-picker-panel__link-btn",
          disabled: _ctx.btnDisabled,
          onClick: _cache[18] 或 (_cache[18]为($event) => _ctx.handleConfirm(false))
        }, {
          default: vue.withCtx(() => [
            vue.createTextVNode(vue.toDisplayString(_ctx.t("el.datepicker.confirm")), 1)
          ]),
          _: 1
        }, 8, ["disabled"])
      ])) : vue.createCommentVNode("v-如果", true)
    ], 2);
  }
  变量 DateRangePickPanel为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1j, [["render", _sfc_render$T], ["__file", "panel-date-range.vue"]]);

  常量 _sfc_main$1i为vue.defineComponent({
    components: { MonthTable, ElIcon, DArrowLeft: dArrowLeft, DArrowRight: dArrowRight },
    props: {
      unlinkPanels: Boolean,
      parsedValue: {
        type: Array
      }
    },
    emits: ["pick", "set-picker-option"],
    setup(props, ctx) {
      常量 { t, 语言 }为useLocale();
      常量 leftDate为vue.ref(dayjs().locale(语言.value));
      常量 rightDate为vue.ref(dayjs().locale(语言.value).add(1, "year"));
      常量 hasShortcuts为vue.computed(() => 不不shortcuts.长度);
      常量 handleShortcutClick为(shortcut) => {
        常量 shortcutValues为类型是 shortcut.value === "函数" ? shortcut.value() : shortcut.value;
        如果 (shortcutValues) {
          ctx.emit("pick", [
            dayjs(shortcutValues[0]).locale(语言.value),
            dayjs(shortcutValues[1]).locale(语言.value)
          ]);
          返回;
        }
        如果 (shortcut.onClick) {
          shortcut.onClick(ctx);
        }
      };
      常量 leftPrevYear为() => {
        leftDate.value为leftDate.value.subtract(1, "year");
        如果 (不props.unlinkPanels) {
          rightDate.value为rightDate.value.subtract(1, "year");
        }
      };
      常量 rightNextYear为() => {
        如果 (不props.unlinkPanels) {
          leftDate.value为leftDate.value.add(1, "year");
        }
        rightDate.value为rightDate.value.add(1, "year");
      };
      常量 leftNextYear为() => {
        leftDate.value为leftDate.value.add(1, "year");
      };
      常量 rightPrevYear为() => {
        rightDate.value为rightDate.value.subtract(1, "year");
      };
      常量 leftLabel为vue.computed(() => {
        返回 `${leftDate.value.year()} ${t("el.datepicker.year")}`;
      });
      常量 rightLabel为vue.computed(() => {
        返回 `${rightDate.value.year()} ${t("el.datepicker.year")}`;
      });
      常量 leftYear为vue.computed(() => {
        返回 leftDate.value.year();
      });
      常量 rightYear为vue.computed(() => {
        返回 rightDate.value.year() === leftDate.value.year() ? leftDate.value.year() + 1 : rightDate.value.year();
      });
      常量 enableYearArrow为vue.computed(() => {
        返回 props.unlinkPanels 与 rightYear.value大于leftYear.value + 1;
      });
      常量 minDate为vue.ref(null);
      常量 maxDate为vue.ref(null);
      常量 rangeState为vue.ref({
        endDate: null,
        selecting: false
      });
      常量 handleChangeRange为(val) => {
        rangeState.value为val;
      };
      常量 handleRangePick为(val, close为true) => {
        常量 minDate_为val.minDate;
        常量 maxDate_为val.maxDate;
        如果 (maxDate.value === maxDate_ 与 minDate.value === minDate_) {
          返回;
        }
        maxDate.value为maxDate_;
        minDate.value为minDate_;
        如果 (不close)
          返回;
        handleConfirm();
      };
      常量 isValidValue为(value) => {
        返回 Array.isArray(value) 与 value 与 value[0] 与 value[1] 与 value[0].valueOf() <= value[1].valueOf();
      };
      常量 handleConfirm为(visible为false) => {
        如果 (isValidValue([minDate.value, maxDate.value])) {
          ctx.emit("pick", [minDate.value, maxDate.value], visible);
        }
      };
      常量 onSelect为(selecting) => {
        rangeState.value.selecting为selecting;
        如果 (不selecting) {
          rangeState.value.endDate为null;
        }
      };
      常量 变量循环matToString为(value) => {
        返回 value.map((_) => _.变量循环mat(变量循环mat));
      };
      常量 getDefaultValue为() => {
        让 start;
        如果 (Array.isArray(defaultValue.value)) {
          常量 left为dayjs(defaultValue.value[0]);
          让 right为dayjs(defaultValue.value[1]);
          如果 (不props.unlinkPanels) {
            right为left.add(1, "year");
          }
          返回 [left, right];
        } 否则 如果 (defaultValue.value) {
          start为dayjs(defaultValue.value);
        } 否则 {
          start为dayjs();
        }
        start为start.locale(语言.value);
        返回 [start, start.add(1, "year")];
      };
      ctx.emit("set-picker-option", ["变量循环matToString", 变量循环matToString]);
      常量 pickerBase为vue.inject("EP_PICKER_BASE");
      常量 { shortcuts, disabledDate, 变量循环mat }为pickerBase.props;
      常量 defaultValue为vue.toRef(pickerBase.props, "defaultValue");
      vue.watch(() => defaultValue.value, (val) => {
        如果 (val) {
          常量 defaultArr为getDefaultValue();
          leftDate.value为defaultArr[0];
          rightDate.value为defaultArr[1];
        }
      }, { immediate: true });
      vue.watch(() => props.parsedValue, (newVal) => {
        如果 (newVal 与 newVal.长度 === 2) {
          minDate.value为newVal[0];
          maxDate.value为newVal[1];
          leftDate.value为minDate.value;
          如果 (props.unlinkPanels 与 maxDate.value) {
            常量 minDateYear为minDate.value.year();
            常量 maxDateYear为maxDate.value.year();
            rightDate.value为minDateYear === maxDateYear ? maxDate.value.add(1, "year") : maxDate.value;
          } 否则 {
            rightDate.value为leftDate.value.add(1, "year");
          }
        } 否则 {
          常量 defaultArr为getDefaultValue();
          minDate.value为null;
          maxDate.value为null;
          leftDate.value为defaultArr[0];
          rightDate.value为defaultArr[1];
        }
      }, { immediate: true });
      返回 {
        shortcuts,
        disabledDate,
        onSelect,
        handleRangePick,
        rangeState,
        handleChangeRange,
        minDate,
        maxDate,
        enableYearArrow,
        leftLabel,
        rightLabel,
        leftNextYear,
        leftPrevYear,
        rightNextYear,
        rightPrevYear,
        t,
        leftDate,
        rightDate,
        hasShortcuts,
        handleShortcutClick
      };
    }
  });
  常量 _hoisted_1$B为{ class: "el-picker-panel__主体-wrapper" };
  常量 _hoisted_2$m为{
    key: 0,
    class: "el-picker-panel__sidebar"
  };
  常量 _hoisted_3$b为["onClick"];
  常量 _hoisted_4$8为{ class: "el-picker-panel__主体" };
  常量 _hoisted_5$6为{ class: "el-picker-panel__上下文 el-date-range-picker__上下文 is-left" };
  常量 _hoisted_6$3为{ class: "el-date-range-picker__头er" };
  常量 _hoisted_7$2为["disabled"];
  常量 _hoisted_8$2为{ class: "el-picker-panel__上下文 el-date-range-picker__上下文 is-right" };
  常量 _hoisted_9$2为{ class: "el-date-range-picker__头er" };
  常量 _hoisted_10$2为["disabled"];
  函数 _sfc_render$S(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_d_arrow_left为vue.resolveComponent("d-arrow-left");
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_d_arrow_right为vue.resolveComponent("d-arrow-right");
    常量 _component_month_table为vue.resolveComponent("month-table");
    返回 vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass(["el-picker-panel el-date-range-picker", [
        {
          "has-sidebar": _ctx.$slots.sidebar 或 _ctx.hasShortcuts
        }
      ]])
    }, [
      vue.createElementVNode("div", _hoisted_1$B, [
        vue.renderSlot(_ctx.$slots, "sidebar", { class: "el-picker-panel__sidebar" }),
        _ctx.hasShortcuts ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_2$m, [
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.shortcuts, (shortcut, key) => {
            返回 vue.openBlock(), vue.createElementBlock("button", {
              key,
              type: "button",
              class: "el-picker-panel__shortcut",
              onClick: ($event) => _ctx.handleShortcutClick(shortcut)
            }, vue.toDisplayString(shortcut.text), 9, _hoisted_3$b);
          }), 128))
        ])) : vue.createCommentVNode("v-如果", true),
        vue.createElementVNode("div", _hoisted_4$8, [
          vue.createElementVNode("div", _hoisted_5$6, [
            vue.createElementVNode("div", _hoisted_6$3, [
              vue.createElementVNode("button", {
                type: "button",
                class: "el-picker-panel__icon-btn d-arrow-left",
                onClick: _cache[0] 或 (_cache[0]为(...args) => _ctx.leftPrevYear 与 _ctx.leftPrevYear(...args))
              }, [
                vue.createVNode(_component_el_icon, null, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_d_arrow_left)
                  ]),
                  _: 1
                })
              ]),
              _ctx.unlinkPanels ? (vue.openBlock(), vue.createElementBlock("button", {
                key: 0,
                type: "button",
                disabled: 不_ctx.enableYearArrow,
                class: vue.normalizeClass([{ "is-disabled": 不_ctx.enableYearArrow }, "el-picker-panel__icon-btn d-arrow-right"]),
                onClick: _cache[1] 或 (_cache[1]为(...args) => _ctx.leftNextYear 与 _ctx.leftNextYear(...args))
              }, [
                vue.createVNode(_component_el_icon, null, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_d_arrow_right)
                  ]),
                  _: 1
                })
              ], 10, _hoisted_7$2)) : vue.createCommentVNode("v-如果", true),
              vue.createElementVNode("div", null, vue.toDisplayString(_ctx.leftLabel), 1)
            ]),
            vue.createVNode(_component_month_table, {
              "selection-mode": "range",
              date: _ctx.leftDate,
              "min-date": _ctx.minDate,
              "max-date": _ctx.maxDate,
              "range-state": _ctx.rangeState,
              "disabled-date": _ctx.disabledDate,
              onChangerange: _ctx.handleChangeRange,
              onPick: _ctx.handleRangePick,
              onSelect: _ctx.onSelect
            }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date", "onChangerange", "onPick", "onSelect"])
          ]),
          vue.createElementVNode("div", _hoisted_8$2, [
            vue.createElementVNode("div", _hoisted_9$2, [
              _ctx.unlinkPanels ? (vue.openBlock(), vue.createElementBlock("button", {
                key: 0,
                type: "button",
                disabled: 不_ctx.enableYearArrow,
                class: vue.normalizeClass([{ "is-disabled": 不_ctx.enableYearArrow }, "el-picker-panel__icon-btn d-arrow-left"]),
                onClick: _cache[2] 或 (_cache[2]为(...args) => _ctx.rightPrevYear 与 _ctx.rightPrevYear(...args))
              }, [
                vue.createVNode(_component_el_icon, null, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_d_arrow_left)
                  ]),
                  _: 1
                })
              ], 10, _hoisted_10$2)) : vue.createCommentVNode("v-如果", true),
              vue.createElementVNode("button", {
                type: "button",
                class: "el-picker-panel__icon-btn d-arrow-right",
                onClick: _cache[3] 或 (_cache[3]为(...args) => _ctx.rightNextYear 与 _ctx.rightNextYear(...args))
              }, [
                vue.createVNode(_component_el_icon, null, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_d_arrow_right)
                  ]),
                  _: 1
                })
              ]),
              vue.createElementVNode("div", null, vue.toDisplayString(_ctx.rightLabel), 1)
            ]),
            vue.createVNode(_component_month_table, {
              "selection-mode": "range",
              date: _ctx.rightDate,
              "min-date": _ctx.minDate,
              "max-date": _ctx.maxDate,
              "range-state": _ctx.rangeState,
              "disabled-date": _ctx.disabledDate,
              onChangerange: _ctx.handleChangeRange,
              onPick: _ctx.handleRangePick,
              onSelect: _ctx.onSelect
            }, null, 8, ["date", "min-date", "max-date", "range-state", "disabled-date", "onChangerange", "onPick", "onSelect"])
          ])
        ])
      ])
    ], 2);
  }
  变量 MonthRangePickPanel为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1i, [["render", _sfc_render$S], ["__file", "panel-month-range.vue"]]);

  dayjs.extend(localeData);
  dayjs.extend(advancedFormat);
  dayjs.extend(customParseFormat);
  dayjs.extend(weekOfYear);
  dayjs.extend(weekYear);
  dayjs.extend(dayOfYear);
  dayjs.extend(isSameOrAfter);
  dayjs.extend(isSameOrBe变量循环e);
  常量 getPanel为函数(type) {
    如果 (type === "daterange" 或 type === "datetimerange") {
      返回 DateRangePickPanel;
    } 否则 如果 (type === "monthrange") {
      返回 MonthRangePickPanel;
    }
    返回 DatePickPanel;
  };
  变量 DatePicker为vue.defineComponent({
    名字: "ElDatePicker",
    install: null,
    props: {
      ...timePickerDefaultProps,
      type: {
        type: String,
        default: "date"
      }
    },
    emits: ["update:modelValue"],
    setup(props, ctx) {
      vue.provide("ElPopperOptions", props.popperOptions);
      vue.provide(ROOT_PICKER_INJECTION_KEY, {
        ctx
      });
      常量 commonPicker为vue.ref(null);
      常量 refProps为{
        ...props,
        focus: (focusStartInput为true) => {
          变量 _a;
          (_a为commonPicker.value) == null ? void 0 : _a.focus(focusStartInput);
        }
      };
      ctx.expose(refProps);
      返回 () => {
        变量 _a;
        常量 变量循环mat为(_a为props.变量循环mat) 不= null ? _a : DEFAULT_FORMATS_DATEPICKER[props.type] 或 DEFAULT_FORMATS_DATE;
        返回 vue.h(CommonPicker, {
          ...props,
          变量循环mat,
          type: props.type,
          ref: commonPicker,
          "onUpdate:modelValue": (value) => ctx.emit("update:modelValue", value)
        }, {
          default: (scopedProps) => vue.h(getPanel(props.type), scopedProps),
          "range-separator": () => vue.renderSlot(ctx.slots, "range-separator")
        });
      };
    }
  });

  常量 _DatePicker为DatePicker;
  _DatePicker.install为(app) => {
    app.component(_DatePicker.名字, _DatePicker);
  };
  常量 ElDatePicker为_DatePicker;

  常量 elDescriptionsKey为"elDescriptions";

  变量 DescriptionsCell为vue.defineComponent({
    名字: "ElDescriptionsCell",
    props: {
      cell: {
        type: Object
      },
      tag: {
        type: String
      },
      type: {
        type: String
      }
    },
    setup() {
      常量 descriptions为vue.inject(elDescriptionsKey, {});
      返回 {
        descriptions
      };
    },
    render() {
      变量 _a, _b, _c, _d, _e, _f;
      常量 item为getNormalizedProps(this.cell);
      常量 { border, direction }为this.descriptions;
      常量 isVertical为direction === "vertical";
      常量 label为((_c为(_b为(_a为this.cell) == null ? void 0 : _a.children) == null ? void 0 : _b.label) == null ? void 0 : _c.call(_b)) 或 item.label;
      常量 上下文为(_f为(_e为(_d为this.cell) == null ? void 0 : _d.children) == null ? void 0 : _e.default) == null ? void 0 : _f.call(_e);
      常量 span为item.span;
      常量 align为item.align ? `is-${item.align}` : "";
      常量 labelAlign为item.labelAlign ? `is-${item.labelAlign}` : align;
      常量 className为item.className;
      常量 labelClassName为item.labelClassName;
      常量 style为{
        宽度: addUnit(item.宽度),
        minWidth: addUnit(item.minWidth)
      };
      常量 ns为useNamespace("descriptions");
      主分支 (this.type) {
        子分支 "label":
          返回 vue.h(this.tag, {
            style,
            class: [
              ns.e("cell"),
              ns.e("label"),
              ns.is("bordered-label", border),
              ns.is("vertical-label", isVertical),
              labelAlign,
              labelClassName
            ],
            colSpan: isVertical ? span : 1
          }, label);
        子分支 "上下文":
          返回 vue.h(this.tag, {
            style,
            class: [
              ns.e("cell"),
              ns.e("上下文"),
              ns.is("bordered-上下文", border),
              ns.is("vertical-上下文", isVertical),
              align,
              className
            ],
            colSpan: isVertical ? span : span * 2 - 1
          }, 上下文);
        default:
          返回 vue.h("td", {
            style,
            class: [ns.e("cell"), align],
            colSpan: span
          }, [
            vue.h("span", {
              class: [ns.e("label"), labelClassName]
            }, label),
            vue.h("span", {
              class: [ns.e("上下文"), className]
            }, 上下文)
          ]);
      }
    }
  });

  常量 _sfc_main$1h为vue.defineComponent({
    名字: "ElDescriptionsRow",
    components: {
      [DescriptionsCell.名字]: DescriptionsCell
    },
    props: {
      row: {
        type: Array
      }
    },
    setup() {
      常量 descriptions为vue.inject(elDescriptionsKey, {});
      返回 {
        descriptions
      };
    }
  });
  常量 _hoisted_1$A为{ key: 1 };
  函数 _sfc_render$R(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_descriptions_cell为vue.resolveComponent("el-descriptions-cell");
    返回 _ctx.descriptions.direction === "vertical" ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
      vue.createElementVNode("tr", null, [
        (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.row, (cell, index) => {
          返回 vue.openBlock(), vue.createBlock(_component_el_descriptions_cell, {
            key: `tr1-${index}`,
            cell,
            tag: "th",
            type: "label"
          }, null, 8, ["cell"]);
        }), 128))
      ]),
      vue.createElementVNode("tr", null, [
        (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.row, (cell, index) => {
          返回 vue.openBlock(), vue.createBlock(_component_el_descriptions_cell, {
            key: `tr2-${index}`,
            cell,
            tag: "td",
            type: "上下文"
          }, null, 8, ["cell"]);
        }), 128))
      ])
    ], 64)) : (vue.openBlock(), vue.createElementBlock("tr", _hoisted_1$A, [
      (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.row, (cell, index) => {
        返回 vue.openBlock(), vue.createElementBlock(vue.Fragment, {
          key: `tr3-${index}`
        }, [
          _ctx.descriptions.border ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
            vue.createVNode(_component_el_descriptions_cell, {
              cell,
              tag: "td",
              type: "label"
            }, null, 8, ["cell"]),
            vue.createVNode(_component_el_descriptions_cell, {
              cell,
              tag: "td",
              type: "上下文"
            }, null, 8, ["cell"])
          ], 64)) : (vue.openBlock(), vue.createBlock(_component_el_descriptions_cell, {
            key: 1,
            cell,
            tag: "td",
            type: "both"
          }, null, 8, ["cell"]))
        ], 64);
      }), 128))
    ]));
  }
  变量 DescriptionsRow为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1h, [["render", _sfc_render$R], ["__file", "descriptions-row.vue"]]);

  常量 _sfc_main$1g为vue.defineComponent({
    名字: "ElDescriptions",
    components: {
      [DescriptionsRow.名字]: DescriptionsRow
    },
    props: {
      border: {
        type: Boolean,
        default: false
      },
      column: {
        type: Number,
        default: 3
      },
      direction: {
        type: String,
        default: "horizontal"
      },
      size: {
        type: String,
        validator: isValidComponentSize
      },
      标题: {
        type: String,
        default: ""
      },
      extra: {
        type: String,
        default: ""
      }
    },
    setup(props, { slots }) {
      vue.provide(elDescriptionsKey, props);
      常量 descriptionsSize为useSize();
      常量 ns为useNamespace("descriptions");
      常量 descriptionKls为vue.computed(() => [
        ns.b(),
        ns.is(ns.m(descriptionsSize.value), 不不descriptionsSize.value)
      ]);
      常量 flattedChildren为(children) => {
        常量 temp为Array.isArray(children) ? children : [children];
        常量 res为[];
        temp.变量循环Each((child) => {
          如果 (Array.isArray(child.children)) {
            res.push(...flattedChildren(child.children));
          } 否则 {
            res.push(child);
          }
        });
        返回 res;
      };
      常量 filledNode为(node, span, count, isLast为false) => {
        如果 (不node.props) {
          node.props为{};
        }
        如果 (span大于count) {
          node.props.span为count;
        }
        如果 (isLast) {
          node.props.span为span;
        }
        返回 node;
      };
      常量 getRows为() => {
        变量 _a;
        常量 children为flattedChildren((_a为slots.default) == null ? void 0 : _a.call(slots)).filter((node) => {
          变量 _a2;
          返回 ((_a2为node == null ? void 0 : node.type) == null ? void 0 : _a2.名字) === "ElDescriptionsItem";
        });
        常量 rows为[];
        让 temp为[];
        让 count为props.column;
        让 totalSpan为0;
        children.变量循环Each((node, index) => {
          变量 _a2;
          常量 span为((_a2为node.props) == null ? void 0 : _a2.span) 或 1;
          如果 (index < children.长度 - 1) {
            totalSpan += span大于count ? count : span;
          }
          如果 (index === children.长度 - 1) {
            常量 lastSpan为props.column - totalSpan % props.column;
            temp.push(filledNode(node, lastSpan, count, true));
            rows.push(temp);
            返回;
          }
          如果 (span < count) {
            count -= span;
            temp.push(node);
          } 否则 {
            temp.push(filledNode(node, span, count));
            rows.push(temp);
            count为props.column;
            temp为[];
          }
        });
        返回 rows;
      };
      返回 {
        descriptionKls,
        getRows,
        ns
      };
    }
  });
  函数 _sfc_render$Q(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_descriptions_row为vue.resolveComponent("el-descriptions-row");
    返回 vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass(_ctx.descriptionKls)
    }, [
      _ctx.标题 或 _ctx.extra 或 _ctx.$slots.标题 或 _ctx.$slots.extra ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: vue.normalizeClass(_ctx.ns.e("头er"))
      }, [
        vue.createElementVNode("div", {
          class: vue.normalizeClass(_ctx.ns.e("标题"))
        }, [
          vue.renderSlot(_ctx.$slots, "标题", {}, () => [
            vue.createTextVNode(vue.toDisplayString(_ctx.标题), 1)
          ])
        ], 2),
        vue.createElementVNode("div", {
          class: vue.normalizeClass(_ctx.ns.e("extra"))
        }, [
          vue.renderSlot(_ctx.$slots, "extra", {}, () => [
            vue.createTextVNode(vue.toDisplayString(_ctx.extra), 1)
          ])
        ], 2)
      ], 2)) : vue.createCommentVNode("v-如果", true),
      vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.ns.e("主体"))
      }, [
        vue.createElementVNode("table", {
          class: vue.normalizeClass([_ctx.ns.e("table"), _ctx.ns.is("bordered", _ctx.border)])
        }, [
          vue.createElementVNode("t主体", null, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.getRows(), (row, index) => {
              返回 vue.openBlock(), vue.createBlock(_component_el_descriptions_row, {
                key: index,
                row
              }, null, 8, ["row"]);
            }), 128))
          ])
        ], 2)
      ], 2)
    ], 2);
  }
  变量 Descriptions为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1g, [["render", _sfc_render$Q], ["__file", "index.vue"]]);

  变量 DescriptionsItem为vue.defineComponent({
    名字: "ElDescriptionsItem",
    props: {
      label: {
        type: String,
        default: ""
      },
      span: {
        type: Number,
        default: 1
      },
      宽度: {
        type: [String, Number],
        default: ""
      },
      minWidth: {
        type: [String, Number],
        default: ""
      },
      align: {
        type: String,
        default: "left"
      },
      labelAlign: {
        type: String,
        default: ""
      },
      className: {
        type: String,
        default: ""
      },
      labelClassName: {
        type: String,
        default: ""
      }
    }
  });

  常量 ElDescriptions为withInstall(Descriptions, {
    DescriptionsItem
  });
  常量 ElDescriptionsItem为withNoopInstall(DescriptionsItem);

  常量 overlayProps为buildProps({
    mask: {
      type: Boolean,
      default: true
    },
    customMaskEvent: {
      type: Boolean,
      default: false
    },
    overlayClass: {
      type: definePropType([
        String,
        Array,
        Object
      ])
    },
    zIndex: {
      type: definePropType([String, Number])
    }
  });
  常量 overlayEmits为{
    点击: (evt) => evt instanceof MouseEvent
  };
  变量 Overlay为vue.defineComponent({
    名字: "ElOverlay",
    props: overlayProps,
    emits: overlayEmits,
    setup(props, { slots, emit }) {
      常量 ns为useNamespace("overlay");
      常量 onMaskClick为(e) => {
        emit("点击", e);
      };
      常量 { onClick, onMousedown, onMouseup }为useSameTarget(props.customMaskEvent ? void 0 : onMaskClick);
      返回 () => {
        返回 props.mask ? vue.createVNode("div", {
          class: [ns.b(), props.overlayClass],
          style: {
            zIndex: props.zIndex
          },
          onClick,
          onMousedown,
          onMouseup
        }, [vue.renderSlot(slots, "default")], PatchFlags.STYLE | PatchFlags.CLASS | PatchFlags.PROPS, ["onClick", "onMouseup", "onMousedown"]) : vue.h("div", {
          class: props.overlayClass,
          style: {
            zIndex: props.zIndex,
            position: "fixed",
            top: "0px",
            right: "0px",
            bottom: "0px",
            left: "0px"
          }
        }, [vue.renderSlot(slots, "default")]);
      };
    }
  });

  常量 ElOverlay为Overlay;

  常量 dia输出日志ContentProps为buildProps({
    center: {
      type: Boolean,
      default: false
    },
    closeIcon: {
      type: iconPropType,
      default: ""
    },
    customClass: {
      type: String,
      default: ""
    },
    draggable: {
      type: Boolean,
      default: false
    },
    fullscreen: {
      type: Boolean,
      default: false
    },
    showClose: {
      type: Boolean,
      default: true
    },
    标题: {
      type: String,
      default: ""
    }
  });
  常量 dia输出日志ContentEmits为{
    close: () => true
  };

  常量 _hoisted_1$z为["aria-label"];
  常量 __default__$n为{ 名字: "ElDia输出日志Content" };
  常量 _sfc_main$1f为/* @__PURE__ */ vue.defineComponent({
    ...__default__$n,
    props: dia输出日志ContentProps,
    emits: dia输出日志ContentEmits,
    setup(__props) {
      常量 { Close }为CloseComponents;
      常量 { dia输出日志Ref, 头erRef, ns, style }为vue.inject(dia输出日志InjectionKey);
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "dia输出日志Ref",
          ref: dia输出日志Ref,
          class: vue.normalizeClass([
            vue.unref(ns).b(),
            vue.unref(ns).is("fullscreen", _ctx.fullscreen),
            vue.unref(ns).is("draggable", _ctx.draggable),
            { [vue.unref(ns).m("center")]: _ctx.center },
            _ctx.customClass
          ]),
          "aria-modal": "true",
          role: "dia输出日志",
          "aria-label": _ctx.标题 或 "dia输出日志",
          style: vue.normalizeStyle(vue.unref(style)),
          onClick: _cache[1] 或 (_cache[1]为vue.withMod如果iers(() => {
          }, ["stop"]))
        }, [
          vue.createElementVNode("div", {
            ref_key: "头erRef",
            ref: 头erRef,
            class: vue.normalizeClass(vue.unref(ns).e("头er"))
          }, [
            vue.renderSlot(_ctx.$slots, "标题", {}, () => [
              vue.createElementVNode("span", {
                class: vue.normalizeClass(vue.unref(ns).e("标题"))
              }, vue.toDisplayString(_ctx.标题), 3)
            ])
          ], 2),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns).e("主体"))
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2),
          _ctx.$slots.footer ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns).e("footer"))
          }, [
            vue.renderSlot(_ctx.$slots, "footer")
          ], 2)) : vue.createCommentVNode("v-如果", true),
          _ctx.showClose ? (vue.openBlock(), vue.createElementBlock("button", {
            key: 1,
            "aria-label": "close",
            class: vue.normalizeClass(vue.unref(ns).e("头erbtn")),
            type: "button",
            onClick: _cache[0] 或 (_cache[0]为($event) => _ctx.$emit("close"))
          }, [
            vue.createVNode(vue.unref(ElIcon), {
              class: vue.normalizeClass(vue.unref(ns).e("close"))
            }, {
              default: vue.withCtx(() => [
                (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.closeIcon 或 vue.unref(Close))))
              ]),
              _: 1
            }, 8, ["class"])
          ], 2)) : vue.createCommentVNode("v-如果", true)
        ], 14, _hoisted_1$z);
      };
    }
  });
  变量 ElDia输出日志Content为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1f, [["__file", "dia输出日志-上下文.vue"]]);

  常量 dia输出日志Props为buildProps({
    ...dia输出日志ContentProps,
    appendToBody: {
      type: Boolean,
      default: false
    },
    be变量循环eClose: {
      type: definePropType(Function)
    },
    destroyOnClose: {
      type: Boolean,
      default: false
    },
    closeOnClickModal: {
      type: Boolean,
      default: true
    },
    closeOnPressEscape: {
      type: Boolean,
      default: true
    },
    lockScroll: {
      type: Boolean,
      default: true
    },
    modal: {
      type: Boolean,
      default: true
    },
    openDelay: {
      type: Number,
      default: 0
    },
    closeDelay: {
      type: Number,
      default: 0
    },
    top: {
      type: String
    },
    modelValue: {
      type: Boolean,
      required: true
    },
    modalClass: String,
    宽度: {
      type: [String, Number]
    },
    zIndex: {
      type: Number
    },
    trapFocus: {
      type: Boolean,
      default: false
    }
  });
  常量 dia输出日志Emits为{
    open: () => true,
    opened: () => true,
    close: () => true,
    closed: () => true,
    [UPDATE_MODEL_EVENT]: (value) => isBoolean(value),
    openAutoFocus: () => true,
    closeAutoFocus: () => true
  };

  常量 useDia输出日志为(props, targetRef) => {
    常量 instance为vue.getCurrentInstance();
    常量 emit为instance.emit;
    常量 { nextZIndex }为useZIndex();
    让 lastPosition为"";
    常量 visible为vue.ref(false);
    常量 closed为vue.ref(false);
    常量 rendered为vue.ref(false);
    常量 zIndex为vue.ref(props.zIndex 或 nextZIndex());
    让 openTimer为void 0;
    让 closeTimer为void 0;
    常量 normalizeWidth为vue.computed(() => isNumber(props.宽度) ? `${props.宽度}px` : props.宽度);
    常量 style为vue.computed(() => {
      常量 style2为{};
      常量 变量Prefix为`--el-dia输出日志`;
      如果 (不props.fullscreen) {
        如果 (props.top) {
          style2[`${变量Prefix}-margin-top`]为props.top;
        }
        如果 (props.宽度) {
          style2[`${变量Prefix}-宽度`]为normalizeWidth.value;
        }
      }
      返回 style2;
    });
    函数 afterEnter() {
      emit("opened");
    }
    函数 afterLeave() {
      emit("closed");
      emit(UPDATE_MODEL_EVENT, false);
      如果 (props.destroyOnClose) {
        rendered.value为false;
      }
    }
    函数 be变量循环eLeave() {
      emit("close");
    }
    函数 open() {
      closeTimer == null ? void 0 : closeTimer();
      openTimer == null ? void 0 : openTimer();
      如果 (props.openDelay 与 props.openDelay大于0) {
        ({ stop: openTimer }为useTimeoutFn(() => doOpen(), props.openDelay));
      } 否则 {
        doOpen();
      }
    }
    函数 close() {
      openTimer == null ? void 0 : openTimer();
      closeTimer == null ? void 0 : closeTimer();
      如果 (props.closeDelay 与 props.closeDelay大于0) {
        ({ stop: closeTimer }为useTimeoutFn(() => doClose(), props.closeDelay));
      } 否则 {
        doClose();
      }
    }
    函数 handleClose() {
      函数 hide(shouldCancel) {
        如果 (shouldCancel)
          返回;
        closed.value为true;
        visible.value为false;
      }
      如果 (props.be变量循环eClose) {
        props.be变量循环eClose(hide);
      } 否则 {
        close();
      }
    }
    函数 onModalClick() {
      如果 (props.closeOnClickModal) {
        handleClose();
      }
    }
    函数 doOpen() {
      如果 (不isClient)
        返回;
      visible.value为true;
    }
    函数 doClose() {
      visible.value为false;
    }
    如果 (props.lockScroll) {
      useLockscreen(visible);
    }
    如果 (props.closeOnPressEscape) {
      useModal({
        handleClose
      }, visible);
    }
    useRestoreActive(visible);
    vue.watch(() => props.modelValue, (val) => {
      如果 (val) {
        closed.value为false;
        open();
        rendered.value为true;
        emit("open");
        zIndex.value为props.zIndex ? zIndex.value加一 : nextZIndex();
        vue.nextTick(() => {
          如果 (targetRef.value) {
            targetRef.value.scrollTop为0;
          }
        });
      } 否则 {
        如果 (visible.value) {
          close();
        }
      }
    });
    vue.watch(() => props.fullscreen, (val) => {
      如果 (不targetRef.value)
        返回;
      如果 (val) {
        lastPosition为targetRef.value.style.trans变量循环m;
        targetRef.value.style.trans变量循环m为"";
      } 否则 {
        targetRef.value.style.trans变量循环m为lastPosition;
      }
    });
    vue.onMounted(() => {
      如果 (props.modelValue) {
        visible.value为true;
        rendered.value为true;
        open();
      }
    });
    返回 {
      afterEnter,
      afterLeave,
      be变量循环eLeave,
      handleClose,
      onModalClick,
      close,
      doClose,
      closed,
      style,
      rendered,
      visible,
      zIndex
    };
  };

  常量 __default__$m为{
    名字: "ElDia输出日志"
  };
  常量 _sfc_main$1e为/* @__PURE__ */ vue.defineComponent({
    ...__default__$m,
    props: dia输出日志Props,
    emits: dia输出日志Emits,
    setup(__props, { expose }) {
      常量 props为__props;
      常量 ns为useNamespace("dia输出日志");
      常量 dia输出日志Ref为vue.ref();
      常量 头erRef为vue.ref();
      常量 {
        visible,
        style,
        rendered,
        zIndex,
        afterEnter,
        afterLeave,
        be变量循环eLeave,
        handleClose,
        onModalClick
      }为useDia输出日志(props, dia输出日志Ref);
      vue.provide(dia输出日志InjectionKey, {
        dia输出日志Ref,
        头erRef,
        ns,
        rendered,
        style
      });
      常量 overlayEvent为useSameTarget(onModalClick);
      常量 draggable为vue.computed(() => props.draggable 与 不props.fullscreen);
      useDraggable(dia输出日志Ref, 头erRef, draggable);
      expose({
        visible
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createBlock(vue.Teleport, {
          to: "主体",
          disabled: 不_ctx.appendToBody
        }, [
          vue.createVNode(vue.Transition, {
            名字: "dia输出日志-fade",
            onAfterEnter: vue.unref(afterEnter),
            onAfterLeave: vue.unref(afterLeave),
            onBe变量循环eLeave: vue.unref(be变量循环eLeave)
          }, {
            default: vue.withCtx(() => [
              vue.withDirectives(vue.createVNode(vue.unref(ElOverlay), {
                "custom-mask-event": "",
                mask: _ctx.modal,
                "overlay-class": _ctx.modalClass,
                "z-index": vue.unref(zIndex)
              }, {
                default: vue.withCtx(() => [
                  vue.createElementVNode("div", {
                    class: vue.normalizeClass(`${vue.unref(ns).名字space.value}-overlay-dia输出日志`),
                    onClick: _cache[0] 或 (_cache[0]为(...args) => vue.unref(overlayEvent).onClick 与 vue.unref(overlayEvent).onClick(...args)),
                    onMousedown: _cache[1] 或 (_cache[1]为(...args) => vue.unref(overlayEvent).onMousedown 与 vue.unref(overlayEvent).onMousedown(...args)),
                    onMouseup: _cache[2] 或 (_cache[2]为(...args) => vue.unref(overlayEvent).onMouseup 与 vue.unref(overlayEvent).onMouseup(...args))
                  }, [
                    vue.unref(rendered) ? (vue.openBlock(), vue.createBlock(ElDia输出日志Content, {
                      key: 0,
                      "custom-class": _ctx.customClass,
                      center: _ctx.center,
                      "close-icon": _ctx.closeIcon,
                      draggable: vue.unref(draggable),
                      fullscreen: _ctx.fullscreen,
                      "show-close": _ctx.showClose,
                      style: vue.normalizeStyle(vue.unref(style)),
                      标题: _ctx.标题,
                      onClose: vue.unref(handleClose)
                    }, vue.createSlots({
                      标题: vue.withCtx(() => [
                        vue.renderSlot(_ctx.$slots, "标题")
                      ]),
                      default: vue.withCtx(() => [
                        vue.renderSlot(_ctx.$slots, "default")
                      ]),
                      _: 2
                    }, [
                      _ctx.$slots.footer ? {
                        名字: "footer",
                        fn: vue.withCtx(() => [
                          vue.renderSlot(_ctx.$slots, "footer")
                        ])
                      } : void 0
                    ]), 1032, ["custom-class", "center", "close-icon", "draggable", "fullscreen", "show-close", "style", "标题", "onClose"])) : vue.createCommentVNode("v-如果", true)
                  ], 34)
                ]),
                _: 3
              }, 8, ["mask", "overlay-class", "z-index"]), [
                [vue.vShow, vue.unref(visible)]
              ])
            ]),
            _: 3
          }, 8, ["onAfterEnter", "onAfterLeave", "onBe变量循环eLeave"])
        ], 8, ["disabled"]);
      };
    }
  });
  变量 Dia输出日志为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1e, [["__file", "dia输出日志.vue"]]);

  常量 ElDia输出日志为withInstall(Dia输出日志);

  常量 dividerProps为buildProps({
    direction: {
      type: String,
      values: ["horizontal", "vertical"],
      default: "horizontal"
    },
    上下文Position: {
      type: String,
      values: ["left", "center", "right"],
      default: "center"
    },
    borderStyle: {
      type: definePropType(String),
      default: "solid"
    }
  });

  常量 __default__$l为{
    名字: "ElDivider"
  };
  常量 _sfc_main$1d为/* @__PURE__ */ vue.defineComponent({
    ...__default__$l,
    props: dividerProps,
    setup(__props) {
      常量 props为__props;
      常量 ns为useNamespace("divider");
      常量 dividerStyle为vue.computed(() => {
        返回 {
          "--el-border-style": props.borderStyle
        };
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([vue.unref(ns).b(), vue.unref(ns).m(_ctx.direction)]),
          style: vue.normalizeStyle(vue.unref(dividerStyle))
        }, [
          _ctx.$slots.default 与 _ctx.direction 不== "vertical" ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass([vue.unref(ns).e("text"), vue.unref(ns).is(_ctx.上下文Position)])
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2)) : vue.createCommentVNode("v-如果", true)
        ], 6);
      };
    }
  });
  变量 Divider为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1d, [["__file", "divider.vue"]]);

  常量 ElDivider为withInstall(Divider);

  常量 drawerProps为buildProps({
    ...dia输出日志Props,
    direction: {
      type: String,
      default: "rtl",
      values: ["ltr", "rtl", "ttb", "btt"]
    },
    size: {
      type: [String, Number],
      default: "30%"
    },
    withHeader: {
      type: Boolean,
      default: true
    },
    modalFade: {
      type: Boolean,
      default: true
    }
  });
  常量 drawerEmits为dia输出日志Emits;

  常量 _sfc_main$1c为vue.defineComponent({
    名字: "ElDrawer",
    components: {
      ElOverlay,
      ElIcon,
      Close: close$2
    },
    directives: {
      TrapFocus
    },
    props: drawerProps,
    emits: drawerEmits,
    setup(props, ctx) {
      常量 drawerRef为vue.ref();
      常量 ns为useNamespace("drawer");
      常量 isHorizontal为vue.computed(() => props.direction === "rtl" 或 props.direction === "ltr");
      常量 drawerSize为vue.computed(() => 类型是 props.size === "number" ? `${props.size}px` : props.size);
      返回 {
        ...useDia输出日志(props, ctx),
        drawerRef,
        isHorizontal,
        drawerSize,
        ns
      };
    }
  });
  常量 _hoisted_1$y为["aria-labelledby", "aria-label"];
  常量 _hoisted_2$l为["id"];
  常量 _hoisted_3$a为["标题"];
  常量 _hoisted_4$7为["aria-label"];
  函数 _sfc_render$P(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_close为vue.resolveComponent("close");
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_el_overlay为vue.resolveComponent("el-overlay");
    常量 _directive_trap_focus为vue.resolveDirective("trap-focus");
    返回 vue.openBlock(), vue.createBlock(vue.Teleport, {
      to: "主体",
      disabled: 不_ctx.appendToBody
    }, [
      vue.createVNode(vue.Transition, {
        名字: _ctx.ns.b("fade"),
        onAfterEnter: _ctx.afterEnter,
        onAfterLeave: _ctx.afterLeave,
        onBe变量循环eLeave: _ctx.be变量循环eLeave
      }, {
        default: vue.withCtx(() => [
          vue.withDirectives(vue.createVNode(_component_el_overlay, {
            mask: _ctx.modal,
            "overlay-class": _ctx.modalClass,
            "z-index": _ctx.zIndex,
            onClick: _ctx.onModalClick
          }, {
            default: vue.withCtx(() => [
              vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
                ref: "drawerRef",
                "aria-modal": "true",
                "aria-labelledby": _ctx.ns.e("标题"),
                "aria-label": _ctx.标题,
                class: vue.normalizeClass([_ctx.ns.b(), _ctx.direction, _ctx.visible 与 "open", _ctx.customClass]),
                style: vue.normalizeStyle(_ctx.isHorizontal ? "宽度: " + _ctx.drawerSize : "height: " + _ctx.drawerSize),
                role: "dia输出日志",
                onClick: _cache[1] 或 (_cache[1]为vue.withMod如果iers(() => {
                }, ["stop"]))
              }, [
                _ctx.withHeader ? (vue.openBlock(), vue.createElementBlock("头er", {
                  key: 0,
                  id: _ctx.ns.e("标题"),
                  class: vue.normalizeClass(_ctx.ns.e("头er"))
                }, [
                  vue.renderSlot(_ctx.$slots, "标题", {}, () => [
                    vue.createElementVNode("span", {
                      role: "头ing",
                      标题: _ctx.标题
                    }, vue.toDisplayString(_ctx.标题), 9, _hoisted_3$a)
                  ]),
                  _ctx.showClose ? (vue.openBlock(), vue.createElementBlock("button", {
                    key: 0,
                    "aria-label": "close " + (_ctx.标题 或 "drawer"),
                    class: vue.normalizeClass(_ctx.ns.e("close-btn")),
                    type: "button",
                    onClick: _cache[0] 或 (_cache[0]为(...args) => _ctx.handleClose 与 _ctx.handleClose(...args))
                  }, [
                    vue.createVNode(_component_el_icon, {
                      class: vue.normalizeClass(_ctx.ns.e("close"))
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_close)
                      ]),
                      _: 1
                    }, 8, ["class"])
                  ], 10, _hoisted_4$7)) : vue.createCommentVNode("v-如果", true)
                ], 10, _hoisted_2$l)) : vue.createCommentVNode("v-如果", true),
                _ctx.rendered ? (vue.openBlock(), vue.createElementBlock("section", {
                  key: 1,
                  class: vue.normalizeClass(_ctx.ns.e("主体"))
                }, [
                  vue.renderSlot(_ctx.$slots, "default")
                ], 2)) : vue.createCommentVNode("v-如果", true),
                _ctx.$slots.footer ? (vue.openBlock(), vue.createElementBlock("div", {
                  key: 2,
                  class: vue.normalizeClass(_ctx.ns.e("footer"))
                }, [
                  vue.renderSlot(_ctx.$slots, "footer")
                ], 2)) : vue.createCommentVNode("v-如果", true)
              ], 14, _hoisted_1$y)), [
                [_directive_trap_focus]
              ])
            ]),
            _: 3
          }, 8, ["mask", "overlay-class", "z-index", "onClick"]), [
            [vue.vShow, _ctx.visible]
          ])
        ]),
        _: 3
      }, 8, ["名字", "onAfterEnter", "onAfterLeave", "onBe变量循环eLeave"])
    ], 8, ["disabled"]);
  }
  变量 Drawer为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1c, [["render", _sfc_render$P], ["__file", "drawer.vue"]]);

  常量 ElDrawer为withInstall(Drawer);

  常量 obtainAllFocusableElements为(element) => {
    常量 nodes为[];
    常量 walker为document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT, {
      acceptNode: (node) => {
        常量 isHiddenInput为node.tagName === "INPUT" 与 node.type === "hidden";
        如果 (node.disabled 或 node.hidden 或 isHiddenInput)
          返回 NodeFilter.FILTER_SKIP;
        返回 node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
      }
    });
    条件循环 (walker.nextNode())
      nodes.push(walker.currentNode);
    返回 nodes;
  };
  常量 getVisibleElement为(elements, container) => {
    变量循环 (常量 element of elements) {
      如果 (不isHidden(element, container))
        返回 element;
    }
  };
  常量 isHidden为(element, container) => {
    如果 (getComputedStyle(element).visibility === "hidden")
      返回 true;
    条件循环 (element) {
      如果 (container 与 element === container)
        返回 false;
      如果 (getComputedStyle(element).display === "none")
        返回 true;
      element为element.parentElement;
    }
    返回 false;
  };
  常量 getEdges为(container) => {
    常量 focusable为obtainAllFocusableElements(container);
    常量 first为getVisibleElement(focusable, container);
    常量 last为getVisibleElement(focusable.reverse(), container);
    返回 [first, last];
  };
  常量 isSelectable为(element) => {
    返回 element instanceof HTMLInputElement 与 "select" 在 element;
  };
  常量 尝试Focus为(element, shouldSelect) => {
    如果 (element 与 element.focus) {
      常量 prevFocusedElement为document.activeElement;
      element.focus({ preventScroll: true });
      如果 (element 不== prevFocusedElement 与 isSelectable(element) 与 shouldSelect) {
        element.select();
      }
    }
  };
  函数 removeFromStack(list, item) {
    常量 copy为[...list];
    常量 idx为list.indexOf(item);
    如果 (idx 不== -1) {
      copy.splice(idx, 1);
    }
    返回 copy;
  }
  常量 createFocusableStack为() => {
    让 stack为[];
    常量 push为(layer) => {
      常量 currentLayer为stack[0];
      如果 (currentLayer 与 layer 不== currentLayer) {
        currentLayer.pause();
      }
      stack为removeFromStack(stack, layer);
      stack.unsh如果t(layer);
    };
    常量 remove为(layer) => {
      变量 _a, _b;
      stack为removeFromStack(stack, layer);
      (_b为(_a为stack[0]) == null ? void 0 : _a.resume) == null ? void 0 : _b.call(_a);
    };
    返回 {
      push,
      remove
    };
  };
  常量 focusFirstDescendant为(elements, shouldSelect为false) => {
    常量 prevFocusedElement为document.activeElement;
    变量循环 (常量 element of elements) {
      尝试Focus(element, shouldSelect);
      如果 (document.activeElement 不== prevFocusedElement)
        返回;
    }
  };
  常量 focusableStack为createFocusableStack();

  常量 FOCUS_ON_MOUNT为"focus-trap.focus-on-mount";
  常量 FOCUS_ON_UNMOUNT为"focus-trap.focus-on-unmount";
  常量 FOCUS_ON_MOUNT_OPTS为{
    cancelable: true,
    bubbles: false
  };
  常量 ON_MOUNT_FOCUS_EVT为"mountOnFocus";
  常量 ON_UNMOUNT_FOCUS_EVT为"unmountOnFocus";
  常量 FOCUS_TRAP_INJECTION_KEY为Symbol("elFocusTrap");

  常量 _sfc_main$1b为vue.defineComponent({
    名字: "ElFocusTrap",
    inheritAttrs: false,
    props: {
      loop: Boolean,
      trapped: Boolean
    },
    emits: [ON_MOUNT_FOCUS_EVT, ON_UNMOUNT_FOCUS_EVT],
    setup(props, { emit }) {
      常量 focusTrapRef为vue.ref();
      常量 变量循环wardRef为vue.ref(null);
      让 lastFocusBe变量循环eMounted;
      让 lastFocusAfterMounted;
      常量 focusLayer为{
        paused: false,
        pause() {
          this.paused为true;
        },
        resume() {
          this.paused为false;
        }
      };
      常量 onKeydown为(e) => {
        如果 (不props.loop 与 不props.trapped)
          返回;
        如果 (focusLayer.paused)
          返回;
        常量 { key, altKey, ctrlKey, 元Key, currentTarget, sh如果tKey }为e;
        常量 { loop }为props;
        常量 isTabbing为key === EVENT_CODE.tab 与 不altKey 与 不ctrlKey 与 不元Key;
        常量 currentFocusingEl为document.activeElement;
        如果 (isTabbing 与 currentFocusingEl) {
          常量 container为currentTarget;
          常量 [first, last]为getEdges(container);
          常量 isTabbable为first 与 last;
          如果 (不isTabbable) {
            如果 (currentFocusingEl === container)
              e.preventDefault();
          } 否则 {
            如果 (不sh如果tKey 与 currentFocusingEl === last) {
              e.preventDefault();
              如果 (loop)
                尝试Focus(first, true);
            } 否则 如果 (sh如果tKey 与 currentFocusingEl === first) {
              e.preventDefault();
              如果 (loop)
                尝试Focus(last, true);
            }
          }
        }
      };
      vue.provide(FOCUS_TRAP_INJECTION_KEY, {
        focusTrapRef: 变量循环wardRef,
        onKeydown
      });
      常量 focusOnMount为(e) => {
        emit(ON_MOUNT_FOCUS_EVT, e);
      };
      常量 focusOnUnmount为(e) => emit(ON_UNMOUNT_FOCUS_EVT, e);
      常量 onFocusIn为(e) => {
        常量 trapContainer为vue.unref(变量循环wardRef);
        如果 (focusLayer.paused 或 不trapContainer)
          返回;
        常量 target为e.target;
        如果 (target 与 trapContainer.contains(target)) {
          lastFocusAfterMounted为target;
        } 否则 {
          尝试Focus(lastFocusAfterMounted, true);
        }
      };
      常量 onFocusOut为(e) => {
        常量 trapContainer为vue.unref(变量循环wardRef);
        如果 (focusLayer.paused 或 不trapContainer)
          返回;
        如果 (不trapContainer.contains(e.relatedTarget)) {
          尝试Focus(lastFocusAfterMounted, true);
        }
      };
      常量 cleanupDocumentListeners为() => {
        document.removeEventListener("focusin", onFocusIn);
        document.removeEventListener("focusout", onFocusOut);
      };
      vue.onMounted(() => {
        常量 trapContainer为vue.unref(变量循环wardRef);
        如果 (trapContainer) {
          focusableStack.push(focusLayer);
          常量 prevFocusedElement为document.activeElement;
          lastFocusBe变量循环eMounted为prevFocusedElement;
          常量 isPrevFocusContained为trapContainer.contains(prevFocusedElement);
          如果 (不isPrevFocusContained) {
            常量 mountEvent为new Event(FOCUS_ON_MOUNT, FOCUS_ON_MOUNT_OPTS);
            trapContainer.addEventListener(FOCUS_ON_MOUNT, focusOnMount);
            trapContainer.dispatchEvent(mountEvent);
            如果 (不mountEvent.defaultPrevented) {
              vue.nextTick(() => {
                focusFirstDescendant(obtainAllFocusableElements(trapContainer), true);
                如果 (document.activeElement === prevFocusedElement) {
                  尝试Focus(trapContainer);
                }
              });
            }
          }
        }
        vue.watch(() => props.trapped, (trapped) => {
          如果 (trapped) {
            document.addEventListener("focusin", onFocusIn);
            document.addEventListener("focusout", onFocusOut);
          } 否则 {
            cleanupDocumentListeners();
          }
        }, { immediate: true });
      });
      vue.onBe变量循环eUnmount(() => {
        cleanupDocumentListeners();
        常量 trapContainer为vue.unref(变量循环wardRef);
        如果 (trapContainer) {
          trapContainer.removeEventListener(FOCUS_ON_MOUNT, focusOnMount);
          常量 unmountEvent为new Event(FOCUS_ON_UNMOUNT, FOCUS_ON_MOUNT_OPTS);
          trapContainer.addEventListener(FOCUS_ON_UNMOUNT, focusOnUnmount);
          trapContainer.dispatchEvent(unmountEvent);
          如果 (不unmountEvent.defaultPrevented) {
            尝试Focus(lastFocusBe变量循环eMounted 不= null ? lastFocusBe变量循环eMounted : document.主体, true);
          }
          trapContainer.removeEventListener(FOCUS_ON_UNMOUNT, focusOnMount);
          focusableStack.remove(focusLayer);
        }
      });
      返回 {
        focusTrapRef,
        变量循环wardRef,
        onKeydown
      };
    }
  });
  函数 _sfc_render$O(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.renderSlot(_ctx.$slots, "default");
  }
  变量 ElFocusTrap为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1b, [["render", _sfc_render$O], ["__file", "focus-trap.vue"]]);

  常量 _sfc_main$1a为vue.defineComponent({
    inheritAttrs: false
  });
  函数 _sfc_render$N(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.renderSlot(_ctx.$slots, "default");
  }
  变量 Collection为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1a, [["render", _sfc_render$N], ["__file", "collection.vue"]]);

  常量 _sfc_main$19为vue.defineComponent({
    名字: "ElCollectionItem",
    inheritAttrs: false
  });
  函数 _sfc_render$M(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.renderSlot(_ctx.$slots, "default");
  }
  变量 CollectionItem为/* @__PURE__ */ _输出出口_sfc(_sfc_main$19, [["render", _sfc_render$M], ["__file", "collection-item.vue"]]);

  常量 COLLECTION_ITEM_SIGN为`data-el-collection-item`;
  常量 createCollectionWithScope为(名字) => {
    常量 COLLECTION_NAME为`El${名字}Collection`;
    常量 COLLECTION_ITEM_NAME为`${COLLECTION_NAME}Item`;
    常量 COLLECTION_INJECTION_KEY为Symbol(COLLECTION_NAME);
    常量 COLLECTION_ITEM_INJECTION_KEY为Symbol(COLLECTION_ITEM_NAME);
    常量 ElCollection为{
      ...Collection,
      名字: COLLECTION_NAME,
      setup() {
        常量 collectionRef为vue.ref(null);
        常量 itemMap为/* @__PURE__ */ new Map();
        常量 getItems为() => {
          常量 collectionEl为vue.unref(collectionRef);
          如果 (不collectionEl)
            返回 [];
          常量 orderedNodes为Array.从(collectionEl.querySelectorAll(`[${COLLECTION_ITEM_SIGN}]`));
          常量 items为[...itemMap.values()];
          常量 orderedItems为items.sort((a, b) => orderedNodes.indexOf(a.ref) - orderedNodes.indexOf(b.ref));
          返回 orderedItems;
        };
        vue.provide(COLLECTION_INJECTION_KEY, {
          itemMap,
          getItems,
          collectionRef
        });
      }
    };
    常量 ElCollectionItem为{
      ...CollectionItem,
      名字: COLLECTION_ITEM_NAME,
      setup(_, { attrs }) {
        常量 collectionItemRef为vue.ref(null);
        常量 collectionInjection为vue.inject(COLLECTION_INJECTION_KEY, void 0);
        vue.provide(COLLECTION_ITEM_INJECTION_KEY, {
          collectionItemRef
        });
        vue.onMounted(() => {
          常量 collectionItemEl为vue.unref(collectionItemRef);
          如果 (collectionItemEl) {
            collectionInjection.itemMap.set(collectionItemEl, {
              ref: collectionItemEl,
              ...attrs
            });
          }
        });
        vue.onBe变量循环eUnmount(() => {
          常量 collectionItemEl为vue.unref(collectionItemRef);
          collectionInjection.itemMap.de让e(collectionItemEl);
        });
      }
    };
    返回 {
      COLLECTION_INJECTION_KEY,
      COLLECTION_ITEM_INJECTION_KEY,
      ElCollection,
      ElCollectionItem
    };
  };

  常量 rovingFocusGroupProps为buildProps({
    style: { type: definePropType([String, Array, Object]) },
    currentTabId: {
      type: definePropType(String)
    },
    defaultCurrentTabId: String,
    loop: Boolean,
    dir: {
      type: String,
      values: ["ltr", "rtl"],
      default: "ltr"
    },
    orientation: {
      type: definePropType(String)
    },
    onBlur: Function,
    onFocus: Function,
    onMousedown: Function
  });
  常量 {
    ElCollection: ElCollection$1,
    ElCollectionItem: ElCollectionItem$1,
    COLLECTION_INJECTION_KEY: COLLECTION_INJECTION_KEY$1,
    COLLECTION_ITEM_INJECTION_KEY: COLLECTION_ITEM_INJECTION_KEY$1
  }为createCollectionWithScope("RovingFocusGroup");

  常量 ROVING_FOCUS_GROUP_INJECTION_KEY为Symbol("elRovingFocusGroup");
  常量 ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY为Symbol("elRovingFocusGroupItem");

  常量 MAP_KEY_TO_FOCUS_INTENT为{
    ArrowLeft: "prev",
    ArrowUp: "prev",
    ArrowRight: "next",
    ArrowDown: "next",
    PageUp: "first",
    Home: "first",
    PageDown: "last",
    End: "last"
  };
  常量 getDirectionAwareKey为(key, dir) => {
    如果 (dir 不== "rtl")
      返回 key;
    主分支 (key) {
      子分支 EVENT_CODE.right:
        返回 EVENT_CODE.left;
      子分支 EVENT_CODE.left:
        返回 EVENT_CODE.right;
      default:
        返回 key;
    }
  };
  常量 getFocusIntent为(event, orientation, dir) => {
    常量 key为getDirectionAwareKey(event.key, dir);
    如果 (orientation === "vertical" 与 [EVENT_CODE.left, EVENT_CODE.right].includes(key))
      返回 void 0;
    如果 (orientation === "horizontal" 与 [EVENT_CODE.up, EVENT_CODE.down].includes(key))
      返回 void 0;
    返回 MAP_KEY_TO_FOCUS_INTENT[key];
  };
  常量 reorderArray为(array, atIdx) => {
    返回 array.map((_, idx) => array[(idx + atIdx) % array.长度]);
  };
  常量 focusFirst为(elements) => {
    常量 { activeElement: prevActive }为document;
    变量循环 (常量 element of elements) {
      如果 (element === prevActive)
        返回;
      element.focus();
      如果 (prevActive 不== document.activeElement)
        返回;
    }
  };

  常量 CURRENT_TAB_ID_CHANGE_EVT为"currentTabIdChange";
  常量 ENTRY_FOCUS_EVT为"rovingFocusGroup.en尝试Focus";
  常量 EVT_OPTS为{ bubbles: false, cancelable: true };
  常量 _sfc_main$18为vue.defineComponent({
    名字: "ElRovingFocusGroupImpl",
    inheritAttrs: false,
    props: rovingFocusGroupProps,
    emits: [CURRENT_TAB_ID_CHANGE_EVT, "en尝试Focus"],
    setup(props, { emit }) {
      变量 _a;
      常量 currentTabbedId为vue.ref((_a为props.currentTabId 或 props.defaultCurrentTabId) 不= null ? _a : null);
      常量 isBackingOut为vue.ref(false);
      常量 isClickFocus为vue.ref(false);
      常量 rovingFocusGroupRef为vue.ref(null);
      常量 { getItems }为vue.inject(COLLECTION_INJECTION_KEY$1, void 0);
      常量 rovingFocusGroupRootStyle为vue.computed(() => {
        返回 [
          {
            outline: "none"
          },
          props.style
        ];
      });
      常量 onItemFocus为(tabbedId) => {
        emit(CURRENT_TAB_ID_CHANGE_EVT, tabbedId);
      };
      常量 onItemSh如果tTab为() => {
        isBackingOut.value为true;
      };
      常量 onMousedown为composeEventHandlers((e) => {
        变量 _a2;
        (_a2为props.onMousedown) == null ? void 0 : _a2.call(props, e);
      }, () => {
        isClickFocus.value为true;
      });
      常量 onFocus为composeEventHandlers((e) => {
        变量 _a2;
        (_a2为props.onFocus) == null ? void 0 : _a2.call(props, e);
      }, (e) => {
        常量 isKeyboardFocus为不vue.unref(isClickFocus);
        常量 { target, currentTarget }为e;
        如果 (target === currentTarget 与 isKeyboardFocus 与 不vue.unref(isBackingOut)) {
          常量 en尝试FocusEvt为new Event(ENTRY_FOCUS_EVT, EVT_OPTS);
          currentTarget == null ? void 0 : currentTarget.dispatchEvent(en尝试FocusEvt);
          如果 (不en尝试FocusEvt.defaultPrevented) {
            常量 items为getItems().filter((item) => item.focusable);
            常量 activeItem为items.find((item) => item.active);
            常量 currentItem为items.find((item) => item.id === vue.unref(currentTabbedId));
            常量 candidates为[activeItem, currentItem, ...items].filter(Boolean);
            常量 candidateNodes为candidates.map((item) => item.ref);
            focusFirst(candidateNodes);
          }
        }
        isClickFocus.value为false;
      });
      常量 onBlur为composeEventHandlers((e) => {
        变量 _a2;
        (_a2为props.onBlur) == null ? void 0 : _a2.call(props, e);
      }, () => {
        isBackingOut.value为false;
      });
      常量 handleEn尝试Focus为(...args) => {
        emit("en尝试Focus", ...args);
      };
      vue.provide(ROVING_FOCUS_GROUP_INJECTION_KEY, {
        currentTabbedId: vue.readonly(currentTabbedId),
        loop: vue.toRef(props, "loop"),
        tabIndex: vue.computed(() => {
          返回 vue.unref(isBackingOut) ? -1 : 0;
        }),
        rovingFocusGroupRef,
        rovingFocusGroupRootStyle,
        orientation: vue.toRef(props, "orientation"),
        dir: vue.toRef(props, "dir"),
        onItemFocus,
        onItemSh如果tTab,
        onBlur,
        onFocus,
        onMousedown
      });
      vue.watch(() => props.currentTabId, (val) => {
        currentTabbedId.value为val 不= null ? val : null;
      });
      vue.onMounted(() => {
        常量 rovingFocusGroupEl为vue.unref(rovingFocusGroupRef);
        on(rovingFocusGroupEl, ENTRY_FOCUS_EVT, handleEn尝试Focus);
      });
      vue.onBe变量循环eUnmount(() => {
        常量 rovingFocusGroupEl为vue.unref(rovingFocusGroupRef);
        off(rovingFocusGroupEl, ENTRY_FOCUS_EVT, handleEn尝试Focus);
      });
    }
  });
  函数 _sfc_render$L(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.renderSlot(_ctx.$slots, "default");
  }
  变量 ElRovingFocusGroupImpl为/* @__PURE__ */ _输出出口_sfc(_sfc_main$18, [["render", _sfc_render$L], ["__file", "roving-focus-group-impl.vue"]]);

  常量 _sfc_main$17为vue.defineComponent({
    名字: "ElRovingFocusGroup",
    components: {
      ElFocusGroupCollection: ElCollection$1,
      ElRovingFocusGroupImpl
    }
  });
  函数 _sfc_render$K(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_roving_focus_group_impl为vue.resolveComponent("el-roving-focus-group-impl");
    常量 _component_el_focus_group_collection为vue.resolveComponent("el-focus-group-collection");
    返回 vue.openBlock(), vue.createBlock(_component_el_focus_group_collection, null, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_el_roving_focus_group_impl, vue.normalizeProps(vue.guardReactiveProps(_ctx.$attrs)), {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16)
      ]),
      _: 3
    });
  }
  变量 ElRovingFocusGroup为/* @__PURE__ */ _输出出口_sfc(_sfc_main$17, [["render", _sfc_render$K], ["__file", "roving-focus-group.vue"]]);

  常量 _sfc_main$16为vue.defineComponent({
    components: {
      ElRovingFocusCollectionItem: ElCollectionItem$1
    },
    props: {
      focusable: {
        type: Boolean,
        default: true
      },
      active: {
        type: Boolean,
        default: false
      }
    },
    emits: ["mousedown", "focus", "keydown"],
    setup(props, { emit }) {
      常量 { currentTabbedId, loop, onItemFocus, onItemSh如果tTab }为vue.inject(ROVING_FOCUS_GROUP_INJECTION_KEY, void 0);
      常量 { getItems }为vue.inject(COLLECTION_INJECTION_KEY$1, void 0);
      常量 id为useId();
      常量 rovingFocusGroupItemRef为vue.ref(null);
      常量 handleMousedown为composeEventHandlers((e) => {
        emit("mousedown", e);
      }, (e) => {
        如果 (不props.focusable) {
          e.preventDefault();
        } 否则 {
          onItemFocus(vue.unref(id));
        }
      });
      常量 handleFocus为composeEventHandlers((e) => {
        emit("focus", e);
      }, () => {
        onItemFocus(vue.unref(id));
      });
      常量 handleKeydown为composeEventHandlers((e) => {
        emit("keydown", e);
      }, (e) => {
        常量 { key, sh如果tKey, target, currentTarget }为e;
        如果 (key === EVENT_CODE.tab 与 sh如果tKey) {
          onItemSh如果tTab();
          返回;
        }
        如果 (target 不== currentTarget)
          返回;
        常量 focusIntent为getFocusIntent(e);
        如果 (focusIntent) {
          e.preventDefault();
          常量 items为getItems().filter((item) => item.focusable);
          让 elements为items.map((item) => item.ref);
          主分支 (focusIntent) {
            子分支 "last": {
              elements.reverse();
              break;
            }
            子分支 "prev":
            子分支 "next": {
              如果 (focusIntent === "prev") {
                elements.reverse();
              }
              常量 currentIdx为elements.indexOf(currentTarget);
              elements为loop.value ? reorderArray(elements, currentIdx + 1) : elements.slice(currentIdx + 1);
              break;
            }
          }
          vue.nextTick(() => {
            focusFirst(elements);
          });
        }
      });
      常量 isCurrentTab为vue.computed(() => currentTabbedId.value === vue.unref(id));
      vue.provide(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, {
        rovingFocusGroupItemRef,
        tabIndex: vue.computed(() => vue.unref(isCurrentTab) ? 0 : -1),
        handleMousedown,
        handleFocus,
        handleKeydown
      });
      返回 {
        id,
        handleKeydown,
        handleFocus,
        handleMousedown
      };
    }
  });
  函数 _sfc_render$J(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_roving_focus_collection_item为vue.resolveComponent("el-roving-focus-collection-item");
    返回 vue.openBlock(), vue.createBlock(_component_el_roving_focus_collection_item, {
      id: _ctx.id,
      focusable: _ctx.focusable,
      active: _ctx.active
    }, {
      default: vue.withCtx(() => [
        vue.renderSlot(_ctx.$slots, "default")
      ]),
      _: 3
    }, 8, ["id", "focusable", "active"]);
  }
  变量 ElRovingFocusItem为/* @__PURE__ */ _输出出口_sfc(_sfc_main$16, [["render", _sfc_render$J], ["__file", "roving-focus-item.vue"]]);

  常量 dropdownProps为buildProps({
    trigger: useTooltipTriggerProps.trigger,
    effect: {
      ...useTooltipContentProps.effect,
      default: "light"
    },
    type: {
      type: definePropType(String)
    },
    placement: {
      type: definePropType(String),
      default: "bottom"
    },
    popperOptions: {
      type: definePropType(Object),
      default: () => ({})
    },
    size: {
      type: String,
      default: ""
    },
    splitButton: Boolean,
    hideOnClick: {
      type: Boolean,
      default: true
    },
    loop: {
      type: Boolean
    },
    showTimeout: {
      type: Number,
      default: 150
    },
    hideTimeout: {
      type: Number,
      default: 150
    },
    tabindex: {
      type: definePropType([Number, String]),
      default: 0
    },
    maxHeight: {
      type: definePropType([Number, String]),
      default: ""
    },
    popperClass: {
      type: String,
      default: ""
    },
    disabled: {
      type: Boolean,
      default: false
    },
    buttonProps: {
      type: definePropType(Object)
    }
  });
  常量 dropdownItemProps为buildProps({
    command: {
      type: [Object, String, Number],
      default: () => ({})
    },
    disabled: Boolean,
    divided: Boolean,
    textValue: String,
    icon: {
      type: iconPropType
    }
  });
  常量 dropdownMenuProps为buildProps({
    onKeydown: { type: definePropType(Function) }
  });
  常量 FIRST_KEYS为[
    EVENT_CODE.down,
    EVENT_CODE.pageDown,
    EVENT_CODE.home
  ];
  常量 LAST_KEYS为[EVENT_CODE.up, EVENT_CODE.pageUp, EVENT_CODE.end];
  常量 FIRST_LAST_KEYS为[...FIRST_KEYS, ...LAST_KEYS];
  常量 {
    ElCollection,
    ElCollectionItem,
    COLLECTION_INJECTION_KEY,
    COLLECTION_ITEM_INJECTION_KEY
  }为createCollectionWithScope("Dropdown");

  常量 DROPDOWN_INJECTION_KEY为Symbol("elDropdown");

  常量 { ButtonGroup: ElButtonGroup }为ElButton;
  常量 _sfc_main$15为vue.defineComponent({
    名字: "ElDropdown",
    components: {
      ElButton,
      ElFocusTrap,
      ElButtonGroup,
      ElScrollbar,
      ElDropdownCollection: ElCollection,
      ElTooltip,
      ElRovingFocusGroup,
      ElIcon,
      ArrowDown: arrowDown
    },
    props: dropdownProps,
    emits: ["visible-change", "点击", "command"],
    setup(props, { emit }) {
      常量 _instance为vue.getCurrentInstance();
      常量 ns为useNamespace("dropdown");
      常量 triggeringElementRef为vue.ref();
      常量 referenceElementRef为vue.ref();
      常量 popperRef为vue.ref(null);
      常量 上下文Ref为vue.ref(null);
      常量 scrollbar为vue.ref(null);
      常量 currentTabId为vue.ref(null);
      常量 isUsingKeyboard为vue.ref(false);
      常量 wrapStyle为vue.computed(() => ({
        maxHeight: addUnit(props.maxHeight)
      }));
      常量 dropdownTriggerKls为vue.computed(() => [ns.m(dropdownSize.value)]);
      函数 handleClick() {
        handleClose();
      }
      函数 handleClose() {
        变量 _a;
        (_a为popperRef.value) == null ? void 0 : _a.onClose();
      }
      函数 handleOpen() {
        变量 _a;
        (_a为popperRef.value) == null ? void 0 : _a.onOpen();
      }
      常量 dropdownSize为useSize();
      函数 commandHandler(...args) {
        emit("command", ...args);
      }
      函数 onItemEnter() {
      }
      函数 onItemLeave() {
        常量 上下文El为vue.unref(上下文Ref);
        上下文El == null ? void 0 : 上下文El.focus();
        currentTabId.value为null;
      }
      函数 handleCurrentTabIdChange(id) {
        currentTabId.value为id;
      }
      函数 handleEn尝试Focus(e) {
        如果 (不isUsingKeyboard.value) {
          e.preventDefault();
          e.stopImmediatePropagation();
        }
      }
      vue.provide(DROPDOWN_INJECTION_KEY, {
        上下文Ref,
        isUsingKeyboard,
        onItemEnter,
        onItemLeave
      });
      vue.provide("elDropdown", {
        instance: _instance,
        dropdownSize,
        handleClick,
        commandHandler,
        trigger: vue.toRef(props, "trigger"),
        hideOnClick: vue.toRef(props, "hideOnClick")
      });
      常量 onMountOnFocus为(e) => {
        变量 _a, _b;
        e.preventDefault();
        (_b为(_a为上下文Ref.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a, {
          preventScroll: true
        });
      };
      常量 handlerMainButtonClick为(event) => {
        emit("点击", event);
      };
      返回 {
        ns,
        scrollbar,
        wrapStyle,
        dropdownTriggerKls,
        dropdownSize,
        currentTabId,
        handleCurrentTabIdChange,
        handlerMainButtonClick,
        handleEn尝试Focus,
        handleClose,
        handleOpen,
        onMountOnFocus,
        popperRef,
        triggeringElementRef,
        referenceElementRef
      };
    }
  });
  函数 _sfc_render$I(_ctx, _cache, $props, $setup, $data, $options) {
    变量 _a;
    常量 _component_el_dropdown_collection为vue.resolveComponent("el-dropdown-collection");
    常量 _component_el_roving_focus_group为vue.resolveComponent("el-roving-focus-group");
    常量 _component_el_focus_trap为vue.resolveComponent("el-focus-trap");
    常量 _component_el_scrollbar为vue.resolveComponent("el-scrollbar");
    常量 _component_el_tooltip为vue.resolveComponent("el-tooltip");
    常量 _component_el_button为vue.resolveComponent("el-button");
    常量 _component_arrow_down为vue.resolveComponent("arrow-down");
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_el_button_group为vue.resolveComponent("el-button-group");
    返回 vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass([_ctx.ns.b(), _ctx.ns.is("disabled", _ctx.disabled)])
    }, [
      vue.createVNode(_component_el_tooltip, {
        ref: "popperRef",
        effect: _ctx.effect,
        "fallback-placements": ["bottom", "top"],
        "popper-options": _ctx.popperOptions,
        "gpu-acceleration": false,
        "hide-after": _ctx.trigger === "hover" ? _ctx.hideTimeout : 0,
        "manual-mode": true,
        placement: _ctx.placement,
        "popper-class": [_ctx.ns.e("popper"), _ctx.popperClass],
        "reference-element": (_a为_ctx.referenceElementRef) == null ? void 0 : _a.$el,
        trigger: _ctx.trigger,
        "show-after": _ctx.trigger === "hover" ? _ctx.showTimeout : 0,
        "stop-popper-mouse-event": false,
        "virtual-ref": _ctx.triggeringElementRef,
        "virtual-triggering": _ctx.splitButton,
        disabled: _ctx.disabled,
        "append-to-主体": "",
        pure: "",
        transition: `${_ctx.ns.名字space.value}-zoom-in-top`,
        persistent: "",
        onShow: _cache[0] 或 (_cache[0]为($event) => _ctx.$emit("visible-change", true)),
        onHide: _cache[1] 或 (_cache[1]为($event) => _ctx.$emit("visible-change", false))
      }, vue.createSlots({
        上下文: vue.withCtx(() => [
          vue.createVNode(_component_el_scrollbar, {
            ref: "scrollbar",
            "wrap-style": _ctx.wrapStyle,
            tag: "div",
            "view-class": _ctx.ns.e("list")
          }, {
            default: vue.withCtx(() => [
              vue.createVNode(_component_el_focus_trap, {
                trapped: "",
                onMountOnFocus: _ctx.onMountOnFocus
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_el_roving_focus_group, {
                    loop: _ctx.loop,
                    "current-tab-id": _ctx.currentTabId,
                    orientation: "horizontal",
                    onCurrentTabIdChange: _ctx.handleCurrentTabIdChange,
                    onEn尝试Focus: _ctx.handleEn尝试Focus
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_el_dropdown_collection, null, {
                        default: vue.withCtx(() => [
                          vue.renderSlot(_ctx.$slots, "dropdown")
                        ]),
                        _: 3
                      })
                    ]),
                    _: 3
                  }, 8, ["loop", "current-tab-id", "onCurrentTabIdChange", "onEn尝试Focus"])
                ]),
                _: 3
              }, 8, ["onMountOnFocus"])
            ]),
            _: 3
          }, 8, ["wrap-style", "view-class"])
        ]),
        _: 2
      }, [
        不_ctx.splitButton ? {
          名字: "default",
          fn: vue.withCtx(() => [
            vue.createElementVNode("div", {
              class: vue.normalizeClass(_ctx.dropdownTriggerKls)
            }, [
              vue.renderSlot(_ctx.$slots, "default")
            ], 2)
          ])
        } : void 0
      ]), 1032, ["effect", "popper-options", "hide-after", "placement", "popper-class", "reference-element", "trigger", "show-after", "virtual-ref", "virtual-triggering", "disabled", "transition"]),
      _ctx.splitButton ? (vue.openBlock(), vue.createBlock(_component_el_button_group, { key: 0 }, {
        default: vue.withCtx(() => [
          vue.createVNode(_component_el_button, vue.mergeProps({ ref: "referenceElementRef" }, _ctx.buttonProps, {
            size: _ctx.dropdownSize,
            type: _ctx.type,
            disabled: _ctx.disabled,
            onClick: _ctx.handlerMainButtonClick
          }), {
            default: vue.withCtx(() => [
              vue.renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 16, ["size", "type", "disabled", "onClick"]),
          vue.createVNode(_component_el_button, vue.mergeProps({ ref: "triggeringElementRef" }, _ctx.buttonProps, {
            size: _ctx.dropdownSize,
            type: _ctx.type,
            class: _ctx.ns.e("caret-button"),
            disabled: _ctx.disabled
          }), {
            default: vue.withCtx(() => [
              vue.createVNode(_component_el_icon, {
                class: vue.normalizeClass(_ctx.ns.e("icon"))
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_arrow_down)
                ]),
                _: 1
              }, 8, ["class"])
            ]),
            _: 1
          }, 16, ["size", "type", "class", "disabled"])
        ]),
        _: 3
      })) : vue.createCommentVNode("v-如果", true)
    ], 2);
  }
  变量 Dropdown为/* @__PURE__ */ _输出出口_sfc(_sfc_main$15, [["render", _sfc_render$I], ["__file", "dropdown.vue"]]);

  常量 _sfc_main$14为vue.defineComponent({
    名字: "DropdownItemImpl",
    components: {
      ElIcon
    },
    props: dropdownItemProps,
    emits: ["po整数ermove", "po整数erleave", "点击", "点击impl"],
    setup(_, { emit }) {
      常量 ns为useNamespace("dropdown");
      常量 { collectionItemRef: dropdownCollectionItemRef }为vue.inject(COLLECTION_ITEM_INJECTION_KEY, void 0);
      常量 { collectionItemRef: rovingFocusCollectionItemRef }为vue.inject(COLLECTION_ITEM_INJECTION_KEY$1, void 0);
      常量 {
        rovingFocusGroupItemRef,
        tabIndex,
        handleFocus,
        handleKeydown: handleItemKeydown,
        handleMousedown
      }为vue.inject(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, void 0);
      常量 itemRef为composeRefs(dropdownCollectionItemRef, rovingFocusCollectionItemRef, rovingFocusGroupItemRef);
      常量 handleKeydown为composeEventHandlers((e) => {
        常量 { code }为e;
        如果 (code === EVENT_CODE.enter 或 code === EVENT_CODE.space) {
          e.preventDefault();
          e.stopImmediatePropagation();
          emit("点击impl", e);
          返回 true;
        }
      }, handleItemKeydown);
      返回 {
        ns,
        itemRef,
        dataset: {
          [COLLECTION_ITEM_SIGN]: ""
        },
        tabIndex,
        handleFocus,
        handleKeydown,
        handleMousedown
      };
    }
  });
  常量 _hoisted_1$x为["aria-disabled", "tabindex"];
  函数 _sfc_render$H(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    返回 vue.openBlock(), vue.createElementBlock(vue.Fragment, null, [
      _ctx.divided ? (vue.openBlock(), vue.createElementBlock("li", vue.mergeProps({
        key: 0,
        class: _ctx.ns.bem("menu", "item", "divided")
      }, _ctx.$attrs), null, 16)) : vue.createCommentVNode("v-如果", true),
      vue.createElementVNode("li", vue.mergeProps({ ref: _ctx.itemRef }, { ..._ctx.dataset, ..._ctx.$attrs }, {
        "aria-disabled": _ctx.disabled,
        class: [_ctx.ns.be("menu", "item"), _ctx.ns.is("disabled", _ctx.disabled)],
        tabindex: _ctx.tabIndex,
        role: "menuitem",
        onClick: _cache[0] 或 (_cache[0]为(e) => _ctx.$emit("点击impl", e)),
        onFocus: _cache[1] 或 (_cache[1]为(...args) => _ctx.handleFocus 与 _ctx.handleFocus(...args)),
        onKeydown: _cache[2] 或 (_cache[2]为(...args) => _ctx.handleKeydown 与 _ctx.handleKeydown(...args)),
        onMousedown: _cache[3] 或 (_cache[3]为(...args) => _ctx.handleMousedown 与 _ctx.handleMousedown(...args)),
        onPo整数ermove: _cache[4] 或 (_cache[4]为(e) => _ctx.$emit("po整数ermove", e)),
        onPo整数erleave: _cache[5] 或 (_cache[5]为(e) => _ctx.$emit("po整数erleave", e))
      }), [
        _ctx.icon ? (vue.openBlock(), vue.createBlock(_component_el_icon, { key: 0 }, {
          default: vue.withCtx(() => [
            (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.icon)))
          ]),
          _: 1
        })) : vue.createCommentVNode("v-如果", true),
        vue.renderSlot(_ctx.$slots, "default")
      ], 16, _hoisted_1$x)
    ], 64);
  }
  变量 ElDropdownItemImpl为/* @__PURE__ */ _输出出口_sfc(_sfc_main$14, [["render", _sfc_render$H], ["__file", "dropdown-item-impl.vue"]]);

  常量 useDropdown为() => {
    常量 elDropdown为vue.inject("elDropdown", {});
    常量 _elDropdownSize为vue.computed(() => elDropdown == null ? void 0 : elDropdown.dropdownSize);
    返回 {
      elDropdown,
      _elDropdownSize
    };
  };

  常量 _sfc_main$13为vue.defineComponent({
    名字: "ElDropdownItem",
    components: {
      ElDropdownCollectionItem: ElCollectionItem,
      ElRovingFocusItem,
      ElDropdownItemImpl
    },
    inheritAttrs: false,
    props: dropdownItemProps,
    emits: ["po整数ermove", "po整数erleave", "点击"],
    setup(props, { emit, attrs }) {
      常量 { elDropdown }为useDropdown();
      常量 _instance为vue.getCurrentInstance();
      常量 itemRef为vue.ref(null);
      常量 textContent为vue.computed(() => {
        变量 _a, _b;
        返回 (_b为(_a为vue.unref(itemRef)) == null ? void 0 : _a.textContent) 不= null ? _b : "";
      });
      常量 { onItemEnter, onItemLeave }为vue.inject(DROPDOWN_INJECTION_KEY, void 0);
      常量 handlePo整数erMove为composeEventHandlers((e) => {
        emit("po整数ermove", e);
        返回 e.defaultPrevented;
      }, whenMouse((e) => {
        变量 _a;
        如果 (props.disabled) {
          onItemLeave(e);
        } 否则 {
          onItemEnter(e);
          如果 (不e.defaultPrevented) {
            (_a为e.currentTarget) == null ? void 0 : _a.focus();
          }
        }
      }));
      常量 handlePo整数erLeave为composeEventHandlers((e) => {
        emit("po整数erleave", e);
        返回 e.defaultPrevented;
      }, whenMouse((e) => {
        onItemLeave(e);
      }));
      常量 handleClick为composeEventHandlers((e) => {
        emit("点击", e);
        返回 e.defaultPrevented;
      }, (e) => {
        变量 _a, _b, _c;
        如果 (props.disabled) {
          e.stopImmediatePropagation();
          返回;
        }
        如果 ((_a为elDropdown == null ? void 0 : elDropdown.hideOnClick) == null ? void 0 : _a.value) {
          (_b为elDropdown.handleClick) == null ? void 0 : _b.call(elDropdown);
        }
        (_c为elDropdown.commandHandler) == null ? void 0 : _c.call(elDropdown, props.command, _instance, e);
      });
      常量 propsAndAttrs为vue.computed(() => {
        返回 { ...props, ...attrs };
      });
      返回 {
        handleClick,
        handlePo整数erMove,
        handlePo整数erLeave,
        textContent,
        propsAndAttrs
      };
    }
  });
  函数 _sfc_render$G(_ctx, _cache, $props, $setup, $data, $options) {
    变量 _a;
    常量 _component_el_dropdown_item_impl为vue.resolveComponent("el-dropdown-item-impl");
    常量 _component_el_roving_focus_item为vue.resolveComponent("el-roving-focus-item");
    常量 _component_el_dropdown_collection_item为vue.resolveComponent("el-dropdown-collection-item");
    返回 vue.openBlock(), vue.createBlock(_component_el_dropdown_collection_item, {
      disabled: _ctx.disabled,
      "text-value": (_a为_ctx.textValue) 不= null ? _a : _ctx.textContent
    }, {
      default: vue.withCtx(() => [
        vue.createVNode(_component_el_roving_focus_item, {
          focusable: 不_ctx.disabled
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_el_dropdown_item_impl, vue.mergeProps(_ctx.propsAndAttrs, {
              onPo整数erleave: _ctx.handlePo整数erLeave,
              onPo整数ermove: _ctx.handlePo整数erMove,
              onClickimpl: _ctx.handleClick
            }), {
              default: vue.withCtx(() => [
                vue.renderSlot(_ctx.$slots, "default")
              ]),
              _: 3
            }, 16, ["onPo整数erleave", "onPo整数ermove", "onClickimpl"])
          ]),
          _: 3
        }, 8, ["focusable"])
      ]),
      _: 3
    }, 8, ["disabled", "text-value"]);
  }
  变量 DropdownItem为/* @__PURE__ */ _输出出口_sfc(_sfc_main$13, [["render", _sfc_render$G], ["__file", "dropdown-item.vue"]]);

  常量 _sfc_main$12为vue.defineComponent({
    名字: "ElDropdownMenu",
    props: dropdownMenuProps,
    setup(props) {
      常量 ns为useNamespace("dropdown");
      常量 { _elDropdownSize }为useDropdown();
      常量 size为_elDropdownSize.value;
      常量 { focusTrapRef, onKeydown }为vue.inject(FOCUS_TRAP_INJECTION_KEY, void 0);
      常量 { 上下文Ref }为vue.inject(DROPDOWN_INJECTION_KEY, void 0);
      常量 { collectionRef: dropdownCollectionRef, getItems }为vue.inject(COLLECTION_INJECTION_KEY, void 0);
      常量 {
        rovingFocusGroupRef,
        rovingFocusGroupRootStyle,
        tabIndex,
        onBlur,
        onFocus,
        onMousedown
      }为vue.inject(ROVING_FOCUS_GROUP_INJECTION_KEY, void 0);
      常量 { collectionRef: rovingFocusGroupCollectionRef }为vue.inject(COLLECTION_INJECTION_KEY$1, void 0);
      常量 dropdownKls为vue.computed(() => {
        返回 [ns.b("menu"), ns.bm("menu", size == null ? void 0 : size.value)];
      });
      常量 dropdownListWrapperRef为composeRefs(上下文Ref, dropdownCollectionRef, focusTrapRef, rovingFocusGroupRef, rovingFocusGroupCollectionRef);
      常量 composedKeydown为composeEventHandlers((e) => {
        变量 _a;
        (_a为props.onKeydown) == null ? void 0 : _a.call(props, e);
      }, (e) => {
        常量 { currentTarget, code, target }为e;
        currentTarget.contains(target);
        如果 (EVENT_CODE.tab === code) {
          e.stopImmediatePropagation();
        }
        e.preventDefault();
        如果 (target 不== vue.unref(上下文Ref))
          返回;
        如果 (不FIRST_LAST_KEYS.includes(code))
          返回;
        常量 items为getItems().filter((item) => 不item.disabled);
        常量 targets为items.map((item) => item.ref);
        如果 (LAST_KEYS.includes(code)) {
          targets.reverse();
        }
        focusFirst(targets);
      });
      常量 handleKeydown为(e) => {
        composedKeydown(e);
        onKeydown(e);
      };
      返回 {
        size,
        rovingFocusGroupRootStyle,
        tabIndex,
        dropdownKls,
        dropdownListWrapperRef,
        handleKeydown,
        onBlur,
        onFocus,
        onMousedown
      };
    }
  });
  函数 _sfc_render$F(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("ul", {
      ref: _ctx.dropdownListWrapperRef,
      class: vue.normalizeClass(_ctx.dropdownKls),
      style: vue.normalizeStyle(_ctx.rovingFocusGroupRootStyle),
      tabindex: -1,
      role: "menu",
      onBlur: _cache[0] 或 (_cache[0]为(...args) => _ctx.onBlur 与 _ctx.onBlur(...args)),
      onFocus: _cache[1] 或 (_cache[1]为(...args) => _ctx.onFocus 与 _ctx.onFocus(...args)),
      onKeydown: _cache[2] 或 (_cache[2]为(...args) => _ctx.handleKeydown 与 _ctx.handleKeydown(...args)),
      onMousedown: _cache[3] 或 (_cache[3]为(...args) => _ctx.onMousedown 与 _ctx.onMousedown(...args))
    }, [
      vue.renderSlot(_ctx.$slots, "default")
    ], 38);
  }
  变量 DropdownMenu为/* @__PURE__ */ _输出出口_sfc(_sfc_main$12, [["render", _sfc_render$F], ["__file", "dropdown-menu.vue"]]);

  常量 ElDropdown为withInstall(Dropdown, {
    DropdownItem,
    DropdownMenu
  });
  常量 ElDropdownItem为withNoopInstall(DropdownItem);
  常量 ElDropdownMenu为withNoopInstall(DropdownMenu);

  让 id为0;
  常量 _sfc_main$11为vue.defineComponent({
    名字: "ImgEmpty",
    setup() {
      返回 {
        id: 加一id
      };
    }
  });
  常量 _hoisted_1$w为{
    viewBox: "0 0 79 86",
    version: "1.1",
    xmlns: "http://www.w3.org/2000/svg",
    "xmlns:xlink": "http://www.w3.org/1999/xlink"
  };
  常量 _hoisted_2$k为["id"];
  常量 _hoisted_3$9为/* @__PURE__ */ vue.createElementVNode("stop", {
    "stop-color": "变量(--el-empty-fill-color-1)",
    offset: "0%"
  }, null, -1);
  常量 _hoisted_4$6为/* @__PURE__ */ vue.createElementVNode("stop", {
    "stop-color": "变量(--el-empty-fill-color-4)",
    offset: "100%"
  }, null, -1);
  常量 _hoisted_5$5为[
    _hoisted_3$9,
    _hoisted_4$6
  ];
  常量 _hoisted_6$2为["id"];
  常量 _hoisted_7$1为/* @__PURE__ */ vue.createElementVNode("stop", {
    "stop-color": "变量(--el-empty-fill-color-1)",
    offset: "0%"
  }, null, -1);
  常量 _hoisted_8$1为/* @__PURE__ */ vue.createElementVNode("stop", {
    "stop-color": "变量(--el-empty-fill-color-6)",
    offset: "100%"
  }, null, -1);
  常量 _hoisted_9$1为[
    _hoisted_7$1,
    _hoisted_8$1
  ];
  常量 _hoisted_10$1为["id"];
  常量 _hoisted_11为{
    id: "Illustrations",
    stroke: "none",
    "stroke-宽度": "1",
    fill: "none",
    "fill-rule": "evenodd"
  };
  常量 _hoisted_12为{
    id: "B-type",
    trans变量循环m: "translate(-1268.000000, -535.000000)"
  };
  常量 _hoisted_13为{
    id: "Group-2",
    trans变量循环m: "translate(1268.000000, 535.000000)"
  };
  常量 _hoisted_14为/* @__PURE__ */ vue.createElementVNode("path", {
    id: "Oval-Copy-2",
    d: "M39.5,86 C61.3152476,86 79,83.9106622 79,81.3333333 C79,78.7560045 57.3152476,78 35.5,78 C13.6847524,78 0,78.7560045 0,81.3333333 C0,83.9106622 17.6847524,86 39.5,86 Z",
    fill: "变量(--el-empty-fill-color-3)"
  }, null, -1);
  常量 _hoisted_15为/* @__PURE__ */ vue.createElementVNode("polygon", {
    id: "Rectangle-Copy-14",
    fill: "变量(--el-empty-fill-color-7)",
    trans变量循环m: "translate(27.500000, 51.500000) scale(1, -1) translate(-27.500000, -51.500000) ",
    po整数s: "13 58 53 58 42 45 2 45"
  }, null, -1);
  常量 _hoisted_16为{
    id: "Group-Copy",
    trans变量循环m: "translate(34.500000, 31.500000) scale(-1, 1) rotate(-25.000000) translate(-34.500000, -31.500000) translate(7.000000, 10.000000)"
  };
  常量 _hoisted_17为/* @__PURE__ */ vue.createElementVNode("polygon", {
    id: "Rectangle-Copy-10",
    fill: "变量(--el-empty-fill-color-7)",
    trans变量循环m: "translate(11.500000, 5.000000) scale(1, -1) translate(-11.500000, -5.000000) ",
    po整数s: "2.84078316e-14 3 18 3 23 7 5 7"
  }, null, -1);
  常量 _hoisted_18为/* @__PURE__ */ vue.createElementVNode("polygon", {
    id: "Rectangle-Copy-11",
    fill: "变量(--el-empty-fill-color-5)",
    po整数s: "-3.69149156e-15 7 38 7 38 43 -3.69149156e-15 43"
  }, null, -1);
  常量 _hoisted_19为["fill"];
  常量 _hoisted_20为/* @__PURE__ */ vue.createElementVNode("polygon", {
    id: "Rectangle-Copy-13",
    fill: "变量(--el-empty-fill-color-2)",
    trans变量循环m: "translate(39.500000, 3.500000) scale(-1, 1) translate(-39.500000, -3.500000) ",
    po整数s: "24 7 41 7 55 -3.63806207e-12 38 -3.63806207e-12"
  }, null, -1);
  常量 _hoisted_21为["fill"];
  常量 _hoisted_22为{
    id: "Rectangle-Copy-17",
    trans变量循环m: "translate(53.000000, 45.000000)"
  };
  常量 _hoisted_23为["id"];
  常量 _hoisted_24为["xlink:href"];
  常量 _hoisted_25为["xlink:href"];
  常量 _hoisted_26为["mask"];
  常量 _hoisted_27为/* @__PURE__ */ vue.createElementVNode("polygon", {
    id: "Rectangle-Copy-18",
    fill: "变量(--el-empty-fill-color-2)",
    trans变量循环m: "translate(66.000000, 51.500000) scale(-1, 1) translate(-66.000000, -51.500000) ",
    po整数s: "62 45 79 45 70 58 53 58"
  }, null, -1);
  函数 _sfc_render$E(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("svg", _hoisted_1$w, [
      vue.createElementVNode("defs", null, [
        vue.createElementVNode("linearGradient", {
          id: `linearGradient-1-${_ctx.id}`,
          x1: "38.8503086%",
          y1: "0%",
          x2: "61.1496914%",
          y2: "100%"
        }, _hoisted_5$5, 8, _hoisted_2$k),
        vue.createElementVNode("linearGradient", {
          id: `linearGradient-2-${_ctx.id}`,
          x1: "0%",
          y1: "9.5%",
          x2: "100%",
          y2: "90.5%"
        }, _hoisted_9$1, 8, _hoisted_6$2),
        vue.createElementVNode("rect", {
          id: `path-3-${_ctx.id}`,
          x: "0",
          y: "0",
          宽度: "17",
          height: "36"
        }, null, 8, _hoisted_10$1)
      ]),
      vue.createElementVNode("g", _hoisted_11, [
        vue.createElementVNode("g", _hoisted_12, [
          vue.createElementVNode("g", _hoisted_13, [
            _hoisted_14,
            _hoisted_15,
            vue.createElementVNode("g", _hoisted_16, [
              _hoisted_17,
              _hoisted_18,
              vue.createElementVNode("rect", {
                id: "Rectangle-Copy-12",
                fill: `url(#linearGradient-1-${_ctx.id})`,
                trans变量循环m: "translate(46.500000, 25.000000) scale(-1, 1) translate(-46.500000, -25.000000) ",
                x: "38",
                y: "7",
                宽度: "17",
                height: "36"
              }, null, 8, _hoisted_19),
              _hoisted_20
            ]),
            vue.createElementVNode("rect", {
              id: "Rectangle-Copy-15",
              fill: `url(#linearGradient-2-${_ctx.id})`,
              x: "13",
              y: "45",
              宽度: "40",
              height: "36"
            }, null, 8, _hoisted_21),
            vue.createElementVNode("g", _hoisted_22, [
              vue.createElementVNode("mask", {
                id: `mask-4-${_ctx.id}`,
                fill: "变量(--el-empty-fill-color-0)"
              }, [
                vue.createElementVNode("use", {
                  "xlink:href": `#path-3-${_ctx.id}`
                }, null, 8, _hoisted_24)
              ], 8, _hoisted_23),
              vue.createElementVNode("use", {
                id: "Mask",
                fill: "变量(--el-empty-fill-color-8)",
                trans变量循环m: "translate(8.500000, 18.000000) scale(-1, 1) translate(-8.500000, -18.000000) ",
                "xlink:href": `#path-3-${_ctx.id}`
              }, null, 8, _hoisted_25),
              vue.createElementVNode("polygon", {
                id: "Rectangle-Copy",
                fill: "变量(--el-empty-fill-color-9)",
                mask: `url(#mask-4-${_ctx.id})`,
                trans变量循环m: "translate(12.000000, 9.000000) scale(-1, 1) translate(-12.000000, -9.000000) ",
                po整数s: "7 0 24 0 20 18 -1.70530257e-13 16"
              }, null, 8, _hoisted_26)
            ]),
            _hoisted_27
          ])
        ])
      ])
    ]);
  }
  变量 ImgEmpty为/* @__PURE__ */ _输出出口_sfc(_sfc_main$11, [["render", _sfc_render$E], ["__file", "img-empty.vue"]]);

  常量 emptyProps为{
    image: {
      type: String,
      default: ""
    },
    imageSize: Number,
    description: {
      type: String,
      default: ""
    }
  };

  常量 _hoisted_1$v为["src"];
  常量 _hoisted_2$j为{ key: 1 };
  常量 __default__$k为{
    名字: "ElEmpty"
  };
  常量 _sfc_main$10为/* @__PURE__ */ vue.defineComponent({
    ...__default__$k,
    props: emptyProps,
    setup(__props) {
      常量 props为__props;
      常量 { t }为useLocale();
      常量 ns为useNamespace("empty");
      常量 emptyDescription为vue.computed(() => props.description 或 t("el.table.emptyText"));
      常量 imageStyle为vue.computed(() => ({
        宽度: props.imageSize ? `${props.imageSize}px` : ""
      }));
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(vue.unref(ns).b())
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns).e("image")),
            style: vue.normalizeStyle(vue.unref(imageStyle))
          }, [
            _ctx.image ? (vue.openBlock(), vue.createElementBlock("img", {
              key: 0,
              src: _ctx.image,
              ondragstart: "返回 false"
            }, null, 8, _hoisted_1$v)) : vue.renderSlot(_ctx.$slots, "image", { key: 1 }, () => [
              vue.createVNode(ImgEmpty)
            ])
          ], 6),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns).e("description"))
          }, [
            _ctx.$slots.description ? vue.renderSlot(_ctx.$slots, "description", { key: 0 }) : (vue.openBlock(), vue.createElementBlock("p", _hoisted_2$j, vue.toDisplayString(vue.unref(emptyDescription)), 1))
          ], 2),
          _ctx.$slots.default ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns).e("bottom"))
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2)) : vue.createCommentVNode("v-如果", true)
        ], 2);
      };
    }
  });
  变量 Empty为/* @__PURE__ */ _输出出口_sfc(_sfc_main$10, [["__file", "empty.vue"]]);

  常量 ElEmpty为withInstall(Empty);

  常量 变量循环mProps为buildProps({
    model: Object,
    rules: {
      type: definePropType(Object)
    },
    labelPosition: String,
    labelWidth: {
      type: [String, Number],
      default: ""
    },
    labelSuffix: {
      type: String,
      default: ""
    },
    inline: Boolean,
    inlineMessage: Boolean,
    statusIcon: Boolean,
    showMessage: {
      type: Boolean,
      default: true
    },
    size: {
      type: String,
      values: componentSizes
    },
    disabled: Boolean,
    validateOnRuleChange: {
      type: Boolean,
      default: true
    },
    hideRequiredAsterisk: {
      type: Boolean,
      default: false
    },
    scrollToError: Boolean
  });
  常量 变量循环mEmits为{
    validate: (prop, isValid, message) => (isArray(prop) 或 isString(prop)) 与 isBoolean(isValid) 与 isString(message)
  };

  函数 useFormLabelWidth() {
    常量 potentialLabelWidthArr为vue.ref([]);
    常量 autoLabelWidth为vue.computed(() => {
      如果 (不potentialLabelWidthArr.value.长度)
        返回 "0";
      常量 max为Math.max(...potentialLabelWidthArr.value);
      返回 max ? `${max}px` : "";
    });
    函数 getLabelWidthIndex(宽度) {
      常量 index为potentialLabelWidthArr.value.indexOf(宽度);
      返回 index;
    }
    函数 registerLabelWidth(val, oldVal) {
      如果 (val 与 oldVal) {
        常量 index为getLabelWidthIndex(oldVal);
        potentialLabelWidthArr.value.splice(index, 1, val);
      } 否则 如果 (val) {
        potentialLabelWidthArr.value.push(val);
      }
    }
    函数 deregisterLabelWidth(val) {
      常量 index为getLabelWidthIndex(val);
      如果 (index大于-1) {
        potentialLabelWidthArr.value.splice(index, 1);
      }
    }
    返回 {
      autoLabelWidth,
      registerLabelWidth,
      deregisterLabelWidth
    };
  }
  常量 filterFields为(fields, props) => {
    常量 normalized为castArray$1(props);
    返回 normalized.长度大于0 ? fields.filter((field) => field.prop 与 normalized.includes(field.prop)) : fields;
  };

  常量 __default__$j为{
    名字: "ElForm"
  };
  常量 _sfc_main$$为/* @__PURE__ */ vue.defineComponent({
    ...__default__$j,
    props: 变量循环mProps,
    emits: 变量循环mEmits,
    setup(__props, { expose, emit }) {
      常量 props为__props;
      常量 fields为[];
      常量 变量循环mSize为useSize();
      常量 ns为useNamespace("变量循环m");
      常量 变量循环mClasses为vue.computed(() => {
        常量 { labelPosition, inline }为props;
        返回 [
          ns.b(),
          ns.m(变量循环mSize.value 或 "default"),
          {
            [ns.m(`label-${labelPosition}`)]: labelPosition,
            [ns.m("inline")]: inline
          }
        ];
      });
      常量 addField为(field) => {
        fields.push(field);
      };
      常量 removeField为(field) => {
        如果 (field.prop) {
          fields.splice(fields.indexOf(field), 1);
        }
      };
      常量 resetFields为(properties为[]) => {
        如果 (不props.model) {
          返回;
        }
        filterFields(fields, properties).变量循环Each((field) => field.resetField());
      };
      常量 clearValidate为(props2为[]) => {
        filterFields(fields, props2).变量循环Each((field) => field.clearValidate());
      };
      常量 isValidatable为vue.computed(() => {
        常量 hasModel为不不props.model;
        返回 hasModel;
      });
      常量 obtainValidateFields为(props2) => {
        如果 (fields.长度 === 0)
          返回 [];
        常量 filteredFields为filterFields(fields, props2);
        如果 (不filteredFields.长度) {
          返回 [];
        }
        返回 filteredFields;
      };
      常量 validate为async (callback) => validateField(void 0, callback);
      常量 doValidateField为async (props2为[]) => {
        如果 (不isValidatable.value)
          返回 false;
        常量 fields2为obtainValidateFields(props2);
        如果 (fields2.长度 === 0)
          返回 true;
        让 validationErrors为{};
        变量循环 (常量 field of fields2) {
          尝试 {
            await field.validate("");
          } 捕获到 (fields3) {
            validationErrors为{
              ...validationErrors,
              ...fields3
            };
          }
        }
        如果 (Object.keys(validationErrors).长度 === 0)
          返回 true;
        返回 Promise.reject(validationErrors);
      };
      常量 validateField为async (modelProps为[], callback) => {
        常量 shouldThrow为不isFunction(callback);
        尝试 {
          常量 result为await doValidateField(modelProps);
          如果 (result === true) {
            callback == null ? void 0 : callback(result);
          }
          返回 result;
        } 捕获到 (e) {
          常量 invalidFields为e;
          如果 (props.scrollToError) {
            scrollToField(Object.keys(invalidFields)[0]);
          }
          callback == null ? void 0 : callback(false, invalidFields);
          返回 shouldThrow 与 Promise.reject(invalidFields);
        }
      };
      常量 scrollToField为(prop) => {
        变量 _a;
        常量 field为filterFields(fields, prop)[0];
        如果 (field) {
          (_a为field.$el) == null ? void 0 : _a.scrollIntoView();
        }
      };
      vue.watch(() => props.rules, () => {
        如果 (props.validateOnRuleChange)
          validate();
      }, { deep: true });
      vue.provide(变量循环mContextKey, vue.reactive({
        ...vue.toRefs(props),
        emit,
        resetFields,
        clearValidate,
        validateField,
        addField,
        removeField,
        ...useFormLabelWidth()
      }));
      expose({
        validate,
        validateField,
        resetFields,
        clearValidate,
        scrollToField
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("变量循环m", {
          class: vue.normalizeClass(vue.unref(变量循环mClasses))
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 2);
      };
    }
  });
  变量 Form为/* @__PURE__ */ _输出出口_sfc(_sfc_main$$, [["__file", "变量循环m.vue"]]);

  函数 _extends() {
    _extends为Object.assign 或 函数(target) {
      变量循环 (变量 i为1; i < arguments.长度; i加一) {
        变量 source为arguments[i];
        变量循环 (变量 key 在 source) {
          如果 (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key]为source[key];
          }
        }
      }
      返回 target;
    };
    返回 _extends.apply(this, arguments);
  }
  函数 _inheritsLoose(subClass, superClass) {
    subClass.prototype为Object.create(superClass.prototype);
    subClass.prototype.常量ructor为subClass;
    _setPrototypeOf(subClass, superClass);
  }
  函数 _getPrototypeOf(o) {
    _getPrototypeOf为Object.setPrototypeOf ? Object.getPrototypeOf : 函数 _getPrototypeOf2(o2) {
      返回 o2.__proto__ 或 Object.getPrototypeOf(o2);
    };
    返回 _getPrototypeOf(o);
  }
  函数 _setPrototypeOf(o, p) {
    _setPrototypeOf为Object.setPrototypeOf 或 函数 _setPrototypeOf2(o2, p2) {
      o2.__proto__为p2;
      返回 o2;
    };
    返回 _setPrototypeOf(o, p);
  }
  函数 _isNativeReflectConstruct() {
    如果 (类型是 Reflect === "undefined" 或 不Reflect.常量ruct)
      返回 false;
    如果 (Reflect.常量ruct.sham)
      返回 false;
    如果 (类型是 Proxy === "函数")
      返回 true;
    尝试 {
      Boolean.prototype.valueOf.call(Reflect.常量ruct(Boolean, [], 函数() {
      }));
      返回 true;
    } 捕获到 (e) {
      返回 false;
    }
  }
  函数 _常量ruct(Parent, args, Class) {
    如果 (_isNativeReflectConstruct()) {
      _常量ruct为Reflect.常量ruct;
    } 否则 {
      _常量ruct为函数 _常量ruct2(Parent2, args2, Class2) {
        变量 a为[null];
        a.push.apply(a, args2);
        变量 Constructor为Function.bind.apply(Parent2, a);
        变量 instance为new Constructor();
        如果 (Class2)
          _setPrototypeOf(instance, Class2.prototype);
        返回 instance;
      };
    }
    返回 _常量ruct.apply(null, arguments);
  }
  函数 _isNativeFunction(fn) {
    返回 Function.toString.call(fn).indexOf("[native code]") 不== -1;
  }
  函数 _wrapNativeSuper(Class) {
    变量 _cache为类型是 Map === "函数" ? /* @__PURE__ */ new Map() : void 0;
    _wrapNativeSuper为函数 _wrapNativeSuper2(Class2) {
      如果 (Class2 === null 或 不_isNativeFunction(Class2))
        返回 Class2;
      如果 (类型是 Class2 不== "函数") {
        抛出 new TypeError("Super expression must either be null or a 函数");
      }
      如果 (类型是 _cache 不== "undefined") {
        如果 (_cache.has(Class2))
          返回 _cache.get(Class2);
        _cache.set(Class2, Wrapper);
      }
      函数 Wrapper() {
        返回 _常量ruct(Class2, arguments, _getPrototypeOf(this).常量ructor);
      }
      Wrapper.prototype为Object.create(Class2.prototype, {
        常量ructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      返回 _setPrototypeOf(Wrapper, Class2);
    };
    返回 _wrapNativeSuper(Class);
  }
  变量 变量循环matRegExp为/%[sdj%]/g;
  变量 warning为函数 warning2() {
  };
  如果 (类型是 process 不== "undefined" 与 process.env 与 false) {
    warning为函数 warning3(type4, errors) {
      如果 (类型是 终端 不== "undefined" 与 终端.warn 与 类型是 ASYNC_VALIDATOR_NO_WARNING === "undefined") {
        如果 (errors.every(函数(e) {
          返回 类型是 e === "string";
        })) {
          终端.warn(type4, errors);
        }
      }
    };
  }
  函数 convertFieldsError(errors) {
    如果 (不errors 或 不errors.长度)
      返回 null;
    变量 fields为{};
    errors.变量循环Each(函数(error) {
      变量 field为error.field;
      fields[field]为fields[field] 或 [];
      fields[field].push(error);
    });
    返回 fields;
  }
  函数 变量循环mat(template) {
    变量循环 (变量 _len为arguments.长度, args为new Array(_len大于1 ? _len - 1 : 0), _key为1; _key < _len; _key加一) {
      args[_key - 1]为arguments[_key];
    }
    变量 i为0;
    变量 len为args.长度;
    如果 (类型是 template === "函数") {
      返回 template.apply(null, args);
    }
    如果 (类型是 template === "string") {
      变量 str为template.replace(变量循环matRegExp, 函数(x) {
        如果 (x === "%%") {
          返回 "%";
        }
        如果 (i >= len) {
          返回 x;
        }
        主分支 (x) {
          子分支 "%s":
            返回 String(args[i加一]);
          子分支 "%d":
            返回 Number(args[i加一]);
          子分支 "%j":
            尝试 {
              返回 JSON.string如果y(args[i加一]);
            } 捕获到 (_) {
              返回 "[Circular]";
            }
            break;
          default:
            返回 x;
        }
      });
      返回 str;
    }
    返回 template;
  }
  函数 isNativeStringType(type4) {
    返回 type4 === "string" 或 type4 === "url" 或 type4 === "hex" 或 type4 === "email" 或 type4 === "date" 或 type4 === "pattern";
  }
  函数 isEmptyValue(value, type4) {
    如果 (value === void 0 或 value === null) {
      返回 true;
    }
    如果 (type4 === "array" 与 Array.isArray(value) 与 不value.长度) {
      返回 true;
    }
    如果 (isNativeStringType(type4) 与 类型是 value === "string" 与 不value) {
      返回 true;
    }
    返回 false;
  }
  函数 asyncParallelArray(arr, func, callback) {
    变量 results为[];
    变量 total为0;
    变量 arrLength为arr.长度;
    函数 count(errors) {
      results.push.apply(results, errors 或 []);
      total加一;
      如果 (total === arrLength) {
        callback(results);
      }
    }
    arr.变量循环Each(函数(a) {
      func(a, count);
    });
  }
  函数 asyncSerialArray(arr, func, callback) {
    变量 index为0;
    变量 arrLength为arr.长度;
    函数 next(errors) {
      如果 (errors 与 errors.长度) {
        callback(errors);
        返回;
      }
      变量 original为index;
      index为index + 1;
      如果 (original < arrLength) {
        func(arr[original], next);
      } 否则 {
        callback([]);
      }
    }
    next([]);
  }
  函数 flattenObjArr(objArr) {
    变量 ret为[];
    Object.keys(objArr).变量循环Each(函数(k) {
      ret.push.apply(ret, objArr[k] 或 []);
    });
    返回 ret;
  }
  变量 AsyncValidationError为/* @__PURE__ */ 函数(_Error) {
    _inheritsLoose(AsyncValidationError2, _Error);
    函数 AsyncValidationError2(errors, fields) {
      变量 _this;
      _this为_Error.call(this, "Async Validation Error") 或 this;
      _this.errors为errors;
      _this.fields为fields;
      返回 _this;
    }
    返回 AsyncValidationError2;
  }(/* @__PURE__ */ _wrapNativeSuper(Error));
  函数 asyncMap(objArr, option, func, callback, source) {
    如果 (option.first) {
      变量 _pending为new Promise(函数(resolve, reject) {
        变量 next为函数 next2(errors) {
          callback(errors);
          返回 errors.长度 ? reject(new AsyncValidationError(errors, convertFieldsError(errors))) : resolve(source);
        };
        变量 flattenArr为flattenObjArr(objArr);
        asyncSerialArray(flattenArr, func, next);
      });
      _pending["捕获到"](函数(e) {
        返回 e;
      });
      返回 _pending;
    }
    变量 firstFields为option.firstFields === true ? Object.keys(objArr) : option.firstFields 或 [];
    变量 objArrKeys为Object.keys(objArr);
    变量 objArrLength为objArrKeys.长度;
    变量 total为0;
    变量 results为[];
    变量 pending为new Promise(函数(resolve, reject) {
      变量 next为函数 next2(errors) {
        results.push.apply(results, errors);
        total加一;
        如果 (total === objArrLength) {
          callback(results);
          返回 results.长度 ? reject(new AsyncValidationError(results, convertFieldsError(results))) : resolve(source);
        }
      };
      如果 (不objArrKeys.长度) {
        callback(results);
        resolve(source);
      }
      objArrKeys.变量循环Each(函数(key) {
        变量 arr为objArr[key];
        如果 (firstFields.indexOf(key) 不== -1) {
          asyncSerialArray(arr, func, next);
        } 否则 {
          asyncParallelArray(arr, func, next);
        }
      });
    });
    pending["捕获到"](函数(e) {
      返回 e;
    });
    返回 pending;
  }
  函数 isErrorObj(obj) {
    返回 不不(obj 与 obj.message 不== void 0);
  }
  函数 getValue(value, path) {
    变量 v为value;
    变量循环 (变量 i为0; i < path.长度; i加一) {
      如果 (v == void 0) {
        返回 v;
      }
      v为v[path[i]];
    }
    返回 v;
  }
  函数 complementError(rule, source) {
    返回 函数(oe) {
      变量 fieldValue;
      如果 (rule.fullFields) {
        fieldValue为getValue(source, rule.fullFields);
      } 否则 {
        fieldValue为source[oe.field 或 rule.fullField];
      }
      如果 (isErrorObj(oe)) {
        oe.field为oe.field 或 rule.fullField;
        oe.fieldValue为fieldValue;
        返回 oe;
      }
      返回 {
        message: 类型是 oe === "函数" ? oe() : oe,
        fieldValue,
        field: oe.field 或 rule.fullField
      };
    };
  }
  函数 deepMerge(target, source) {
    如果 (source) {
      变量循环 (变量 s 在 source) {
        如果 (source.hasOwnProperty(s)) {
          变量 value为source[s];
          如果 (类型是 value === "object" 与 类型是 target[s] === "object") {
            target[s]为_extends({}, target[s], value);
          } 否则 {
            target[s]为value;
          }
        }
      }
    }
    返回 target;
  }
  变量 required$1为函数 required(rule, value, source, errors, options, type4) {
    如果 (rule.required 与 (不source.hasOwnProperty(rule.field) 或 isEmptyValue(value, type4 或 rule.type))) {
      errors.push(变量循环mat(options.messages.required, rule.fullField));
    }
  };
  变量 whitespace为函数 whitespace2(rule, value, source, errors, options) {
    如果 (/^\s+$/.test(value) 或 value === "") {
      errors.push(变量循环mat(options.messages.whitespace, rule.fullField));
    }
  };
  变量 pattern$2为{
    email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+\.)+[a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]{2,}))$/,
    url: new RegExp("^(?不mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$", "i"),
    hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
  };
  变量 types为{
    整数eger: 函数 整数eger(value) {
      返回 types.number(value) 与 parseInt(value, 10) === value;
    },
    "浮点": 函数 浮点(value) {
      返回 types.number(value) 与 不types.整数eger(value);
    },
    array: 函数 array(value) {
      返回 Array.isArray(value);
    },
    regexp: 函数 regexp(value) {
      如果 (value instanceof RegExp) {
        返回 true;
      }
      尝试 {
        返回 不不new RegExp(value);
      } 捕获到 (e) {
        返回 false;
      }
    },
    date: 函数 date(value) {
      返回 类型是 value.getTime === "函数" 与 类型是 value.getMonth === "函数" 与 类型是 value.getYear === "函数" 与 不isNaN(value.getTime());
    },
    number: 函数 number(value) {
      如果 (isNaN(value)) {
        返回 false;
      }
      返回 类型是 value === "number";
    },
    object: 函数 object(value) {
      返回 类型是 value === "object" 与 不types.array(value);
    },
    method: 函数 method(value) {
      返回 类型是 value === "函数";
    },
    email: 函数 email(value) {
      返回 类型是 value === "string" 与 value.长度 <= 320 与 不不value.match(pattern$2.email);
    },
    url: 函数 url(value) {
      返回 类型是 value === "string" 与 value.长度 <= 2048 与 不不value.match(pattern$2.url);
    },
    hex: 函数 hex(value) {
      返回 类型是 value === "string" 与 不不value.match(pattern$2.hex);
    }
  };
  变量 type$1为函数 type(rule, value, source, errors, options) {
    如果 (rule.required 与 value === void 0) {
      required$1(rule, value, source, errors, options);
      返回;
    }
    变量 custom为["整数eger", "浮点", "array", "regexp", "object", "method", "email", "number", "date", "url", "hex"];
    变量 ruleType为rule.type;
    如果 (custom.indexOf(ruleType)大于-1) {
      如果 (不types[ruleType](value)) {
        errors.push(变量循环mat(options.messages.types[ruleType], rule.fullField, rule.type));
      }
    } 否则 如果 (ruleType 与 类型是 value 不== rule.type) {
      errors.push(变量循环mat(options.messages.types[ruleType], rule.fullField, rule.type));
    }
  };
  变量 range为函数 range2(rule, value, source, errors, options) {
    变量 len为类型是 rule.len === "number";
    变量 min为类型是 rule.min === "number";
    变量 max为类型是 rule.max === "number";
    变量 spRegexp为/[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    变量 val为value;
    变量 key为null;
    变量 num为类型是 value === "number";
    变量 str为类型是 value === "string";
    变量 arr为Array.isArray(value);
    如果 (num) {
      key为"number";
    } 否则 如果 (str) {
      key为"string";
    } 否则 如果 (arr) {
      key为"array";
    }
    如果 (不key) {
      返回 false;
    }
    如果 (arr) {
      val为value.长度;
    }
    如果 (str) {
      val为value.replace(spRegexp, "_").长度;
    }
    如果 (len) {
      如果 (val 不== rule.len) {
        errors.push(变量循环mat(options.messages[key].len, rule.fullField, rule.len));
      }
    } 否则 如果 (min 与 不max 与 val < rule.min) {
      errors.push(变量循环mat(options.messages[key].min, rule.fullField, rule.min));
    } 否则 如果 (max 与 不min 与 val大于rule.max) {
      errors.push(变量循环mat(options.messages[key].max, rule.fullField, rule.max));
    } 否则 如果 (min 与 max 与 (val < rule.min 或 val大于rule.max)) {
      errors.push(变量循环mat(options.messages[key].range, rule.fullField, rule.min, rule.max));
    }
  };
  变量 ENUM$1为"enum";
  变量 enumerable$1为函数 enumerable(rule, value, source, errors, options) {
    rule[ENUM$1]为Array.isArray(rule[ENUM$1]) ? rule[ENUM$1] : [];
    如果 (rule[ENUM$1].indexOf(value) === -1) {
      errors.push(变量循环mat(options.messages[ENUM$1], rule.fullField, rule[ENUM$1].join(", ")));
    }
  };
  变量 pattern$1为函数 pattern(rule, value, source, errors, options) {
    如果 (rule.pattern) {
      如果 (rule.pattern instanceof RegExp) {
        rule.pattern.lastIndex为0;
        如果 (不rule.pattern.test(value)) {
          errors.push(变量循环mat(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
        }
      } 否则 如果 (类型是 rule.pattern === "string") {
        变量 _pattern为new RegExp(rule.pattern);
        如果 (不_pattern.test(value)) {
          errors.push(变量循环mat(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
        }
      }
    }
  };
  变量 rules为{
    required: required$1,
    whitespace,
    type: type$1,
    range,
    "enum": enumerable$1,
    pattern: pattern$1
  };
  变量 string为函数 string2(rule, value, callback, source, options) {
    变量 errors为[];
    变量 validate为rule.required 或 不rule.required 与 source.hasOwnProperty(rule.field);
    如果 (validate) {
      如果 (isEmptyValue(value, "string") 与 不rule.required) {
        返回 callback();
      }
      rules.required(rule, value, source, errors, options, "string");
      如果 (不isEmptyValue(value, "string")) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
        rules.pattern(rule, value, source, errors, options);
        如果 (rule.whitespace === true) {
          rules.whitespace(rule, value, source, errors, options);
        }
      }
    }
    callback(errors);
  };
  变量 method2为函数 method3(rule, value, callback, source, options) {
    变量 errors为[];
    变量 validate为rule.required 或 不rule.required 与 source.hasOwnProperty(rule.field);
    如果 (validate) {
      如果 (isEmptyValue(value) 与 不rule.required) {
        返回 callback();
      }
      rules.required(rule, value, source, errors, options);
      如果 (value 不== void 0) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  变量 number2为函数 number3(rule, value, callback, source, options) {
    变量 errors为[];
    变量 validate为rule.required 或 不rule.required 与 source.hasOwnProperty(rule.field);
    如果 (validate) {
      如果 (value === "") {
        value为void 0;
      }
      如果 (isEmptyValue(value) 与 不rule.required) {
        返回 callback();
      }
      rules.required(rule, value, source, errors, options);
      如果 (value 不== void 0) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  变量 _boolean为函数 _boolean2(rule, value, callback, source, options) {
    变量 errors为[];
    变量 validate为rule.required 或 不rule.required 与 source.hasOwnProperty(rule.field);
    如果 (validate) {
      如果 (isEmptyValue(value) 与 不rule.required) {
        返回 callback();
      }
      rules.required(rule, value, source, errors, options);
      如果 (value 不== void 0) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  变量 regexp2为函数 regexp3(rule, value, callback, source, options) {
    变量 errors为[];
    变量 validate为rule.required 或 不rule.required 与 source.hasOwnProperty(rule.field);
    如果 (validate) {
      如果 (isEmptyValue(value) 与 不rule.required) {
        返回 callback();
      }
      rules.required(rule, value, source, errors, options);
      如果 (不isEmptyValue(value)) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  变量 整数eger2为函数 整数eger3(rule, value, callback, source, options) {
    变量 errors为[];
    变量 validate为rule.required 或 不rule.required 与 source.hasOwnProperty(rule.field);
    如果 (validate) {
      如果 (isEmptyValue(value) 与 不rule.required) {
        返回 callback();
      }
      rules.required(rule, value, source, errors, options);
      如果 (value 不== void 0) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  变量 浮点Fn为函数 浮点Fn2(rule, value, callback, source, options) {
    变量 errors为[];
    变量 validate为rule.required 或 不rule.required 与 source.hasOwnProperty(rule.field);
    如果 (validate) {
      如果 (isEmptyValue(value) 与 不rule.required) {
        返回 callback();
      }
      rules.required(rule, value, source, errors, options);
      如果 (value 不== void 0) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  变量 array2为函数 array3(rule, value, callback, source, options) {
    变量 errors为[];
    变量 validate为rule.required 或 不rule.required 与 source.hasOwnProperty(rule.field);
    如果 (validate) {
      如果 ((value === void 0 或 value === null) 与 不rule.required) {
        返回 callback();
      }
      rules.required(rule, value, source, errors, options, "array");
      如果 (value 不== void 0 与 value 不== null) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  变量 object2为函数 object3(rule, value, callback, source, options) {
    变量 errors为[];
    变量 validate为rule.required 或 不rule.required 与 source.hasOwnProperty(rule.field);
    如果 (validate) {
      如果 (isEmptyValue(value) 与 不rule.required) {
        返回 callback();
      }
      rules.required(rule, value, source, errors, options);
      如果 (value 不== void 0) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  变量 ENUM为"enum";
  变量 enumerable2为函数 enumerable3(rule, value, callback, source, options) {
    变量 errors为[];
    变量 validate为rule.required 或 不rule.required 与 source.hasOwnProperty(rule.field);
    如果 (validate) {
      如果 (isEmptyValue(value) 与 不rule.required) {
        返回 callback();
      }
      rules.required(rule, value, source, errors, options);
      如果 (value 不== void 0) {
        rules[ENUM](rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  变量 pattern2为函数 pattern3(rule, value, callback, source, options) {
    变量 errors为[];
    变量 validate为rule.required 或 不rule.required 与 source.hasOwnProperty(rule.field);
    如果 (validate) {
      如果 (isEmptyValue(value, "string") 与 不rule.required) {
        返回 callback();
      }
      rules.required(rule, value, source, errors, options);
      如果 (不isEmptyValue(value, "string")) {
        rules.pattern(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  变量 date2为函数 date3(rule, value, callback, source, options) {
    变量 errors为[];
    变量 validate为rule.required 或 不rule.required 与 source.hasOwnProperty(rule.field);
    如果 (validate) {
      如果 (isEmptyValue(value, "date") 与 不rule.required) {
        返回 callback();
      }
      rules.required(rule, value, source, errors, options);
      如果 (不isEmptyValue(value, "date")) {
        变量 dateObject;
        如果 (value instanceof Date) {
          dateObject为value;
        } 否则 {
          dateObject为new Date(value);
        }
        rules.type(rule, dateObject, source, errors, options);
        如果 (dateObject) {
          rules.range(rule, dateObject.getTime(), source, errors, options);
        }
      }
    }
    callback(errors);
  };
  变量 required2为函数 required3(rule, value, callback, source, options) {
    变量 errors为[];
    变量 type4为Array.isArray(value) ? "array" : 类型是 value;
    rules.required(rule, value, source, errors, options, type4);
    callback(errors);
  };
  变量 type2为函数 type3(rule, value, callback, source, options) {
    变量 ruleType为rule.type;
    变量 errors为[];
    变量 validate为rule.required 或 不rule.required 与 source.hasOwnProperty(rule.field);
    如果 (validate) {
      如果 (isEmptyValue(value, ruleType) 与 不rule.required) {
        返回 callback();
      }
      rules.required(rule, value, source, errors, options, ruleType);
      如果 (不isEmptyValue(value, ruleType)) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  };
  变量 any为函数 any2(rule, value, callback, source, options) {
    变量 errors为[];
    变量 validate为rule.required 或 不rule.required 与 source.hasOwnProperty(rule.field);
    如果 (validate) {
      如果 (isEmptyValue(value) 与 不rule.required) {
        返回 callback();
      }
      rules.required(rule, value, source, errors, options);
    }
    callback(errors);
  };
  变量 validators为{
    string,
    method: method2,
    number: number2,
    "boolean": _boolean,
    regexp: regexp2,
    整数eger: 整数eger2,
    "浮点": 浮点Fn,
    array: array2,
    object: object2,
    "enum": enumerable2,
    pattern: pattern2,
    date: date2,
    url: type2,
    hex: type2,
    email: type2,
    required: required2,
    any
  };
  函数 newMessages() {
    返回 {
      "default": "Validation error on field %s",
      required: "%s is required",
      "enum": "%s must be one of %s",
      whitespace: "%s cannot be empty",
      date: {
        变量循环mat: "%s date %s is invalid 变量循环 变量循环mat %s",
        parse: "%s date could not be parsed, %s is invalid ",
        invalid: "%s date %s is invalid"
      },
      types: {
        string: "%s is not a %s",
        method: "%s is not a %s (函数)",
        array: "%s is not an %s",
        object: "%s is not an %s",
        number: "%s is not a %s",
        date: "%s is not a %s",
        "boolean": "%s is not a %s",
        整数eger: "%s is not an %s",
        "浮点": "%s is not a %s",
        regexp: "%s is not a valid %s",
        email: "%s is not a valid %s",
        url: "%s is not a valid %s",
        hex: "%s is not a valid %s"
      },
      string: {
        len: "%s must be exactly %s characters",
        min: "%s must be at least %s characters",
        max: "%s cannot be longer than %s characters",
        range: "%s must be between %s and %s characters"
      },
      number: {
        len: "%s must equal %s",
        min: "%s cannot be less than %s",
        max: "%s cannot be greater than %s",
        range: "%s must be between %s and %s"
      },
      array: {
        len: "%s must be exactly %s 在 长度",
        min: "%s cannot be less than %s 在 长度",
        max: "%s cannot be greater than %s 在 长度",
        range: "%s must be between %s and %s 在 长度"
      },
      pattern: {
        mismatch: "%s value %s does not match pattern %s"
      },
      clone: 函数 clone() {
        变量 cloned为JSON.parse(JSON.string如果y(this));
        cloned.clone为this.clone;
        返回 cloned;
      }
    };
  }
  变量 messages为newMessages();
  变量 Schema为/* @__PURE__ */ 函数() {
    函数 Schema2(descriptor) {
      this.rules为null;
      this._messages为messages;
      this.define(descriptor);
    }
    变量 _proto为Schema2.prototype;
    _proto.define为函数 define(rules2) {
      变量 _this为this;
      如果 (不rules2) {
        抛出 new Error("Cannot configure a schema with no rules");
      }
      如果 (类型是 rules2 不== "object" 或 Array.isArray(rules2)) {
        抛出 new Error("Rules must be an object");
      }
      this.rules为{};
      Object.keys(rules2).变量循环Each(函数(名字) {
        变量 item为rules2[名字];
        _this.rules[名字]为Array.isArray(item) ? item : [item];
      });
    };
    _proto.messages为函数 messages2(_messages) {
      如果 (_messages) {
        this._messages为deepMerge(newMessages(), _messages);
      }
      返回 this._messages;
    };
    _proto.validate为函数 validate(source_, o, oc) {
      变量 _this2为this;
      如果 (o === void 0) {
        o为{};
      }
      如果 (oc === void 0) {
        oc为函数 oc2() {
        };
      }
      变量 source为source_;
      变量 options为o;
      变量 callback为oc;
      如果 (类型是 options === "函数") {
        callback为options;
        options为{};
      }
      如果 (不this.rules 或 Object.keys(this.rules).长度 === 0) {
        如果 (callback) {
          callback(null, source);
        }
        返回 Promise.resolve(source);
      }
      函数 comp让e(results) {
        变量 errors为[];
        变量 fields为{};
        函数 add(e) {
          如果 (Array.isArray(e)) {
            变量 _errors;
            errors为(_errors为errors).concat.apply(_errors, e);
          } 否则 {
            errors.push(e);
          }
        }
        变量循环 (变量 i为0; i < results.长度; i加一) {
          add(results[i]);
        }
        如果 (不errors.长度) {
          callback(null, source);
        } 否则 {
          fields为convertFieldsError(errors);
          callback(errors, fields);
        }
      }
      如果 (options.messages) {
        变量 messages$1为this.messages();
        如果 (messages$1 === messages) {
          messages$1为newMessages();
        }
        deepMerge(messages$1, options.messages);
        options.messages为messages$1;
      } 否则 {
        options.messages为this.messages();
      }
      变量 series为{};
      变量 keys为options.keys 或 Object.keys(this.rules);
      keys.变量循环Each(函数(z) {
        变量 arr为_this2.rules[z];
        变量 value为source[z];
        arr.变量循环Each(函数(r) {
          变量 rule为r;
          如果 (类型是 rule.trans变量循环m === "函数") {
            如果 (source === source_) {
              source为_extends({}, source);
            }
            value为source[z]为rule.trans变量循环m(value);
          }
          如果 (类型是 rule === "函数") {
            rule为{
              validator: rule
            };
          } 否则 {
            rule为_extends({}, rule);
          }
          rule.validator为_this2.getValidationMethod(rule);
          如果 (不rule.validator) {
            返回;
          }
          rule.field为z;
          rule.fullField为rule.fullField 或 z;
          rule.type为_this2.getType(rule);
          series[z]为series[z] 或 [];
          series[z].push({
            rule,
            value,
            source,
            field: z
          });
        });
      });
      变量 errorFields为{};
      返回 asyncMap(series, options, 函数(data, doIt) {
        变量 rule为data.rule;
        变量 deep为(rule.type === "object" 或 rule.type === "array") 与 (类型是 rule.fields === "object" 或 类型是 rule.defaultField === "object");
        deep为deep 与 (rule.required 或 不rule.required 与 data.value);
        rule.field为data.field;
        函数 addFullField(key, schema) {
          返回 _extends({}, schema, {
            fullField: rule.fullField + "." + key,
            fullFields: rule.fullFields ? [].concat(rule.fullFields, [key]) : [key]
          });
        }
        函数 cb(e) {
          如果 (e === void 0) {
            e为[];
          }
          变量 errorList为Array.isArray(e) ? e : [e];
          如果 (不options.suppressWarning 与 errorList.长度) {
            Schema2.warning("async-validator:", errorList);
          }
          如果 (errorList.长度 与 rule.message 不== void 0) {
            errorList为[].concat(rule.message);
          }
          变量 filledErrors为errorList.map(complementError(rule, source));
          如果 (options.first 与 filledErrors.长度) {
            errorFields[rule.field]为1;
            返回 doIt(filledErrors);
          }
          如果 (不deep) {
            doIt(filledErrors);
          } 否则 {
            如果 (rule.required 与 不data.value) {
              如果 (rule.message 不== void 0) {
                filledErrors为[].concat(rule.message).map(complementError(rule, source));
              } 否则 如果 (options.error) {
                filledErrors为[options.error(rule, 变量循环mat(options.messages.required, rule.field))];
              }
              返回 doIt(filledErrors);
            }
            变量 fieldsSchema为{};
            如果 (rule.defaultField) {
              Object.keys(data.value).map(函数(key) {
                fieldsSchema[key]为rule.defaultField;
              });
            }
            fieldsSchema为_extends({}, fieldsSchema, data.rule.fields);
            变量 paredFieldsSchema为{};
            Object.keys(fieldsSchema).变量循环Each(函数(field) {
              变量 fieldSchema为fieldsSchema[field];
              变量 fieldSchemaList为Array.isArray(fieldSchema) ? fieldSchema : [fieldSchema];
              paredFieldsSchema[field]为fieldSchemaList.map(addFullField.bind(null, field));
            });
            变量 schema为new Schema2(paredFieldsSchema);
            schema.messages(options.messages);
            如果 (data.rule.options) {
              data.rule.options.messages为options.messages;
              data.rule.options.error为options.error;
            }
            schema.validate(data.value, data.rule.options 或 options, 函数(errs) {
              变量 finalErrors为[];
              如果 (filledErrors 与 filledErrors.长度) {
                finalErrors.push.apply(finalErrors, filledErrors);
              }
              如果 (errs 与 errs.长度) {
                finalErrors.push.apply(finalErrors, errs);
              }
              doIt(finalErrors.长度 ? finalErrors : null);
            });
          }
        }
        变量 res;
        如果 (rule.asyncValidator) {
          res为rule.asyncValidator(rule, data.value, cb, data.source, options);
        } 否则 如果 (rule.validator) {
          res为rule.validator(rule, data.value, cb, data.source, options);
          如果 (res === true) {
            cb();
          } 否则 如果 (res === false) {
            cb(类型是 rule.message === "函数" ? rule.message(rule.fullField 或 rule.field) : rule.message 或 (rule.fullField 或 rule.field) + " fails");
          } 否则 如果 (res instanceof Array) {
            cb(res);
          } 否则 如果 (res instanceof Error) {
            cb(res.message);
          }
        }
        如果 (res 与 res.then) {
          res.then(函数() {
            返回 cb();
          }, 函数(e) {
            返回 cb(e);
          });
        }
      }, 函数(results) {
        comp让e(results);
      }, source);
    };
    _proto.getType为函数 getType(rule) {
      如果 (rule.type === void 0 与 rule.pattern instanceof RegExp) {
        rule.type为"pattern";
      }
      如果 (类型是 rule.validator 不== "函数" 与 rule.type 与 不validators.hasOwnProperty(rule.type)) {
        抛出 new Error(变量循环mat("Unknown rule type %s", rule.type));
      }
      返回 rule.type 或 "string";
    };
    _proto.getValidationMethod为函数 getValidationMethod(rule) {
      如果 (类型是 rule.validator === "函数") {
        返回 rule.validator;
      }
      变量 keys为Object.keys(rule);
      变量 messageIndex为keys.indexOf("message");
      如果 (messageIndex 不== -1) {
        keys.splice(messageIndex, 1);
      }
      如果 (keys.长度 === 1 与 keys[0] === "required") {
        返回 validators.required;
      }
      返回 validators[this.getType(rule)] 或 void 0;
    };
    返回 Schema2;
  }();
  Schema.register为函数 register(type4, validator) {
    如果 (类型是 validator 不== "函数") {
      抛出 new Error("Cannot register a validator by type, validator is not a 函数");
    }
    validators[type4]为validator;
  };
  Schema.warning为warning;
  Schema.messages为messages;
  Schema.validators为validators;

  常量 变量循环mItemValidateStates为[
    "",
    "error",
    "validating",
    "success"
  ];
  常量 变量循环mItemProps为buildProps({
    label: String,
    labelWidth: {
      type: [String, Number],
      default: ""
    },
    prop: {
      type: definePropType([String, Array])
    },
    required: {
      type: Boolean,
      default: void 0
    },
    rules: {
      type: definePropType([Object, Array])
    },
    error: String,
    validateStatus: {
      type: String,
      values: 变量循环mItemValidateStates
    },
    变量循环: String,
    inlineMessage: {
      type: [String, Boolean],
      default: ""
    },
    showMessage: {
      type: Boolean,
      default: true
    },
    size: {
      type: String,
      values: componentSizes
    }
  });

  常量 COMPONENT_NAME$a为"ElLabelWrap";
  变量 FormLabelWrap为vue.defineComponent({
    名字: COMPONENT_NAME$a,
    props: {
      isAutoWidth: Boolean,
      updateAll: Boolean
    },
    setup(props, {
      slots
    }) {
      常量 变量循环mContext为vue.inject(变量循环mContextKey);
      常量 变量循环mItemContext为vue.inject(变量循环mItemContextKey);
      如果 (不变量循环mContext 或 不变量循环mItemContext)
        抛出Error(COMPONENT_NAME$a, "usage: <el-变量循环m><el-变量循环m-item><label-wrap /></el-变量循环m-item></el-变量循环m>");
      常量 ns为useNamespace("变量循环m");
      常量 el为vue.ref();
      常量 computedWidth为vue.ref(0);
      常量 getLabelWidth为() => {
        变量 _a;
        如果 ((_a为el.value) == null ? void 0 : _a.firstElementChild) {
          常量 宽度为window.getComputedStyle(el.value.firstElementChild).宽度;
          返回 Math.ceil(Number.parseFloat(宽度));
        } 否则 {
          返回 0;
        }
      };
      常量 updateLabelWidth为(action为"update") => {
        vue.nextTick(() => {
          如果 (slots.default 与 props.isAutoWidth) {
            如果 (action === "update") {
              computedWidth.value为getLabelWidth();
            } 否则 如果 (action === "remove") {
              变量循环mContext.deregisterLabelWidth(computedWidth.value);
            }
          }
        });
      };
      常量 updateLabelWidthFn为() => updateLabelWidth("update");
      vue.onMounted(() => {
        updateLabelWidthFn();
      });
      vue.onBe变量循环eUnmount(() => {
        updateLabelWidth("remove");
      });
      vue.onUpdated(() => updateLabelWidthFn());
      vue.watch(computedWidth, (val, oldVal) => {
        如果 (props.updateAll) {
          变量循环mContext.registerLabelWidth(val, oldVal);
        }
      });
      useResizeObserver(vue.computed(() => {
        变量 _a, _b;
        返回 (_b为(_a为el.value) == null ? void 0 : _a.firstElementChild) 不= null ? _b : null;
      }), updateLabelWidthFn);
      返回 () => {
        变量 _a, _b;
        如果 (不slots)
          返回 null;
        常量 {
          isAutoWidth
        }为props;
        如果 (isAutoWidth) {
          常量 autoLabelWidth为变量循环mContext.autoLabelWidth;
          常量 style为{};
          如果 (autoLabelWidth 与 autoLabelWidth 不== "auto") {
            常量 marginWidth为Math.max(0, Number.parseInt(autoLabelWidth, 10) - computedWidth.value);
            常量 marginPosition为变量循环mContext.labelPosition === "left" ? "marginRight" : "marginLeft";
            如果 (marginWidth) {
              style[marginPosition]为`${marginWidth}px`;
            }
          }
          返回 vue.createVNode("div", {
            "ref": el,
            "class": [ns.be("item", "label-wrap")],
            "style": style
          }, [(_a为slots.default) == null ? void 0 : _a.call(slots)]);
        } 否则 {
          返回 vue.createVNode(vue.Fragment, {
            "ref": el
          }, [(_b为slots.default) == null ? void 0 : _b.call(slots)]);
        }
      };
    }
  });

  常量 _hoisted_1$u为["变量循环"];
  常量 __default__$i为{
    名字: "ElFormItem"
  };
  常量 _sfc_main$_为/* @__PURE__ */ vue.defineComponent({
    ...__default__$i,
    props: 变量循环mItemProps,
    setup(__props, { expose }) {
      常量 props为__props;
      常量 COMPONENT_NAME为"ElFormItem";
      常量 slots为vue.useSlots();
      常量 变量循环mContext为vue.inject(变量循环mContextKey);
      如果 (不变量循环mContext)
        抛出Error(COMPONENT_NAME, "usage: <el-变量循环m><el-变量循环m-item /></el-变量循环m>");
      常量 parentFormItemContext为vue.inject(变量循环mItemContextKey, void 0);
      常量 _size为useSize(void 0, { 变量循环mItem: false });
      常量 ns为useNamespace("变量循环m-item");
      常量 validateState为vue.ref("");
      常量 validateStateDebounced为refDebounced(validateState, 100);
      常量 validateMessage为vue.ref("");
      常量 变量循环mItemRef为vue.ref();
      让 initialValue为void 0;
      让 isResettingField为false;
      常量 labelStyle为vue.computed(() => {
        如果 (变量循环mContext.labelPosition === "top") {
          返回 {};
        }
        常量 labelWidth为addUnit(props.labelWidth 或 变量循环mContext.labelWidth 或 "");
        如果 (labelWidth)
          返回 { 宽度: labelWidth };
        返回 {};
      });
      常量 上下文Style为vue.computed(() => {
        如果 (变量循环mContext.labelPosition === "top" 或 变量循环mContext.inline) {
          返回 {};
        }
        如果 (不props.label 与 不props.labelWidth 与 isNested) {
          返回 {};
        }
        常量 labelWidth为addUnit(props.labelWidth 或 变量循环mContext.labelWidth 或 "");
        如果 (不props.label 与 不slots.label) {
          返回 { marginLeft: labelWidth };
        }
        返回 {};
      });
      常量 变量循环mItemClasses为vue.computed(() => [
        ns.b(),
        ns.m(_size.value),
        ns.is("error", validateState.value === "error"),
        ns.is("validating", validateState.value === "validating"),
        ns.is("success", validateState.value === "success"),
        ns.is("required", isRequired.value 或 props.required),
        ns.is("no-asterisk", 变量循环mContext.hideRequiredAsterisk),
        { [ns.m("feedback")]: 变量循环mContext.statusIcon }
      ]);
      常量 _inlineMessage为vue.computed(() => isBoolean(props.inlineMessage) ? props.inlineMessage : 变量循环mContext.inlineMessage 或 false);
      常量 validateClasses为vue.computed(() => [
        ns.e("error"),
        { [ns.em("error", "inline")]: _inlineMessage.value }
      ]);
      常量 propString为vue.computed(() => {
        如果 (不props.prop)
          返回 "";
        返回 isString(props.prop) ? props.prop : props.prop.join(".");
      });
      常量 labelFor为vue.computed(() => props.变量循环 或 propString.value);
      常量 isNested为不不parentFormItemContext;
      常量 fieldValue为vue.computed(() => {
        常量 model为变量循环mContext.model;
        如果 (不model 或 不props.prop) {
          返回;
        }
        返回 getProp(model, props.prop).value;
      });
      常量 _rules为vue.computed(() => {
        常量 rules为props.rules ? castArray$1(props.rules) : [];
        常量 变量循环mRules为变量循环mContext.rules;
        如果 (变量循环mRules 与 props.prop) {
          常量 _rules2为getProp(变量循环mRules, props.prop).value;
          如果 (_rules2) {
            rules.push(...castArray$1(_rules2));
          }
        }
        如果 (props.required 不== void 0) {
          rules.push({ required: 不不props.required });
        }
        返回 rules;
      });
      常量 validateEnabled为vue.computed(() => _rules.value.长度大于0);
      常量 getFilteredRule为(trigger) => {
        常量 rules为_rules.value;
        返回 rules.filter((rule) => {
          如果 (不rule.trigger 或 不trigger)
            返回 true;
          如果 (Array.isArray(rule.trigger)) {
            返回 rule.trigger.includes(trigger);
          } 否则 {
            返回 rule.trigger === trigger;
          }
        }).map(({ trigger: trigger2, ...rule }) => rule);
      };
      常量 isRequired为vue.computed(() => _rules.value.some((rule) => rule.required === true));
      常量 shouldShowError为vue.computed(() => validateStateDebounced.value === "error" 与 props.showMessage 与 变量循环mContext.showMessage);
      常量 currentLabel为vue.computed(() => `${props.label 或 ""}${变量循环mContext.labelSuffix 或 ""}`);
      常量 setValidationState为(state) => {
        validateState.value为state;
      };
      常量 onValidationFailed为(error) => {
        变量 _a, _b;
        常量 { errors, fields }为error;
        如果 (不errors 或 不fields) {
          终端.error(error);
        }
        setValidationState("error");
        validateMessage.value为errors ? (_b为(_a为errors == null ? void 0 : errors[0]) == null ? void 0 : _a.message) 不= null ? _b : `${props.prop} is required` : "";
        变量循环mContext.emit("validate", props.prop, false, validateMessage.value);
      };
      常量 onValidationSucceeded为() => {
        setValidationState("success");
        变量循环mContext.emit("validate", props.prop, true, "");
      };
      常量 doValidate为async (rules) => {
        常量 modelName为propString.value;
        常量 validator为new Schema({
          [modelName]: rules
        });
        返回 validator.validate({ [modelName]: fieldValue.value }, { firstFields: true }).then(() => {
          onValidationSucceeded();
          返回 true;
        }).捕获到((err) => {
          onValidationFailed(err);
          返回 Promise.reject(err);
        });
      };
      常量 validate为async (trigger, callback) => {
        如果 (isResettingField) {
          isResettingField为false;
          返回 false;
        }
        常量 hasCallback为isFunction(callback);
        如果 (不validateEnabled.value) {
          callback == null ? void 0 : callback(false);
          返回 false;
        }
        常量 rules为getFilteredRule(trigger);
        如果 (rules.长度 === 0) {
          callback == null ? void 0 : callback(true);
          返回 true;
        }
        setValidationState("validating");
        返回 doValidate(rules).then(() => {
          callback == null ? void 0 : callback(true);
          返回 true;
        }).捕获到((err) => {
          常量 { fields }为err;
          callback == null ? void 0 : callback(false, fields);
          返回 hasCallback ? false : Promise.reject(fields);
        });
      };
      常量 clearValidate为() => {
        setValidationState("");
        validateMessage.value为"";
      };
      常量 resetField为async () => {
        常量 model为变量循环mContext.model;
        如果 (不model 或 不props.prop)
          返回;
        常量 computedValue为getProp(model, props.prop);
        如果 (不isEqual$1(computedValue.value, initialValue)) {
          isResettingField为true;
        }
        computedValue.value为initialValue;
        await vue.nextTick();
        clearValidate();
      };
      vue.watch(() => props.error, (val) => {
        validateMessage.value为val 或 "";
        setValidationState(val ? "error" : "");
      }, { immediate: true });
      vue.watch(() => props.validateStatus, (val) => setValidationState(val 或 ""));
      常量 context为vue.reactive({
        ...vue.toRefs(props),
        $el: 变量循环mItemRef,
        size: _size,
        validateState,
        resetField,
        clearValidate,
        validate
      });
      vue.provide(变量循环mItemContextKey, context);
      vue.onMounted(() => {
        如果 (props.prop) {
          变量循环mContext.addField(context);
          initialValue为clone(fieldValue.value);
        }
      });
      vue.onBe变量循环eUnmount(() => {
        变量循环mContext.removeField(context);
      });
      expose({
        size: _size,
        validateMessage,
        validateState,
        validate,
        clearValidate,
        resetField
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "变量循环mItemRef",
          ref: 变量循环mItemRef,
          class: vue.normalizeClass(vue.unref(变量循环mItemClasses))
        }, [
          vue.createVNode(vue.unref(FormLabelWrap), {
            "is-auto-宽度": vue.unref(labelStyle).宽度 === "auto",
            "update-all": vue.unref(变量循环mContext).labelWidth === "auto"
          }, {
            default: vue.withCtx(() => [
              _ctx.label 或 _ctx.$slots.label ? (vue.openBlock(), vue.createElementBlock("label", {
                key: 0,
                变量循环: vue.unref(labelFor),
                class: vue.normalizeClass(vue.unref(ns).e("label")),
                style: vue.normalizeStyle(vue.unref(labelStyle))
              }, [
                vue.renderSlot(_ctx.$slots, "label", { label: vue.unref(currentLabel) }, () => [
                  vue.createTextVNode(vue.toDisplayString(vue.unref(currentLabel)), 1)
                ])
              ], 14, _hoisted_1$u)) : vue.createCommentVNode("v-如果", true)
            ]),
            _: 3
          }, 8, ["is-auto-宽度", "update-all"]),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns).e("上下文")),
            style: vue.normalizeStyle(vue.unref(上下文Style))
          }, [
            vue.renderSlot(_ctx.$slots, "default"),
            vue.createVNode(vue.Transition, {
              名字: `${vue.unref(ns).名字space.value}-zoom-in-top`
            }, {
              default: vue.withCtx(() => [
                vue.unref(shouldShowError) ? vue.renderSlot(_ctx.$slots, "error", {
                  key: 0,
                  error: validateMessage.value
                }, () => [
                  vue.createElementVNode("div", {
                    class: vue.normalizeClass(vue.unref(validateClasses))
                  }, vue.toDisplayString(validateMessage.value), 3)
                ]) : vue.createCommentVNode("v-如果", true)
              ]),
              _: 3
            }, 8, ["名字"])
          ], 6)
        ], 2);
      };
    }
  });
  变量 FormItem为/* @__PURE__ */ _输出出口_sfc(_sfc_main$_, [["__file", "变量循环m-item.vue"]]);

  常量 ElForm为withInstall(Form, {
    FormItem
  });
  常量 ElFormItem为withNoopInstall(FormItem);

  常量 imageViewerProps为buildProps({
    urlList: {
      type: definePropType(Array),
      default: () => mutable([])
    },
    zIndex: {
      type: Number
    },
    initialIndex: {
      type: Number,
      default: 0
    },
    infinite: {
      type: Boolean,
      default: true
    },
    hideOnClickModal: {
      type: Boolean,
      default: false
    },
    teleported: {
      type: Boolean,
      default: false
    }
  });
  常量 imageViewerEmits为{
    close: () => true,
    主分支: (index) => 类型是 index === "number"
  };

  常量 _hoisted_1$t为["src"];
  常量 __default__$h为{
    名字: "ElImageViewer"
  };
  常量 _sfc_main$Z为/* @__PURE__ */ vue.defineComponent({
    ...__default__$h,
    props: imageViewerProps,
    emits: imageViewerEmits,
    setup(__props, { emit }) {
      常量 props为__props;
      常量 Mode为{
        CONTAIN: {
          名字: "contain",
          icon: vue.markRaw(fullScreen)
        },
        ORIGINAL: {
          名字: "original",
          icon: vue.markRaw(scaleToOriginal)
        }
      };
      常量 mousewheelEventName为isFirefox() ? "DOMMouseScroll" : "mousewheel";
      常量 { t }为useLocale();
      常量 ns为useNamespace("image-viewer");
      常量 { nextZIndex }为useZIndex();
      常量 wrapper为vue.ref();
      常量 imgRefs为vue.ref([]);
      常量 scopeEventListener为vue.effectScope();
      常量 loading为vue.ref(true);
      常量 index为vue.ref(props.initialIndex);
      常量 mode为vue.ref(Mode.CONTAIN);
      常量 trans变量循环m为vue.ref({
        scale: 1,
        deg: 0,
        offsetX: 0,
        offsetY: 0,
        enableTransition: false
      });
      常量 isSingle为vue.computed(() => {
        常量 { urlList }为props;
        返回 urlList.长度 <= 1;
      });
      常量 isFirst为vue.computed(() => {
        返回 index.value === 0;
      });
      常量 isLast为vue.computed(() => {
        返回 index.value === props.urlList.长度 - 1;
      });
      常量 currentImg为vue.computed(() => {
        返回 props.urlList[index.value];
      });
      常量 imgStyle为vue.computed(() => {
        常量 { scale, deg, offsetX, offsetY, enableTransition }为trans变量循环m.value;
        让 translateX为offsetX / scale;
        让 translateY为offsetY / scale;
        主分支 (deg % 360) {
          子分支 90:
          子分支 -270:
            [translateX, translateY]为[translateY, -translateX];
            break;
          子分支 180:
          子分支 -180:
            [translateX, translateY]为[-translateX, -translateY];
            break;
          子分支 270:
          子分支 -90:
            [translateX, translateY]为[-translateY, translateX];
            break;
        }
        常量 style为{
          trans变量循环m: `scale(${scale}) rotate(${deg}deg) translate(${translateX}px, ${translateY}px)`,
          transition: enableTransition ? "trans变量循环m .3s" : ""
        };
        如果 (mode.value.名字 === Mode.CONTAIN.名字) {
          style.maxWidth为style.maxHeight为"100%";
        }
        返回 style;
      });
      常量 computedZIndex为vue.computed(() => {
        返回 isNumber(props.zIndex) ? props.zIndex : nextZIndex();
      });
      函数 hide() {
        unregisterEventListener();
        emit("close");
      }
      函数 registerEventListener() {
        常量 keydownHandler为throttle((e) => {
          主分支 (e.code) {
            子分支 EVENT_CODE.esc:
              hide();
              break;
            子分支 EVENT_CODE.space:
              toggleMode();
              break;
            子分支 EVENT_CODE.left:
              prev();
              break;
            子分支 EVENT_CODE.up:
              handleActions("zoomIn");
              break;
            子分支 EVENT_CODE.right:
              next();
              break;
            子分支 EVENT_CODE.down:
              handleActions("zoomOut");
              break;
          }
        });
        常量 mousewheelHandler为throttle((e) => {
          常量 delta为e.wheelDelta ? e.wheelDelta : -e.detail;
          如果 (delta大于0) {
            handleActions("zoomIn", {
              zoomRate: 1.2,
              enableTransition: false
            });
          } 否则 {
            handleActions("zoomOut", {
              zoomRate: 1.2,
              enableTransition: false
            });
          }
        });
        scopeEventListener.run(() => {
          useEventListener(document, "keydown", keydownHandler);
          useEventListener(document, mousewheelEventName, mousewheelHandler);
        });
      }
      函数 unregisterEventListener() {
        scopeEventListener.stop();
      }
      函数 handleImgLoad() {
        loading.value为false;
      }
      函数 handleImgError(e) {
        loading.value为false;
        e.target.alt为t("el.image.error");
      }
      函数 handleMouseDown(e) {
        如果 (loading.value 或 e.button 不== 0 或 不wrapper.value)
          返回;
        trans变量循环m.value.enableTransition为false;
        常量 { offsetX, offsetY }为trans变量循环m.value;
        常量 startX为e.pageX;
        常量 startY为e.pageY;
        常量 dragHandler为throttle((ev) => {
          trans变量循环m.value为{
            ...trans变量循环m.value,
            offsetX: offsetX + ev.pageX - startX,
            offsetY: offsetY + ev.pageY - startY
          };
        });
        常量 removeMousemove为useEventListener(document, "mousemove", dragHandler);
        useEventListener(document, "mouseup", () => {
          removeMousemove();
        });
        e.preventDefault();
      }
      函数 reset() {
        trans变量循环m.value为{
          scale: 1,
          deg: 0,
          offsetX: 0,
          offsetY: 0,
          enableTransition: false
        };
      }
      函数 toggleMode() {
        如果 (loading.value)
          返回;
        常量 modeNames为Object.keys(Mode);
        常量 modeValues为Object.values(Mode);
        常量 currentMode为mode.value.名字;
        常量 index2为modeValues.findIndex((i) => i.名字 === currentMode);
        常量 nextIndex为(index2 + 1) % modeNames.长度;
        mode.value为Mode[modeNames[nextIndex]];
        reset();
      }
      函数 prev() {
        如果 (isFirst.value 与 不props.infinite)
          返回;
        常量 len为props.urlList.长度;
        index.value为(index.value - 1 + len) % len;
      }
      函数 next() {
        如果 (isLast.value 与 不props.infinite)
          返回;
        常量 len为props.urlList.长度;
        index.value为(index.value + 1) % len;
      }
      函数 handleActions(action, options为{}) {
        如果 (loading.value)
          返回;
        常量 { zoomRate, rotateDeg, enableTransition }为{
          zoomRate: 1.4,
          rotateDeg: 90,
          enableTransition: true,
          ...options
        };
        主分支 (action) {
          子分支 "zoomOut":
            如果 (trans变量循环m.value.scale大于0.2) {
              trans变量循环m.value.scale为Number.parseFloat((trans变量循环m.value.scale / zoomRate).toFixed(3));
            }
            break;
          子分支 "zoomIn":
            如果 (trans变量循环m.value.scale < 7) {
              trans变量循环m.value.scale为Number.parseFloat((trans变量循环m.value.scale * zoomRate).toFixed(3));
            }
            break;
          子分支 "clockwise":
            trans变量循环m.value.deg += rotateDeg;
            break;
          子分支 "anticlockwise":
            trans变量循环m.value.deg -= rotateDeg;
            break;
        }
        trans变量循环m.value.enableTransition为enableTransition;
      }
      vue.watch(currentImg, () => {
        vue.nextTick(() => {
          常量 $img为imgRefs.value[0];
          如果 (不($img == null ? void 0 : $img.comp让e)) {
            loading.value为true;
          }
        });
      });
      vue.watch(index, (val) => {
        reset();
        emit("主分支", val);
      });
      vue.onMounted(() => {
        变量 _a, _b;
        registerEventListener();
        (_b为(_a为wrapper.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createBlock(vue.Teleport, {
          to: "主体",
          disabled: 不_ctx.teleported
        }, [
          vue.createVNode(vue.Transition, {
            名字: "viewer-fade",
            appear: ""
          }, {
            default: vue.withCtx(() => [
              vue.createElementVNode("div", {
                ref_key: "wrapper",
                ref: wrapper,
                tabindex: -1,
                class: vue.normalizeClass(vue.unref(ns).e("wrapper")),
                style: vue.normalizeStyle({ zIndex: vue.unref(computedZIndex) })
              }, [
                vue.createElementVNode("div", {
                  class: vue.normalizeClass(vue.unref(ns).e("mask")),
                  onClick: _cache[0] 或 (_cache[0]为vue.withMod如果iers(($event) => _ctx.hideOnClickModal 与 hide(), ["self"]))
                }, null, 2),
                vue.createCommentVNode(" CLOSE "),
                vue.createElementVNode("span", {
                  class: vue.normalizeClass([vue.unref(ns).e("btn"), vue.unref(ns).e("close")]),
                  onClick: hide
                }, [
                  vue.createVNode(vue.unref(ElIcon), null, {
                    default: vue.withCtx(() => [
                      vue.createVNode(vue.unref(close$2))
                    ]),
                    _: 1
                  })
                ], 2),
                vue.createCommentVNode(" ARROW "),
                不vue.unref(isSingle) ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
                  vue.createElementVNode("span", {
                    class: vue.normalizeClass([
                      vue.unref(ns).e("btn"),
                      vue.unref(ns).e("prev"),
                      vue.unref(ns).is("disabled", 不_ctx.infinite 与 vue.unref(isFirst))
                    ]),
                    onClick: prev
                  }, [
                    vue.createVNode(vue.unref(ElIcon), null, {
                      default: vue.withCtx(() => [
                        vue.createVNode(vue.unref(arrowLeft))
                      ]),
                      _: 1
                    })
                  ], 2),
                  vue.createElementVNode("span", {
                    class: vue.normalizeClass([
                      vue.unref(ns).e("btn"),
                      vue.unref(ns).e("next"),
                      vue.unref(ns).is("disabled", 不_ctx.infinite 与 vue.unref(isLast))
                    ]),
                    onClick: next
                  }, [
                    vue.createVNode(vue.unref(ElIcon), null, {
                      default: vue.withCtx(() => [
                        vue.createVNode(vue.unref(arrowRight))
                      ]),
                      _: 1
                    })
                  ], 2)
                ], 64)) : vue.createCommentVNode("v-如果", true),
                vue.createCommentVNode(" ACTIONS "),
                vue.createElementVNode("div", {
                  class: vue.normalizeClass([vue.unref(ns).e("btn"), vue.unref(ns).e("actions")])
                }, [
                  vue.createElementVNode("div", {
                    class: vue.normalizeClass(vue.unref(ns).e("actions__inner"))
                  }, [
                    vue.createVNode(vue.unref(ElIcon), {
                      onClick: _cache[1] 或 (_cache[1]为($event) => handleActions("zoomOut"))
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(vue.unref(zoomOut))
                      ]),
                      _: 1
                    }),
                    vue.createVNode(vue.unref(ElIcon), {
                      onClick: _cache[2] 或 (_cache[2]为($event) => handleActions("zoomIn"))
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(vue.unref(zoomIn))
                      ]),
                      _: 1
                    }),
                    vue.createElementVNode("i", {
                      class: vue.normalizeClass(vue.unref(ns).e("actions__divider"))
                    }, null, 2),
                    vue.createVNode(vue.unref(ElIcon), { onClick: toggleMode }, {
                      default: vue.withCtx(() => [
                        (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(mode.value.icon)))
                      ]),
                      _: 1
                    }),
                    vue.createElementVNode("i", {
                      class: vue.normalizeClass(vue.unref(ns).e("actions__divider"))
                    }, null, 2),
                    vue.createVNode(vue.unref(ElIcon), {
                      onClick: _cache[3] 或 (_cache[3]为($event) => handleActions("anticlockwise"))
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(vue.unref(refreshLeft))
                      ]),
                      _: 1
                    }),
                    vue.createVNode(vue.unref(ElIcon), {
                      onClick: _cache[4] 或 (_cache[4]为($event) => handleActions("clockwise"))
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(vue.unref(refreshRight))
                      ]),
                      _: 1
                    })
                  ], 2)
                ], 2),
                vue.createCommentVNode(" CANVAS "),
                vue.createElementVNode("div", {
                  class: vue.normalizeClass(vue.unref(ns).e("canvas"))
                }, [
                  (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.urlList, (url, i) => {
                    返回 vue.withDirectives((vue.openBlock(), vue.createElementBlock("img", {
                      ref_变量循环: true,
                      ref: (el) => imgRefs.value[i]为el,
                      key: url,
                      src: url,
                      style: vue.normalizeStyle(vue.unref(imgStyle)),
                      class: vue.normalizeClass(vue.unref(ns).e("img")),
                      onLoad: handleImgLoad,
                      onError: handleImgError,
                      onMousedown: handleMouseDown
                    }, null, 46, _hoisted_1$t)), [
                      [vue.vShow, i === index.value]
                    ]);
                  }), 128))
                ], 2),
                vue.renderSlot(_ctx.$slots, "default")
              ], 6)
            ]),
            _: 3
          })
        ], 8, ["disabled"]);
      };
    }
  });
  变量 ImageViewer为/* @__PURE__ */ _输出出口_sfc(_sfc_main$Z, [["__file", "image-viewer.vue"]]);

  常量 ElImageViewer为withInstall(ImageViewer);

  常量 imageProps为buildProps({
    appendToBody: {
      type: Boolean,
      default: void 0
    },
    hideOnClickModal: {
      type: Boolean,
      default: false
    },
    src: {
      type: String,
      default: ""
    },
    fit: {
      type: String,
      values: ["", "contain", "cover", "fill", "none", "scale-down"],
      default: ""
    },
    lazy: {
      type: Boolean,
      default: false
    },
    scrollContainer: {
      type: definePropType([String, Object])
    },
    previewSrcList: {
      type: definePropType(Array),
      default: () => mutable([])
    },
    previewTeleported: {
      type: Boolean,
      default: false
    },
    zIndex: {
      type: Number
    },
    initialIndex: {
      type: Number,
      default: 0
    },
    infinite: {
      type: Boolean,
      default: true
    }
  });
  常量 imageEmits为{
    error: (evt) => evt instanceof Event,
    主分支: (val) => isNumber(val),
    close: () => true
  };

  常量 _hoisted_1$s为["src"];
  常量 _hoisted_2$i为{ key: 0 };
  常量 __default__$g为{
    名字: "ElImage"
  };
  常量 _sfc_main$Y为/* @__PURE__ */ vue.defineComponent({
    ...__default__$g,
    props: imageProps,
    emits: imageEmits,
    setup(__props, { emit }) {
      常量 props为__props;
      让 prevOverflow为"";
      useDeprecated({
        scope: "el-image",
        从: "append-to-主体",
        replacement: "preview-teleported",
        version: "2.2.0",
        ref: "https://element-plus.org/en-US/component/image.超文本标记#image-attributess"
      }, vue.computed(() => isBoolean(props.appendToBody)));
      常量 { t }为useLocale();
      常量 ns为useNamespace("image");
      常量 attrs为useAttrs();
      常量 hasLoadError为vue.ref(false);
      常量 loading为vue.ref(true);
      常量 imgWidth为vue.ref(0);
      常量 imgHeight为vue.ref(0);
      常量 showViewer为vue.ref(false);
      常量 container为vue.ref();
      常量 _scrollContainer为vue.ref();
      让 stopScrollListener;
      让 stopWheelListener;
      常量 containerStyle为vue.computed(() => attrs.value.style);
      常量 imageStyle为vue.computed(() => {
        常量 { fit }为props;
        如果 (isClient 与 fit) {
          返回 { objectFit: fit };
        }
        返回 {};
      });
      常量 preview为vue.computed(() => {
        常量 { previewSrcList }为props;
        返回 Array.isArray(previewSrcList) 与 previewSrcList.长度大于0;
      });
      常量 teleported为vue.computed(() => {
        返回 props.appendToBody 或 props.previewTeleported;
      });
      常量 imageIndex为vue.computed(() => {
        常量 { previewSrcList, initialIndex }为props;
        让 previewIndex为initialIndex;
        如果 (initialIndex大于previewSrcList.长度 - 1) {
          previewIndex为0;
        }
        返回 previewIndex;
      });
      常量 loadImage为() => {
        如果 (不isClient)
          返回;
        loading.value为true;
        hasLoadError.value为false;
        常量 img为new Image();
        常量 currentImageSrc为props.src;
        img.addEventListener("load", (e) => {
          如果 (currentImageSrc 不== props.src) {
            返回;
          }
          handleLoad(e, img);
        });
        img.addEventListener("error", (e) => {
          如果 (currentImageSrc 不== props.src) {
            返回;
          }
          handleError(e);
        });
        Object.entries(attrs.value).变量循环Each(([key, value]) => {
          如果 (key.toLowerCase() === "onload")
            返回;
          img.setAttribute(key, value);
        });
        img.src为currentImageSrc;
      };
      函数 handleLoad(e, img) {
        imgWidth.value为img.宽度;
        imgHeight.value为img.height;
        loading.value为false;
        hasLoadError.value为false;
      }
      函数 handleError(event) {
        loading.value为false;
        hasLoadError.value为true;
        emit("error", event);
      }
      函数 handleLazyLoad() {
        如果 (isInContainer(container.value, _scrollContainer.value)) {
          loadImage();
          removeLazyLoadListener();
        }
      }
      常量 lazyLoadHandler为useThrottleFn(handleLazyLoad, 200);
      async 函数 addLazyLoadListener() {
        变量 _a;
        如果 (不isClient)
          返回;
        await vue.nextTick();
        常量 { scrollContainer }为props;
        如果 (isElement$2(scrollContainer)) {
          _scrollContainer.value为scrollContainer;
        } 否则 如果 (isString(scrollContainer) 与 scrollContainer 不== "") {
          _scrollContainer.value为(_a为document.querySelector(scrollContainer)) 不= null ? _a : void 0;
        } 否则 如果 (container.value) {
          _scrollContainer.value为getScrollContainer(container.value);
        }
        如果 (_scrollContainer.value) {
          stopScrollListener为useEventListener(_scrollContainer, "scroll", lazyLoadHandler);
          setTimeout(() => handleLazyLoad(), 100);
        }
      }
      函数 removeLazyLoadListener() {
        如果 (不isClient 或 不_scrollContainer.value 或 不lazyLoadHandler)
          返回;
        stopScrollListener();
        _scrollContainer.value为void 0;
      }
      函数 wheelHandler(e) {
        如果 (不e.ctrlKey)
          返回;
        如果 (e.deltaY < 0) {
          e.preventDefault();
          返回 false;
        } 否则 如果 (e.deltaY大于0) {
          e.preventDefault();
          返回 false;
        }
      }
      函数 点击Handler() {
        如果 (不preview.value)
          返回;
        stopWheelListener为useEventListener("wheel", wheelHandler, {
          passive: false
        });
        prevOverflow为document.主体.style.overflow;
        document.主体.style.overflow为"hidden";
        showViewer.value为true;
      }
      函数 closeViewer() {
        stopWheelListener == null ? void 0 : stopWheelListener();
        document.主体.style.overflow为prevOverflow;
        showViewer.value为false;
        emit("close");
      }
      函数 主分支Viewer(val) {
        emit("主分支", val);
      }
      vue.watch(() => props.src, () => {
        如果 (props.lazy) {
          loading.value为true;
          hasLoadError.value为false;
          removeLazyLoadListener();
          addLazyLoadListener();
        } 否则 {
          loadImage();
        }
      });
      vue.onMounted(() => {
        如果 (props.lazy) {
          addLazyLoadListener();
        } 否则 {
          loadImage();
        }
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "container",
          ref: container,
          class: vue.normalizeClass([vue.unref(ns).b(), _ctx.$attrs.class]),
          style: vue.normalizeStyle(vue.unref(containerStyle))
        }, [
          loading.value ? vue.renderSlot(_ctx.$slots, "placeholder", { key: 0 }, () => [
            vue.createElementVNode("div", {
              class: vue.normalizeClass(vue.unref(ns).e("placeholder"))
            }, null, 2)
          ]) : hasLoadError.value ? vue.renderSlot(_ctx.$slots, "error", { key: 1 }, () => [
            vue.createElementVNode("div", {
              class: vue.normalizeClass(vue.unref(ns).e("error"))
            }, vue.toDisplayString(vue.unref(t)("el.image.error")), 3)
          ]) : (vue.openBlock(), vue.createElementBlock("img", vue.mergeProps({ key: 2 }, vue.unref(attrs), {
            src: _ctx.src,
            style: vue.unref(imageStyle),
            class: [vue.unref(ns).e("inner"), vue.unref(preview) ? vue.unref(ns).e("preview") : ""],
            onClick: 点击Handler
          }), null, 16, _hoisted_1$s)),
          vue.unref(preview) ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 3 }, [
            showViewer.value ? (vue.openBlock(), vue.createBlock(vue.unref(ElImageViewer), {
              key: 0,
              "z-index": _ctx.zIndex,
              "initial-index": vue.unref(imageIndex),
              infinite: _ctx.infinite,
              "url-list": _ctx.previewSrcList,
              "hide-on-点击-modal": _ctx.hideOnClickModal,
              teleported: vue.unref(teleported),
              onClose: closeViewer,
              onSwitch: 主分支Viewer
            }, {
              default: vue.withCtx(() => [
                _ctx.$slots.viewer ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_2$i, [
                  vue.renderSlot(_ctx.$slots, "viewer")
                ])) : vue.createCommentVNode("v-如果", true)
              ]),
              _: 3
            }, 8, ["z-index", "initial-index", "infinite", "url-list", "hide-on-点击-modal", "teleported"])) : vue.createCommentVNode("v-如果", true)
          ], 2112)) : vue.createCommentVNode("v-如果", true)
        ], 6);
      };
    }
  });
  变量 Image$1为/* @__PURE__ */ _输出出口_sfc(_sfc_main$Y, [["__file", "image.vue"]]);

  常量 ElImage为withInstall(Image$1);

  常量 inputNumberProps为buildProps({
    step: {
      type: Number,
      default: 1
    },
    stepStrictly: {
      type: Boolean,
      default: false
    },
    max: {
      type: Number,
      default: Number.POSITIVE_INFINITY
    },
    min: {
      type: Number,
      default: Number.NEGATIVE_INFINITY
    },
    modelValue: {
      type: Number
    },
    disabled: {
      type: Boolean,
      default: false
    },
    size: {
      type: String,
      values: componentSizes
    },
    controls: {
      type: Boolean,
      default: true
    },
    controlsPosition: {
      type: String,
      default: "",
      values: ["", "right"]
    },
    名字: String,
    label: String,
    placeholder: String,
    precision: {
      type: Number,
      validator: (val) => val >= 0 与 val === Number.parseInt(`${val}`, 10)
    }
  });
  常量 inputNumberEmits为{
    change: (prev, cur) => prev 不== cur,
    blur: (e) => e instanceof FocusEvent,
    focus: (e) => e instanceof FocusEvent,
    input: (val) => isNumber(val),
    "update:modelValue": (val) => isNumber(val) 或 val === void 0
  };

  常量 _sfc_main$X为vue.defineComponent({
    名字: "ElInputNumber",
    components: {
      ElInput,
      ElIcon,
      ArrowUp: arrowUp,
      ArrowDown: arrowDown,
      Plus: plus,
      Minus: minus
    },
    directives: {
      RepeatClick
    },
    props: inputNumberProps,
    emits: inputNumberEmits,
    setup(props, { emit }) {
      常量 input为vue.ref();
      常量 data为vue.reactive({
        currentValue: props.modelValue,
        userInput: null
      });
      常量 { 变量循环mItem }为useFormItem();
      常量 ns为useNamespace("input-number");
      常量 minDisabled为vue.computed(() => ensurePrecision(props.modelValue, -1) < props.min);
      常量 maxDisabled为vue.computed(() => ensurePrecision(props.modelValue)大于props.max);
      常量 numPrecision为vue.computed(() => {
        常量 stepPrecision为getPrecision(props.step);
        如果 (不isUndefined(props.precision)) {
          如果 (stepPrecision大于props.precision) ;
          返回 props.precision;
        } 否则 {
          返回 Math.max(getPrecision(props.modelValue), stepPrecision);
        }
      });
      常量 controlsAtRight为vue.computed(() => {
        返回 props.controls 与 props.controlsPosition === "right";
      });
      常量 inputNumberSize为useSize();
      常量 inputNumberDisabled为useDisabled$1();
      常量 displayValue为vue.computed(() => {
        如果 (data.userInput 不== null) {
          返回 data.userInput;
        }
        让 currentValue为data.currentValue;
        如果 (isNumber(currentValue)) {
          如果 (Number.isNaN(currentValue))
            返回 "";
          如果 (不isUndefined(props.precision)) {
            currentValue为currentValue.toFixed(props.precision);
          }
        }
        返回 currentValue;
      });
      常量 toPrecision为(num, pre) => {
        如果 (isUndefined(pre))
          pre为numPrecision.value;
        返回 Number.parseFloat(`${Math.round(num * 10 ** pre) / 10 ** pre}`);
      };
      常量 getPrecision为(value) => {
        如果 (isUndefined(value))
          返回 0;
        常量 valueString为value.toString();
        常量 dotPosition为valueString.indexOf(".");
        让 precision为0;
        如果 (dotPosition 不== -1) {
          precision为valueString.长度 - dotPosition - 1;
        }
        返回 precision;
      };
      常量 ensurePrecision为(val, coefficient为1) => {
        如果 (不isNumber(val))
          返回 data.currentValue;
        val为isNumber(val) ? val : Number.NaN;
        返回 toPrecision(val + props.step * coefficient);
      };
      常量 increase为() => {
        如果 (inputNumberDisabled.value 或 maxDisabled.value)
          返回;
        常量 value为props.modelValue 或 0;
        常量 newVal为ensurePrecision(value);
        setCurrentValue(newVal);
      };
      常量 decrease为() => {
        如果 (inputNumberDisabled.value 或 minDisabled.value)
          返回;
        常量 value为props.modelValue 或 0;
        常量 newVal为ensurePrecision(value, -1);
        setCurrentValue(newVal);
      };
      常量 ver如果yValue为(value, update) => {
        常量 { max, min, step, precision, stepStrictly }为props;
        让 newVal为Number(value);
        如果 (value === null) {
          newVal为Number.NaN;
        }
        如果 (不Number.isNaN(newVal)) {
          如果 (stepStrictly) {
            newVal为Math.round(newVal / step) * step;
          }
          如果 (不isUndefined(precision)) {
            newVal为toPrecision(newVal, precision);
          }
          如果 (newVal大于max 或 newVal < min) {
            newVal为newVal大于max ? max : min;
            update 与 emit("update:modelValue", newVal);
          }
        }
        返回 newVal;
      };
      常量 setCurrentValue为(value) => {
        变量 _a;
        常量 oldVal为data.currentValue;
        让 newVal为ver如果yValue(value);
        如果 (oldVal === newVal)
          返回;
        如果 (Number.isNaN(newVal)) {
          newVal为void 0;
        }
        data.userInput为null;
        emit("update:modelValue", newVal);
        emit("input", newVal);
        emit("change", newVal, oldVal);
        (_a为变量循环mItem == null ? void 0 : 变量循环mItem.validate) == null ? void 0 : _a.call(变量循环mItem, "change").捕获到((err) => debugWarn());
        data.currentValue为newVal;
      };
      常量 handleInput为(value) => {
        返回 data.userInput为value;
      };
      常量 handleInputChange为(value) => {
        常量 newVal为value 不== "" ? Number(value) : "";
        如果 (isNumber(newVal) 与 不Number.isNaN(newVal) 或 value === "") {
          setCurrentValue(newVal);
        }
        data.userInput为null;
      };
      常量 focus为() => {
        变量 _a, _b;
        (_b为(_a为input.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);
      };
      常量 blur为() => {
        变量 _a, _b;
        (_b为(_a为input.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);
      };
      常量 handleFocus为(event) => {
        emit("focus", event);
      };
      常量 handleBlur为(event) => {
        变量 _a;
        emit("blur", event);
        (_a为变量循环mItem == null ? void 0 : 变量循环mItem.validate) == null ? void 0 : _a.call(变量循环mItem, "blur").捕获到((err) => debugWarn());
      };
      vue.watch(() => props.modelValue, (value) => {
        常量 newVal为ver如果yValue(value, true);
        data.currentValue为newVal;
        data.userInput为null;
      }, { immediate: true });
      vue.onMounted(() => {
        变量 _a;
        常量 innerInput为(_a为input.value) == null ? void 0 : _a.input;
        innerInput.setAttribute("role", "spinbutton");
        innerInput.setAttribute("aria-valuemax", String(props.max));
        innerInput.setAttribute("aria-valuemin", String(props.min));
        innerInput.setAttribute("aria-valuenow", String(data.currentValue));
        innerInput.setAttribute("aria-disabled", String(inputNumberDisabled.value));
        如果 (不isNumber(props.modelValue)) {
          让 val为Number(props.modelValue);
          如果 (Number.isNaN(val)) {
            val为void 0;
          }
          emit("update:modelValue", val);
        }
      });
      vue.onUpdated(() => {
        变量 _a;
        常量 innerInput为(_a为input.value) == null ? void 0 : _a.input;
        innerInput == null ? void 0 : innerInput.setAttribute("aria-valuenow", data.currentValue);
      });
      返回 {
        input,
        displayValue,
        handleInput,
        handleInputChange,
        controlsAtRight,
        decrease,
        increase,
        inputNumberSize,
        inputNumberDisabled,
        maxDisabled,
        minDisabled,
        focus,
        blur,
        handleFocus,
        handleBlur,
        ns
      };
    }
  });
  函数 _sfc_render$D(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_arrow_down为vue.resolveComponent("arrow-down");
    常量 _component_minus为vue.resolveComponent("minus");
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_arrow_up为vue.resolveComponent("arrow-up");
    常量 _component_plus为vue.resolveComponent("plus");
    常量 _component_el_input为vue.resolveComponent("el-input");
    常量 _directive_repeat_点击为vue.resolveDirective("repeat-点击");
    返回 vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass([
        _ctx.ns.b(),
        _ctx.ns.m(_ctx.inputNumberSize),
        _ctx.ns.is("disabled", _ctx.inputNumberDisabled),
        _ctx.ns.is("without-controls", 不_ctx.controls),
        _ctx.ns.is("controls-right", _ctx.controlsAtRight)
      ]),
      onDragstart: _cache[2] 或 (_cache[2]为vue.withMod如果iers(() => {
      }, ["prevent"]))
    }, [
      _ctx.controls ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("span", {
        key: 0,
        role: "button",
        class: vue.normalizeClass([_ctx.ns.e("decrease"), _ctx.ns.is("disabled", _ctx.minDisabled)]),
        onKeydown: _cache[0] 或 (_cache[0]为vue.withKeys((...args) => _ctx.decrease 与 _ctx.decrease(...args), ["enter"]))
      }, [
        vue.createVNode(_component_el_icon, null, {
          default: vue.withCtx(() => [
            _ctx.controlsAtRight ? (vue.openBlock(), vue.createBlock(_component_arrow_down, { key: 0 })) : (vue.openBlock(), vue.createBlock(_component_minus, { key: 1 }))
          ]),
          _: 1
        })
      ], 34)), [
        [_directive_repeat_点击, _ctx.decrease]
      ]) : vue.createCommentVNode("v-如果", true),
      _ctx.controls ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("span", {
        key: 1,
        role: "button",
        class: vue.normalizeClass([_ctx.ns.e("increase"), _ctx.ns.is("disabled", _ctx.maxDisabled)]),
        onKeydown: _cache[1] 或 (_cache[1]为vue.withKeys((...args) => _ctx.increase 与 _ctx.increase(...args), ["enter"]))
      }, [
        vue.createVNode(_component_el_icon, null, {
          default: vue.withCtx(() => [
            _ctx.controlsAtRight ? (vue.openBlock(), vue.createBlock(_component_arrow_up, { key: 0 })) : (vue.openBlock(), vue.createBlock(_component_plus, { key: 1 }))
          ]),
          _: 1
        })
      ], 34)), [
        [_directive_repeat_点击, _ctx.increase]
      ]) : vue.createCommentVNode("v-如果", true),
      vue.createVNode(_component_el_input, {
        ref: "input",
        type: "number",
        step: _ctx.step,
        "model-value": _ctx.displayValue,
        placeholder: _ctx.placeholder,
        disabled: _ctx.inputNumberDisabled,
        size: _ctx.inputNumberSize,
        max: _ctx.max,
        min: _ctx.min,
        名字: _ctx.名字,
        label: _ctx.label,
        "validate-event": false,
        onKeydown: [
          vue.withKeys(vue.withMod如果iers(_ctx.increase, ["prevent"]), ["up"]),
          vue.withKeys(vue.withMod如果iers(_ctx.decrease, ["prevent"]), ["down"])
        ],
        onBlur: _ctx.handleBlur,
        onFocus: _ctx.handleFocus,
        onInput: _ctx.handleInput,
        onChange: _ctx.handleInputChange
      }, null, 8, ["step", "model-value", "placeholder", "disabled", "size", "max", "min", "名字", "label", "onKeydown", "onBlur", "onFocus", "onInput", "onChange"])
    ], 34);
  }
  变量 InputNumber为/* @__PURE__ */ _输出出口_sfc(_sfc_main$X, [["render", _sfc_render$D], ["__file", "input-number.vue"]]);

  常量 ElInputNumber为withInstall(InputNumber);

  常量 linkProps为buildProps({
    type: {
      type: String,
      values: ["primary", "success", "warning", "info", "danger", "default"],
      default: "default"
    },
    underline: {
      type: Boolean,
      default: true
    },
    disabled: { type: Boolean, default: false },
    href: { type: String, default: "" },
    icon: {
      type: iconPropType,
      default: ""
    }
  });
  常量 linkEmits为{
    点击: (evt) => evt instanceof MouseEvent
  };

  常量 _hoisted_1$r为["href"];
  常量 __default__$f为{
    名字: "ElLink"
  };
  常量 _sfc_main$W为/* @__PURE__ */ vue.defineComponent({
    ...__default__$f,
    props: linkProps,
    emits: linkEmits,
    setup(__props, { emit }) {
      常量 props为__props;
      常量 ns为useNamespace("link");
      函数 handleClick(event) {
        如果 (不props.disabled)
          emit("点击", event);
      }
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("a", {
          class: vue.normalizeClass([
            vue.unref(ns).b(),
            vue.unref(ns).m(_ctx.type),
            vue.unref(ns).is("disabled", _ctx.disabled),
            vue.unref(ns).is("underline", _ctx.underline 与 不_ctx.disabled)
          ]),
          href: _ctx.disabled 或 不_ctx.href ? void 0 : _ctx.href,
          onClick: handleClick
        }, [
          _ctx.icon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), { key: 0 }, {
            default: vue.withCtx(() => [
              (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.icon)))
            ]),
            _: 1
          })) : vue.createCommentVNode("v-如果", true),
          _ctx.$slots.default ? (vue.openBlock(), vue.createElementBlock("span", {
            key: 1,
            class: vue.normalizeClass(vue.unref(ns).e("inner"))
          }, [
            vue.renderSlot(_ctx.$slots, "default")
          ], 2)) : vue.createCommentVNode("v-如果", true),
          _ctx.$slots.icon ? vue.renderSlot(_ctx.$slots, "icon", { key: 2 }) : vue.createCommentVNode("v-如果", true)
        ], 10, _hoisted_1$r);
      };
    }
  });
  变量 Link为/* @__PURE__ */ _输出出口_sfc(_sfc_main$W, [["__file", "link.vue"]]);

  常量 ElLink为withInstall(Link);

  class SubMenu$1 {
    常量ructor(parent, domNode) {
      this.parent为parent;
      this.domNode为domNode;
      this.subIndex为0;
      this.subIndex为0;
      this.init();
    }
    init() {
      this.subMenuItems为this.domNode.querySelectorAll("li");
      this.addListeners();
    }
    gotoSubIndex(idx) {
      如果 (idx === this.subMenuItems.长度) {
        idx为0;
      } 否则 如果 (idx < 0) {
        idx为this.subMenuItems.长度 - 1;
      }
      this.subMenuItems[idx].focus();
      this.subIndex为idx;
    }
    addListeners() {
      常量 parentNode为this.parent.domNode;
      Array.prototype.变量循环Each.call(this.subMenuItems, (el) => {
        el.addEventListener("keydown", (event) => {
          让 prevDef为false;
          主分支 (event.code) {
            子分支 EVENT_CODE.down: {
              this.gotoSubIndex(this.subIndex + 1);
              prevDef为true;
              break;
            }
            子分支 EVENT_CODE.up: {
              this.gotoSubIndex(this.subIndex - 1);
              prevDef为true;
              break;
            }
            子分支 EVENT_CODE.tab: {
              triggerEvent(parentNode, "mouseleave");
              break;
            }
            子分支 EVENT_CODE.enter:
            子分支 EVENT_CODE.space: {
              prevDef为true;
              event.currentTarget.点击();
              break;
            }
          }
          如果 (prevDef) {
            event.preventDefault();
            event.stopPropagation();
          }
          返回 false;
        });
      });
    }
  }
  变量 SubMenu$2为SubMenu$1;

  class MenuItem$1 {
    常量ructor(domNode) {
      this.domNode为domNode;
      this.submenu为null;
      this.submenu为null;
      this.init();
    }
    init() {
      this.domNode.setAttribute("tabindex", "0");
      常量 menuChild为this.domNode.querySelector(".el-menu");
      如果 (menuChild) {
        this.submenu为new SubMenu$2(this, menuChild);
      }
      this.addListeners();
    }
    addListeners() {
      this.domNode.addEventListener("keydown", (event) => {
        让 prevDef为false;
        主分支 (event.code) {
          子分支 EVENT_CODE.down: {
            triggerEvent(event.currentTarget, "mouseenter");
            this.submenu 与 this.submenu.gotoSubIndex(0);
            prevDef为true;
            break;
          }
          子分支 EVENT_CODE.up: {
            triggerEvent(event.currentTarget, "mouseenter");
            this.submenu 与 this.submenu.gotoSubIndex(this.submenu.subMenuItems.长度 - 1);
            prevDef为true;
            break;
          }
          子分支 EVENT_CODE.tab: {
            triggerEvent(event.currentTarget, "mouseleave");
            break;
          }
          子分支 EVENT_CODE.enter:
          子分支 EVENT_CODE.space: {
            prevDef为true;
            event.currentTarget.点击();
            break;
          }
        }
        如果 (prevDef) {
          event.preventDefault();
        }
      });
    }
  }
  变量 MenuItem$2为MenuItem$1;

  class Menu$1 {
    常量ructor(domNode) {
      this.domNode为domNode;
      this.init();
    }
    init() {
      常量 menuChildren为this.domNode.childNodes;
      Array.从(menuChildren).变量循环Each((child) => {
        如果 (child.nodeType === 1) {
          new MenuItem$2(child);
        }
      });
    }
  }
  变量 Menubar为Menu$1;

  常量 _sfc_main$V为vue.defineComponent({
    名字: "ElMenuCollapseTransition",
    setup() {
      常量 listeners为{
        onBe变量循环eEnter: (el) => el.style.opacity为"0.2",
        onEnter(el, done) {
          addClass(el, "el-opacity-transition");
          el.style.opacity为"1";
          done();
        },
        onAfterEnter(el) {
          removeClass(el, "el-opacity-transition");
          el.style.opacity为"";
        },
        onBe变量循环eLeave(el) {
          如果 (不el.dataset) {
            el.dataset为{};
          }
          如果 (hasClass(el, "el-menu--collapse")) {
            removeClass(el, "el-menu--collapse");
            el.dataset.oldOverflow为el.style.overflow;
            el.dataset.scrollWidth为el.clientWidth.toString();
            addClass(el, "el-menu--collapse");
          } 否则 {
            addClass(el, "el-menu--collapse");
            el.dataset.oldOverflow为el.style.overflow;
            el.dataset.scrollWidth为el.clientWidth.toString();
            removeClass(el, "el-menu--collapse");
          }
          el.style.宽度为`${el.scrollWidth}px`;
          el.style.overflow为"hidden";
        },
        onLeave(el) {
          addClass(el, "horizontal-collapse-transition");
          el.style.宽度为`${el.dataset.scrollWidth}px`;
        }
      };
      返回 {
        listeners
      };
    }
  });
  函数 _sfc_render$C(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createBlock(vue.Transition, vue.mergeProps({ mode: "out-in" }, _ctx.listeners), {
      default: vue.withCtx(() => [
        vue.renderSlot(_ctx.$slots, "default")
      ]),
      _: 3
    }, 16);
  }
  变量 ElMenuCollapseTransition为/* @__PURE__ */ _输出出口_sfc(_sfc_main$V, [["render", _sfc_render$C], ["__file", "menu-collapse-transition.vue"]]);

  函数 useMenu(instance, currentIndex) {
    常量 rootMenu为vue.inject("rootMenu");
    如果 (不rootMenu)
      抛出Error("useMenu", "can not inject root menu");
    常量 indexPath为vue.computed(() => {
      让 parent为instance.parent;
      常量 path为[currentIndex.value];
      条件循环 (parent.type.名字 不== "ElMenu") {
        如果 (parent.props.index) {
          path.unsh如果t(parent.props.index);
        }
        parent为parent.parent;
      }
      返回 path;
    });
    常量 parentMenu为vue.computed(() => {
      让 parent为instance.parent;
      条件循环 (parent 与 不["ElMenu", "ElSubMenu"].includes(parent.type.名字)) {
        parent为parent.parent;
      }
      返回 parent;
    });
    常量 paddingStyle为vue.computed(() => {
      让 parent为instance.parent;
      如果 (rootMenu.props.mode 不== "vertical")
        返回 {};
      让 padding为20;
      如果 (rootMenu.props.collapse) {
        padding为20;
      } 否则 {
        条件循环 (parent 与 parent.type.名字 不== "ElMenu") {
          如果 (parent.type.名字 === "ElSubMenu") {
            padding += 20;
          }
          parent为parent.parent;
        }
      }
      返回 { paddingLeft: `${padding}px` };
    });
    返回 {
      parentMenu,
      paddingStyle,
      indexPath
    };
  }

  函数 useMenuColor(props) {
    常量 menuBarColor为vue.computed(() => {
      常量 color为props.backgroundColor;
      如果 (不color) {
        返回 "";
      } 否则 {
        返回 new TinyColor(color).shade(20).toString();
      }
    });
    返回 menuBarColor;
  }

  常量 useMenuCssVar为(props) => {
    返回 vue.computed(() => {
      返回 {
        "--el-menu-text-color": props.textColor 或 "",
        "--el-menu-hover-text-color": props.textColor 或 "",
        "--el-menu-bg-color": props.backgroundColor 或 "",
        "--el-menu-hover-bg-color": useMenuColor(props).value 或 "",
        "--el-menu-active-color": props.activeTextColor 或 ""
      };
    });
  };

  常量 subMenuProps为buildProps({
    index: {
      type: String,
      required: true
    },
    showTimeout: {
      type: Number,
      default: 300
    },
    hideTimeout: {
      type: Number,
      default: 300
    },
    popperClass: String,
    disabled: Boolean,
    popperAppendToBody: {
      type: Boolean,
      default: void 0
    },
    popperOffset: {
      type: Number,
      default: 6
    }
  });
  常量 COMPONENT_NAME$9为"ElSubMenu";
  变量 SubMenu为vue.defineComponent({
    名字: COMPONENT_NAME$9,
    props: subMenuProps,
    setup(props, { slots, expose }) {
      常量 instance为vue.getCurrentInstance();
      常量 { paddingStyle, indexPath, parentMenu }为useMenu(instance, vue.computed(() => props.index));
      常量 rootMenu为vue.inject("rootMenu");
      如果 (不rootMenu)
        抛出Error(COMPONENT_NAME$9, "can not inject root menu");
      常量 subMenu为vue.inject(`subMenu:${parentMenu.value.uid}`);
      如果 (不subMenu)
        抛出Error(COMPONENT_NAME$9, "can not inject sub menu");
      常量 items为vue.ref({});
      常量 subMenus为vue.ref({});
      让 timeout;
      常量 mouseInChild为vue.ref(false);
      常量 verticalTitleRef为vue.ref();
      常量 vPopper为vue.ref(null);
      常量 currentPlacement为vue.computed(() => mode.value === "horizontal" 与 isFirstLevel.value ? "bottom-start" : "right-start");
      常量 subMenuTitleIcon为vue.computed(() => {
        返回 mode.value === "horizontal" 与 isFirstLevel.value 或 mode.value === "vertical" 与 不rootMenu.props.collapse ? arrowDown : arrowRight;
      });
      常量 isFirstLevel为vue.computed(() => {
        让 isFirstLevel2为true;
        让 parent为instance.parent;
        条件循环 (parent 与 parent.type.名字 不== "ElMenu") {
          如果 (["ElSubMenu", "ElMenuItemGroup"].includes(parent.type.名字)) {
            isFirstLevel2为false;
            break;
          } 否则 {
            parent为parent.parent;
          }
        }
        返回 isFirstLevel2;
      });
      常量 appendToBody为vue.computed(() => {
        返回 props.popperAppendToBody === void 0 ? isFirstLevel.value : Boolean(props.popperAppendToBody);
      });
      常量 menuTransitionName为vue.computed(() => rootMenu.props.collapse ? "el-zoom-in-left" : "el-zoom-in-top");
      常量 fallbackPlacements为vue.computed(() => mode.value === "horizontal" 与 isFirstLevel.value ? [
        "bottom-start",
        "bottom-end",
        "top-start",
        "top-end",
        "right-start",
        "left-start"
      ] : [
        "right-start",
        "left-start",
        "bottom-start",
        "bottom-end",
        "top-start",
        "top-end"
      ]);
      常量 opened为vue.computed(() => rootMenu.openedMenus.includes(props.index));
      常量 active为vue.computed(() => {
        让 isActive为false;
        Object.values(items.value).变量循环Each((item2) => {
          如果 (item2.active) {
            isActive为true;
          }
        });
        Object.values(subMenus.value).变量循环Each((subItem) => {
          如果 (subItem.active) {
            isActive为true;
          }
        });
        返回 isActive;
      });
      常量 backgroundColor为vue.computed(() => rootMenu.props.backgroundColor 或 "");
      常量 activeTextColor为vue.computed(() => rootMenu.props.activeTextColor 或 "");
      常量 textColor为vue.computed(() => rootMenu.props.textColor 或 "");
      常量 mode为vue.computed(() => rootMenu.props.mode);
      常量 item为vue.reactive({
        index: props.index,
        indexPath,
        active
      });
      常量 标题Style为vue.computed(() => {
        如果 (mode.value 不== "horizontal") {
          返回 {
            color: textColor.value
          };
        }
        返回 {
          borderBottomColor: active.value ? rootMenu.props.activeTextColor ? activeTextColor.value : "" : "transparent",
          color: active.value ? activeTextColor.value : textColor.value
        };
      });
      常量 doDestroy为() => {
        变量 _a, _b, _c;
        返回 (_c为(_b为(_a为vPopper.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.popperInstanceRef) == null ? void 0 : _c.destroy();
      };
      常量 handleCollapseToggle为(value) => {
        如果 (不value) {
          doDestroy();
        }
      };
      常量 handleClick为() => {
        如果 (rootMenu.props.menuTrigger === "hover" 与 rootMenu.props.mode === "horizontal" 或 rootMenu.props.collapse 与 rootMenu.props.mode === "vertical" 或 props.disabled)
          返回;
        rootMenu.handleSubMenuClick({
          index: props.index,
          indexPath: indexPath.value,
          active: active.value
        });
      };
      常量 handleMouseenter为(event, showTimeout为props.showTimeout) => {
        变量 _a;
        如果 (event.type === "focus" 与 不event.relatedTarget) {
          返回;
        }
        如果 (rootMenu.props.menuTrigger === "点击" 与 rootMenu.props.mode === "horizontal" 或 不rootMenu.props.collapse 与 rootMenu.props.mode === "vertical" 或 props.disabled) {
          返回;
        }
        subMenu.mouseInChild.value为true;
        timeout == null ? void 0 : timeout();
        ({ stop: timeout }为useTimeoutFn(() => {
          rootMenu.openMenu(props.index, indexPath.value);
        }, showTimeout));
        如果 (appendToBody.value) {
          (_a为parentMenu.value.vnode.el) == null ? void 0 : _a.dispatchEvent(new MouseEvent("mouseenter"));
        }
      };
      常量 handleMouseleave为(deepDispatch为false) => {
        变量 _a, _b;
        如果 (rootMenu.props.menuTrigger === "点击" 与 rootMenu.props.mode === "horizontal" 或 不rootMenu.props.collapse 与 rootMenu.props.mode === "vertical") {
          返回;
        }
        timeout == null ? void 0 : timeout();
        subMenu.mouseInChild.value为false;
        ({ stop: timeout }为useTimeoutFn(() => 不mouseInChild.value 与 rootMenu.closeMenu(props.index, indexPath.value), props.hideTimeout));
        如果 (appendToBody.value 与 deepDispatch) {
          如果 (((_a为instance.parent) == null ? void 0 : _a.type.名字) === "ElSubMenu") {
            (_b为subMenu.handleMouseleave) == null ? void 0 : _b.call(subMenu, true);
          }
        }
      };
      vue.watch(() => rootMenu.props.collapse, (value) => handleCollapseToggle(Boolean(value)));
      {
        常量 addSubMenu为(item2) => {
          subMenus.value[item2.index]为item2;
        };
        常量 removeSubMenu为(item2) => {
          de让e subMenus.value[item2.index];
        };
        vue.provide(`subMenu:${instance.uid}`, {
          addSubMenu,
          removeSubMenu,
          handleMouseleave,
          mouseInChild
        });
      }
      expose({
        opened
      });
      vue.onMounted(() => {
        rootMenu.addSubMenu(item);
        subMenu.addSubMenu(item);
      });
      vue.onBe变量循环eUnmount(() => {
        subMenu.removeSubMenu(item);
        rootMenu.removeSubMenu(item);
      });
      返回 () => {
        变量 _a;
        常量 标题Tag为[
          (_a为slots.标题) == null ? void 0 : _a.call(slots),
          vue.h(ElIcon, {
            class: ["el-sub-menu__icon-arrow"]
          }, { default: () => vue.h(subMenuTitleIcon.value) })
        ];
        常量 ulStyle为useMenuCssVar(rootMenu.props);
        常量 child为rootMenu.isMenuPopup ? vue.h(ElTooltip, {
          ref: vPopper,
          visible: opened.value,
          effect: "light",
          pure: true,
          offset: props.popperOffset,
          showArrow: false,
          persistent: true,
          popperClass: props.popperClass,
          placement: currentPlacement.value,
          teleported: appendToBody.value,
          fallbackPlacements: fallbackPlacements.value,
          transition: menuTransitionName.value,
          gpuAcceleration: false
        }, {
          上下文: () => {
            变量 _a2;
            返回 vue.h("div", {
              class: [`el-menu--${mode.value}`, props.popperClass],
              onMouseenter: (evt) => handleMouseenter(evt, 100),
              onMouseleave: () => handleMouseleave(true),
              onFocus: (evt) => handleMouseenter(evt, 100)
            }, [
              vue.h("ul", {
                class: [
                  "el-menu el-menu--popup",
                  `el-menu--popup-${currentPlacement.value}`
                ],
                style: ulStyle.value
              }, [(_a2为slots.default) == null ? void 0 : _a2.call(slots)])
            ]);
          },
          default: () => vue.h("div", {
            class: "el-sub-menu__标题",
            style: [
              paddingStyle.value,
              标题Style.value,
              { backgroundColor: backgroundColor.value }
            ],
            onClick: handleClick
          }, 标题Tag)
        }) : vue.h(vue.Fragment, {}, [
          vue.h("div", {
            class: "el-sub-menu__标题",
            style: [
              paddingStyle.value,
              标题Style.value,
              { backgroundColor: backgroundColor.value }
            ],
            ref: verticalTitleRef,
            onClick: handleClick
          }, 标题Tag),
          vue.h(_CollapseTransition, {}, {
            default: () => {
              变量 _a2;
              返回 vue.withDirectives(vue.h("ul", {
                role: "menu",
                class: "el-menu el-menu--inline",
                style: ulStyle.value
              }, [(_a2为slots.default) == null ? void 0 : _a2.call(slots)]), [[vue.vShow, opened.value]]);
            }
          })
        ]);
        返回 vue.h("li", {
          class: [
            "el-sub-menu",
            {
              "is-active": active.value,
              "is-opened": opened.value,
              "is-disabled": props.disabled
            }
          ],
          role: "menuitem",
          ariaHaspopup: true,
          ariaExpanded: opened.value,
          onMouseenter: handleMouseenter,
          onMouseleave: () => handleMouseleave(true),
          onFocus: handleMouseenter
        }, [child]);
      };
    }
  });

  常量 menuProps为buildProps({
    mode: {
      type: String,
      values: ["horizontal", "vertical"],
      default: "vertical"
    },
    defaultActive: {
      type: String,
      default: ""
    },
    defaultOpeneds: {
      type: definePropType(Array),
      default: () => mutable([])
    },
    uniqueOpened: Boolean,
    router: Boolean,
    menuTrigger: {
      type: String,
      values: ["hover", "点击"],
      default: "hover"
    },
    collapse: Boolean,
    backgroundColor: String,
    textColor: String,
    activeTextColor: String,
    collapseTransition: {
      type: Boolean,
      default: true
    },
    ellipsis: {
      type: Boolean,
      default: true
    }
  });
  常量 checkIndexPath为(indexPath) => Array.isArray(indexPath) 与 indexPath.every((path) => isString(path));
  常量 menuEmits为{
    close: (index, indexPath) => isString(index) 与 checkIndexPath(indexPath),
    open: (index, indexPath) => isString(index) 与 checkIndexPath(indexPath),
    select: (index, indexPath, item, routerResult) => isString(index) 与 checkIndexPath(indexPath) 与 isObject$1(item) 与 (routerResult === void 0 或 routerResult instanceof Promise)
  };
  变量 Menu为vue.defineComponent({
    名字: "ElMenu",
    props: menuProps,
    emits: menuEmits,
    setup(props, { emit, slots, expose }) {
      常量 instance为vue.getCurrentInstance();
      常量 router为instance.appContext.config.全局Properties.$router;
      常量 menu为vue.ref();
      常量 openedMenus为vue.ref(props.defaultOpeneds 与 不props.collapse ? props.defaultOpeneds.slice(0) : []);
      常量 activeIndex为vue.ref(props.defaultActive);
      常量 items为vue.ref({});
      常量 subMenus为vue.ref({});
      常量 isMenuPopup为vue.computed(() => {
        返回 props.mode === "horizontal" 或 props.mode === "vertical" 与 props.collapse;
      });
      常量 initMenu为() => {
        常量 activeItem为activeIndex.value 与 items.value[activeIndex.value];
        如果 (不activeItem 或 props.mode === "horizontal" 或 props.collapse)
          返回;
        常量 indexPath为activeItem.indexPath;
        indexPath.变量循环Each((index) => {
          常量 subMenu为subMenus.value[index];
          subMenu 与 openMenu(index, subMenu.indexPath);
        });
      };
      常量 openMenu为(index, indexPath) => {
        如果 (openedMenus.value.includes(index))
          返回;
        如果 (props.uniqueOpened) {
          openedMenus.value为openedMenus.value.filter((index2) => indexPath.includes(index2));
        }
        openedMenus.value.push(index);
        emit("open", index, indexPath);
      };
      常量 closeMenu为(index, indexPath) => {
        常量 i为openedMenus.value.indexOf(index);
        如果 (i 不== -1) {
          openedMenus.value.splice(i, 1);
        }
        emit("close", index, indexPath);
      };
      常量 handleSubMenuClick为({
        index,
        indexPath
      }) => {
        常量 isOpened为openedMenus.value.includes(index);
        如果 (isOpened) {
          closeMenu(index, indexPath);
        } 否则 {
          openMenu(index, indexPath);
        }
      };
      常量 handleMenuItemClick为(menuItem) => {
        如果 (props.mode === "horizontal" 或 props.collapse) {
          openedMenus.value为[];
        }
        常量 { index, indexPath }为menuItem;
        如果 (index === void 0 或 indexPath === void 0)
          返回;
        如果 (props.router 与 router) {
          常量 route为menuItem.route 或 index;
          常量 routerResult为router.push(route).then((res) => {
            如果 (不res)
              activeIndex.value为index;
            返回 res;
          });
          emit("select", index, indexPath, { index, indexPath, route }, routerResult);
        } 否则 {
          activeIndex.value为index;
          emit("select", index, indexPath, { index, indexPath });
        }
      };
      常量 updateActiveIndex为(val) => {
        常量 itemsInData为items.value;
        常量 item为itemsInData[val] 或 activeIndex.value 与 itemsInData[activeIndex.value] 或 itemsInData[props.defaultActive];
        如果 (item) {
          activeIndex.value为item.index;
          initMenu();
        } 否则 {
          activeIndex.value为val;
        }
      };
      常量 handleResize为() => {
        vue.nextTick(() => instance.proxy.$变量循环ceUpdate());
      };
      vue.watch(() => props.defaultActive, (currentActive) => {
        如果 (不items.value[currentActive]) {
          activeIndex.value为"";
        }
        updateActiveIndex(currentActive);
      });
      vue.watch(items.value, () => initMenu());
      vue.watch(() => props.collapse, (value) => {
        如果 (value)
          openedMenus.value为[];
      });
      {
        常量 addSubMenu为(item) => {
          subMenus.value[item.index]为item;
        };
        常量 removeSubMenu为(item) => {
          de让e subMenus.value[item.index];
        };
        常量 addMenuItem为(item) => {
          items.value[item.index]为item;
        };
        常量 removeMenuItem为(item) => {
          de让e items.value[item.index];
        };
        vue.provide("rootMenu", vue.reactive({
          props,
          openedMenus,
          items,
          subMenus,
          activeIndex,
          isMenuPopup,
          addMenuItem,
          removeMenuItem,
          addSubMenu,
          removeSubMenu,
          openMenu,
          closeMenu,
          handleMenuItemClick,
          handleSubMenuClick
        }));
        vue.provide(`subMenu:${instance.uid}`, {
          addSubMenu,
          removeSubMenu,
          mouseInChild: vue.ref(false)
        });
      }
      vue.onMounted(() => {
        initMenu();
        如果 (props.mode === "horizontal") {
          new Menubar(instance.vnode.el);
        }
      });
      {
        常量 open为(index) => {
          常量 { indexPath }为subMenus.value[index];
          indexPath.变量循环Each((i) => openMenu(i, indexPath));
        };
        expose({
          open,
          close: closeMenu,
          handleResize
        });
      }
      常量 flattedChildren为(children) => {
        常量 vnodes为Array.isArray(children) ? children : [children];
        常量 result为[];
        vnodes.变量循环Each((child) => {
          如果 (Array.isArray(child.children)) {
            result.push(...flattedChildren(child.children));
          } 否则 {
            result.push(child);
          }
        });
        返回 result;
      };
      常量 useVNodeResize为(vnode) => props.mode === "horizontal" ? vue.withDirectives(vnode, [[Resize, handleResize]]) : vnode;
      返回 () => {
        变量 _a, _b, _c, _d;
        让 slot为(_b为(_a为slots.default) == null ? void 0 : _a.call(slots)) 不= null ? _b : [];
        常量 vShowMore为[];
        如果 (props.mode === "horizontal" 与 menu.value) {
          常量 items2为Array.从((_d为(_c为menu.value) == null ? void 0 : _c.childNodes) 不= null ? _d : []).filter((item) => item.nodeName 不== "#text" 或 item.nodeValue);
          常量 originalSlot为flattedChildren(slot);
          常量 moreItemWidth为64;
          常量 paddingLeft为Number.parseInt(getComputedStyle(menu.value).paddingLeft, 10);
          常量 paddingRight为Number.parseInt(getComputedStyle(menu.value).paddingRight, 10);
          常量 menuWidth为menu.value.clientWidth - paddingLeft - paddingRight;
          让 calcWidth为0;
          让 sliceIndex为0;
          items2.变量循环Each((item, index) => {
            calcWidth += item.offsetWidth 或 0;
            如果 (calcWidth <= menuWidth - moreItemWidth) {
              sliceIndex为index + 1;
            }
          });
          常量 slotDefault为originalSlot.slice(0, sliceIndex);
          常量 slotMore为originalSlot.slice(sliceIndex);
          如果 ((slotMore == null ? void 0 : slotMore.长度) 与 props.ellipsis) {
            slot为slotDefault;
            vShowMore.push(vue.h(SubMenu, {
              index: "sub-menu-more",
              class: "el-sub-menu__hide-arrow"
            }, {
              标题: () => vue.h(ElIcon, {
                class: ["el-sub-menu__icon-more"]
              }, { default: () => vue.h(more) }),
              default: () => slotMore
            }));
          }
        }
        常量 ulStyle为useMenuCssVar(props);
        常量 resizeMenu为(vNode) => props.ellipsis ? useVNodeResize(vNode) : vNode;
        常量 vMenu为resizeMenu(vue.h("ul", {
          key: String(props.collapse),
          role: "menubar",
          ref: menu,
          style: ulStyle.value,
          class: {
            "el-menu": true,
            "el-menu--horizontal": props.mode === "horizontal",
            "el-menu--collapse": props.collapse
          }
        }, [...slot, ...vShowMore]));
        如果 (props.collapseTransition 与 props.mode === "vertical") {
          返回 vue.h(ElMenuCollapseTransition, () => vMenu);
        }
        返回 vMenu;
      };
    }
  });

  常量 menuItemProps为buildProps({
    index: {
      type: definePropType([String, null]),
      default: null
    },
    route: {
      type: definePropType([String, Object])
    },
    disabled: Boolean
  });
  常量 menuItemEmits为{
    点击: (item) => isString(item.index) 与 Array.isArray(item.indexPath)
  };

  常量 COMPONENT_NAME$8为"ElMenuItem";
  常量 _sfc_main$U为vue.defineComponent({
    名字: COMPONENT_NAME$8,
    components: {
      ElTooltip
    },
    props: menuItemProps,
    emits: menuItemEmits,
    setup(props, { emit }) {
      常量 instance为vue.getCurrentInstance();
      常量 rootMenu为vue.inject("rootMenu");
      如果 (不rootMenu)
        抛出Error(COMPONENT_NAME$8, "can not inject root menu");
      常量 { parentMenu, paddingStyle, indexPath }为useMenu(instance, vue.toRef(props, "index"));
      常量 subMenu为vue.inject(`subMenu:${parentMenu.value.uid}`);
      如果 (不subMenu)
        抛出Error(COMPONENT_NAME$8, "can not inject sub menu");
      常量 active为vue.computed(() => props.index === rootMenu.activeIndex);
      常量 item为vue.reactive({
        index: props.index,
        indexPath,
        active
      });
      常量 handleClick为() => {
        如果 (不props.disabled) {
          rootMenu.handleMenuItemClick({
            index: props.index,
            indexPath: indexPath.value,
            route: props.route
          });
          emit("点击", item);
        }
      };
      vue.onMounted(() => {
        subMenu.addSubMenu(item);
        rootMenu.addMenuItem(item);
      });
      vue.onBe变量循环eUnmount(() => {
        subMenu.removeSubMenu(item);
        rootMenu.removeMenuItem(item);
      });
      返回 {
        Effect,
        parentMenu,
        rootMenu,
        paddingStyle,
        active,
        handleClick
      };
    }
  });
  常量 _hoisted_1$q为{ class: "el-menu-tooltip__trigger" };
  函数 _sfc_render$B(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_tooltip为vue.resolveComponent("el-tooltip");
    返回 vue.openBlock(), vue.createElementBlock("li", {
      class: vue.normalizeClass(["el-menu-item", {
        "is-active": _ctx.active,
        "is-disabled": _ctx.disabled
      }]),
      role: "menuitem",
      tabindex: "-1",
      style: vue.normalizeStyle(_ctx.paddingStyle),
      onClick: _cache[0] 或 (_cache[0]为(...args) => _ctx.handleClick 与 _ctx.handleClick(...args))
    }, [
      _ctx.parentMenu.type.名字 === "ElMenu" 与 _ctx.rootMenu.props.collapse 与 _ctx.$slots.标题 ? (vue.openBlock(), vue.createBlock(_component_el_tooltip, {
        key: 0,
        effect: _ctx.Effect.DARK,
        placement: "right",
        "fallback-placements": ["left"],
        persistent: ""
      }, {
        上下文: vue.withCtx(() => [
          vue.renderSlot(_ctx.$slots, "标题")
        ]),
        default: vue.withCtx(() => [
          vue.createElementVNode("div", _hoisted_1$q, [
            vue.renderSlot(_ctx.$slots, "default")
          ])
        ]),
        _: 3
      }, 8, ["effect"])) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 1 }, [
        vue.renderSlot(_ctx.$slots, "default"),
        vue.renderSlot(_ctx.$slots, "标题")
      ], 64))
    ], 6);
  }
  变量 MenuItem为/* @__PURE__ */ _输出出口_sfc(_sfc_main$U, [["render", _sfc_render$B], ["__file", "menu-item.vue"]]);

  常量 menuItemGroupProps为{
    标题: String
  };

  常量 COMPONENT_NAME$7为"ElMenuItemGroup";
  常量 _sfc_main$T为vue.defineComponent({
    名字: COMPONENT_NAME$7,
    props: menuItemGroupProps,
    setup() {
      常量 instance为vue.getCurrentInstance();
      常量 menu为vue.inject("rootMenu");
      如果 (不menu)
        抛出Error(COMPONENT_NAME$7, "can not inject root menu");
      常量 levelPadding为vue.computed(() => {
        如果 (menu.props.collapse)
          返回 20;
        让 padding为20;
        让 parent为instance.parent;
        条件循环 (parent 与 parent.type.名字 不== "ElMenu") {
          如果 (parent.type.名字 === "ElSubMenu") {
            padding += 20;
          }
          parent为parent.parent;
        }
        返回 padding;
      });
      返回 {
        levelPadding
      };
    }
  });
  常量 _hoisted_1$p为{ class: "el-menu-item-group" };
  函数 _sfc_render$A(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("li", _hoisted_1$p, [
      vue.createElementVNode("div", {
        class: "el-menu-item-group__标题",
        style: vue.normalizeStyle({ paddingLeft: `${_ctx.levelPadding}px` })
      }, [
        不_ctx.$slots.标题 ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
          vue.createTextVNode(vue.toDisplayString(_ctx.标题), 1)
        ], 2112)) : vue.renderSlot(_ctx.$slots, "标题", { key: 1 })
      ], 4),
      vue.createElementVNode("ul", null, [
        vue.renderSlot(_ctx.$slots, "default")
      ])
    ]);
  }
  变量 MenuItemGroup为/* @__PURE__ */ _输出出口_sfc(_sfc_main$T, [["render", _sfc_render$A], ["__file", "menu-item-group.vue"]]);

  常量 ElMenu为withInstall(Menu, {
    MenuItem,
    MenuItemGroup,
    SubMenu
  });
  常量 ElMenuItem为withNoopInstall(MenuItem);
  常量 ElMenuItemGroup为withNoopInstall(MenuItemGroup);
  常量 ElSubMenu为withNoopInstall(SubMenu);

  常量 pageHeaderProps为buildProps({
    icon: {
      type: iconPropType,
      default: () => back
    },
    标题: String,
    上下文: {
      type: String,
      default: ""
    }
  });
  常量 pageHeaderEmits为{
    back: () => true
  };

  常量 __default__$e为{
    名字: "ElPageHeader"
  };
  常量 _sfc_main$S为/* @__PURE__ */ vue.defineComponent({
    ...__default__$e,
    props: pageHeaderProps,
    emits: pageHeaderEmits,
    setup(__props, { emit }) {
      常量 { t }为useLocale();
      常量 ns为useNamespace("page-头er");
      函数 handleClick() {
        emit("back");
      }
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass(vue.unref(ns).b())
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns).e("left")),
            onClick: handleClick
          }, [
            _ctx.icon 或 _ctx.$slots.icon ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: vue.normalizeClass(vue.unref(ns).e("icon"))
            }, [
              vue.renderSlot(_ctx.$slots, "icon", {}, () => [
                _ctx.icon ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), { key: 0 }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.icon)))
                  ]),
                  _: 1
                })) : vue.createCommentVNode("v-如果", true)
              ])
            ], 2)) : vue.createCommentVNode("v-如果", true),
            vue.createElementVNode("div", {
              class: vue.normalizeClass(vue.unref(ns).e("标题"))
            }, [
              vue.renderSlot(_ctx.$slots, "标题", {}, () => [
                vue.createTextVNode(vue.toDisplayString(_ctx.标题 或 vue.unref(t)("el.pageHeader.标题")), 1)
              ])
            ], 2)
          ], 2),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(vue.unref(ns).e("上下文"))
          }, [
            vue.renderSlot(_ctx.$slots, "上下文", {}, () => [
              vue.createTextVNode(vue.toDisplayString(_ctx.上下文), 1)
            ])
          ], 2)
        ], 2);
      };
    }
  });
  变量 PageHeader为/* @__PURE__ */ _输出出口_sfc(_sfc_main$S, [["__file", "page-头er.vue"]]);

  常量 ElPageHeader为withInstall(PageHeader);

  常量 paginationPrevProps为{
    disabled: Boolean,
    currentPage: {
      type: Number,
      default: 1
    },
    prevText: {
      type: String,
      default: ""
    }
  };
  常量 _sfc_main$R为vue.defineComponent({
    名字: "ElPaginationPrev",
    components: {
      ElIcon,
      ArrowLeft: arrowLeft
    },
    props: paginationPrevProps,
    emits: ["点击"],
    setup(props) {
      常量 整数ernalDisabled为vue.computed(() => props.disabled 或 props.currentPage <= 1);
      返回 {
        整数ernalDisabled
      };
    }
  });
  常量 _hoisted_1$o为["disabled", "aria-disabled"];
  常量 _hoisted_2$h为{ key: 0 };
  函数 _sfc_render$z(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_arrow_left为vue.resolveComponent("arrow-left");
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    返回 vue.openBlock(), vue.createElementBlock("button", {
      type: "button",
      class: "btn-prev",
      disabled: _ctx.整数ernalDisabled,
      "aria-disabled": _ctx.整数ernalDisabled,
      onClick: _cache[0] 或 (_cache[0]为($event) => _ctx.$emit("点击", $event))
    }, [
      _ctx.prevText ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_2$h, vue.toDisplayString(_ctx.prevText), 1)) : (vue.openBlock(), vue.createBlock(_component_el_icon, { key: 1 }, {
        default: vue.withCtx(() => [
          vue.createVNode(_component_arrow_left)
        ]),
        _: 1
      }))
    ], 8, _hoisted_1$o);
  }
  变量 Prev为/* @__PURE__ */ _输出出口_sfc(_sfc_main$R, [["render", _sfc_render$z], ["__file", "prev.vue"]]);

  常量 paginationNextProps为{
    disabled: Boolean,
    currentPage: {
      type: Number,
      default: 1
    },
    pageCount: {
      type: Number,
      default: 50
    },
    nextText: {
      type: String,
      default: ""
    }
  };
  常量 _sfc_main$Q为vue.defineComponent({
    名字: "ElPaginationNext",
    components: {
      ElIcon,
      ArrowRight: arrowRight
    },
    props: paginationNextProps,
    emits: ["点击"],
    setup(props) {
      常量 整数ernalDisabled为vue.computed(() => props.disabled 或 props.currentPage === props.pageCount 或 props.pageCount === 0);
      返回 {
        整数ernalDisabled
      };
    }
  });
  常量 _hoisted_1$n为["disabled", "aria-disabled"];
  常量 _hoisted_2$g为{ key: 0 };
  函数 _sfc_render$y(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_arrow_right为vue.resolveComponent("arrow-right");
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    返回 vue.openBlock(), vue.createElementBlock("button", {
      type: "button",
      class: "btn-next",
      disabled: _ctx.整数ernalDisabled,
      "aria-disabled": _ctx.整数ernalDisabled,
      onClick: _cache[0] 或 (_cache[0]为($event) => _ctx.$emit("点击", $event))
    }, [
      _ctx.nextText ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_2$g, vue.toDisplayString(_ctx.nextText), 1)) : (vue.openBlock(), vue.createBlock(_component_el_icon, { key: 1 }, {
        default: vue.withCtx(() => [
          vue.createVNode(_component_arrow_right)
        ]),
        _: 1
      }))
    ], 8, _hoisted_1$n);
  }
  变量 Next为/* @__PURE__ */ _输出出口_sfc(_sfc_main$Q, [["render", _sfc_render$y], ["__file", "next.vue"]]);

  常量 selectGroupKey为"ElSelectGroup";
  常量 selectKey为"ElSelect";

  函数 useOption$1(props, states) {
    常量 select为vue.inject(selectKey);
    常量 selectGroup为vue.inject(selectGroupKey, { disabled: false });
    常量 isObject为vue.computed(() => {
      返回 Object.prototype.toString.call(props.value).toLowerCase() === "[object object]";
    });
    常量 itemSelected为vue.computed(() => {
      如果 (不select.props.multiple) {
        返回 isEqual(props.value, select.props.modelValue);
      } 否则 {
        返回 contains(select.props.modelValue, props.value);
      }
    });
    常量 limitReached为vue.computed(() => {
      如果 (select.props.multiple) {
        常量 modelValue为select.props.modelValue 或 [];
        返回 不itemSelected.value 与 modelValue.长度 >= select.props.multipleLimit 与 select.props.multipleLimit大于0;
      } 否则 {
        返回 false;
      }
    });
    常量 currentLabel为vue.computed(() => {
      返回 props.label 或 (isObject.value ? "" : props.value);
    });
    常量 currentValue为vue.computed(() => {
      返回 props.value 或 props.label 或 "";
    });
    常量 isDisabled为vue.computed(() => {
      返回 props.disabled 或 states.groupDisabled 或 limitReached.value;
    });
    常量 instance为vue.getCurrentInstance();
    常量 contains为(arr为[], target) => {
      如果 (不isObject.value) {
        返回 arr 与 arr.includes(target);
      } 否则 {
        常量 valueKey为select.props.valueKey;
        返回 arr 与 arr.some((item) => {
          返回 get(item, valueKey) === get(target, valueKey);
        });
      }
    };
    常量 isEqual为(a, b) => {
      如果 (不isObject.value) {
        返回 a === b;
      } 否则 {
        常量 { valueKey }为select.props;
        返回 get(a, valueKey) === get(b, valueKey);
      }
    };
    常量 hoverItem为() => {
      如果 (不props.disabled 与 不selectGroup.disabled) {
        select.hoverIndex为select.optionsArray.indexOf(instance.proxy);
      }
    };
    vue.watch(() => currentLabel.value, () => {
      如果 (不props.created 与 不select.props.remote)
        select.setSelected();
    });
    vue.watch(() => props.value, (val, oldVal) => {
      常量 { remote, valueKey }为select.props;
      如果 (不props.created 与 不remote) {
        如果 (valueKey 与 类型是 val === "object" 与 类型是 oldVal === "object" 与 val[valueKey] === oldVal[valueKey]) {
          返回;
        }
        select.setSelected();
      }
    });
    vue.watch(() => selectGroup.disabled, () => {
      states.groupDisabled为selectGroup.disabled;
    }, { immediate: true });
    常量 { queryChange }为vue.toRaw(select);
    vue.watch(queryChange, (changes) => {
      常量 { query }为vue.unref(changes);
      常量 regexp为new RegExp(escapeStringRegexp(query), "i");
      states.visible为regexp.test(currentLabel.value) 或 props.created;
      如果 (不states.visible) {
        select.filteredOptionsCount--;
      }
    });
    返回 {
      select,
      currentLabel,
      currentValue,
      itemSelected,
      isDisabled,
      hoverItem
    };
  }

  常量 _sfc_main$P为vue.defineComponent({
    名字: "ElOption",
    componentName: "ElOption",
    props: {
      value: {
        required: true,
        type: [String, Number, Boolean, Object]
      },
      label: [String, Number],
      created: Boolean,
      disabled: {
        type: Boolean,
        default: false
      }
    },
    setup(props) {
      常量 ns为useNamespace("select");
      常量 states为vue.reactive({
        index: -1,
        groupDisabled: false,
        visible: true,
        hitState: false,
        hover: false
      });
      常量 { currentLabel, itemSelected, isDisabled, select, hoverItem }为useOption$1(props, states);
      常量 { visible, hover }为vue.toRefs(states);
      常量 vm为vue.getCurrentInstance().proxy;
      常量 key为vm.value;
      select.onOptionCreate(vm);
      vue.onBe变量循环eUnmount(() => {
        常量 { selected }为select;
        常量 selectedOptions为select.props.multiple ? selected : [selected];
        常量 doesSelected为selectedOptions.some((item) => {
          返回 item.value === vm.value;
        });
        如果 (select.cachedOptions.get(key) === vm 与 不doesSelected) {
          vue.nextTick(() => {
            select.cachedOptions.de让e(key);
          });
        }
        select.onOptionDestroy(key, vm);
      });
      函数 selectOptionClick() {
        如果 (props.disabled 不== true 与 states.groupDisabled 不== true) {
          select.handleOptionSelect(vm, true);
        }
      }
      返回 {
        ns,
        currentLabel,
        itemSelected,
        isDisabled,
        select,
        hoverItem,
        visible,
        hover,
        selectOptionClick,
        states
      };
    }
  });
  函数 _sfc_render$x(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.withDirectives((vue.openBlock(), vue.createElementBlock("li", {
      class: vue.normalizeClass([
        _ctx.ns.be("dropdown", "item"),
        _ctx.ns.is("disabled", _ctx.isDisabled),
        {
          selected: _ctx.itemSelected,
          hover: _ctx.hover
        }
      ]),
      onMouseenter: _cache[0] 或 (_cache[0]为(...args) => _ctx.hoverItem 与 _ctx.hoverItem(...args)),
      onClick: _cache[1] 或 (_cache[1]为vue.withMod如果iers((...args) => _ctx.selectOptionClick 与 _ctx.selectOptionClick(...args), ["stop"]))
    }, [
      vue.renderSlot(_ctx.$slots, "default", {}, () => [
        vue.createElementVNode("span", null, vue.toDisplayString(_ctx.currentLabel), 1)
      ])
    ], 34)), [
      [vue.vShow, _ctx.visible]
    ]);
  }
  变量 Option为/* @__PURE__ */ _输出出口_sfc(_sfc_main$P, [["render", _sfc_render$x], ["__file", "option.vue"]]);

  常量 _sfc_main$O为vue.defineComponent({
    名字: "ElSelectDropdown",
    componentName: "ElSelectDropdown",
    setup() {
      常量 select为vue.inject(selectKey);
      常量 ns为useNamespace("select");
      常量 popperClass为vue.computed(() => select.props.popperClass);
      常量 isMultiple为vue.computed(() => select.props.multiple);
      常量 isFitInputWidth为vue.computed(() => select.props.fitInputWidth);
      常量 minWidth为vue.ref("");
      函数 updateMinWidth() {
        变量 _a;
        minWidth.value为`${(_a为select.selectWrapper) == null ? void 0 : _a.getBoundingClientRect().宽度}px`;
      }
      vue.onMounted(() => {
        updateMinWidth();
        addResizeListener(select.selectWrapper, updateMinWidth);
      });
      vue.onBe变量循环eUnmount(() => {
        removeResizeListener(select.selectWrapper, updateMinWidth);
      });
      返回 {
        ns,
        minWidth,
        popperClass,
        isMultiple,
        isFitInputWidth
      };
    }
  });
  函数 _sfc_render$w(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass([_ctx.ns.b("dropdown"), _ctx.ns.is("multiple", _ctx.isMultiple), _ctx.popperClass]),
      style: vue.normalizeStyle({ [_ctx.isFitInputWidth ? "宽度" : "minWidth"]: _ctx.minWidth })
    }, [
      vue.renderSlot(_ctx.$slots, "default")
    ], 6);
  }
  变量 ElSelectMenu$1为/* @__PURE__ */ _输出出口_sfc(_sfc_main$O, [["render", _sfc_render$w], ["__file", "select-dropdown.vue"]]);

  函数 useSelectStates(props) {
    常量 { t }为useLocale();
    返回 vue.reactive({
      options: /* @__PURE__ */ new Map(),
      cachedOptions: /* @__PURE__ */ new Map(),
      createdLabel: null,
      createdSelected: false,
      selected: props.multiple ? [] : {},
      inputLength: 20,
      inputWidth: 0,
      initialInputHeight: 0,
      optionsCount: 0,
      filteredOptionsCount: 0,
      visible: false,
      softFocus: false,
      selectedLabel: "",
      hoverIndex: -1,
      query: "",
      previousQuery: null,
      inputHovering: false,
      cachedPlaceHolder: "",
      currentPlaceholder: t("el.select.placeholder"),
      menuVisibleOnFocus: false,
      isOnComposition: false,
      isSilentBlur: false,
      prefixWidth: 11,
      tagInMultiLine: false
    });
  }
  常量 useSelect$3为(props, states, ctx) => {
    常量 { t }为useLocale();
    常量 ns为useNamespace("select");
    常量 reference为vue.ref(null);
    常量 input为vue.ref(null);
    常量 tooltipRef为vue.ref(null);
    常量 tags为vue.ref(null);
    常量 selectWrapper为vue.ref(null);
    常量 scrollbar为vue.ref(null);
    常量 hoverOption为vue.ref(-1);
    常量 queryChange为vue.shallowRef({ query: "" });
    常量 groupQueryChange为vue.shallowRef("");
    常量 elForm为vue.inject(变量循环mContextKey, {});
    常量 elFormItem为vue.inject(变量循环mItemContextKey, {});
    常量 readonly为vue.computed(() => 不props.filterable 或 props.multiple 或 不states.visible);
    常量 selectDisabled为vue.computed(() => props.disabled 或 elForm.disabled);
    常量 showClose为vue.computed(() => {
      常量 hasValue为props.multiple ? Array.isArray(props.modelValue) 与 props.modelValue.长度大于0 : props.modelValue 不== void 0 与 props.modelValue 不== null 与 props.modelValue 不== "";
      常量 criteria为props.clearable 与 不selectDisabled.value 与 states.inputHovering 与 hasValue;
      返回 criteria;
    });
    常量 iconComponent为vue.computed(() => props.remote 与 props.filterable ? "" : props.suffixIcon);
    常量 iconReverse为vue.computed(() => ns.is("reverse", iconComponent.value 与 states.visible));
    常量 debounce为vue.computed(() => props.remote ? 300 : 0);
    常量 emptyText为vue.computed(() => {
      如果 (props.loading) {
        返回 props.loadingText 或 t("el.select.loading");
      } 否则 {
        如果 (props.remote 与 states.query === "" 与 states.options.size === 0)
          返回 false;
        如果 (props.filterable 与 states.query 与 states.options.size大于0 与 states.filteredOptionsCount === 0) {
          返回 props.noMatchText 或 t("el.select.noMatch");
        }
        如果 (states.options.size === 0) {
          返回 props.noDataText 或 t("el.select.noData");
        }
      }
      返回 null;
    });
    常量 optionsArray为vue.computed(() => Array.从(states.options.values()));
    常量 cachedOptionsArray为vue.computed(() => Array.从(states.cachedOptions.values()));
    常量 showNewOption为vue.computed(() => {
      常量 hasExistingOption为optionsArray.value.filter((option) => {
        返回 不option.created;
      }).some((option) => {
        返回 option.currentLabel === states.query;
      });
      返回 props.filterable 与 props.allowCreate 与 states.query 不== "" 与 不hasExistingOption;
    });
    常量 selectSize为useSize();
    常量 collapseTagSize为vue.computed(() => ["small"].includes(selectSize.value) ? "small" : "default");
    常量 dropMenuVisible为vue.computed({
      get() {
        返回 states.visible 与 emptyText.value 不== false;
      },
      set(val) {
        states.visible为val;
      }
    });
    vue.watch(() => selectDisabled.value, () => {
      vue.nextTick(() => {
        resetInputHeight();
      });
    });
    vue.watch(() => props.placeholder, (val) => {
      states.cachedPlaceHolder为states.currentPlaceholder为val;
    });
    vue.watch(() => props.modelValue, (val, oldVal) => {
      变量 _a;
      如果 (props.multiple) {
        resetInputHeight();
        如果 (val 与 val.长度大于0 或 input.value 与 states.query 不== "") {
          states.currentPlaceholder为"";
        } 否则 {
          states.currentPlaceholder为states.cachedPlaceHolder;
        }
        如果 (props.filterable 与 不props.reserveKeyword) {
          states.query为"";
          handleQueryChange(states.query);
        }
      }
      setSelected();
      如果 (props.filterable 与 不props.multiple) {
        states.inputLength为20;
      }
      如果 (不isEqual$1(val, oldVal)) {
        (_a为elFormItem.validate) == null ? void 0 : _a.call(elFormItem, "change").捕获到((err) => debugWarn());
      }
    }, {
      flush: "post",
      deep: true
    });
    vue.watch(() => states.visible, (val) => {
      变量 _a, _b, _c;
      如果 (不val) {
        input.value 与 input.value.blur();
        states.query为"";
        states.previousQuery为null;
        states.selectedLabel为"";
        states.inputLength为20;
        states.menuVisibleOnFocus为false;
        resetHoverIndex();
        vue.nextTick(() => {
          如果 (input.value 与 input.value.value === "" 与 states.selected.长度 === 0) {
            states.currentPlaceholder为states.cachedPlaceHolder;
          }
        });
        如果 (不props.multiple) {
          如果 (states.selected) {
            如果 (props.filterable 与 props.allowCreate 与 states.createdSelected 与 states.createdLabel) {
              states.selectedLabel为states.createdLabel;
            } 否则 {
              states.selectedLabel为states.selected.currentLabel;
            }
            如果 (props.filterable)
              states.query为states.selectedLabel;
          }
          如果 (props.filterable) {
            states.currentPlaceholder为states.cachedPlaceHolder;
          }
        }
      } 否则 {
        (_b为(_a为tooltipRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);
        如果 (props.filterable) {
          states.filteredOptionsCount为states.optionsCount;
          states.query为props.remote ? "" : states.selectedLabel;
          如果 (props.multiple) {
            (_c为input.value) == null ? void 0 : _c.focus();
          } 否则 {
            如果 (states.selectedLabel) {
              states.currentPlaceholder为`${states.selectedLabel}`;
              states.selectedLabel为"";
            }
          }
          handleQueryChange(states.query);
          如果 (不props.multiple 与 不props.remote) {
            queryChange.value.query为"";
            vue.triggerRef(queryChange);
            vue.triggerRef(groupQueryChange);
          }
        }
      }
      ctx.emit("visible-change", val);
    });
    vue.watch(() => states.options.entries(), () => {
      变量 _a, _b, _c;
      如果 (不isClient)
        返回;
      (_b为(_a为tooltipRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);
      如果 (props.multiple) {
        resetInputHeight();
      }
      常量 inputs为((_c为selectWrapper.value) == null ? void 0 : _c.querySelectorAll("input")) 或 [];
      如果 (不Array.从(inputs).includes(document.activeElement)) {
        setSelected();
      }
      如果 (props.defaultFirstOption 与 (props.filterable 或 props.remote) 与 states.filteredOptionsCount) {
        checkDefaultFirstOption();
      }
    }, {
      flush: "post"
    });
    vue.watch(() => states.hoverIndex, (val) => {
      如果 (类型是 val === "number" 与 val大于-1) {
        hoverOption.value为optionsArray.value[val] 或 {};
      }
      optionsArray.value.变量循环Each((option) => {
        option.hover为hoverOption.value === option;
      });
    });
    常量 resetInputHeight为() => {
      如果 (props.collapseTags 与 不props.filterable)
        返回;
      vue.nextTick(() => {
        变量 _a, _b;
        如果 (不reference.value)
          返回;
        常量 inputChildNodes为reference.value.$el.childNodes;
        常量 input2为Array.从(inputChildNodes).find((item) => item.tagName === "INPUT");
        常量 _tags为tags.value;
        常量 sizeInMap为states.initialInputHeight 或 getComponentSize(selectSize.value 或 elForm.size);
        input2.style.height为states.selected.长度 === 0 ? `${sizeInMap}px` : `${Math.max(_tags ? _tags.clientHeight + (_tags.clientHeight大于sizeInMap ? 6 : 0) : 0, sizeInMap)}px`;
        states.tagInMultiLine为Number.parseFloat(input2.style.height) >= sizeInMap;
        如果 (states.visible 与 emptyText.value 不== false) {
          (_b为(_a为tooltipRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);
        }
      });
    };
    常量 handleQueryChange为(val) => {
      如果 (states.previousQuery === val 或 states.isOnComposition)
        返回;
      如果 (states.previousQuery === null 与 (类型是 props.filterMethod === "函数" 或 类型是 props.remoteMethod === "函数")) {
        states.previousQuery为val;
        返回;
      }
      states.previousQuery为val;
      vue.nextTick(() => {
        变量 _a, _b;
        如果 (states.visible)
          (_b为(_a为tooltipRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);
      });
      states.hoverIndex为-1;
      如果 (props.multiple 与 props.filterable) {
        vue.nextTick(() => {
          常量 长度为input.value.value.长度 * 15 + 20;
          states.inputLength为props.collapseTags ? Math.min(50, 长度) : 长度;
          managePlaceholder();
          resetInputHeight();
        });
      }
      如果 (props.remote 与 类型是 props.remoteMethod === "函数") {
        states.hoverIndex为-1;
        props.remoteMethod(val);
      } 否则 如果 (类型是 props.filterMethod === "函数") {
        props.filterMethod(val);
        vue.triggerRef(groupQueryChange);
      } 否则 {
        states.filteredOptionsCount为states.optionsCount;
        queryChange.value.query为val;
        vue.triggerRef(queryChange);
        vue.triggerRef(groupQueryChange);
      }
      如果 (props.defaultFirstOption 与 (props.filterable 或 props.remote) 与 states.filteredOptionsCount) {
        checkDefaultFirstOption();
      }
    };
    常量 managePlaceholder为() => {
      如果 (states.currentPlaceholder 不== "") {
        states.currentPlaceholder为input.value.value ? "" : states.cachedPlaceHolder;
      }
    };
    常量 checkDefaultFirstOption为() => {
      常量 optionsInDropdown为optionsArray.value.filter((n) => n.visible 与 不n.disabled 与 不n.states.groupDisabled);
      常量 userCreatedOption为optionsInDropdown.find((n) => n.created);
      常量 firstOriginOption为optionsInDropdown[0];
      states.hoverIndex为getValueIndex(optionsArray.value, userCreatedOption 或 firstOriginOption);
    };
    常量 setSelected为() => {
      变量 _a;
      如果 (不props.multiple) {
        常量 option为getOption(props.modelValue);
        如果 ((_a为option.props) == null ? void 0 : _a.created) {
          states.createdLabel为option.props.value;
          states.createdSelected为true;
        } 否则 {
          states.createdSelected为false;
        }
        states.selectedLabel为option.currentLabel;
        states.selected为option;
        如果 (props.filterable)
          states.query为states.selectedLabel;
        返回;
      } 否则 {
        states.selectedLabel为"";
      }
      常量 result为[];
      如果 (Array.isArray(props.modelValue)) {
        props.modelValue.变量循环Each((value) => {
          result.push(getOption(value));
        });
      }
      states.selected为result;
      vue.nextTick(() => {
        resetInputHeight();
      });
    };
    常量 getOption为(value) => {
      让 option;
      常量 isObjectValue为toRawType(value).toLowerCase() === "object";
      常量 isNull为toRawType(value).toLowerCase() === "null";
      常量 isUndefined为toRawType(value).toLowerCase() === "undefined";
      变量循环 (让 i为states.cachedOptions.size - 1; i >= 0; i--) {
        常量 cachedOption为cachedOptionsArray.value[i];
        常量 isEqualValue为isObjectValue ? get(cachedOption, props.valueKey) === get(value, props.valueKey) : cachedOption.value === value;
        如果 (isEqualValue) {
          option为{
            value,
            currentLabel: cachedOption.currentLabel,
            isDisabled: cachedOption.isDisabled
          };
          break;
        }
      }
      如果 (option)
        返回 option;
      常量 label为isObjectValue ? value.label : 不isNull 与 不isUndefined ? value : "";
      常量 newOption为{
        value,
        currentLabel: label
      };
      如果 (props.multiple) {
        newOption.hitState为false;
      }
      返回 newOption;
    };
    常量 resetHoverIndex为() => {
      setTimeout(() => {
        常量 valueKey为props.valueKey;
        如果 (不props.multiple) {
          states.hoverIndex为optionsArray.value.findIndex((item) => {
            返回 getValueKey(item) === getValueKey(states.selected);
          });
        } 否则 {
          如果 (states.selected.长度大于0) {
            states.hoverIndex为Math.min.apply(null, states.selected.map((selected) => {
              返回 optionsArray.value.findIndex((item) => {
                返回 get(item, valueKey) === get(selected, valueKey);
              });
            }));
          } 否则 {
            states.hoverIndex为-1;
          }
        }
      }, 300);
    };
    常量 handleResize为() => {
      变量 _a, _b;
      resetInputWidth();
      (_b为(_a为tooltipRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);
      如果 (props.multiple 与 不props.filterable)
        resetInputHeight();
    };
    常量 resetInputWidth为() => {
      变量 _a;
      states.inputWidth为(_a为reference.value) == null ? void 0 : _a.$el.getBoundingClientRect().宽度;
    };
    常量 onInputChange为() => {
      如果 (props.filterable 与 states.query 不== states.selectedLabel) {
        states.query为states.selectedLabel;
        handleQueryChange(states.query);
      }
    };
    常量 debouncedOnInputChange为debounce$1(() => {
      onInputChange();
    }, debounce.value);
    常量 debouncedQueryChange为debounce$1((e) => {
      handleQueryChange(e.target.value);
    }, debounce.value);
    常量 emitChange为(val) => {
      如果 (不isEqual$1(props.modelValue, val)) {
        ctx.emit(CHANGE_EVENT, val);
      }
    };
    常量 de让ePrevTag为(e) => {
      如果 (e.target.value.长度 <= 0 与 不toggleLastOptionHitState()) {
        常量 value为props.modelValue.slice();
        value.pop();
        ctx.emit(UPDATE_MODEL_EVENT, value);
        emitChange(value);
      }
      如果 (e.target.value.长度 === 1 与 props.modelValue.长度 === 0) {
        states.currentPlaceholder为states.cachedPlaceHolder;
      }
    };
    常量 de让eTag为(event, tag) => {
      常量 index为states.selected.indexOf(tag);
      如果 (index大于-1 与 不selectDisabled.value) {
        常量 value为props.modelValue.slice();
        value.splice(index, 1);
        ctx.emit(UPDATE_MODEL_EVENT, value);
        emitChange(value);
        ctx.emit("remove-tag", tag.value);
      }
      event.stopPropagation();
    };
    常量 de让eSelected为(event) => {
      event.stopPropagation();
      常量 value为props.multiple ? [] : "";
      如果 (类型是 value 不== "string") {
        变量循环 (常量 item of states.selected) {
          如果 (item.isDisabled)
            value.push(item.value);
        }
      }
      ctx.emit(UPDATE_MODEL_EVENT, value);
      emitChange(value);
      states.visible为false;
      ctx.emit("clear");
    };
    常量 handleOptionSelect为(option, byClick) => {
      变量 _a;
      如果 (props.multiple) {
        常量 value为(props.modelValue 或 []).slice();
        常量 optionIndex为getValueIndex(value, option.value);
        如果 (optionIndex大于-1) {
          value.splice(optionIndex, 1);
        } 否则 如果 (props.multipleLimit <= 0 或 value.长度 < props.multipleLimit) {
          value.push(option.value);
        }
        ctx.emit(UPDATE_MODEL_EVENT, value);
        emitChange(value);
        如果 (option.created) {
          states.query为"";
          handleQueryChange("");
          states.inputLength为20;
        }
        如果 (props.filterable)
          (_a为input.value) == null ? void 0 : _a.focus();
      } 否则 {
        ctx.emit(UPDATE_MODEL_EVENT, option.value);
        emitChange(option.value);
        states.visible为false;
      }
      states.isSilentBlur为byClick;
      setSoftFocus();
      如果 (states.visible)
        返回;
      vue.nextTick(() => {
        scrollToOption(option);
      });
    };
    常量 getValueIndex为(arr为[], value) => {
      如果 (不isObject$1(value))
        返回 arr.indexOf(value);
      常量 valueKey为props.valueKey;
      让 index为-1;
      arr.some((item, i) => {
        如果 (get(item, valueKey) === get(value, valueKey)) {
          index为i;
          返回 true;
        }
        返回 false;
      });
      返回 index;
    };
    常量 setSoftFocus为() => {
      states.softFocus为true;
      常量 _input为input.value 或 reference.value;
      如果 (_input) {
        _input == null ? void 0 : _input.focus();
      }
    };
    常量 scrollToOption为(option) => {
      变量 _a, _b, _c, _d, _e;
      常量 targetOption为Array.isArray(option) ? option[0] : option;
      让 target为null;
      如果 (targetOption == null ? void 0 : targetOption.value) {
        常量 options为optionsArray.value.filter((item) => item.value === targetOption.value);
        如果 (options.长度大于0) {
          target为options[0].$el;
        }
      }
      如果 (tooltipRef.value 与 target) {
        常量 menu为(_d为(_c为(_b为(_a为tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.上下文Ref) == null ? void 0 : _c.querySelector) == null ? void 0 : _d.call(_c, `.${ns.be("dropdown", "wrap")}`);
        如果 (menu) {
          scrollIntoView(menu, target);
        }
      }
      (_e为scrollbar.value) == null ? void 0 : _e.handleScroll();
    };
    常量 onOptionCreate为(vm) => {
      states.optionsCount加一;
      states.filteredOptionsCount加一;
      states.options.set(vm.value, vm);
      states.cachedOptions.set(vm.value, vm);
    };
    常量 onOptionDestroy为(key, vm) => {
      如果 (states.options.get(key) === vm) {
        states.optionsCount--;
        states.filteredOptionsCount--;
        states.options.de让e(key);
      }
    };
    常量 resetInputState为(e) => {
      如果 (e.code 不== EVENT_CODE.backspace)
        toggleLastOptionHitState(false);
      states.inputLength为input.value.value.长度 * 15 + 20;
      resetInputHeight();
    };
    常量 toggleLastOptionHitState为(hit) => {
      如果 (不Array.isArray(states.selected))
        返回;
      常量 option为states.selected[states.selected.长度 - 1];
      如果 (不option)
        返回;
      如果 (hit === true 或 hit === false) {
        option.hitState为hit;
        返回 hit;
      }
      option.hitState为不option.hitState;
      返回 option.hitState;
    };
    常量 handleComposition为(event) => {
      常量 text为event.target.value;
      如果 (event.type === "compositionend") {
        states.isOnComposition为false;
        vue.nextTick(() => handleQueryChange(text));
      } 否则 {
        常量 lastCharacter为text[text.长度 - 1] 或 "";
        states.isOnComposition为不isKorean(lastCharacter);
      }
    };
    常量 handleMenuEnter为() => {
      vue.nextTick(() => scrollToOption(states.selected));
    };
    常量 handleFocus为(event) => {
      如果 (不states.softFocus) {
        如果 (props.automaticDropdown 或 props.filterable) {
          如果 (props.filterable 与 不states.visible) {
            states.menuVisibleOnFocus为true;
          }
          states.visible为true;
        }
        ctx.emit("focus", event);
      } 否则 {
        states.softFocus为false;
      }
    };
    常量 blur为() => {
      变量 _a;
      states.visible为false;
      (_a为reference.value) == null ? void 0 : _a.blur();
    };
    常量 handleBlur为(event) => {
      vue.nextTick(() => {
        如果 (states.isSilentBlur) {
          states.isSilentBlur为false;
        } 否则 {
          ctx.emit("blur", event);
        }
      });
      states.softFocus为false;
    };
    常量 handleClearClick为(event) => {
      de让eSelected(event);
    };
    常量 handleClose为() => {
      states.visible为false;
    };
    常量 toggleMenu为() => {
      变量 _a;
      如果 (props.automaticDropdown)
        返回;
      如果 (不selectDisabled.value) {
        如果 (states.menuVisibleOnFocus) {
          states.menuVisibleOnFocus为false;
        } 否则 {
          states.visible为不states.visible;
        }
        如果 (states.visible) {
          (_a为input.value 或 reference.value) == null ? void 0 : _a.focus();
        }
      }
    };
    常量 selectOption为() => {
      如果 (不states.visible) {
        toggleMenu();
      } 否则 {
        如果 (optionsArray.value[states.hoverIndex]) {
          handleOptionSelect(optionsArray.value[states.hoverIndex], void 0);
        }
      }
    };
    常量 getValueKey为(item) => {
      返回 isObject$1(item.value) ? get(item.value, props.valueKey) : item.value;
    };
    常量 optionsAllDisabled为vue.computed(() => optionsArray.value.filter((option) => option.visible).every((option) => option.disabled));
    常量 navigateOptions为(direction) => {
      如果 (不states.visible) {
        states.visible为true;
        返回;
      }
      如果 (states.options.size === 0 或 states.filteredOptionsCount === 0)
        返回;
      如果 (states.isOnComposition)
        返回;
      如果 (不optionsAllDisabled.value) {
        如果 (direction === "next") {
          states.hoverIndex加一;
          如果 (states.hoverIndex === states.options.size) {
            states.hoverIndex为0;
          }
        } 否则 如果 (direction === "prev") {
          states.hoverIndex--;
          如果 (states.hoverIndex < 0) {
            states.hoverIndex为states.options.size - 1;
          }
        }
        常量 option为optionsArray.value[states.hoverIndex];
        如果 (option.disabled === true 或 option.states.groupDisabled === true 或 不option.visible) {
          navigateOptions(direction);
        }
        vue.nextTick(() => scrollToOption(hoverOption.value));
      }
    };
    返回 {
      optionsArray,
      selectSize,
      handleResize,
      debouncedOnInputChange,
      debouncedQueryChange,
      de让ePrevTag,
      de让eTag,
      de让eSelected,
      handleOptionSelect,
      scrollToOption,
      readonly,
      resetInputHeight,
      showClose,
      iconComponent,
      iconReverse,
      showNewOption,
      collapseTagSize,
      setSelected,
      managePlaceholder,
      selectDisabled,
      emptyText,
      toggleLastOptionHitState,
      resetInputState,
      handleComposition,
      onOptionCreate,
      onOptionDestroy,
      handleMenuEnter,
      handleFocus,
      blur,
      handleBlur,
      handleClearClick,
      handleClose,
      toggleMenu,
      selectOption,
      getValueKey,
      navigateOptions,
      dropMenuVisible,
      queryChange,
      groupQueryChange,
      reference,
      input,
      tooltipRef,
      tags,
      selectWrapper,
      scrollbar
    };
  };

  常量 COMPONENT_NAME$6为"ElSelect";
  常量 _sfc_main$N为vue.defineComponent({
    名字: COMPONENT_NAME$6,
    componentName: COMPONENT_NAME$6,
    components: {
      ElInput,
      ElSelectMenu: ElSelectMenu$1,
      ElOption: Option,
      ElTag,
      ElScrollbar,
      ElTooltip,
      ElIcon
    },
    directives: { ClickOutside },
    props: {
      名字: String,
      id: String,
      modelValue: {
        type: [Array, String, Number, Boolean, Object],
        default: void 0
      },
      autocomp让e: {
        type: String,
        default: "off"
      },
      automaticDropdown: Boolean,
      size: {
        type: String,
        validator: isValidComponentSize
      },
      effect: {
        type: String,
        default: "light"
      },
      disabled: Boolean,
      clearable: Boolean,
      filterable: Boolean,
      allowCreate: Boolean,
      loading: Boolean,
      popperClass: {
        type: String,
        default: ""
      },
      remote: Boolean,
      loadingText: String,
      noMatchText: String,
      noDataText: String,
      remoteMethod: Function,
      filterMethod: Function,
      multiple: Boolean,
      multipleLimit: {
        type: Number,
        default: 0
      },
      placeholder: {
        type: String
      },
      defaultFirstOption: Boolean,
      reserveKeyword: {
        type: Boolean,
        default: true
      },
      valueKey: {
        type: String,
        default: "value"
      },
      collapseTags: Boolean,
      collapseTagsTooltip: {
        type: Boolean,
        default: false
      },
      popperAppendToBody: {
        type: Boolean,
        default: void 0
      },
      teleported: useTooltipContentProps.teleported,
      persistent: {
        type: Boolean,
        default: true
      },
      clearIcon: {
        type: [String, Object],
        default: circleClose
      },
      fitInputWidth: {
        type: Boolean,
        default: false
      },
      suffixIcon: {
        type: [String, Object],
        default: arrowUp
      },
      tagType: { ...tagProps.type, default: "info" }
    },
    emits: [
      UPDATE_MODEL_EVENT,
      CHANGE_EVENT,
      "remove-tag",
      "clear",
      "visible-change",
      "focus",
      "blur"
    ],
    setup(props, ctx) {
      常量 nsSelect为useNamespace("select");
      常量 nsInput为useNamespace("input");
      常量 { t }为useLocale();
      常量 states为useSelectStates(props);
      常量 {
        optionsArray,
        selectSize,
        readonly,
        handleResize,
        collapseTagSize,
        debouncedOnInputChange,
        debouncedQueryChange,
        de让ePrevTag,
        de让eTag,
        de让eSelected,
        handleOptionSelect,
        scrollToOption,
        setSelected,
        resetInputHeight,
        managePlaceholder,
        showClose,
        selectDisabled,
        iconComponent,
        iconReverse,
        showNewOption,
        emptyText,
        toggleLastOptionHitState,
        resetInputState,
        handleComposition,
        onOptionCreate,
        onOptionDestroy,
        handleMenuEnter,
        handleFocus,
        blur,
        handleBlur,
        handleClearClick,
        handleClose,
        toggleMenu,
        selectOption,
        getValueKey,
        navigateOptions,
        dropMenuVisible,
        reference,
        input,
        tooltipRef,
        tags,
        selectWrapper,
        scrollbar,
        queryChange,
        groupQueryChange
      }为useSelect$3(props, states, ctx);
      常量 { focus }为useFocus(reference);
      常量 {
        inputWidth,
        selected,
        inputLength,
        filteredOptionsCount,
        visible,
        softFocus,
        selectedLabel,
        hoverIndex,
        query,
        inputHovering,
        currentPlaceholder,
        menuVisibleOnFocus,
        isOnComposition,
        isSilentBlur,
        options,
        cachedOptions,
        optionsCount,
        prefixWidth,
        tagInMultiLine
      }为vue.toRefs(states);
      常量 wrapperKls为vue.computed(() => {
        常量 classList为[nsSelect.b()];
        常量 _selectSize为vue.unref(selectSize);
        如果 (_selectSize) {
          classList.push(nsSelect.m(_selectSize));
        }
        如果 (props.disabled) {
          classList.push(nsSelect.m("disabled"));
        }
        返回 classList;
      });
      常量 selectTagsStyle为vue.computed(() => ({
        maxWidth: `${vue.unref(inputWidth) - 32}px`,
        宽度: "100%"
      }));
      vue.provide(selectKey, vue.reactive({
        props,
        options,
        optionsArray,
        cachedOptions,
        optionsCount,
        filteredOptionsCount,
        hoverIndex,
        handleOptionSelect,
        onOptionCreate,
        onOptionDestroy,
        selectWrapper,
        selected,
        setSelected,
        queryChange,
        groupQueryChange
      }));
      vue.onMounted(() => {
        states.cachedPlaceHolder为currentPlaceholder.value为props.placeholder 或 t("el.select.placeholder");
        如果 (props.multiple 与 Array.isArray(props.modelValue) 与 props.modelValue.长度大于0) {
          currentPlaceholder.value为"";
        }
        addResizeListener(selectWrapper.value, handleResize);
        如果 (reference.value 与 reference.value.$el) {
          常量 input2为reference.value.input;
          states.initialInputHeight为input2.getBoundingClientRect().height 或 getComponentSize(selectSize.value);
        }
        如果 (props.remote 与 props.multiple) {
          resetInputHeight();
        }
        vue.nextTick(() => {
          如果 (不reference.value)
            返回;
          如果 (reference.value.$el) {
            inputWidth.value为reference.value.$el.getBoundingClientRect().宽度;
          }
          如果 (ctx.slots.prefix) {
            常量 inputChildNodes为reference.value.$el.childNodes;
            常量 input2为Array.从(inputChildNodes).find((item) => item.tagName === "INPUT");
            常量 prefix为reference.value.$el.querySelector(`.${nsInput.e("prefix")}`);
            prefixWidth.value为Math.max(prefix.getBoundingClientRect().宽度 + 5, 30);
            如果 (states.prefixWidth) {
              input2.style.paddingLeft为`${Math.max(states.prefixWidth, 30)}px`;
            }
          }
        });
        setSelected();
      });
      vue.onBe变量循环eUnmount(() => {
        removeResizeListener(selectWrapper.value, handleResize);
      });
      如果 (props.multiple 与 不Array.isArray(props.modelValue)) {
        ctx.emit(UPDATE_MODEL_EVENT, []);
      }
      如果 (不props.multiple 与 Array.isArray(props.modelValue)) {
        ctx.emit(UPDATE_MODEL_EVENT, "");
      }
      常量 popperPaneRef为vue.computed(() => {
        变量 _a, _b;
        返回 (_b为(_a为tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.上下文Ref;
      });
      常量 { compatTeleported }为useDeprecateAppendToBody(COMPONENT_NAME$6, "popperAppendToBody");
      返回 {
        tagInMultiLine,
        prefixWidth,
        selectSize,
        readonly,
        handleResize,
        collapseTagSize,
        debouncedOnInputChange,
        debouncedQueryChange,
        de让ePrevTag,
        de让eTag,
        de让eSelected,
        handleOptionSelect,
        scrollToOption,
        inputWidth,
        selected,
        inputLength,
        filteredOptionsCount,
        visible,
        softFocus,
        selectedLabel,
        hoverIndex,
        query,
        inputHovering,
        currentPlaceholder,
        menuVisibleOnFocus,
        isOnComposition,
        isSilentBlur,
        options,
        resetInputHeight,
        managePlaceholder,
        showClose,
        selectDisabled,
        iconComponent,
        iconReverse,
        showNewOption,
        emptyText,
        toggleLastOptionHitState,
        resetInputState,
        handleComposition,
        handleMenuEnter,
        handleFocus,
        blur,
        handleBlur,
        handleClearClick,
        handleClose,
        toggleMenu,
        selectOption,
        getValueKey,
        navigateOptions,
        dropMenuVisible,
        focus,
        reference,
        input,
        tooltipRef,
        popperPaneRef,
        tags,
        selectWrapper,
        scrollbar,
        wrapperKls,
        selectTagsStyle,
        compatTeleported,
        nsSelect
      };
    }
  });
  常量 _hoisted_1$m为{ class: "select-trigger" };
  常量 _hoisted_2$f为["disabled", "autocomp让e"];
  常量 _hoisted_3$8为{ style: { "height": "100%", "display": "flex", "just如果y-上下文": "center", "align-items": "center" } };
  函数 _sfc_render$v(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_tag为vue.resolveComponent("el-tag");
    常量 _component_el_tooltip为vue.resolveComponent("el-tooltip");
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_el_input为vue.resolveComponent("el-input");
    常量 _component_el_option为vue.resolveComponent("el-option");
    常量 _component_el_scrollbar为vue.resolveComponent("el-scrollbar");
    常量 _component_el_select_menu为vue.resolveComponent("el-select-menu");
    常量 _directive_点击_outside为vue.resolveDirective("点击-outside");
    返回 vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
      ref: "selectWrapper",
      class: vue.normalizeClass(_ctx.wrapperKls),
      onClick: _cache[24] 或 (_cache[24]为vue.withMod如果iers((...args) => _ctx.toggleMenu 与 _ctx.toggleMenu(...args), ["stop"]))
    }, [
      vue.createVNode(_component_el_tooltip, {
        ref: "tooltipRef",
        visible: _ctx.dropMenuVisible,
        "onUpdate:visible": _cache[23] 或 (_cache[23]为($event) => _ctx.dropMenuVisible为$event),
        placement: "bottom-start",
        teleported: _ctx.compatTeleported,
        "popper-class": [_ctx.nsSelect.e("popper"), _ctx.popperClass],
        "fallback-placements": ["bottom-start", "top-start", "right", "left"],
        effect: _ctx.effect,
        pure: "",
        trigger: "点击",
        transition: `${_ctx.nsSelect.名字space.value}-zoom-in-top`,
        "stop-popper-mouse-event": false,
        "gpu-acceleration": false,
        persistent: _ctx.persistent,
        onShow: _ctx.handleMenuEnter
      }, {
        default: vue.withCtx(() => [
          vue.createElementVNode("div", _hoisted_1$m, [
            _ctx.multiple ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              ref: "tags",
              class: vue.normalizeClass(_ctx.nsSelect.e("tags")),
              style: vue.normalizeStyle(_ctx.selectTagsStyle)
            }, [
              _ctx.collapseTags 与 _ctx.selected.长度 ? (vue.openBlock(), vue.createElementBlock("span", {
                key: 0,
                class: vue.normalizeClass([
                  _ctx.nsSelect.b("tags-wrapper"),
                  { "has-prefix": _ctx.prefixWidth 与 _ctx.selected.长度 }
                ])
              }, [
                vue.createVNode(_component_el_tag, {
                  closable: 不_ctx.selectDisabled 与 不_ctx.selected[0].isDisabled,
                  size: _ctx.collapseTagSize,
                  hit: _ctx.selected[0].hitState,
                  type: _ctx.tagType,
                  "disable-transitions": "",
                  onClose: _cache[0] 或 (_cache[0]为($event) => _ctx.de让eTag($event, _ctx.selected[0]))
                }, {
                  default: vue.withCtx(() => [
                    vue.createElementVNode("span", {
                      class: vue.normalizeClass(_ctx.nsSelect.e("tags-text")),
                      style: vue.normalizeStyle({ maxWidth: _ctx.inputWidth - 123 + "px" })
                    }, vue.toDisplayString(_ctx.selected[0].currentLabel), 7)
                  ]),
                  _: 1
                }, 8, ["closable", "size", "hit", "type"]),
                _ctx.selected.长度大于1 ? (vue.openBlock(), vue.createBlock(_component_el_tag, {
                  key: 0,
                  closable: false,
                  size: _ctx.collapseTagSize,
                  type: _ctx.tagType,
                  "disable-transitions": ""
                }, {
                  default: vue.withCtx(() => [
                    _ctx.collapseTagsTooltip ? (vue.openBlock(), vue.createBlock(_component_el_tooltip, {
                      key: 0,
                      disabled: _ctx.dropMenuVisible,
                      "fallback-placements": ["bottom", "top", "right", "left"],
                      effect: _ctx.effect,
                      placement: "bottom",
                      teleported: false
                    }, {
                      default: vue.withCtx(() => [
                        vue.createElementVNode("span", {
                          class: vue.normalizeClass(_ctx.nsSelect.e("tags-text"))
                        }, "+ " + vue.toDisplayString(_ctx.selected.长度 - 1), 3)
                      ]),
                      上下文: vue.withCtx(() => [
                        vue.createElementVNode("div", {
                          class: vue.normalizeClass(_ctx.nsSelect.e("collapse-tags"))
                        }, [
                          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.selected, (item, idx) => {
                            返回 vue.openBlock(), vue.createElementBlock("div", {
                              key: idx,
                              class: vue.normalizeClass(_ctx.nsSelect.e("collapse-tag"))
                            }, [
                              (vue.openBlock(), vue.createBlock(_component_el_tag, {
                                key: _ctx.getValueKey(item),
                                class: "in-tooltip",
                                closable: 不_ctx.selectDisabled 与 不item.isDisabled,
                                size: _ctx.collapseTagSize,
                                hit: item.hitState,
                                type: _ctx.tagType,
                                "disable-transitions": "",
                                style: { margin: "2px" },
                                onClose: ($event) => _ctx.de让eTag($event, item)
                              }, {
                                default: vue.withCtx(() => [
                                  vue.createElementVNode("span", {
                                    class: vue.normalizeClass(_ctx.nsSelect.e("tags-text")),
                                    style: vue.normalizeStyle({
                                      maxWidth: _ctx.inputWidth - 75 + "px"
                                    })
                                  }, vue.toDisplayString(item.currentLabel), 7)
                                ]),
                                _: 2
                              }, 1032, ["closable", "size", "hit", "type", "onClose"]))
                            ], 2);
                          }), 128))
                        ], 2)
                      ]),
                      _: 1
                    }, 8, ["disabled", "effect"])) : (vue.openBlock(), vue.createElementBlock("span", {
                      key: 1,
                      class: vue.normalizeClass(_ctx.nsSelect.e("tags-text"))
                    }, "+ " + vue.toDisplayString(_ctx.selected.长度 - 1), 3))
                  ]),
                  _: 1
                }, 8, ["size", "type"])) : vue.createCommentVNode("v-如果", true)
              ], 2)) : vue.createCommentVNode("v-如果", true),
              vue.createCommentVNode(" <div> "),
              不_ctx.collapseTags ? (vue.openBlock(), vue.createBlock(vue.Transition, {
                key: 1,
                onAfterLeave: _ctx.resetInputHeight
              }, {
                default: vue.withCtx(() => [
                  vue.createElementVNode("span", {
                    class: vue.normalizeClass([
                      _ctx.nsSelect.b("tags-wrapper"),
                      { "has-prefix": _ctx.prefixWidth 与 _ctx.selected.长度 }
                    ])
                  }, [
                    (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.selected, (item) => {
                      返回 vue.openBlock(), vue.createBlock(_component_el_tag, {
                        key: _ctx.getValueKey(item),
                        closable: 不_ctx.selectDisabled 与 不item.isDisabled,
                        size: _ctx.collapseTagSize,
                        hit: item.hitState,
                        type: _ctx.tagType,
                        "disable-transitions": "",
                        onClose: ($event) => _ctx.de让eTag($event, item)
                      }, {
                        default: vue.withCtx(() => [
                          vue.createElementVNode("span", {
                            class: vue.normalizeClass(_ctx.nsSelect.e("tags-text")),
                            style: vue.normalizeStyle({ maxWidth: _ctx.inputWidth - 75 + "px" })
                          }, vue.toDisplayString(item.currentLabel), 7)
                        ]),
                        _: 2
                      }, 1032, ["closable", "size", "hit", "type", "onClose"]);
                    }), 128))
                  ], 2)
                ]),
                _: 1
              }, 8, ["onAfterLeave"])) : vue.createCommentVNode("v-如果", true),
              vue.createCommentVNode(" </div> "),
              _ctx.filterable ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("input", {
                key: 2,
                ref: "input",
                "onUpdate:modelValue": _cache[1] 或 (_cache[1]为($event) => _ctx.query为$event),
                type: "text",
                class: vue.normalizeClass([_ctx.nsSelect.e("input"), _ctx.nsSelect.is(_ctx.selectSize)]),
                disabled: _ctx.selectDisabled,
                autocomp让e: _ctx.autocomp让e,
                style: vue.normalizeStyle({
                  marginLeft: _ctx.prefixWidth 与 不_ctx.selected.长度 或 _ctx.tagInMultiLine ? `${_ctx.prefixWidth}px` : "",
                  flexGrow: 1,
                  宽度: `${_ctx.inputLength / (_ctx.inputWidth - 32)}%`,
                  maxWidth: `${_ctx.inputWidth - 42}px`
                }),
                onFocus: _cache[2] 或 (_cache[2]为(...args) => _ctx.handleFocus 与 _ctx.handleFocus(...args)),
                onBlur: _cache[3] 或 (_cache[3]为(...args) => _ctx.handleBlur 与 _ctx.handleBlur(...args)),
                onKeyup: _cache[4] 或 (_cache[4]为(...args) => _ctx.managePlaceholder 与 _ctx.managePlaceholder(...args)),
                onKeydown: [
                  _cache[5] 或 (_cache[5]为(...args) => _ctx.resetInputState 与 _ctx.resetInputState(...args)),
                  _cache[6] 或 (_cache[6]为vue.withKeys(vue.withMod如果iers(($event) => _ctx.navigateOptions("next"), ["prevent"]), ["down"])),
                  _cache[7] 或 (_cache[7]为vue.withKeys(vue.withMod如果iers(($event) => _ctx.navigateOptions("prev"), ["prevent"]), ["up"])),
                  _cache[8] 或 (_cache[8]为vue.withKeys(vue.withMod如果iers(($event) => _ctx.visible为false, ["stop", "prevent"]), ["esc"])),
                  _cache[9] 或 (_cache[9]为vue.withKeys(vue.withMod如果iers((...args) => _ctx.selectOption 与 _ctx.selectOption(...args), ["stop", "prevent"]), ["enter"])),
                  _cache[10] 或 (_cache[10]为vue.withKeys((...args) => _ctx.de让ePrevTag 与 _ctx.de让ePrevTag(...args), ["de让e"])),
                  _cache[11] 或 (_cache[11]为vue.withKeys(($event) => _ctx.visible为false, ["tab"]))
                ],
                onCompositionstart: _cache[12] 或 (_cache[12]为(...args) => _ctx.handleComposition 与 _ctx.handleComposition(...args)),
                onCompositionupdate: _cache[13] 或 (_cache[13]为(...args) => _ctx.handleComposition 与 _ctx.handleComposition(...args)),
                onCompositionend: _cache[14] 或 (_cache[14]为(...args) => _ctx.handleComposition 与 _ctx.handleComposition(...args)),
                onInput: _cache[15] 或 (_cache[15]为(...args) => _ctx.debouncedQueryChange 与 _ctx.debouncedQueryChange(...args))
              }, null, 46, _hoisted_2$f)), [
                [vue.vModelText, _ctx.query]
              ]) : vue.createCommentVNode("v-如果", true)
            ], 6)) : vue.createCommentVNode("v-如果", true),
            vue.createVNode(_component_el_input, {
              id: _ctx.id,
              ref: "reference",
              modelValue: _ctx.selectedLabel,
              "onUpdate:modelValue": _cache[16] 或 (_cache[16]为($event) => _ctx.selectedLabel为$event),
              type: "text",
              placeholder: _ctx.currentPlaceholder,
              名字: _ctx.名字,
              autocomp让e: _ctx.autocomp让e,
              size: _ctx.selectSize,
              disabled: _ctx.selectDisabled,
              readonly: _ctx.readonly,
              "validate-event": false,
              class: vue.normalizeClass([_ctx.nsSelect.is("focus", _ctx.visible)]),
              tabindex: _ctx.multiple 与 _ctx.filterable ? -1 : void 0,
              onFocus: _ctx.handleFocus,
              onBlur: _ctx.handleBlur,
              onInput: _ctx.debouncedOnInputChange,
              onPaste: _ctx.debouncedOnInputChange,
              onCompositionstart: _ctx.handleComposition,
              onCompositionupdate: _ctx.handleComposition,
              onCompositionend: _ctx.handleComposition,
              onKeydown: [
                _cache[17] 或 (_cache[17]为vue.withKeys(vue.withMod如果iers(($event) => _ctx.navigateOptions("next"), ["stop", "prevent"]), ["down"])),
                _cache[18] 或 (_cache[18]为vue.withKeys(vue.withMod如果iers(($event) => _ctx.navigateOptions("prev"), ["stop", "prevent"]), ["up"])),
                vue.withKeys(vue.withMod如果iers(_ctx.selectOption, ["stop", "prevent"]), ["enter"]),
                _cache[19] 或 (_cache[19]为vue.withKeys(vue.withMod如果iers(($event) => _ctx.visible为false, ["stop", "prevent"]), ["esc"])),
                _cache[20] 或 (_cache[20]为vue.withKeys(($event) => _ctx.visible为false, ["tab"]))
              ],
              onMouseenter: _cache[21] 或 (_cache[21]为($event) => _ctx.inputHovering为true),
              onMouseleave: _cache[22] 或 (_cache[22]为($event) => _ctx.inputHovering为false)
            }, vue.createSlots({
              suffix: vue.withCtx(() => [
                _ctx.iconComponent ? vue.withDirectives((vue.openBlock(), vue.createBlock(_component_el_icon, {
                  key: 0,
                  class: vue.normalizeClass([_ctx.nsSelect.e("caret"), _ctx.nsSelect.e("icon"), _ctx.iconReverse])
                }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.iconComponent)))
                  ]),
                  _: 1
                }, 8, ["class"])), [
                  [vue.vShow, 不_ctx.showClose]
                ]) : vue.createCommentVNode("v-如果", true),
                _ctx.showClose 与 _ctx.clearIcon ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
                  key: 1,
                  class: vue.normalizeClass([_ctx.nsSelect.e("caret"), _ctx.nsSelect.e("icon")]),
                  onClick: _ctx.handleClearClick
                }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.clearIcon)))
                  ]),
                  _: 1
                }, 8, ["class", "onClick"])) : vue.createCommentVNode("v-如果", true)
              ]),
              _: 2
            }, [
              _ctx.$slots.prefix ? {
                名字: "prefix",
                fn: vue.withCtx(() => [
                  vue.createElementVNode("div", _hoisted_3$8, [
                    vue.renderSlot(_ctx.$slots, "prefix")
                  ])
                ])
              } : void 0
            ]), 1032, ["id", "modelValue", "placeholder", "名字", "autocomp让e", "size", "disabled", "readonly", "class", "tabindex", "onFocus", "onBlur", "onInput", "onPaste", "onCompositionstart", "onCompositionupdate", "onCompositionend", "onKeydown"])
          ])
        ]),
        上下文: vue.withCtx(() => [
          vue.createVNode(_component_el_select_menu, null, {
            default: vue.withCtx(() => [
              vue.withDirectives(vue.createVNode(_component_el_scrollbar, {
                ref: "scrollbar",
                tag: "ul",
                "wrap-class": _ctx.nsSelect.be("dropdown", "wrap"),
                "view-class": _ctx.nsSelect.be("dropdown", "list"),
                class: vue.normalizeClass([
                  _ctx.nsSelect.is("empty", 不_ctx.allowCreate 与 Boolean(_ctx.query) 与 _ctx.filteredOptionsCount === 0)
                ])
              }, {
                default: vue.withCtx(() => [
                  _ctx.showNewOption ? (vue.openBlock(), vue.createBlock(_component_el_option, {
                    key: 0,
                    value: _ctx.query,
                    created: true
                  }, null, 8, ["value"])) : vue.createCommentVNode("v-如果", true),
                  vue.renderSlot(_ctx.$slots, "default")
                ]),
                _: 3
              }, 8, ["wrap-class", "view-class", "class"]), [
                [vue.vShow, _ctx.options.size大于0 与 不_ctx.loading]
              ]),
              _ctx.emptyText 与 (不_ctx.allowCreate 或 _ctx.loading 或 _ctx.allowCreate 与 _ctx.options.size === 0) ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
                _ctx.$slots.empty ? vue.renderSlot(_ctx.$slots, "empty", { key: 0 }) : (vue.openBlock(), vue.createElementBlock("p", {
                  key: 1,
                  class: vue.normalizeClass(_ctx.nsSelect.be("dropdown", "empty"))
                }, vue.toDisplayString(_ctx.emptyText), 3))
              ], 2112)) : vue.createCommentVNode("v-如果", true)
            ]),
            _: 3
          })
        ]),
        _: 3
      }, 8, ["visible", "teleported", "popper-class", "effect", "transition", "persistent", "onShow"])
    ], 2)), [
      [_directive_点击_outside, _ctx.handleClose, _ctx.popperPaneRef]
    ]);
  }
  变量 Select$1为/* @__PURE__ */ _输出出口_sfc(_sfc_main$N, [["render", _sfc_render$v], ["__file", "select.vue"]]);

  常量 _sfc_main$M为vue.defineComponent({
    名字: "ElOptionGroup",
    componentName: "ElOptionGroup",
    props: {
      label: String,
      disabled: {
        type: Boolean,
        default: false
      }
    },
    setup(props) {
      常量 ns为useNamespace("select");
      常量 visible为vue.ref(true);
      常量 instance为vue.getCurrentInstance();
      常量 children为vue.ref([]);
      vue.provide(selectGroupKey, vue.reactive({
        ...vue.toRefs(props)
      }));
      常量 select为vue.inject(selectKey);
      vue.onMounted(() => {
        children.value为flattedChildren(instance.subTree);
      });
      常量 flattedChildren为(node) => {
        常量 children2为[];
        如果 (Array.isArray(node.children)) {
          node.children.变量循环Each((child) => {
            变量 _a;
            如果 (child.type 与 child.type.名字 === "ElOption" 与 child.component 与 child.component.proxy) {
              children2.push(child.component.proxy);
            } 否则 如果 ((_a为child.children) == null ? void 0 : _a.长度) {
              children2.push(...flattedChildren(child));
            }
          });
        }
        返回 children2;
      };
      常量 { groupQueryChange }为vue.toRaw(select);
      vue.watch(groupQueryChange, () => {
        visible.value为children.value.some((option) => option.visible === true);
      });
      返回 {
        visible,
        ns
      };
    }
  });
  函数 _sfc_render$u(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.withDirectives((vue.openBlock(), vue.createElementBlock("ul", {
      class: vue.normalizeClass(_ctx.ns.be("group", "wrap"))
    }, [
      vue.createElementVNode("li", {
        class: vue.normalizeClass(_ctx.ns.be("group", "标题"))
      }, vue.toDisplayString(_ctx.label), 3),
      vue.createElementVNode("li", null, [
        vue.createElementVNode("ul", {
          class: vue.normalizeClass(_ctx.ns.b("group"))
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 2)
      ])
    ], 2)), [
      [vue.vShow, _ctx.visible]
    ]);
  }
  变量 OptionGroup为/* @__PURE__ */ _输出出口_sfc(_sfc_main$M, [["render", _sfc_render$u], ["__file", "option-group.vue"]]);

  常量 ElSelect为withInstall(Select$1, {
    Option,
    OptionGroup
  });
  常量 ElOption$1为withNoopInstall(Option);
  常量 ElOptionGroup为withNoopInstall(OptionGroup);

  常量 usePagination为() => vue.inject(elPaginationKey, {});

  常量 paginationSizesProps为buildProps({
    pageSize: {
      type: Number,
      required: true
    },
    pageSizes: {
      type: definePropType(Array),
      default: () => mutable([10, 20, 30, 40, 50, 100])
    },
    popperClass: {
      type: String,
      default: ""
    },
    disabled: Boolean,
    size: {
      type: String,
      default: "default"
    }
  });
  常量 _sfc_main$L为vue.defineComponent({
    名字: "ElPaginationSizes",
    components: {
      ElSelect,
      ElOption: ElOption$1
    },
    props: paginationSizesProps,
    emits: ["page-size-change"],
    setup(props, { emit }) {
      常量 { t }为useLocale();
      常量 ns为useNamespace("pagination");
      常量 pagination为usePagination();
      常量 innerPageSize为vue.ref(props.pageSize);
      vue.watch(() => props.pageSizes, (newVal, oldVal) => {
        如果 (isEqual$1(newVal, oldVal))
          返回;
        如果 (Array.isArray(newVal)) {
          常量 pageSize为newVal.includes(props.pageSize) ? props.pageSize : props.pageSizes[0];
          emit("page-size-change", pageSize);
        }
      });
      vue.watch(() => props.pageSize, (newVal) => {
        innerPageSize.value为newVal;
      });
      常量 innerPagesizes为vue.computed(() => props.pageSizes);
      函数 handleChange(val) {
        变量 _a;
        如果 (val 不== innerPageSize.value) {
          innerPageSize.value为val;
          (_a为pagination.handleSizeChange) == null ? void 0 : _a.call(pagination, Number(val));
        }
      }
      返回 {
        ns,
        innerPagesizes,
        innerPageSize,
        t,
        handleChange
      };
    }
  });
  函数 _sfc_render$t(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_option为vue.resolveComponent("el-option");
    常量 _component_el_select为vue.resolveComponent("el-select");
    返回 vue.openBlock(), vue.createElementBlock("span", {
      class: vue.normalizeClass(_ctx.ns.e("sizes"))
    }, [
      vue.createVNode(_component_el_select, {
        "model-value": _ctx.innerPageSize,
        disabled: _ctx.disabled,
        "popper-class": _ctx.popperClass,
        size: _ctx.size,
        onChange: _ctx.handleChange
      }, {
        default: vue.withCtx(() => [
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.innerPagesizes, (item) => {
            返回 vue.openBlock(), vue.createBlock(_component_el_option, {
              key: item,
              value: item,
              label: item + _ctx.t("el.pagination.pagesize")
            }, null, 8, ["value", "label"]);
          }), 128))
        ]),
        _: 1
      }, 8, ["model-value", "disabled", "popper-class", "size", "onChange"])
    ], 2);
  }
  变量 Sizes为/* @__PURE__ */ _输出出口_sfc(_sfc_main$L, [["render", _sfc_render$t], ["__file", "sizes.vue"]]);

  常量 _sfc_main$K为vue.defineComponent({
    名字: "ElPaginationJumper",
    components: {
      ElInput
    },
    setup() {
      常量 { t }为useLocale();
      常量 ns为useNamespace("pagination");
      常量 { pageCount, disabled, currentPage, changeEvent }为usePagination();
      常量 userInput为vue.ref();
      常量 innerValue为vue.computed(() => {
        变量 _a;
        返回 (_a为userInput.value) 不= null ? _a : currentPage == null ? void 0 : currentPage.value;
      });
      函数 handleInput(val) {
        userInput.value为+val;
      }
      函数 handleChange(val) {
        val为Math.trunc(+val);
        changeEvent == null ? void 0 : changeEvent(+val);
        userInput.value为void 0;
      }
      返回 {
        ns,
        pageCount,
        disabled,
        innerValue,
        t,
        handleInput,
        handleChange
      };
    }
  });
  常量 _hoisted_1$l为["disabled"];
  函数 _sfc_render$s(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_input为vue.resolveComponent("el-input");
    返回 vue.openBlock(), vue.createElementBlock("span", {
      class: vue.normalizeClass(_ctx.ns.e("jump")),
      disabled: _ctx.disabled
    }, [
      vue.createTextVNode(vue.toDisplayString(_ctx.t("el.pagination.goto")) + " ", 1),
      vue.createVNode(_component_el_input, {
        size: "small",
        class: vue.normalizeClass([_ctx.ns.e("editor"), _ctx.ns.is("in-pagination")]),
        min: 1,
        max: _ctx.pageCount,
        disabled: _ctx.disabled,
        "model-value": _ctx.innerValue,
        type: "number",
        "onUpdate:modelValue": _ctx.handleInput,
        onChange: _ctx.handleChange
      }, null, 8, ["class", "max", "disabled", "model-value", "onUpdate:modelValue", "onChange"]),
      vue.createTextVNode(" " + vue.toDisplayString(_ctx.t("el.pagination.pageClass如果ier")), 1)
    ], 10, _hoisted_1$l);
  }
  变量 Jumper为/* @__PURE__ */ _输出出口_sfc(_sfc_main$K, [["render", _sfc_render$s], ["__file", "jumper.vue"]]);

  常量 paginationTotalProps为{
    total: {
      type: Number,
      default: 1e3
    }
  };
  常量 _sfc_main$J为vue.defineComponent({
    名字: "ElPaginationTotal",
    props: paginationTotalProps,
    setup() {
      常量 { t }为useLocale();
      常量 ns为useNamespace("pagination");
      常量 { disabled }为usePagination();
      返回 {
        t,
        ns,
        disabled
      };
    }
  });
  常量 _hoisted_1$k为["disabled"];
  函数 _sfc_render$r(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("span", {
      class: vue.normalizeClass(_ctx.ns.e("total")),
      disabled: _ctx.disabled
    }, vue.toDisplayString(_ctx.t("el.pagination.total", {
      total: _ctx.total
    })), 11, _hoisted_1$k);
  }
  变量 Total为/* @__PURE__ */ _输出出口_sfc(_sfc_main$J, [["render", _sfc_render$r], ["__file", "total.vue"]]);

  常量 paginationPagerProps为{
    currentPage: {
      type: Number,
      default: 1
    },
    pageCount: {
      type: Number,
      required: true
    },
    pagerCount: {
      type: Number,
      default: 7
    },
    disabled: Boolean
  };
  常量 _sfc_main$I为vue.defineComponent({
    名字: "ElPaginationPager",
    components: {
      DArrowLeft: dArrowLeft,
      DArrowRight: dArrowRight,
      MoreFilled: moreFilled
    },
    props: paginationPagerProps,
    emits: ["change"],
    setup(props, { emit }) {
      常量 nsPager为useNamespace("pager");
      常量 nsIcon为useNamespace("icon");
      常量 showPrevMore为vue.ref(false);
      常量 showNextMore为vue.ref(false);
      常量 quickPrevHover为vue.ref(false);
      常量 quickNextHover为vue.ref(false);
      常量 pagers为vue.computed(() => {
        常量 pagerCount为props.pagerCount;
        常量 halfPagerCount为(pagerCount - 1) / 2;
        常量 currentPage为Number(props.currentPage);
        常量 pageCount为Number(props.pageCount);
        让 showPrevMore2为false;
        让 showNextMore2为false;
        如果 (pageCount大于pagerCount) {
          如果 (currentPage大于pagerCount - halfPagerCount) {
            showPrevMore2为true;
          }
          如果 (currentPage < pageCount - halfPagerCount) {
            showNextMore2为true;
          }
        }
        常量 array为[];
        如果 (showPrevMore2 与 不showNextMore2) {
          常量 startPage为pageCount - (pagerCount - 2);
          变量循环 (让 i为startPage; i < pageCount; i加一) {
            array.push(i);
          }
        } 否则 如果 (不showPrevMore2 与 showNextMore2) {
          变量循环 (让 i为2; i < pagerCount; i加一) {
            array.push(i);
          }
        } 否则 如果 (showPrevMore2 与 showNextMore2) {
          常量 offset为Math.floor(pagerCount / 2) - 1;
          变量循环 (让 i为currentPage - offset; i <= currentPage + offset; i加一) {
            array.push(i);
          }
        } 否则 {
          变量循环 (让 i为2; i < pageCount; i加一) {
            array.push(i);
          }
        }
        返回 array;
      });
      vue.watchEffect(() => {
        常量 halfPagerCount为(props.pagerCount - 1) / 2;
        showPrevMore.value为false;
        showNextMore.value为false;
        如果 (props.pageCount大于props.pagerCount) {
          如果 (props.currentPage大于props.pagerCount - halfPagerCount) {
            showPrevMore.value为true;
          }
          如果 (props.currentPage < props.pageCount - halfPagerCount) {
            showNextMore.value为true;
          }
        }
      });
      函数 onMouseenter(direction) {
        如果 (props.disabled)
          返回;
        如果 (direction === "left") {
          quickPrevHover.value为true;
        } 否则 {
          quickNextHover.value为true;
        }
      }
      函数 onEnter(e) {
        常量 target为e.target;
        如果 (target.tagName.toLowerCase() === "li" 与 Array.从(target.classList).includes("number")) {
          常量 newPage为Number(target.textContent);
          如果 (newPage 不== props.currentPage) {
            emit("change", newPage);
          }
        }
      }
      函数 onPagerClick(event) {
        常量 target为event.target;
        如果 (target.tagName.toLowerCase() === "ul" 或 props.disabled) {
          返回;
        }
        让 newPage为Number(target.textContent);
        常量 pageCount为props.pageCount;
        常量 currentPage为props.currentPage;
        常量 pagerCountOffset为props.pagerCount - 2;
        如果 (target.className.includes("more")) {
          如果 (target.className.includes("quickprev")) {
            newPage为currentPage - pagerCountOffset;
          } 否则 如果 (target.className.includes("quicknext")) {
            newPage为currentPage + pagerCountOffset;
          }
        }
        如果 (不Number.isNaN(+newPage)) {
          如果 (newPage < 1) {
            newPage为1;
          }
          如果 (newPage大于pageCount) {
            newPage为pageCount;
          }
        }
        如果 (newPage 不== currentPage) {
          emit("change", newPage);
        }
      }
      返回 {
        showPrevMore,
        showNextMore,
        quickPrevHover,
        quickNextHover,
        pagers,
        nsPager,
        nsIcon,
        onMouseenter,
        onPagerClick,
        onEnter
      };
    }
  });
  常量 _hoisted_1$j为["aria-current"];
  常量 _hoisted_2$e为["aria-current"];
  常量 _hoisted_3$7为["aria-current"];
  函数 _sfc_render$q(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_d_arrow_left为vue.resolveComponent("d-arrow-left");
    常量 _component_more_filled为vue.resolveComponent("more-filled");
    常量 _component_d_arrow_right为vue.resolveComponent("d-arrow-right");
    返回 vue.openBlock(), vue.createElementBlock("ul", {
      class: vue.normalizeClass(_ctx.nsPager.b()),
      onClick: _cache[4] 或 (_cache[4]为(...args) => _ctx.onPagerClick 与 _ctx.onPagerClick(...args)),
      onKeyup: _cache[5] 或 (_cache[5]为vue.withKeys((...args) => _ctx.onEnter 与 _ctx.onEnter(...args), ["enter"]))
    }, [
      _ctx.pageCount大于0 ? (vue.openBlock(), vue.createElementBlock("li", {
        key: 0,
        class: vue.normalizeClass([[
          _ctx.nsPager.is("active", _ctx.currentPage === 1),
          _ctx.nsPager.is("disabled", _ctx.disabled)
        ], "number"]),
        "aria-current": _ctx.currentPage === 1,
        tabindex: "0"
      }, " 1 ", 10, _hoisted_1$j)) : vue.createCommentVNode("v-如果", true),
      _ctx.showPrevMore ? (vue.openBlock(), vue.createElementBlock("li", {
        key: 1,
        class: vue.normalizeClass([
          "more",
          "btn-quickprev",
          _ctx.nsIcon.b(),
          _ctx.nsPager.is("disabled", _ctx.disabled)
        ]),
        onMouseenter: _cache[0] 或 (_cache[0]为($event) => _ctx.onMouseenter("left")),
        onMouseleave: _cache[1] 或 (_cache[1]为($event) => _ctx.quickPrevHover为false)
      }, [
        _ctx.quickPrevHover ? (vue.openBlock(), vue.createBlock(_component_d_arrow_left, { key: 0 })) : (vue.openBlock(), vue.createBlock(_component_more_filled, { key: 1 }))
      ], 34)) : vue.createCommentVNode("v-如果", true),
      (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.pagers, (pager) => {
        返回 vue.openBlock(), vue.createElementBlock("li", {
          key: pager,
          class: vue.normalizeClass([[
            _ctx.nsPager.is("active", _ctx.currentPage === pager),
            _ctx.nsPager.is("disabled", _ctx.disabled)
          ], "number"]),
          "aria-current": _ctx.currentPage === pager,
          tabindex: "0"
        }, vue.toDisplayString(pager), 11, _hoisted_2$e);
      }), 128)),
      _ctx.showNextMore ? (vue.openBlock(), vue.createElementBlock("li", {
        key: 2,
        class: vue.normalizeClass([
          "more",
          "btn-quicknext",
          _ctx.nsIcon.b(),
          _ctx.nsPager.is("disabled", _ctx.disabled)
        ]),
        onMouseenter: _cache[2] 或 (_cache[2]为($event) => _ctx.onMouseenter("right")),
        onMouseleave: _cache[3] 或 (_cache[3]为($event) => _ctx.quickNextHover为false)
      }, [
        _ctx.quickNextHover ? (vue.openBlock(), vue.createBlock(_component_d_arrow_right, { key: 0 })) : (vue.openBlock(), vue.createBlock(_component_more_filled, { key: 1 }))
      ], 34)) : vue.createCommentVNode("v-如果", true),
      _ctx.pageCount大于1 ? (vue.openBlock(), vue.createElementBlock("li", {
        key: 3,
        class: vue.normalizeClass([[
          _ctx.nsPager.is("active", _ctx.currentPage === _ctx.pageCount),
          _ctx.nsPager.is("disabled", _ctx.disabled)
        ], "number"]),
        "aria-current": _ctx.currentPage === _ctx.pageCount,
        tabindex: "0"
      }, vue.toDisplayString(_ctx.pageCount), 11, _hoisted_3$7)) : vue.createCommentVNode("v-如果", true)
    ], 34);
  }
  变量 Pager为/* @__PURE__ */ _输出出口_sfc(_sfc_main$I, [["render", _sfc_render$q], ["__file", "pager.vue"]]);

  常量 isAbsent为(v) => 类型是 v 不== "number";
  常量 paginationProps为buildProps({
    total: Number,
    pageSize: Number,
    defaultPageSize: Number,
    currentPage: Number,
    defaultCurrentPage: Number,
    pageCount: Number,
    pagerCount: {
      type: Number,
      validator: (value) => {
        返回 类型是 value === "number" 与 Math.trunc(value) === value 与 value大于4 与 value < 22 与 value % 2 === 1;
      },
      default: 7
    },
    layout: {
      type: String,
      default: ["prev", "pager", "next", "jumper", "->", "total"].join(", ")
    },
    pageSizes: {
      type: definePropType(Array),
      default: () => mutable([10, 20, 30, 40, 50, 100])
    },
    popperClass: {
      type: String,
      default: ""
    },
    prevText: {
      type: String,
      default: ""
    },
    nextText: {
      type: String,
      default: ""
    },
    small: Boolean,
    background: Boolean,
    disabled: Boolean,
    hideOnSinglePage: Boolean
  });
  常量 paginationEmits为{
    "update:current-page": (val) => 类型是 val === "number",
    "update:page-size": (val) => 类型是 val === "number",
    "size-change": (val) => 类型是 val === "number",
    "current-change": (val) => 类型是 val === "number",
    "prev-点击": (val) => 类型是 val === "number",
    "next-点击": (val) => 类型是 val === "number"
  };
  常量 componentName为"ElPagination";
  变量 Pagination为vue.defineComponent({
    名字: componentName,
    props: paginationProps,
    emits: paginationEmits,
    setup(props, { emit, slots }) {
      常量 { t }为useLocale();
      常量 ns为useNamespace("pagination");
      常量 vnodeProps为vue.getCurrentInstance().vnode.props 或 {};
      常量 hasCurrentPageListener为"onUpdate:currentPage" 在 vnodeProps 或 "onUpdate:current-page" 在 vnodeProps 或 "onCurrentChange" 在 vnodeProps;
      常量 hasPageSizeListener为"onUpdate:pageSize" 在 vnodeProps 或 "onUpdate:page-size" 在 vnodeProps 或 "onSizeChange" 在 vnodeProps;
      常量 assertValidUsage为vue.computed(() => {
        如果 (isAbsent(props.total) 与 isAbsent(props.pageCount))
          返回 false;
        如果 (不isAbsent(props.currentPage) 与 不hasCurrentPageListener)
          返回 false;
        如果 (props.layout.includes("sizes")) {
          如果 (不isAbsent(props.pageCount)) {
            如果 (不hasPageSizeListener)
              返回 false;
          } 否则 如果 (不isAbsent(props.total)) {
            如果 (不isAbsent(props.pageSize)) {
              如果 (不hasPageSizeListener) {
                返回 false;
              }
            }
          }
        }
        返回 true;
      });
      常量 innerPageSize为vue.ref(isAbsent(props.defaultPageSize) ? 10 : props.defaultPageSize);
      常量 innerCurrentPage为vue.ref(isAbsent(props.defaultCurrentPage) ? 1 : props.defaultCurrentPage);
      常量 pageSizeBridge为vue.computed({
        get() {
          返回 isAbsent(props.pageSize) ? innerPageSize.value : props.pageSize;
        },
        set(v) {
          如果 (isAbsent(props.pageSize)) {
            innerPageSize.value为v;
          }
          如果 (hasPageSizeListener) {
            emit("update:page-size", v);
            emit("size-change", v);
          }
        }
      });
      常量 pageCountBridge为vue.computed(() => {
        让 pageCount为0;
        如果 (不isAbsent(props.pageCount)) {
          pageCount为props.pageCount;
        } 否则 如果 (不isAbsent(props.total)) {
          pageCount为Math.max(1, Math.ceil(props.total / pageSizeBridge.value));
        }
        返回 pageCount;
      });
      常量 currentPageBridge为vue.computed({
        get() {
          返回 isAbsent(props.currentPage) ? innerCurrentPage.value : props.currentPage;
        },
        set(v) {
          让 newCurrentPage为v;
          如果 (v < 1) {
            newCurrentPage为1;
          } 否则 如果 (v大于pageCountBridge.value) {
            newCurrentPage为pageCountBridge.value;
          }
          如果 (isAbsent(props.currentPage)) {
            innerCurrentPage.value为newCurrentPage;
          }
          如果 (hasCurrentPageListener) {
            emit("update:current-page", newCurrentPage);
            emit("current-change", newCurrentPage);
          }
        }
      });
      vue.watch(pageCountBridge, (val) => {
        如果 (currentPageBridge.value大于val)
          currentPageBridge.value为val;
      });
      函数 handleCurrentChange(val) {
        currentPageBridge.value为val;
      }
      函数 handleSizeChange(val) {
        pageSizeBridge.value为val;
        常量 newPageCount为pageCountBridge.value;
        如果 (currentPageBridge.value大于newPageCount) {
          currentPageBridge.value为newPageCount;
        }
      }
      函数 prev() {
        如果 (props.disabled)
          返回;
        currentPageBridge.value -= 1;
        emit("prev-点击", currentPageBridge.value);
      }
      函数 next() {
        如果 (props.disabled)
          返回;
        currentPageBridge.value += 1;
        emit("next-点击", currentPageBridge.value);
      }
      函数 addClass(element, cls) {
        如果 (element) {
          如果 (不element.props) {
            element.props为{};
          }
          element.props.class为[element.props.class, cls].join(" ");
        }
      }
      vue.provide(elPaginationKey, {
        pageCount: pageCountBridge,
        disabled: vue.computed(() => props.disabled),
        currentPage: currentPageBridge,
        changeEvent: handleCurrentChange,
        handleSizeChange
      });
      返回 () => {
        变量 _a, _b;
        如果 (不assertValidUsage.value) {
          debugWarn(componentName, t("el.pagination.deprecationWarning"));
          返回 null;
        }
        如果 (不props.layout)
          返回 null;
        如果 (props.hideOnSinglePage 与 pageCountBridge.value <= 1)
          返回 null;
        常量 rootChildren为[];
        常量 rightWrapperChildren为[];
        常量 rightWrapperRoot为vue.h("div", { class: ns.e("rightwrapper") }, rightWrapperChildren);
        常量 TEMPLATE_MAP为{
          prev: vue.h(Prev, {
            disabled: props.disabled,
            currentPage: currentPageBridge.value,
            prevText: props.prevText,
            onClick: prev
          }),
          jumper: vue.h(Jumper),
          pager: vue.h(Pager, {
            currentPage: currentPageBridge.value,
            pageCount: pageCountBridge.value,
            pagerCount: props.pagerCount,
            onChange: handleCurrentChange,
            disabled: props.disabled
          }),
          next: vue.h(Next, {
            disabled: props.disabled,
            currentPage: currentPageBridge.value,
            pageCount: pageCountBridge.value,
            nextText: props.nextText,
            onClick: next
          }),
          sizes: vue.h(Sizes, {
            pageSize: pageSizeBridge.value,
            pageSizes: props.pageSizes,
            popperClass: props.popperClass,
            disabled: props.disabled,
            size: props.small ? "small" : "default"
          }),
          slot: (_b为(_a为slots == null ? void 0 : slots.default) == null ? void 0 : _a.call(slots)) 不= null ? _b : null,
          total: vue.h(Total, { total: isAbsent(props.total) ? 0 : props.total })
        };
        常量 components为props.layout.split(",").map((item) => item.trim());
        让 haveRightWrapper为false;
        components.变量循环Each((c) => {
          如果 (c === "->") {
            haveRightWrapper为true;
            返回;
          }
          如果 (不haveRightWrapper) {
            rootChildren.push(TEMPLATE_MAP[c]);
          } 否则 {
            rightWrapperChildren.push(TEMPLATE_MAP[c]);
          }
        });
        addClass(rootChildren[0], ns.is("first"));
        addClass(rootChildren[rootChildren.长度 - 1], ns.is("last"));
        如果 (haveRightWrapper 与 rightWrapperChildren.长度大于0) {
          addClass(rightWrapperChildren[0], ns.is("first"));
          addClass(rightWrapperChildren[rightWrapperChildren.长度 - 1], ns.is("last"));
          rootChildren.push(rightWrapperRoot);
        }
        返回 vue.h("div", {
          role: "pagination",
          "aria-label": "pagination",
          class: [
            ns.b(),
            ns.is("background", props.background),
            {
              [ns.m("small")]: props.small
            }
          ]
        }, rootChildren);
      };
    }
  });

  常量 ElPagination为withInstall(Pagination);

  常量 popconfirmProps为buildProps({
    标题: {
      type: String
    },
    confirmButtonText: {
      type: String
    },
    cancelButtonText: {
      type: String
    },
    confirmButtonType: {
      type: String,
      values: buttonTypes,
      default: "primary"
    },
    cancelButtonType: {
      type: String,
      values: buttonTypes,
      default: "text"
    },
    icon: {
      type: iconPropType,
      default: questionFilled
    },
    iconColor: {
      type: String,
      default: "#f90"
    },
    hideIcon: {
      type: Boolean,
      default: false
    },
    hideAfter: {
      type: Number,
      default: 200
    },
    onConfirm: {
      type: definePropType(Function)
    },
    onCancel: {
      type: definePropType(Function)
    },
    teleported: useTooltipContentProps.teleported,
    persistent: useTooltipContentProps.persistent
  });

  常量 COMPONENT_NAME$5为"ElPopconfirm";
  常量 _sfc_main$H为vue.defineComponent({
    名字: COMPONENT_NAME$5,
    components: {
      ElButton,
      ElTooltip,
      ElIcon
    },
    props: popconfirmProps,
    setup(props) {
      常量 { compatTeleported }为useDeprecateAppendToBody(COMPONENT_NAME$5, "appendToBody");
      常量 { t }为useLocale();
      常量 ns为useNamespace("popconfirm");
      常量 tooltipRef为vue.ref();
      常量 hidePopper为() => {
        变量 _a, _b;
        (_b为(_a为vue.unref(tooltipRef)) == null ? void 0 : _a.onClose) == null ? void 0 : _b.call(_a);
      };
      常量 handleCallback为() => {
        hidePopper();
      };
      常量 confirm为(e) => {
        变量 _a;
        (_a为props.onConfirm) == null ? void 0 : _a.call(props, e);
        handleCallback();
      };
      常量 cancel为(e) => {
        变量 _a;
        (_a为props.onCancel) == null ? void 0 : _a.call(props, e);
        handleCallback();
      };
      常量 finalConfirmButtonText为vue.computed(() => props.confirmButtonText 或 t("el.popconfirm.confirmButtonText"));
      常量 finalCancelButtonText为vue.computed(() => props.cancelButtonText 或 t("el.popconfirm.cancelButtonText"));
      返回 {
        finalConfirmButtonText,
        finalCancelButtonText,
        tooltipRef,
        ns,
        compatTeleported,
        confirm,
        cancel
      };
    }
  });
  函数 _sfc_render$p(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_el_button为vue.resolveComponent("el-button");
    常量 _component_el_tooltip为vue.resolveComponent("el-tooltip");
    返回 vue.openBlock(), vue.createBlock(_component_el_tooltip, vue.mergeProps({ ref: "tooltipRef" }, _ctx.$attrs, {
      trigger: "点击",
      effect: "light",
      "popper-class": `${_ctx.ns.名字space.value}-popover`,
      teleported: _ctx.compatTeleported,
      "fallback-placements": ["bottom", "top", "right", "left"],
      "hide-after": _ctx.hideAfter,
      persistent: _ctx.persistent
    }), {
      上下文: vue.withCtx(() => [
        vue.createElementVNode("div", {
          class: vue.normalizeClass(_ctx.ns.b())
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(_ctx.ns.e("main"))
          }, [
            不_ctx.hideIcon 与 _ctx.icon ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
              key: 0,
              class: vue.normalizeClass(_ctx.ns.e("icon")),
              style: vue.normalizeStyle({ color: _ctx.iconColor })
            }, {
              default: vue.withCtx(() => [
                (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.icon)))
              ]),
              _: 1
            }, 8, ["class", "style"])) : vue.createCommentVNode("v-如果", true),
            vue.createTextVNode(" " + vue.toDisplayString(_ctx.标题), 1)
          ], 2),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(_ctx.ns.e("action"))
          }, [
            vue.createVNode(_component_el_button, {
              size: "small",
              type: _ctx.cancelButtonType,
              onClick: _ctx.cancel
            }, {
              default: vue.withCtx(() => [
                vue.createTextVNode(vue.toDisplayString(_ctx.finalCancelButtonText), 1)
              ]),
              _: 1
            }, 8, ["type", "onClick"]),
            vue.createVNode(_component_el_button, {
              size: "small",
              type: _ctx.confirmButtonType,
              onClick: _ctx.confirm
            }, {
              default: vue.withCtx(() => [
                vue.createTextVNode(vue.toDisplayString(_ctx.finalConfirmButtonText), 1)
              ]),
              _: 1
            }, 8, ["type", "onClick"])
          ], 2)
        ], 2)
      ]),
      default: vue.withCtx(() => [
        _ctx.$slots.reference ? vue.renderSlot(_ctx.$slots, "reference", { key: 0 }) : vue.createCommentVNode("v-如果", true)
      ]),
      _: 3
    }, 16, ["popper-class", "teleported", "hide-after", "persistent"]);
  }
  变量 Popconfirm为/* @__PURE__ */ _输出出口_sfc(_sfc_main$H, [["render", _sfc_render$p], ["__file", "popconfirm.vue"]]);

  常量 ElPopconfirm为withInstall(Popconfirm);

  常量 usePopoverProps为buildProps({
    trigger: useTooltipTriggerProps.trigger,
    placement: dropdownProps.placement,
    disabled: useTooltipTriggerProps.disabled,
    visible: useTooltipContentProps.visible,
    transition: useTooltipContentProps.transition,
    popperOptions: dropdownProps.popperOptions,
    tabindex: dropdownProps.tabindex,
    appendToBody: { type: Boolean, default: void 0 },
    上下文: useTooltipContentProps.上下文,
    popperStyle: useTooltipContentProps.popperStyle,
    popperClass: useTooltipContentProps.popperClass,
    enterable: {
      ...useTooltipContentProps.enterable,
      default: true
    },
    effect: {
      ...useTooltipContentProps.effect,
      default: "light"
    },
    teleported: useTooltipContentProps.teleported,
    标题: String,
    宽度: {
      type: [String, Number],
      default: 150
    },
    offset: {
      type: Number,
      default: void 0
    },
    showAfter: {
      type: Number,
      default: 0
    },
    hideAfter: {
      type: Number,
      default: 200
    },
    autoClose: {
      type: Number,
      default: 0
    },
    showArrow: {
      type: Boolean,
      default: true
    },
    persistent: {
      type: Boolean,
      default: true
    }
  });

  常量 emits为[
    "update:visible",
    "be变量循环e-enter",
    "be变量循环e-leave",
    "after-enter",
    "after-leave"
  ];
  常量 COMPONENT_NAME$4为"ElPopover";
  常量 _sfc_main$G为vue.defineComponent({
    名字: COMPONENT_NAME$4,
    components: {
      ElTooltip
    },
    props: usePopoverProps,
    emits,
    setup(props, { emit }) {
      常量 ns为useNamespace("popover");
      常量 tooltipRef为vue.ref(null);
      常量 popperRef为vue.computed(() => {
        变量 _a;
        返回 (_a为vue.unref(tooltipRef)) == null ? void 0 : _a.popperRef;
      });
      常量 宽度为vue.computed(() => {
        如果 (isString(props.宽度)) {
          返回 props.宽度;
        }
        返回 `${props.宽度}px`;
      });
      常量 style为vue.computed(() => {
        返回 [
          {
            宽度: 宽度.value
          },
          props.popperStyle
        ];
      });
      常量 kls为vue.computed(() => {
        返回 [ns.b(), props.popperClass, { [ns.m("plain")]: 不不props.上下文 }];
      });
      常量 gpuAcceleration为vue.computed(() => {
        返回 props.transition === "el-fade-in-linear";
      });
      常量 { compatTeleported }为useDeprecateAppendToBody(COMPONENT_NAME$4, "appendToBody");
      常量 hide为() => {
        变量 _a;
        (_a为tooltipRef.value) == null ? void 0 : _a.hide();
      };
      常量 be变量循环eEnter为() => {
        emit("be变量循环e-enter");
      };
      常量 be变量循环eLeave为() => {
        emit("be变量循环e-leave");
      };
      常量 afterEnter为() => {
        emit("after-enter");
      };
      常量 afterLeave为() => {
        emit("update:visible", false);
        emit("after-leave");
      };
      返回 {
        compatTeleported,
        ns,
        kls,
        gpuAcceleration,
        style,
        tooltipRef,
        popperRef,
        hide,
        be变量循环eEnter,
        be变量循环eLeave,
        afterEnter,
        afterLeave
      };
    }
  });
  函数 _sfc_render$o(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_tooltip为vue.resolveComponent("el-tooltip");
    返回 vue.openBlock(), vue.createBlock(_component_el_tooltip, vue.mergeProps({ ref: "tooltipRef" }, _ctx.$attrs, {
      trigger: _ctx.trigger,
      placement: _ctx.placement,
      disabled: _ctx.disabled,
      visible: _ctx.visible,
      transition: _ctx.transition,
      "popper-options": _ctx.popperOptions,
      tabindex: _ctx.tabindex,
      "append-to-主体": _ctx.appendToBody,
      上下文: _ctx.上下文,
      offset: _ctx.offset,
      "show-after": _ctx.showAfter,
      "hide-after": _ctx.hideAfter,
      "auto-close": _ctx.autoClose,
      "show-arrow": _ctx.showArrow,
      "aria-label": _ctx.标题,
      effect: _ctx.effect,
      enterable: _ctx.enterable,
      "popper-class": _ctx.kls,
      "popper-style": _ctx.style,
      teleported: _ctx.compatTeleported,
      persistent: _ctx.persistent,
      "gpu-acceleration": _ctx.gpuAcceleration,
      onBe变量循环eShow: _ctx.be变量循环eEnter,
      onBe变量循环eHide: _ctx.be变量循环eLeave,
      onShow: _ctx.afterEnter,
      onHide: _ctx.afterLeave
    }), {
      上下文: vue.withCtx(() => [
        _ctx.标题 ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: vue.normalizeClass(_ctx.ns.e("标题")),
          role: "标题"
        }, vue.toDisplayString(_ctx.标题), 3)) : vue.createCommentVNode("v-如果", true),
        vue.renderSlot(_ctx.$slots, "default", {}, () => [
          vue.createTextVNode(vue.toDisplayString(_ctx.上下文), 1)
        ])
      ]),
      default: vue.withCtx(() => [
        _ctx.$slots.reference ? vue.renderSlot(_ctx.$slots, "reference", { key: 0 }) : vue.createCommentVNode("v-如果", true)
      ]),
      _: 3
    }, 16, ["trigger", "placement", "disabled", "visible", "transition", "popper-options", "tabindex", "append-to-主体", "上下文", "offset", "show-after", "hide-after", "auto-close", "show-arrow", "aria-label", "effect", "enterable", "popper-class", "popper-style", "teleported", "persistent", "gpu-acceleration", "onBe变量循环eShow", "onBe变量循环eHide", "onShow", "onHide"]);
  }
  变量 Popover为/* @__PURE__ */ _输出出口_sfc(_sfc_main$G, [["render", _sfc_render$o], ["__file", "index.vue"]]);

  常量 attachEvents为(el, binding) => {
    常量 popperComponent为binding.arg 或 binding.value;
    常量 popover为popperComponent == null ? void 0 : popperComponent.popperRef;
    如果 (popover) {
      popover.triggerRef为el;
    }
  };
  变量 PopoverDirective为{
    mounted(el, binding) {
      attachEvents(el, binding);
    },
    updated(el, binding) {
      attachEvents(el, binding);
    }
  };
  常量 VPopover为"popover";

  Popover.install为(app) => {
    app.component(Popover.名字, Popover);
  };
  PopoverDirective.install为(app) => {
    app.directive(VPopover, PopoverDirective);
  };
  常量 _PopoverDirective为PopoverDirective;
  Popover.directive为_PopoverDirective;
  常量 _Popover为Popover;
  常量 ElPopover为_Popover;
  常量 ElPopoverDirective为_PopoverDirective;

  常量 progressProps为buildProps({
    type: {
      type: String,
      default: "line",
      values: ["line", "circle", "dashboard"]
    },
    percentage: {
      type: Number,
      default: 0,
      validator: (val) => val >= 0 与 val <= 100
    },
    status: {
      type: String,
      default: "",
      values: ["", "success", "exception", "warning"]
    },
    indeterminate: {
      type: Boolean,
      default: false
    },
    duration: {
      type: Number,
      default: 3
    },
    strokeWidth: {
      type: Number,
      default: 6
    },
    strokeLinecap: {
      type: definePropType(String),
      default: "round"
    },
    textInside: {
      type: Boolean,
      default: false
    },
    宽度: {
      type: Number,
      default: 126
    },
    showText: {
      type: Boolean,
      default: true
    },
    color: {
      type: definePropType([
        String,
        Array,
        Function
      ]),
      default: ""
    },
    变量循环mat: {
      type: definePropType(Function),
      default: (percentage) => `${percentage}%`
    }
  });

  常量 _sfc_main$F为vue.defineComponent({
    名字: "ElProgress",
    components: {
      ElIcon,
      CircleCheck: circleCheck,
      CircleClose: circleClose,
      Check: check,
      Close: close$2,
      WarningFilled: warningFilled
    },
    props: progressProps,
    setup(props) {
      常量 ns为useNamespace("progress");
      常量 barStyle为vue.computed(() => ({
        宽度: `${props.percentage}%`,
        animationDuration: `${props.duration}s`,
        backgroundColor: getCurrentColor(props.percentage)
      }));
      常量 relativeStrokeWidth为vue.computed(() => (props.strokeWidth / props.宽度 * 100).toFixed(1));
      常量 radius为vue.computed(() => {
        如果 (props.type === "circle" 或 props.type === "dashboard") {
          返回 Number.parseInt(`${50 - Number.parseFloat(relativeStrokeWidth.value) / 2}`, 10);
        } 否则 {
          返回 0;
        }
      });
      常量 trackPath为vue.computed(() => {
        常量 r为radius.value;
        常量 isDashboard为props.type === "dashboard";
        返回 `
          M 50 50
          m 0 ${isDashboard ? "" : "-"}${r}
          a ${r} ${r} 0 1 1 0 ${isDashboard ? "-" : ""}${r * 2}
          a ${r} ${r} 0 1 1 0 ${isDashboard ? "" : "-"}${r * 2}
          `;
      });
      常量 perimeter为vue.computed(() => 2 * Math.PI * radius.value);
      常量 rate为vue.computed(() => props.type === "dashboard" ? 0.75 : 1);
      常量 strokeDashoffset为vue.computed(() => {
        常量 offset为-1 * perimeter.value * (1 - rate.value) / 2;
        返回 `${offset}px`;
      });
      常量 trailPathStyle为vue.computed(() => ({
        strokeDasharray: `${perimeter.value * rate.value}px, ${perimeter.value}px`,
        strokeDashoffset: strokeDashoffset.value
      }));
      常量 circlePathStyle为vue.computed(() => ({
        strokeDasharray: `${perimeter.value * rate.value * (props.percentage / 100)}px, ${perimeter.value}px`,
        strokeDashoffset: strokeDashoffset.value,
        transition: "stroke-dasharray 0.6s ease 0s, stroke 0.6s ease"
      }));
      常量 stroke为vue.computed(() => {
        让 ret;
        如果 (props.color) {
          ret为getCurrentColor(props.percentage);
        } 否则 {
          主分支 (props.status) {
            子分支 "success":
              ret为"#13ce66";
              break;
            子分支 "exception":
              ret为"#ff4949";
              break;
            子分支 "warning":
              ret为"#e6a23c";
              break;
            default:
              ret为"#20a0ff";
          }
        }
        返回 ret;
      });
      常量 statusIcon为vue.computed(() => {
        如果 (props.status === "warning") {
          返回 warningFilled;
        }
        如果 (props.type === "line") {
          返回 props.status === "success" ? circleCheck : circleClose;
        } 否则 {
          返回 props.status === "success" ? check : close$2;
        }
      });
      常量 progressTextSize为vue.computed(() => {
        返回 props.type === "line" ? 12 + props.strokeWidth * 0.4 : props.宽度 * 0.111111 + 2;
      });
      常量 上下文为vue.computed(() => props.变量循环mat(props.percentage));
      常量 getCurrentColor为(percentage) => {
        变量 _a;
        常量 { color }为props;
        如果 (类型是 color === "函数") {
          返回 color(percentage);
        } 否则 如果 (类型是 color === "string") {
          返回 color;
        } 否则 {
          常量 span为100 / color.长度;
          常量 seriesColors为color.map((seriesColor, index) => {
            如果 (类型是 seriesColor === "string") {
              返回 {
                color: seriesColor,
                percentage: (index + 1) * span
              };
            }
            返回 seriesColor;
          });
          常量 colors为seriesColors.sort((a, b) => a.percentage - b.percentage);
          变量循环 (常量 color2 of colors) {
            如果 (color2.percentage大于percentage)
              返回 color2.color;
          }
          返回 (_a为colors[colors.长度 - 1]) == null ? void 0 : _a.color;
        }
      };
      常量 slotData为vue.computed(() => {
        返回 {
          percentage: props.percentage
        };
      });
      返回 {
        ns,
        barStyle,
        relativeStrokeWidth,
        radius,
        trackPath,
        perimeter,
        rate,
        strokeDashoffset,
        trailPathStyle,
        circlePathStyle,
        stroke,
        statusIcon,
        progressTextSize,
        上下文,
        slotData
      };
    }
  });
  常量 _hoisted_1$i为["aria-valuenow"];
  常量 _hoisted_2$d为{ viewBox: "0 0 100 100" };
  常量 _hoisted_3$6为["d", "stroke-宽度"];
  常量 _hoisted_4$5为["d", "stroke", "stroke-linecap", "stroke-宽度"];
  常量 _hoisted_5$4为{ key: 0 };
  函数 _sfc_render$n(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    返回 vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass([
        _ctx.ns.b(),
        _ctx.ns.m(_ctx.type),
        _ctx.ns.is(_ctx.status),
        {
          [_ctx.ns.m("without-text")]: 不_ctx.showText,
          [_ctx.ns.m("text-inside")]: _ctx.textInside
        }
      ]),
      role: "progressbar",
      "aria-valuenow": _ctx.percentage,
      "aria-valuemin": "0",
      "aria-valuemax": "100"
    }, [
      _ctx.type === "line" ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: vue.normalizeClass(_ctx.ns.b("bar"))
      }, [
        vue.createElementVNode("div", {
          class: vue.normalizeClass(_ctx.ns.be("bar", "outer")),
          style: vue.normalizeStyle({ height: `${_ctx.strokeWidth}px` })
        }, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass([
              _ctx.ns.be("bar", "inner"),
              { [_ctx.ns.bem("bar", "inner", "indeterminate")]: _ctx.indeterminate }
            ]),
            style: vue.normalizeStyle(_ctx.barStyle)
          }, [
            (_ctx.showText 或 _ctx.$slots.default) 与 _ctx.textInside ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 0,
              class: vue.normalizeClass(_ctx.ns.be("bar", "innerText"))
            }, [
              vue.renderSlot(_ctx.$slots, "default", vue.normalizeProps(vue.guardReactiveProps(_ctx.slotData)), () => [
                vue.createElementVNode("span", null, vue.toDisplayString(_ctx.上下文), 1)
              ])
            ], 2)) : vue.createCommentVNode("v-如果", true)
          ], 6)
        ], 6)
      ], 2)) : (vue.openBlock(), vue.createElementBlock("div", {
        key: 1,
        class: vue.normalizeClass(_ctx.ns.b("circle")),
        style: vue.normalizeStyle({ height: `${_ctx.宽度}px`, 宽度: `${_ctx.宽度}px` })
      }, [
        (vue.openBlock(), vue.createElementBlock("svg", _hoisted_2$d, [
          vue.createElementVNode("path", {
            class: vue.normalizeClass(_ctx.ns.be("circle", "track")),
            d: _ctx.trackPath,
            stroke: "变量(--el-fill-color-light, #e5e9f2)",
            "stroke-宽度": _ctx.relativeStrokeWidth,
            fill: "none",
            style: vue.normalizeStyle(_ctx.trailPathStyle)
          }, null, 14, _hoisted_3$6),
          vue.createElementVNode("path", {
            class: vue.normalizeClass(_ctx.ns.be("circle", "path")),
            d: _ctx.trackPath,
            stroke: _ctx.stroke,
            fill: "none",
            "stroke-linecap": _ctx.strokeLinecap,
            "stroke-宽度": _ctx.percentage ? _ctx.relativeStrokeWidth : 0,
            style: vue.normalizeStyle(_ctx.circlePathStyle)
          }, null, 14, _hoisted_4$5)
        ]))
      ], 6)),
      (_ctx.showText 或 _ctx.$slots.default) 与 不_ctx.textInside ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 2,
        class: vue.normalizeClass(_ctx.ns.e("text")),
        style: vue.normalizeStyle({ fontSize: `${_ctx.progressTextSize}px` })
      }, [
        vue.renderSlot(_ctx.$slots, "default", vue.normalizeProps(vue.guardReactiveProps(_ctx.slotData)), () => [
          不_ctx.status ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_5$4, vue.toDisplayString(_ctx.上下文), 1)) : (vue.openBlock(), vue.createBlock(_component_el_icon, { key: 1 }, {
            default: vue.withCtx(() => [
              (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.statusIcon)))
            ]),
            _: 1
          }))
        ])
      ], 6)) : vue.createCommentVNode("v-如果", true)
    ], 10, _hoisted_1$i);
  }
  变量 Progress为/* @__PURE__ */ _输出出口_sfc(_sfc_main$F, [["render", _sfc_render$n], ["__file", "progress.vue"]]);

  常量 ElProgress为withInstall(Progress);

  常量 rateProps为buildProps({
    modelValue: {
      type: Number,
      default: 0
    },
    lowThreshold: {
      type: Number,
      default: 2
    },
    highThreshold: {
      type: Number,
      default: 4
    },
    max: {
      type: Number,
      default: 5
    },
    colors: {
      type: definePropType([Array, Object]),
      default: () => mutable(["", "", ""])
    },
    voidColor: {
      type: String,
      default: ""
    },
    disabledVoidColor: {
      type: String,
      default: ""
    },
    icons: {
      type: definePropType([Array, Object]),
      default: () => [starFilled, starFilled, starFilled]
    },
    voidIcon: {
      type: iconPropType,
      default: () => star
    },
    disabledVoidIcon: {
      type: iconPropType,
      default: () => starFilled
    },
    disabled: {
      type: Boolean,
      default: false
    },
    allowHalf: {
      type: Boolean,
      default: false
    },
    showText: {
      type: Boolean,
      default: false
    },
    showScore: {
      type: Boolean,
      default: false
    },
    textColor: {
      type: String,
      default: ""
    },
    texts: {
      type: definePropType(Array),
      default: () => mutable([
        "Extremely bad",
        "Disappo整数ed",
        "Fair",
        "Satisfied",
        "Surprise"
      ])
    },
    scoreTemplate: {
      type: String,
      default: "{value}"
    },
    size: {
      type: String,
      validator: isValidComponentSize
    }
  });
  常量 rateEmits为{
    change: (value) => 类型是 value === "number",
    [UPDATE_MODEL_EVENT]: (value) => 类型是 value === "number"
  };

  常量 _hoisted_1$h为["aria-valuenow", "aria-valuetext", "aria-valuemax"];
  常量 _hoisted_2$c为["onMousemove", "onClick"];
  常量 __default__$d为{
    名字: "ElRate"
  };
  常量 _sfc_main$E为/* @__PURE__ */ vue.defineComponent({
    ...__default__$d,
    props: rateProps,
    emits: rateEmits,
    setup(__props, { expose, emit }) {
      常量 props为__props;
      函数 getValueFromMap(value, map) {
        常量 isExcludedObject为(val) => isObject$1(val);
        常量 matchedKeys为Object.keys(map).map((key) => +key).filter((key) => {
          常量 val为map[key];
          常量 excluded为isExcludedObject(val) ? val.excluded : false;
          返回 excluded ? value < key : value <= key;
        }).sort((a, b) => a - b);
        常量 matchedValue为map[matchedKeys[0]];
        返回 isExcludedObject(matchedValue) 与 matchedValue.value 或 matchedValue;
      }
      常量 变量循环mContext为vue.inject(变量循环mContextKey, void 0);
      常量 rateSize为useSize();
      常量 ns为useNamespace("rate");
      常量 currentValue为vue.ref(props.modelValue);
      常量 hoverIndex为vue.ref(-1);
      常量 po整数erAtLeftHalf为vue.ref(true);
      常量 rateClasses为vue.computed(() => [ns.b(), ns.m(rateSize.value)]);
      常量 rateDisabled为vue.computed(() => props.disabled 或 (变量循环mContext == null ? void 0 : 变量循环mContext.disabled));
      常量 rateStyles为vue.computed(() => {
        返回 {
          "--el-rate-void-color": props.voidColor,
          "--el-rate-disabled-void-color": props.disabledVoidColor,
          "--el-rate-fill-color": activeColor.value
        };
      });
      常量 text为vue.computed(() => {
        让 result为"";
        如果 (props.showScore) {
          result为props.scoreTemplate.replace(/\{\s*value\s*\}/, rateDisabled.value ? `${props.modelValue}` : `${currentValue.value}`);
        } 否则 如果 (props.showText) {
          result为props.texts[Math.ceil(currentValue.value) - 1];
        }
        返回 result;
      });
      常量 valueDecimal为vue.computed(() => props.modelValue * 100 - Math.floor(props.modelValue) * 100);
      常量 colorMap为vue.computed(() => isArray(props.colors) ? {
        [props.lowThreshold]: props.colors[0],
        [props.highThreshold]: { value: props.colors[1], excluded: true },
        [props.max]: props.colors[2]
      } : props.colors);
      常量 activeColor为vue.computed(() => {
        常量 color为getValueFromMap(currentValue.value, colorMap.value);
        返回 isObject$1(color) ? "" : color;
      });
      常量 decimalStyle为vue.computed(() => {
        让 宽度为"";
        如果 (rateDisabled.value) {
          宽度为`${valueDecimal.value}%`;
        } 否则 如果 (props.allowHalf) {
          宽度为"50%";
        }
        返回 {
          color: activeColor.value,
          宽度
        };
      });
      常量 componentMap为vue.computed(() => isArray(props.icons) ? {
        [props.lowThreshold]: props.icons[0],
        [props.highThreshold]: {
          value: props.icons[1],
          excluded: true
        },
        [props.max]: props.icons[2]
      } : props.icons);
      常量 decimalIconComponent为vue.computed(() => getValueFromMap(props.modelValue, componentMap.value));
      常量 voidComponent为vue.computed(() => rateDisabled.value ? props.disabledVoidIcon : props.voidIcon);
      常量 activeComponent为vue.computed(() => getValueFromMap(currentValue.value, componentMap.value));
      常量 iconComponents为vue.computed(() => {
        常量 result为Array.从({ 长度: props.max });
        常量 threshold为currentValue.value;
        result.fill(activeComponent.value, 0, threshold);
        result.fill(voidComponent.value, threshold, props.max);
        返回 result;
      });
      函数 showDecimalIcon(item) {
        常量 showWhenDisabled为rateDisabled.value 与 valueDecimal.value大于0 与 item - 1 < props.modelValue 与 item大于props.modelValue;
        常量 showWhenAllowHalf为props.allowHalf 与 po整数erAtLeftHalf.value 与 item - 0.5 <= currentValue.value 与 item大于currentValue.value;
        返回 showWhenDisabled 或 showWhenAllowHalf;
      }
      函数 selectValue(value) {
        如果 (rateDisabled.value) {
          返回;
        }
        如果 (props.allowHalf 与 po整数erAtLeftHalf.value) {
          emit(UPDATE_MODEL_EVENT, currentValue.value);
          如果 (props.modelValue 不== currentValue.value) {
            emit("change", currentValue.value);
          }
        } 否则 {
          emit(UPDATE_MODEL_EVENT, value);
          如果 (props.modelValue 不== value) {
            emit("change", value);
          }
        }
      }
      函数 handleKey(e) {
        如果 (rateDisabled.value) {
          返回;
        }
        让 _currentValue为currentValue.value;
        常量 code为e.code;
        如果 (code === EVENT_CODE.up 或 code === EVENT_CODE.right) {
          如果 (props.allowHalf) {
            _currentValue += 0.5;
          } 否则 {
            _currentValue += 1;
          }
          e.stopPropagation();
          e.preventDefault();
        } 否则 如果 (code === EVENT_CODE.left 或 code === EVENT_CODE.down) {
          如果 (props.allowHalf) {
            _currentValue -= 0.5;
          } 否则 {
            _currentValue -= 1;
          }
          e.stopPropagation();
          e.preventDefault();
        }
        _currentValue为_currentValue < 0 ? 0 : _currentValue;
        _currentValue为_currentValue大于props.max ? props.max : _currentValue;
        emit(UPDATE_MODEL_EVENT, _currentValue);
        emit("change", _currentValue);
        返回 _currentValue;
      }
      函数 setCurrentValue(value, event) {
        如果 (rateDisabled.value) {
          返回;
        }
        如果 (props.allowHalf) {
          让 target为event.target;
          如果 (hasClass(target, ns.e("item"))) {
            target为target.querySelector(`.${ns.e("icon")}`);
          }
          如果 (target.clientWidth === 0 或 hasClass(target, ns.e("decimal"))) {
            target为target.parentNode;
          }
          po整数erAtLeftHalf.value为event.offsetX * 2 <= target.clientWidth;
          currentValue.value为po整数erAtLeftHalf.value ? value - 0.5 : value;
        } 否则 {
          currentValue.value为value;
        }
        hoverIndex.value为value;
      }
      函数 resetCurrentValue() {
        如果 (rateDisabled.value) {
          返回;
        }
        如果 (props.allowHalf) {
          po整数erAtLeftHalf.value为props.modelValue 不== Math.floor(props.modelValue);
        }
        currentValue.value为props.modelValue;
        hoverIndex.value为-1;
      }
      vue.watch(() => props.modelValue, (val) => {
        currentValue.value为val;
        po整数erAtLeftHalf.value为props.modelValue 不== Math.floor(props.modelValue);
      });
      如果 (不props.modelValue) {
        emit(UPDATE_MODEL_EVENT, 0);
      }
      expose({
        setCurrentValue,
        resetCurrentValue
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([vue.unref(rateClasses), vue.unref(ns).is("disabled", vue.unref(rateDisabled))]),
          role: "slider",
          "aria-valuenow": currentValue.value,
          "aria-valuetext": vue.unref(text),
          "aria-valuemin": "0",
          "aria-valuemax": _ctx.max,
          tabindex: "0",
          style: vue.normalizeStyle(vue.unref(rateStyles)),
          onKeydown: handleKey
        }, [
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.max, (item, key) => {
            返回 vue.openBlock(), vue.createElementBlock("span", {
              key,
              class: vue.normalizeClass(vue.unref(ns).e("item")),
              onMousemove: ($event) => setCurrentValue(item, $event),
              onMouseleave: resetCurrentValue,
              onClick: ($event) => selectValue(item)
            }, [
              vue.createVNode(vue.unref(ElIcon), {
                class: vue.normalizeClass([
                  vue.unref(ns).e("icon"),
                  { hover: hoverIndex.value === item },
                  vue.unref(ns).is("active", item <= currentValue.value)
                ])
              }, {
                default: vue.withCtx(() => [
                  不showDecimalIcon(item) ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(iconComponents)[item - 1]), { key: 0 })) : vue.createCommentVNode("v-如果", true),
                  showDecimalIcon(item) ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                    key: 1,
                    style: vue.normalizeStyle(vue.unref(decimalStyle)),
                    class: vue.normalizeClass([vue.unref(ns).e("icon"), vue.unref(ns).e("decimal")])
                  }, {
                    default: vue.withCtx(() => [
                      (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(vue.unref(decimalIconComponent))))
                    ]),
                    _: 1
                  }, 8, ["style", "class"])) : vue.createCommentVNode("v-如果", true)
                ]),
                _: 2
              }, 1032, ["class"])
            ], 42, _hoisted_2$c);
          }), 128)),
          _ctx.showText 或 _ctx.showScore ? (vue.openBlock(), vue.createElementBlock("span", {
            key: 0,
            class: vue.normalizeClass(vue.unref(ns).e("text"))
          }, vue.toDisplayString(vue.unref(text)), 3)) : vue.createCommentVNode("v-如果", true)
        ], 46, _hoisted_1$h);
      };
    }
  });
  变量 Rate为/* @__PURE__ */ _输出出口_sfc(_sfc_main$E, [["__file", "rate.vue"]]);

  常量 ElRate为withInstall(Rate);

  常量 IconMap为{
    success: "icon-success",
    warning: "icon-warning",
    error: "icon-error",
    info: "icon-info"
  };
  常量 IconComponentMap为{
    [IconMap.success]: circleCheckFilled,
    [IconMap.warning]: warningFilled,
    [IconMap.error]: circleCloseFilled,
    [IconMap.info]: infoFilled
  };
  常量 resultProps为buildProps({
    标题: {
      type: String,
      default: ""
    },
    subTitle: {
      type: String,
      default: ""
    },
    icon: {
      values: ["success", "warning", "info", "error"],
      default: "info"
    }
  });

  常量 COMPONENT_NAME$3为"ElResult";
  常量 _sfc_main$D为vue.defineComponent({
    名字: COMPONENT_NAME$3,
    props: resultProps,
    setup(props, { slots }) {
      常量 ns为useNamespace("result");
      useDeprecated({
        scope: COMPONENT_NAME$3,
        type: "Slot",
        从: "subTitle",
        replacement: "sub-标题",
        version: "2.1.3",
        ref: "https://github.com/element-plus/element-plus/pull/6636/"
      }, vue.computed(() => 不不slots.subTitle));
      常量 resultIcon为vue.computed(() => {
        常量 icon为props.icon;
        常量 iconClass为icon 与 IconMap[icon] ? IconMap[icon] : "icon-info";
        常量 iconComponent为IconComponentMap[iconClass] 或 IconComponentMap["icon-info"];
        返回 {
          class: iconClass,
          component: iconComponent
        };
      });
      返回 {
        ns,
        resultIcon
      };
    }
  });
  函数 _sfc_render$m(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass(_ctx.ns.b())
    }, [
      vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.ns.e("icon"))
      }, [
        vue.renderSlot(_ctx.$slots, "icon", {}, () => [
          _ctx.resultIcon.component ? (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.resultIcon.component), {
            key: 0,
            class: vue.normalizeClass(_ctx.resultIcon.class)
          }, null, 8, ["class"])) : vue.createCommentVNode("v-如果", true)
        ])
      ], 2),
      _ctx.标题 或 _ctx.$slots.标题 ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: vue.normalizeClass(_ctx.ns.e("标题"))
      }, [
        vue.renderSlot(_ctx.$slots, "标题", {}, () => [
          vue.createElementVNode("p", null, vue.toDisplayString(_ctx.标题), 1)
        ])
      ], 2)) : vue.createCommentVNode("v-如果", true),
      _ctx.subTitle 或 _ctx.$slots["sub-标题"] ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 1,
        class: vue.normalizeClass(_ctx.ns.e("sub标题"))
      }, [
        vue.renderSlot(_ctx.$slots, "sub-标题", {}, () => [
          vue.createElementVNode("p", null, vue.toDisplayString(_ctx.subTitle), 1)
        ])
      ], 2)) : vue.createCommentVNode("v-如果", true),
      _ctx.$slots.extra ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 2,
        class: vue.normalizeClass(_ctx.ns.e("extra"))
      }, [
        vue.renderSlot(_ctx.$slots, "extra")
      ], 2)) : vue.createCommentVNode("v-如果", true)
    ], 2);
  }
  变量 Result为/* @__PURE__ */ _输出出口_sfc(_sfc_main$D, [["render", _sfc_render$m], ["__file", "result.vue"]]);

  常量 ElResult为withInstall(Result);

  常量 rowProps为buildProps({
    tag: {
      type: String,
      default: "div"
    },
    gutter: {
      type: Number,
      default: 0
    },
    just如果y: {
      type: String,
      values: ["start", "center", "end", "space-around", "space-between", "space-evenly"],
      default: "start"
    },
    align: {
      type: String,
      values: ["top", "middle", "bottom"],
      default: "top"
    }
  });
  常量 Row为vue.defineComponent({
    名字: "ElRow",
    props: rowProps,
    setup(props, {
      slots
    }) {
      常量 ns为useNamespace("row");
      常量 gutter为vue.computed(() => props.gutter);
      vue.provide(rowContextKey, {
        gutter
      });
      常量 style为vue.computed(() => {
        常量 styles为{
          marginLeft: "",
          marginRight: ""
        };
        如果 (props.gutter) {
          styles.marginLeft为`-${props.gutter / 2}px`;
          styles.marginRight为styles.marginLeft;
        }
        返回 styles;
      });
      返回 () => vue.createVNode(props.tag, {
        "class": [ns.b(), ns.is(`just如果y-${props.just如果y}`, props.just如果y 不== "start"), ns.is(`align-${props.align}`, props.align 不== "top")],
        "style": style.value
      }, {
        default: () => {
          变量 _a;
          返回 [(_a为slots.default) == null ? void 0 : _a.call(slots)];
        }
      });
    }
  });

  常量 ElRow为withInstall(Row);

  变量 safeIsNaN为Number.isNaN 或 函数 ponyfill(value) {
    返回 类型是 value === "number" 与 value 不== value;
  };
  函数 isEqual(first, second) {
    如果 (first === second) {
      返回 true;
    }
    如果 (safeIsNaN(first) 与 safeIsNaN(second)) {
      返回 true;
    }
    返回 false;
  }
  函数 areInputsEqual(newInputs, lastInputs) {
    如果 (newInputs.长度 不== lastInputs.长度) {
      返回 false;
    }
    变量循环 (变量 i为0; i < newInputs.长度; i加一) {
      如果 (不isEqual(newInputs[i], lastInputs[i])) {
        返回 false;
      }
    }
    返回 true;
  }
  函数 memoizeOne(resultFn, isEqual2) {
    如果 (isEqual2 === void 0) {
      isEqual2为areInputsEqual;
    }
    变量 cache为null;
    函数 memoized() {
      变量 newArgs为[];
      变量循环 (变量 _i为0; _i < arguments.长度; _i加一) {
        newArgs[_i]为arguments[_i];
      }
      如果 (cache 与 cache.lastThis === this 与 isEqual2(newArgs, cache.lastArgs)) {
        返回 cache.lastResult;
      }
      变量 lastResult为resultFn.apply(this, newArgs);
      cache为{
        lastResult,
        lastArgs: newArgs,
        lastThis: this
      };
      返回 lastResult;
    }
    memoized.clear为函数 clear() {
      cache为null;
    };
    返回 memoized;
  }

  常量 useCache为() => {
    常量 vm为vue.getCurrentInstance();
    常量 props为vm.proxy.$props;
    返回 vue.computed(() => {
      常量 _getItemStyleCache为(_, __, ___) => ({});
      返回 props.perfMode ? memoize(_getItemStyleCache) : memoizeOne(_getItemStyleCache);
    });
  };

  常量 DEFAULT_DYNAMIC_LIST_ITEM_SIZE为50;
  常量 ITEM_RENDER_EVT为"item-rendered";
  常量 SCROLL_EVT为"scroll";
  常量 FORWARD为"变量循环ward";
  常量 BACKWARD为"backward";
  常量 AUTO_ALIGNMENT为"auto";
  常量 SMART_ALIGNMENT为"smart";
  常量 START_ALIGNMENT为"start";
  常量 CENTERED_ALIGNMENT为"center";
  常量 END_ALIGNMENT为"end";
  常量 HORIZONTAL为"horizontal";
  常量 VERTICAL为"vertical";
  常量 LTR为"ltr";
  常量 RTL为"rtl";
  常量 RTL_OFFSET_NAG为"negative";
  常量 RTL_OFFSET_POS_ASC为"positive-ascending";
  常量 RTL_OFFSET_POS_DESC为"positive-descending";
  常量 ScrollbarDirKey为{
    [HORIZONTAL]: "left",
    [VERTICAL]: "top"
  };
  常量 SCROLLBAR_MIN_SIZE为20;

  常量 LayoutKeys为{
    [HORIZONTAL]: "deltaX",
    [VERTICAL]: "deltaY"
  };
  常量 useWheel为({ atEndEdge, atStartEdge, layout }, onWheelDelta) => {
    让 frameHandle;
    让 offset为0;
    常量 hasReachedEdge为(offset2) => {
      常量 edgeReached为offset2 < 0 与 atStartEdge.value 或 offset2大于0 与 atEndEdge.value;
      返回 edgeReached;
    };
    常量 onWheel为(e) => {
      cAF(frameHandle);
      常量 newOffset为e[LayoutKeys[layout.value]];
      如果 (hasReachedEdge(offset) 与 hasReachedEdge(offset + newOffset))
        返回;
      offset += newOffset;
      如果 (不isFirefox()) {
        e.preventDefault();
      }
      frameHandle为rAF(() => {
        onWheelDelta(offset);
        offset为0;
      });
    };
    返回 {
      hasReachedEdge,
      onWheel
    };
  };
  变量 useWheel$1为useWheel;

  常量 itemSize为buildProp({
    type: definePropType([Number, Function]),
    required: true
  });
  常量 estimatedItemSize为buildProp({
    type: Number
  });
  常量 cache为buildProp({
    type: Number,
    default: 2
  });
  常量 direction为buildProp({
    type: String,
    values: ["ltr", "rtl"],
    default: "ltr"
  });
  常量 initScrollOffset为buildProp({
    type: Number,
    default: 0
  });
  常量 total为buildProp({
    type: Number,
    required: true
  });
  常量 layout为buildProp({
    type: String,
    values: ["horizontal", "vertical"],
    default: VERTICAL
  });
  常量 virtualizedProps为buildProps({
    className: {
      type: String,
      default: ""
    },
    containerElement: {
      type: definePropType([String, Object]),
      default: "div"
    },
    data: {
      type: definePropType(Array),
      default: () => mutable([])
    },
    direction,
    height: {
      type: [String, Number],
      required: true
    },
    innerElement: {
      type: [String, Object],
      default: "div"
    },
    style: {
      type: definePropType([Object, String, Array])
    },
    useIsScrolling: {
      type: Boolean,
      default: false
    },
    宽度: {
      type: [Number, String],
      required: false
    },
    perfMode: {
      type: Boolean,
      default: true
    },
    scrollbarAlwaysOn: {
      type: Boolean,
      default: false
    }
  });
  常量 virtualizedListProps为buildProps({
    cache,
    estimatedItemSize,
    layout,
    initScrollOffset,
    total,
    itemSize,
    ...virtualizedProps
  });
  常量 virtualizedGridProps为buildProps({
    columnCache: cache,
    columnWidth: itemSize,
    estimatedColumnWidth: estimatedItemSize,
    estimatedRowHeight: estimatedItemSize,
    initScrollLeft: initScrollOffset,
    initScrollTop: initScrollOffset,
    rowCache: cache,
    rowHeight: itemSize,
    totalColumn: total,
    totalRow: total,
    ...virtualizedProps
  });
  常量 virtualizedScrollbarProps为buildProps({
    layout,
    total,
    ratio: {
      type: Number,
      required: true
    },
    clientSize: {
      type: Number,
      required: true
    },
    scrollFrom: {
      type: Number,
      required: true
    },
    visible: Boolean
  });

  常量 getScrollDir为(prev, cur) => prev < cur ? FORWARD : BACKWARD;
  常量 isHorizontal为(dir) => dir === LTR 或 dir === RTL 或 dir === HORIZONTAL;
  常量 isRTL为(dir) => dir === RTL;
  让 cachedRTLResult为null;
  函数 getRTLOffsetType(recalculate为false) {
    如果 (cachedRTLResult === null 或 recalculate) {
      常量 outerDiv为document.createElement("div");
      常量 outerStyle为outerDiv.style;
      outerStyle.宽度为"50px";
      outerStyle.height为"50px";
      outerStyle.overflow为"scroll";
      outerStyle.direction为"rtl";
      常量 innerDiv为document.createElement("div");
      常量 innerStyle为innerDiv.style;
      innerStyle.宽度为"100px";
      innerStyle.height为"100px";
      outerDiv.appendChild(innerDiv);
      document.主体.appendChild(outerDiv);
      如果 (outerDiv.scrollLeft大于0) {
        cachedRTLResult为RTL_OFFSET_POS_DESC;
      } 否则 {
        outerDiv.scrollLeft为1;
        如果 (outerDiv.scrollLeft === 0) {
          cachedRTLResult为RTL_OFFSET_NAG;
        } 否则 {
          cachedRTLResult为RTL_OFFSET_POS_ASC;
        }
      }
      document.主体.removeChild(outerDiv);
      返回 cachedRTLResult;
    }
    返回 cachedRTLResult;
  }
  函数 renderThumbStyle({ move, size, bar }, layout) {
    常量 style为{};
    常量 translate为`translate${bar.axis}(${move}px)`;
    style[bar.size]为size;
    style.trans变量循环m为translate;
    style.msTrans变量循环m为translate;
    style.webkitTrans变量循环m为translate;
    如果 (layout === "horizontal") {
      style.height为"100%";
    } 否则 {
      style.宽度为"100%";
    }
    返回 style;
  }

  常量 ScrollBar为vue.defineComponent({
    名字: "ElVirtualScrollBar",
    props: virtualizedScrollbarProps,
    emits: ["scroll", "start-move", "stop-move"],
    setup(props, { emit }) {
      常量 GAP为4;
      常量 trackRef为vue.ref();
      常量 thumbRef为vue.ref();
      让 frameHandle为null;
      让 onselectstartStore为null;
      常量 state为vue.reactive({
        isDragging: false,
        traveled: 0
      });
      常量 bar为vue.computed(() => BAR_MAP[props.layout]);
      常量 trackSize为vue.computed(() => props.clientSize - GAP);
      常量 trackStyle为vue.computed(() => ({
        position: "absolute",
        宽度: HORIZONTAL === props.layout ? `${trackSize.value}px` : "6px",
        height: HORIZONTAL === props.layout ? "6px" : `${trackSize.value}px`,
        [ScrollbarDirKey[props.layout]]: "2px",
        right: "2px",
        bottom: "2px",
        borderRadius: "4px"
      }));
      常量 thumbSize为vue.computed(() => {
        常量 ratio为props.ratio;
        常量 clientSize为props.clientSize;
        如果 (ratio >= 100) {
          返回 Number.POSITIVE_INFINITY;
        }
        如果 (ratio >= 50) {
          返回 ratio * clientSize / 100;
        }
        常量 SCROLLBAR_MAX_SIZE为clientSize / 3;
        返回 Math.floor(Math.min(Math.max(ratio * clientSize, SCROLLBAR_MIN_SIZE), SCROLLBAR_MAX_SIZE));
      });
      常量 thumbStyle为vue.computed(() => {
        如果 (不Number.isFinite(thumbSize.value)) {
          返回 {
            display: "none"
          };
        }
        常量 thumb为`${thumbSize.value}px`;
        常量 style为renderThumbStyle({
          bar: bar.value,
          size: thumb,
          move: state.traveled
        }, props.layout);
        返回 style;
      });
      常量 totalSteps为vue.computed(() => Math.floor(props.clientSize - thumbSize.value - GAP));
      常量 attachEvents为() => {
        on(window, "mousemove", onMouseMove);
        on(window, "mouseup", onMouseUp);
        常量 thumbEl为vue.unref(thumbRef);
        如果 (不thumbEl)
          返回;
        onselectstartStore为document.onselectstart;
        document.onselectstart为() => false;
        on(thumbEl, "touchmove", onMouseMove);
        on(thumbEl, "touchend", onMouseUp);
      };
      常量 detachEvents为() => {
        off(window, "mousemove", onMouseMove);
        off(window, "mouseup", onMouseUp);
        document.onselectstart为onselectstartStore;
        onselectstartStore为null;
        常量 thumbEl为vue.unref(thumbRef);
        如果 (不thumbEl)
          返回;
        off(thumbEl, "touchmove", onMouseMove);
        off(thumbEl, "touchend", onMouseUp);
      };
      常量 onThumbMouseDown为(e) => {
        e.stopImmediatePropagation();
        如果 (e.ctrlKey 或 [1, 2].includes(e.button)) {
          返回;
        }
        state.isDragging为true;
        state[bar.value.axis]为e.currentTarget[bar.value.offset] - (e[bar.value.client] - e.currentTarget.getBoundingClientRect()[bar.value.direction]);
        emit("start-move");
        attachEvents();
      };
      常量 onMouseUp为() => {
        state.isDragging为false;
        state[bar.value.axis]为0;
        emit("stop-move");
        detachEvents();
      };
      常量 onMouseMove为(e) => {
        常量 { isDragging }为state;
        如果 (不isDragging)
          返回;
        如果 (不thumbRef.value 或 不trackRef.value)
          返回;
        常量 prevPage为state[bar.value.axis];
        如果 (不prevPage)
          返回;
        cAF(frameHandle);
        常量 offset为(trackRef.value.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]) * -1;
        常量 thumbClickPosition为thumbRef.value[bar.value.offset] - prevPage;
        常量 distance为offset - thumbClickPosition;
        frameHandle为rAF(() => {
          state.traveled为Math.max(0, Math.min(distance, totalSteps.value));
          emit("scroll", distance, totalSteps.value);
        });
      };
      常量 点击TrackHandler为(e) => {
        常量 offset为Math.abs(e.target.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]);
        常量 thumbHalf为thumbRef.value[bar.value.offset] / 2;
        常量 distance为offset - thumbHalf;
        state.traveled为Math.max(0, Math.min(distance, totalSteps.value));
        emit("scroll", distance, totalSteps.value);
      };
      常量 onScrollbarTouchStart为(e) => e.preventDefault();
      vue.watch(() => props.scrollFrom, (v) => {
        如果 (state.isDragging)
          返回;
        state.traveled为Math.ceil(v * totalSteps.value);
      });
      vue.onMounted(() => {
        如果 (不isClient)
          返回;
        on(trackRef.value, "touchstart", onScrollbarTouchStart);
        on(thumbRef.value, "touchstart", onThumbMouseDown);
      });
      vue.onBe变量循环eUnmount(() => {
        off(trackRef.value, "touchstart", onScrollbarTouchStart);
        detachEvents();
      });
      返回 () => {
        返回 vue.h("div", {
          role: "presentation",
          ref: trackRef,
          class: "el-virtual-scrollbar",
          style: trackStyle.value,
          onMousedown: vue.withMod如果iers(点击TrackHandler, ["stop", "prevent"])
        }, vue.h("div", {
          ref: thumbRef,
          class: "el-scrollbar__thumb",
          style: thumbStyle.value,
          onMousedown: onThumbMouseDown
        }, []));
      };
    }
  });
  变量 Scrollbar为ScrollBar;

  常量 createList为({
    名字,
    getOffset,
    getItemSize,
    getItemOffset,
    getEstimatedTotalSize,
    getStartIndexForOffset,
    getStopIndexForStartIndex,
    initCache,
    clearCache,
    validateProps
  }) => {
    返回 vue.defineComponent({
      名字: 名字 不= null ? 名字 : "ElVirtualList",
      props: virtualizedListProps,
      emits: [ITEM_RENDER_EVT, SCROLL_EVT],
      setup(props, { emit, expose }) {
        validateProps(props);
        常量 instance为vue.getCurrentInstance();
        常量 dynamicSizeCache为vue.ref(initCache(props, instance));
        常量 getItemStyleCache为useCache();
        常量 windowRef为vue.ref();
        常量 innerRef为vue.ref();
        常量 scrollbarRef为vue.ref();
        常量 states为vue.ref({
          isScrolling: false,
          scrollDir: "变量循环ward",
          scrollOffset: isNumber(props.initScrollOffset) ? props.initScrollOffset : 0,
          updateRequested: false,
          isScrollbarDragging: false,
          scrollbarAlwaysOn: props.scrollbarAlwaysOn
        });
        常量 itemsToRender为vue.computed(() => {
          常量 { total, cache }为props;
          常量 { isScrolling, scrollDir, scrollOffset }为vue.unref(states);
          如果 (total === 0) {
            返回 [0, 0, 0, 0];
          }
          常量 startIndex为getStartIndexForOffset(props, scrollOffset, vue.unref(dynamicSizeCache));
          常量 stopIndex为getStopIndexForStartIndex(props, startIndex, scrollOffset, vue.unref(dynamicSizeCache));
          常量 cacheBackward为不isScrolling 或 scrollDir === BACKWARD ? Math.max(1, cache) : 1;
          常量 cacheForward为不isScrolling 或 scrollDir === FORWARD ? Math.max(1, cache) : 1;
          返回 [
            Math.max(0, startIndex - cacheBackward),
            Math.max(0, Math.min(total - 1, stopIndex + cacheForward)),
            startIndex,
            stopIndex
          ];
        });
        常量 estimatedTotalSize为vue.computed(() => getEstimatedTotalSize(props, vue.unref(dynamicSizeCache)));
        常量 _isHorizontal为vue.computed(() => isHorizontal(props.layout));
        常量 windowStyle为vue.computed(() => [
          {
            position: "relative",
            [`overflow-${_isHorizontal.value ? "x" : "y"}`]: "scroll",
            WebkitOverflowScrolling: "touch",
            willChange: "trans变量循环m"
          },
          {
            direction: props.direction,
            height: isNumber(props.height) ? `${props.height}px` : props.height,
            宽度: isNumber(props.宽度) ? `${props.宽度}px` : props.宽度
          },
          props.style
        ]);
        常量 innerStyle为vue.computed(() => {
          常量 size为vue.unref(estimatedTotalSize);
          常量 horizontal为vue.unref(_isHorizontal);
          返回 {
            height: horizontal ? "100%" : `${size}px`,
            po整数erEvents: vue.unref(states).isScrolling ? "none" : void 0,
            宽度: horizontal ? `${size}px` : "100%"
          };
        });
        常量 clientSize为vue.computed(() => _isHorizontal.value ? props.宽度 : props.height);
        常量 { onWheel }为useWheel$1({
          atStartEdge: vue.computed(() => states.value.scrollOffset <= 0),
          atEndEdge: vue.computed(() => states.value.scrollOffset >= estimatedTotalSize.value),
          layout: vue.computed(() => props.layout)
        }, (offset) => {
          变量 _a, _b;
          (_b为(_a为scrollbarRef.value).onMouseUp) == null ? void 0 : _b.call(_a);
          scrollTo(Math.min(states.value.scrollOffset + offset, estimatedTotalSize.value - clientSize.value));
        });
        常量 emitEvents为() => {
          常量 { total }为props;
          如果 (total大于0) {
            常量 [cacheStart, cacheEnd, visibleStart, visibleEnd]为vue.unref(itemsToRender);
            emit(ITEM_RENDER_EVT, cacheStart, cacheEnd, visibleStart, visibleEnd);
          }
          常量 { scrollDir, scrollOffset, updateRequested }为vue.unref(states);
          emit(SCROLL_EVT, scrollDir, scrollOffset, updateRequested);
        };
        常量 scrollVertically为(e) => {
          常量 { clientHeight, scrollHeight, scrollTop }为e.currentTarget;
          常量 _states为vue.unref(states);
          如果 (_states.scrollOffset === scrollTop) {
            返回;
          }
          常量 scrollOffset为Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight));
          states.value为{
            ..._states,
            isScrolling: true,
            scrollDir: getScrollDir(_states.scrollOffset, scrollOffset),
            scrollOffset,
            updateRequested: false
          };
          vue.nextTick(resetIsScrolling);
        };
        常量 scrollHorizontally为(e) => {
          常量 { clientWidth, scrollLeft, scrollWidth }为e.currentTarget;
          常量 _states为vue.unref(states);
          如果 (_states.scrollOffset === scrollLeft) {
            返回;
          }
          常量 { direction }为props;
          让 scrollOffset为scrollLeft;
          如果 (direction === RTL) {
            主分支 (getRTLOffsetType()) {
              子分支 RTL_OFFSET_NAG: {
                scrollOffset为-scrollLeft;
                break;
              }
              子分支 RTL_OFFSET_POS_DESC: {
                scrollOffset为scrollWidth - clientWidth - scrollLeft;
                break;
              }
            }
          }
          scrollOffset为Math.max(0, Math.min(scrollOffset, scrollWidth - clientWidth));
          states.value为{
            ..._states,
            isScrolling: true,
            scrollDir: getScrollDir(_states.scrollOffset, scrollOffset),
            scrollOffset,
            updateRequested: false
          };
          vue.nextTick(resetIsScrolling);
        };
        常量 onScroll为(e) => {
          vue.unref(_isHorizontal) ? scrollHorizontally(e) : scrollVertically(e);
          emitEvents();
        };
        常量 onScrollbarScroll为(distanceToGo, totalSteps) => {
          常量 offset为(estimatedTotalSize.value - clientSize.value) / totalSteps * distanceToGo;
          scrollTo(Math.min(estimatedTotalSize.value - clientSize.value, offset));
        };
        常量 scrollTo为(offset) => {
          offset为Math.max(offset, 0);
          如果 (offset === vue.unref(states).scrollOffset) {
            返回;
          }
          states.value为{
            ...vue.unref(states),
            scrollOffset: offset,
            scrollDir: getScrollDir(vue.unref(states).scrollOffset, offset),
            updateRequested: true
          };
          vue.nextTick(resetIsScrolling);
        };
        常量 scrollToItem为(idx, alignment为AUTO_ALIGNMENT) => {
          常量 { scrollOffset }为vue.unref(states);
          idx为Math.max(0, Math.min(idx, props.total - 1));
          scrollTo(getOffset(props, idx, alignment, scrollOffset, vue.unref(dynamicSizeCache)));
        };
        常量 getItemStyle为(idx) => {
          常量 { direction, itemSize, layout }为props;
          常量 itemStyleCache为getItemStyleCache.value(clearCache 与 itemSize, clearCache 与 layout, clearCache 与 direction);
          让 style;
          如果 (hasOwn(itemStyleCache, String(idx))) {
            style为itemStyleCache[idx];
          } 否则 {
            常量 offset为getItemOffset(props, idx, vue.unref(dynamicSizeCache));
            常量 size为getItemSize(props, idx, vue.unref(dynamicSizeCache));
            常量 horizontal为vue.unref(_isHorizontal);
            常量 isRtl为direction === RTL;
            常量 offsetHorizontal为horizontal ? offset : 0;
            itemStyleCache[idx]为style为{
              position: "absolute",
              left: isRtl ? void 0 : `${offsetHorizontal}px`,
              right: isRtl ? `${offsetHorizontal}px` : void 0,
              top: 不horizontal ? `${offset}px` : 0,
              height: 不horizontal ? `${size}px` : "100%",
              宽度: horizontal ? `${size}px` : "100%"
            };
          }
          返回 style;
        };
        常量 resetIsScrolling为() => {
          states.value.isScrolling为false;
          vue.nextTick(() => {
            getItemStyleCache.value(-1, null, null);
          });
        };
        常量 resetScrollTop为() => {
          常量 window为windowRef.value;
          如果 (window) {
            window.scrollTop为0;
          }
        };
        vue.onMounted(() => {
          如果 (不isClient)
            返回;
          常量 { initScrollOffset }为props;
          常量 windowElement为vue.unref(windowRef);
          如果 (isNumber(initScrollOffset) 与 windowElement) {
            如果 (vue.unref(_isHorizontal)) {
              windowElement.scrollLeft为initScrollOffset;
            } 否则 {
              windowElement.scrollTop为initScrollOffset;
            }
          }
          emitEvents();
        });
        vue.onUpdated(() => {
          常量 { direction, layout }为props;
          常量 { scrollOffset, updateRequested }为vue.unref(states);
          常量 windowElement为vue.unref(windowRef);
          如果 (updateRequested 与 windowElement) {
            如果 (layout === HORIZONTAL) {
              如果 (direction === RTL) {
                主分支 (getRTLOffsetType()) {
                  子分支 "negative": {
                    windowElement.scrollLeft为-scrollOffset;
                    break;
                  }
                  子分支 "positive-ascending": {
                    windowElement.scrollLeft为scrollOffset;
                    break;
                  }
                  default: {
                    常量 { clientWidth, scrollWidth }为windowElement;
                    windowElement.scrollLeft为scrollWidth - clientWidth - scrollOffset;
                    break;
                  }
                }
              } 否则 {
                windowElement.scrollLeft为scrollOffset;
              }
            } 否则 {
              windowElement.scrollTop为scrollOffset;
            }
          }
        });
        常量 api为{
          clientSize,
          estimatedTotalSize,
          windowStyle,
          windowRef,
          innerRef,
          innerStyle,
          itemsToRender,
          scrollbarRef,
          states,
          getItemStyle,
          onScroll,
          onScrollbarScroll,
          onWheel,
          scrollTo,
          scrollToItem,
          resetScrollTop
        };
        expose({
          windowRef,
          innerRef,
          getItemStyleCache,
          scrollTo,
          scrollToItem,
          resetScrollTop,
          states
        });
        返回 api;
      },
      render(ctx) {
        变量 _a;
        常量 {
          $slots,
          className,
          clientSize,
          containerElement,
          data,
          getItemStyle,
          innerElement,
          itemsToRender,
          innerStyle,
          layout,
          total,
          onScroll,
          onScrollbarScroll,
          onWheel,
          states,
          useIsScrolling,
          windowStyle
        }为ctx;
        常量 [start, end]为itemsToRender;
        常量 Container为vue.resolveDynamicComponent(containerElement);
        常量 Inner为vue.resolveDynamicComponent(innerElement);
        常量 children为[];
        如果 (total大于0) {
          变量循环 (让 i为start; i <= end; i加一) {
            children.push((_a为$slots.default) == null ? void 0 : _a.call($slots, {
              data,
              key: i,
              index: i,
              isScrolling: useIsScrolling ? states.isScrolling : void 0,
              style: getItemStyle(i)
            }));
          }
        }
        常量 InnerNode为[
          vue.h(Inner, {
            style: innerStyle,
            ref: "innerRef"
          }, 不isString(Inner) ? {
            default: () => children
          } : children)
        ];
        常量 scrollbar为vue.h(Scrollbar, {
          ref: "scrollbarRef",
          clientSize,
          layout,
          onScroll: onScrollbarScroll,
          ratio: clientSize * 100 / this.estimatedTotalSize,
          scrollFrom: states.scrollOffset / (this.estimatedTotalSize - clientSize),
          total
        });
        常量 listContainer为vue.h(Container, {
          class: ["el-vl__window", className],
          style: windowStyle,
          onScroll,
          onWheel,
          ref: "windowRef",
          key: 0
        }, 不isString(Container) ? { default: () => [InnerNode] } : [InnerNode]);
        返回 vue.h("div", {
          key: 0,
          class: [
            "el-vl__wrapper",
            states.scrollbarAlwaysOn ? "always-on" : ""
          ]
        }, [listContainer, scrollbar]);
      }
    });
  };
  变量 createList$1为createList;

  常量 FixedSizeList为createList$1({
    名字: "ElFixedSizeList",
    getItemOffset: ({ itemSize }, index) => index * itemSize,
    getItemSize: ({ itemSize }) => itemSize,
    getEstimatedTotalSize: ({ total, itemSize }) => itemSize * total,
    getOffset: ({ height, total, itemSize, layout, 宽度 }, index, alignment, scrollOffset) => {
      常量 size为isHorizontal(layout) ? 宽度 : height;
      常量 lastItemOffset为Math.max(0, total * itemSize - size);
      常量 maxOffset为Math.min(lastItemOffset, index * itemSize);
      常量 minOffset为Math.max(0, (index + 1) * itemSize - size);
      如果 (alignment === SMART_ALIGNMENT) {
        如果 (scrollOffset >= minOffset - size 与 scrollOffset <= maxOffset + size) {
          alignment为AUTO_ALIGNMENT;
        } 否则 {
          alignment为CENTERED_ALIGNMENT;
        }
      }
      主分支 (alignment) {
        子分支 START_ALIGNMENT: {
          返回 maxOffset;
        }
        子分支 END_ALIGNMENT: {
          返回 minOffset;
        }
        子分支 CENTERED_ALIGNMENT: {
          常量 middleOffset为Math.round(minOffset + (maxOffset - minOffset) / 2);
          如果 (middleOffset < Math.ceil(size / 2)) {
            返回 0;
          } 否则 如果 (middleOffset大于lastItemOffset + Math.floor(size / 2)) {
            返回 lastItemOffset;
          } 否则 {
            返回 middleOffset;
          }
        }
        子分支 AUTO_ALIGNMENT:
        default: {
          如果 (scrollOffset >= minOffset 与 scrollOffset <= maxOffset) {
            返回 scrollOffset;
          } 否则 如果 (scrollOffset < minOffset) {
            返回 minOffset;
          } 否则 {
            返回 maxOffset;
          }
        }
      }
    },
    getStartIndexForOffset: ({ total, itemSize }, offset) => Math.max(0, Math.min(total - 1, Math.floor(offset / itemSize))),
    getStopIndexForStartIndex: ({ height, total, itemSize, layout, 宽度 }, startIndex, scrollOffset) => {
      常量 offset为startIndex * itemSize;
      常量 size为isHorizontal(layout) ? 宽度 : height;
      常量 numVisibleItems为Math.ceil((size + scrollOffset - offset) / itemSize);
      返回 Math.max(0, Math.min(total - 1, startIndex + numVisibleItems - 1));
    },
    initCache() {
      返回 void 0;
    },
    clearCache: true,
    validateProps() {
    }
  });
  变量 FixedSizeList$1为FixedSizeList;

  常量 getItemFromCache$1为(props, index, listCache) => {
    常量 { itemSize }为props;
    常量 { items, lastVisitedIndex }为listCache;
    如果 (index大于lastVisitedIndex) {
      让 offset为0;
      如果 (lastVisitedIndex >= 0) {
        常量 item为items[lastVisitedIndex];
        offset为item.offset + item.size;
      }
      变量循环 (让 i为lastVisitedIndex + 1; i <= index; i加一) {
        常量 size为itemSize(i);
        items[i]为{
          offset,
          size
        };
        offset += size;
      }
      listCache.lastVisitedIndex为index;
    }
    返回 items[index];
  };
  常量 findItem$1为(props, listCache, offset) => {
    常量 { items, lastVisitedIndex }为listCache;
    常量 lastVisitedOffset为lastVisitedIndex大于0 ? items[lastVisitedIndex].offset : 0;
    如果 (lastVisitedOffset >= offset) {
      返回 bs$1(props, listCache, 0, lastVisitedIndex, offset);
    }
    返回 es$1(props, listCache, Math.max(0, lastVisitedIndex), offset);
  };
  常量 bs$1为(props, listCache, low, high, offset) => {
    条件循环 (low <= high) {
      常量 mid为low + Math.floor((high - low) / 2);
      常量 currentOffset为getItemFromCache$1(props, mid, listCache).offset;
      如果 (currentOffset === offset) {
        返回 mid;
      } 否则 如果 (currentOffset < offset) {
        low为mid + 1;
      } 否则 如果 (currentOffset大于offset) {
        high为mid - 1;
      }
    }
    返回 Math.max(0, low - 1);
  };
  常量 es$1为(props, listCache, index, offset) => {
    常量 { total }为props;
    让 exponent为1;
    条件循环 (index < total 与 getItemFromCache$1(props, index, listCache).offset < offset) {
      index += exponent;
      exponent *= 2;
    }
    返回 bs$1(props, listCache, Math.floor(index / 2), Math.min(index, total - 1), offset);
  };
  常量 getEstimatedTotalSize为({ total }, { items, estimatedItemSize, lastVisitedIndex }) => {
    让 totalSizeOfMeasuredItems为0;
    如果 (lastVisitedIndex >= total) {
      lastVisitedIndex为total - 1;
    }
    如果 (lastVisitedIndex >= 0) {
      常量 item为items[lastVisitedIndex];
      totalSizeOfMeasuredItems为item.offset + item.size;
    }
    常量 numUnmeasuredItems为total - lastVisitedIndex - 1;
    常量 totalSizeOfUnmeasuredItems为numUnmeasuredItems * estimatedItemSize;
    返回 totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;
  };
  常量 DynamicSizeList为createList$1({
    名字: "ElDynamicSizeList",
    getItemOffset: (props, index, listCache) => getItemFromCache$1(props, index, listCache).offset,
    getItemSize: (_, index, { items }) => items[index].size,
    getEstimatedTotalSize,
    getOffset: (props, index, alignment, scrollOffset, listCache) => {
      常量 { height, layout, 宽度 }为props;
      常量 size为isHorizontal(layout) ? 宽度 : height;
      常量 item为getItemFromCache$1(props, index, listCache);
      常量 estimatedTotalSize为getEstimatedTotalSize(props, listCache);
      常量 maxOffset为Math.max(0, Math.min(estimatedTotalSize - size, item.offset));
      常量 minOffset为Math.max(0, item.offset - size + item.size);
      如果 (alignment === SMART_ALIGNMENT) {
        如果 (scrollOffset >= minOffset - size 与 scrollOffset <= maxOffset + size) {
          alignment为AUTO_ALIGNMENT;
        } 否则 {
          alignment为CENTERED_ALIGNMENT;
        }
      }
      主分支 (alignment) {
        子分支 START_ALIGNMENT: {
          返回 maxOffset;
        }
        子分支 END_ALIGNMENT: {
          返回 minOffset;
        }
        子分支 CENTERED_ALIGNMENT: {
          返回 Math.round(minOffset + (maxOffset - minOffset) / 2);
        }
        子分支 AUTO_ALIGNMENT:
        default: {
          如果 (scrollOffset >= minOffset 与 scrollOffset <= maxOffset) {
            返回 scrollOffset;
          } 否则 如果 (scrollOffset < minOffset) {
            返回 minOffset;
          } 否则 {
            返回 maxOffset;
          }
        }
      }
    },
    getStartIndexForOffset: (props, offset, listCache) => findItem$1(props, listCache, offset),
    getStopIndexForStartIndex: (props, startIndex, scrollOffset, listCache) => {
      常量 { height, total, layout, 宽度 }为props;
      常量 size为isHorizontal(layout) ? 宽度 : height;
      常量 item为getItemFromCache$1(props, startIndex, listCache);
      常量 maxOffset为scrollOffset + size;
      让 offset为item.offset + item.size;
      让 stopIndex为startIndex;
      条件循环 (stopIndex < total - 1 与 offset < maxOffset) {
        stopIndex加一;
        offset += getItemFromCache$1(props, stopIndex, listCache).size;
      }
      返回 stopIndex;
    },
    initCache({ estimatedItemSize为DEFAULT_DYNAMIC_LIST_ITEM_SIZE }, instance) {
      常量 cache为{
        items: {},
        estimatedItemSize,
        lastVisitedIndex: -1
      };
      cache.clearCacheAfterIndex为(index, 变量循环ceUpdate为true) => {
        变量 _a, _b;
        cache.lastVisitedIndex为Math.min(cache.lastVisitedIndex, index - 1);
        (_a为instance.exposed) == null ? void 0 : _a.getItemStyleCache(-1);
        如果 (变量循环ceUpdate) {
          (_b为instance.proxy) == null ? void 0 : _b.$变量循环ceUpdate();
        }
      };
      返回 cache;
    },
    clearCache: false,
    validateProps: ({ itemSize }) => {
    }
  });
  变量 DynamicSizeList$1为DynamicSizeList;

  常量 useGridWheel为({ atXEndEdge, atXStartEdge, atYEndEdge, atYStartEdge }, onWheelDelta) => {
    让 frameHandle为null;
    让 xOffset为0;
    让 yOffset为0;
    常量 hasReachedEdge为(x, y) => {
      常量 xEdgeReached为x < 0 与 atXStartEdge.value 或 x大于0 与 atXEndEdge.value;
      常量 yEdgeReached为y < 0 与 atYStartEdge.value 或 y大于0 与 atYEndEdge.value;
      返回 xEdgeReached 与 yEdgeReached;
    };
    常量 onWheel为(e) => {
      cAF(frameHandle);
      常量 x为e.deltaX;
      常量 y为e.deltaY;
      如果 (hasReachedEdge(xOffset, yOffset) 与 hasReachedEdge(xOffset + x, yOffset + y))
        返回;
      xOffset += x;
      yOffset += y;
      如果 (不isFirefox()) {
        e.preventDefault();
      }
      frameHandle为rAF(() => {
        onWheelDelta(xOffset, yOffset);
        xOffset为0;
        yOffset为0;
      });
    };
    返回 {
      hasReachedEdge,
      onWheel
    };
  };

  常量 createGrid为({
    名字,
    clearCache,
    getColumnPosition,
    getColumnStartIndexForOffset,
    getColumnStopIndexForStartIndex,
    getEstimatedTotalHeight,
    getEstimatedTotalWidth,
    getColumnOffset,
    getRowOffset,
    getRowPosition,
    getRowStartIndexForOffset,
    getRowStopIndexForStartIndex,
    initCache,
    validateProps
  }) => {
    返回 vue.defineComponent({
      名字: 名字 不= null ? 名字 : "ElVirtualList",
      props: virtualizedGridProps,
      emits: [ITEM_RENDER_EVT, SCROLL_EVT],
      setup(props, { emit, expose, slots }) {
        validateProps(props);
        常量 instance为vue.getCurrentInstance();
        常量 cache为vue.ref(initCache(props, instance));
        常量 windowRef为vue.ref();
        常量 hScrollbar为vue.ref();
        常量 vScrollbar为vue.ref();
        常量 innerRef为vue.ref(null);
        常量 states为vue.ref({
          isScrolling: false,
          scrollLeft: isNumber(props.initScrollLeft) ? props.initScrollLeft : 0,
          scrollTop: isNumber(props.initScrollTop) ? props.initScrollTop : 0,
          updateRequested: false,
          xAxisScrollDir: FORWARD,
          yAxisScrollDir: FORWARD
        });
        常量 getItemStyleCache为useCache();
        常量 parsedHeight为vue.computed(() => Number.parseInt(`${props.height}`, 10));
        常量 parsedWidth为vue.computed(() => Number.parseInt(`${props.宽度}`, 10));
        常量 columnsToRender为vue.computed(() => {
          常量 { totalColumn, totalRow, columnCache }为props;
          常量 { isScrolling, xAxisScrollDir, scrollLeft }为vue.unref(states);
          如果 (totalColumn === 0 或 totalRow === 0) {
            返回 [0, 0, 0, 0];
          }
          常量 startIndex为getColumnStartIndexForOffset(props, scrollLeft, vue.unref(cache));
          常量 stopIndex为getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, vue.unref(cache));
          常量 cacheBackward为不isScrolling 或 xAxisScrollDir === BACKWARD ? Math.max(1, columnCache) : 1;
          常量 cacheForward为不isScrolling 或 xAxisScrollDir === FORWARD ? Math.max(1, columnCache) : 1;
          返回 [
            Math.max(0, startIndex - cacheBackward),
            Math.max(0, Math.min(totalColumn - 1, stopIndex + cacheForward)),
            startIndex,
            stopIndex
          ];
        });
        常量 rowsToRender为vue.computed(() => {
          常量 { totalColumn, totalRow, rowCache }为props;
          常量 { isScrolling, yAxisScrollDir, scrollTop }为vue.unref(states);
          如果 (totalColumn === 0 或 totalRow === 0) {
            返回 [0, 0, 0, 0];
          }
          常量 startIndex为getRowStartIndexForOffset(props, scrollTop, vue.unref(cache));
          常量 stopIndex为getRowStopIndexForStartIndex(props, startIndex, scrollTop, vue.unref(cache));
          常量 cacheBackward为不isScrolling 或 yAxisScrollDir === BACKWARD ? Math.max(1, rowCache) : 1;
          常量 cacheForward为不isScrolling 或 yAxisScrollDir === FORWARD ? Math.max(1, rowCache) : 1;
          返回 [
            Math.max(0, startIndex - cacheBackward),
            Math.max(0, Math.min(totalRow - 1, stopIndex + cacheForward)),
            startIndex,
            stopIndex
          ];
        });
        常量 estimatedTotalHeight为vue.computed(() => getEstimatedTotalHeight(props, vue.unref(cache)));
        常量 estimatedTotalWidth为vue.computed(() => getEstimatedTotalWidth(props, vue.unref(cache)));
        常量 windowStyle为vue.computed(() => {
          变量 _a;
          返回 [
            {
              position: "relative",
              overflow: "hidden",
              WebkitOverflowScrolling: "touch",
              willChange: "trans变量循环m"
            },
            {
              direction: props.direction,
              height: isNumber(props.height) ? `${props.height}px` : props.height,
              宽度: isNumber(props.宽度) ? `${props.宽度}px` : props.宽度
            },
            (_a为props.style) 不= null ? _a : {}
          ];
        });
        常量 innerStyle为vue.computed(() => {
          常量 宽度为`${vue.unref(estimatedTotalWidth)}px`;
          常量 height为`${vue.unref(estimatedTotalHeight)}px`;
          返回 {
            height,
            po整数erEvents: vue.unref(states).isScrolling ? "none" : void 0,
            宽度
          };
        });
        常量 emitEvents为() => {
          常量 { totalColumn, totalRow }为props;
          如果 (totalColumn大于0 与 totalRow大于0) {
            常量 [
              columnCacheStart,
              columnCacheEnd,
              columnVisibleStart,
              columnVisibleEnd
            ]为vue.unref(columnsToRender);
            常量 [rowCacheStart, rowCacheEnd, rowVisibleStart, rowVisibleEnd]为vue.unref(rowsToRender);
            emit(ITEM_RENDER_EVT, {
              columnCacheStart,
              columnCacheEnd,
              rowCacheStart,
              rowCacheEnd,
              columnVisibleStart,
              columnVisibleEnd,
              rowVisibleStart,
              rowVisibleEnd
            });
          }
          常量 {
            scrollLeft,
            scrollTop,
            updateRequested,
            xAxisScrollDir,
            yAxisScrollDir
          }为vue.unref(states);
          emit(SCROLL_EVT, xAxisScrollDir, scrollLeft, yAxisScrollDir, scrollTop, updateRequested);
        };
        常量 onScroll为(e) => {
          常量 {
            clientHeight,
            clientWidth,
            scrollHeight,
            scrollLeft,
            scrollTop,
            scrollWidth
          }为e.currentTarget;
          常量 _states为vue.unref(states);
          如果 (_states.scrollTop === scrollTop 与 _states.scrollLeft === scrollLeft) {
            返回;
          }
          让 _scrollLeft为scrollLeft;
          如果 (isRTL(props.direction)) {
            主分支 (getRTLOffsetType()) {
              子分支 RTL_OFFSET_NAG:
                _scrollLeft为-scrollLeft;
                break;
              子分支 RTL_OFFSET_POS_DESC:
                _scrollLeft为scrollWidth - clientWidth - scrollLeft;
                break;
            }
          }
          states.value为{
            ..._states,
            isScrolling: true,
            scrollLeft: _scrollLeft,
            scrollTop: Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight)),
            updateRequested: false,
            xAxisScrollDir: getScrollDir(_states.scrollLeft, _scrollLeft),
            yAxisScrollDir: getScrollDir(_states.scrollTop, scrollTop)
          };
          vue.nextTick(resetIsScrolling);
          emitEvents();
        };
        常量 onVerticalScroll为(distance, totalSteps) => {
          常量 height为vue.unref(parsedHeight);
          常量 offset为(estimatedTotalHeight.value - height) / totalSteps * distance;
          scrollTo({
            scrollTop: Math.min(estimatedTotalHeight.value - height, offset)
          });
        };
        常量 onHorizontalScroll为(distance, totalSteps) => {
          常量 宽度为vue.unref(parsedWidth);
          常量 offset为(estimatedTotalWidth.value - 宽度) / totalSteps * distance;
          scrollTo({
            scrollLeft: Math.min(estimatedTotalWidth.value - 宽度, offset)
          });
        };
        常量 { onWheel }为useGridWheel({
          atXStartEdge: vue.computed(() => states.value.scrollLeft <= 0),
          atXEndEdge: vue.computed(() => states.value.scrollLeft >= estimatedTotalWidth.value),
          atYStartEdge: vue.computed(() => states.value.scrollTop <= 0),
          atYEndEdge: vue.computed(() => states.value.scrollTop >= estimatedTotalHeight.value)
        }, (x, y) => {
          变量 _a, _b, _c, _d;
          (_b为(_a为hScrollbar.value) == null ? void 0 : _a.onMouseUp) == null ? void 0 : _b.call(_a);
          (_d为(_c为hScrollbar.value) == null ? void 0 : _c.onMouseUp) == null ? void 0 : _d.call(_c);
          常量 宽度为vue.unref(parsedWidth);
          常量 height为vue.unref(parsedHeight);
          scrollTo({
            scrollLeft: Math.min(states.value.scrollLeft + x, estimatedTotalWidth.value - 宽度),
            scrollTop: Math.min(states.value.scrollTop + y, estimatedTotalHeight.value - height)
          });
        });
        常量 scrollTo为({
          scrollLeft为states.value.scrollLeft,
          scrollTop为states.value.scrollTop
        }) => {
          scrollLeft为Math.max(scrollLeft, 0);
          scrollTop为Math.max(scrollTop, 0);
          常量 _states为vue.unref(states);
          如果 (scrollTop === _states.scrollTop 与 scrollLeft === _states.scrollLeft) {
            返回;
          }
          states.value为{
            ..._states,
            xAxisScrollDir: getScrollDir(_states.scrollLeft, scrollLeft),
            yAxisScrollDir: getScrollDir(_states.scrollTop, scrollTop),
            scrollLeft,
            scrollTop,
            updateRequested: true
          };
          vue.nextTick(resetIsScrolling);
        };
        常量 scrollToItem为(rowIndex为0, columnIdx为0, alignment为AUTO_ALIGNMENT) => {
          常量 _states为vue.unref(states);
          columnIdx为Math.max(0, Math.min(columnIdx, props.totalColumn - 1));
          rowIndex为Math.max(0, Math.min(rowIndex, props.totalRow - 1));
          常量 scrollBarWidth为getScrollBarWidth();
          常量 _cache为vue.unref(cache);
          常量 estimatedHeight为getEstimatedTotalHeight(props, _cache);
          常量 estimatedWidth为getEstimatedTotalWidth(props, _cache);
          scrollTo({
            scrollLeft: getColumnOffset(props, columnIdx, alignment, _states.scrollLeft, _cache, estimatedWidth大于props.宽度 ? scrollBarWidth : 0),
            scrollTop: getRowOffset(props, rowIndex, alignment, _states.scrollTop, _cache, estimatedHeight大于props.height ? scrollBarWidth : 0)
          });
        };
        常量 getItemStyle为(rowIndex, columnIndex) => {
          常量 { columnWidth, direction, rowHeight }为props;
          常量 itemStyleCache为getItemStyleCache.value(clearCache 与 columnWidth, clearCache 与 rowHeight, clearCache 与 direction);
          常量 key为`${rowIndex},${columnIndex}`;
          如果 (hasOwn(itemStyleCache, key)) {
            返回 itemStyleCache[key];
          } 否则 {
            常量 [, left]为getColumnPosition(props, columnIndex, vue.unref(cache));
            常量 _cache为vue.unref(cache);
            常量 rtl为isRTL(direction);
            常量 [height, top]为getRowPosition(props, rowIndex, _cache);
            常量 [宽度]为getColumnPosition(props, columnIndex, _cache);
            itemStyleCache[key]为{
              position: "absolute",
              left: rtl ? void 0 : `${left}px`,
              right: rtl ? `${left}px` : void 0,
              top: `${top}px`,
              height: `${height}px`,
              宽度: `${宽度}px`
            };
            返回 itemStyleCache[key];
          }
        };
        常量 resetIsScrolling为() => {
          states.value.isScrolling为false;
          vue.nextTick(() => {
            getItemStyleCache.value(-1, null, null);
          });
        };
        vue.onMounted(() => {
          如果 (不isClient)
            返回;
          常量 { initScrollLeft, initScrollTop }为props;
          常量 windowElement为vue.unref(windowRef);
          如果 (windowElement) {
            如果 (isNumber(initScrollLeft)) {
              windowElement.scrollLeft为initScrollLeft;
            }
            如果 (isNumber(initScrollTop)) {
              windowElement.scrollTop为initScrollTop;
            }
          }
          emitEvents();
        });
        vue.onUpdated(() => {
          常量 { direction }为props;
          常量 { scrollLeft, scrollTop, updateRequested }为vue.unref(states);
          常量 windowElement为vue.unref(windowRef);
          如果 (updateRequested 与 windowElement) {
            如果 (direction === RTL) {
              主分支 (getRTLOffsetType()) {
                子分支 RTL_OFFSET_NAG: {
                  windowElement.scrollLeft为-scrollLeft;
                  break;
                }
                子分支 RTL_OFFSET_POS_ASC: {
                  windowElement.scrollLeft为scrollLeft;
                  break;
                }
                default: {
                  常量 { clientWidth, scrollWidth }为windowElement;
                  windowElement.scrollLeft为scrollWidth - clientWidth - scrollLeft;
                  break;
                }
              }
            } 否则 {
              windowElement.scrollLeft为Math.max(0, scrollLeft);
            }
            windowElement.scrollTop为Math.max(0, scrollTop);
          }
        });
        expose({
          windowRef,
          innerRef,
          getItemStyleCache,
          scrollTo,
          scrollToItem,
          states
        });
        常量 renderScrollbars为() => {
          常量 { totalColumn, totalRow }为props;
          常量 宽度为vue.unref(parsedWidth);
          常量 height为vue.unref(parsedHeight);
          常量 estimatedWidth为vue.unref(estimatedTotalWidth);
          常量 estimatedHeight为vue.unref(estimatedTotalHeight);
          常量 { scrollLeft, scrollTop }为vue.unref(states);
          常量 horizontalScrollbar为vue.h(Scrollbar, {
            ref: hScrollbar,
            clientSize: 宽度,
            layout: "horizontal",
            onScroll: onHorizontalScroll,
            ratio: 宽度 * 100 / estimatedWidth,
            scrollFrom: scrollLeft / (estimatedWidth - 宽度),
            total: totalRow,
            visible: true
          });
          常量 verticalScrollbar为vue.h(Scrollbar, {
            ref: vScrollbar,
            clientSize: height,
            layout: "vertical",
            onScroll: onVerticalScroll,
            ratio: height * 100 / estimatedHeight,
            scrollFrom: scrollTop / (estimatedHeight - height),
            total: totalColumn,
            visible: true
          });
          返回 {
            horizontalScrollbar,
            verticalScrollbar
          };
        };
        常量 renderItems为() => {
          变量 _a;
          常量 [columnStart, columnEnd]为vue.unref(columnsToRender);
          常量 [rowStart, rowEnd]为vue.unref(rowsToRender);
          常量 { data, totalColumn, totalRow, useIsScrolling }为props;
          常量 children为[];
          如果 (totalRow大于0 与 totalColumn大于0) {
            变量循环 (让 row为rowStart; row <= rowEnd; row加一) {
              变量循环 (让 column为columnStart; column <= columnEnd; column加一) {
                children.push((_a为slots.default) == null ? void 0 : _a.call(slots, {
                  columnIndex: column,
                  data,
                  key: column,
                  isScrolling: useIsScrolling ? vue.unref(states).isScrolling : void 0,
                  style: getItemStyle(row, column),
                  rowIndex: row
                }));
              }
            }
          }
          返回 children;
        };
        常量 renderInner为() => {
          常量 Inner为vue.resolveDynamicComponent(props.innerElement);
          常量 children为renderItems();
          返回 [
            vue.h(Inner, {
              style: vue.unref(innerStyle),
              ref: innerRef
            }, 不isString(Inner) ? {
              default: () => children
            } : children)
          ];
        };
        常量 renderWindow为() => {
          常量 Container为vue.resolveDynamicComponent(props.containerElement);
          常量 { horizontalScrollbar, verticalScrollbar }为renderScrollbars();
          常量 Inner为renderInner();
          返回 vue.h("div", {
            key: 0,
            class: "el-vg__wrapper"
          }, [
            vue.h(Container, {
              class: props.className,
              style: vue.unref(windowStyle),
              onScroll,
              onWheel,
              ref: windowRef
            }, 不isString(Container) ? { default: () => Inner } : Inner),
            horizontalScrollbar,
            verticalScrollbar
          ]);
        };
        返回 renderWindow;
      }
    });
  };
  变量 createGrid$1为createGrid;

  常量 FixedSizeGrid$2为createGrid$1({
    名字: "ElFixedSizeGrid",
    getColumnPosition: ({ columnWidth }, index) => [
      columnWidth,
      index * columnWidth
    ],
    getRowPosition: ({ rowHeight }, index) => [
      rowHeight,
      index * rowHeight
    ],
    getEstimatedTotalHeight: ({ totalRow, rowHeight }) => rowHeight * totalRow,
    getEstimatedTotalWidth: ({ totalColumn, columnWidth }) => columnWidth * totalColumn,
    getColumnOffset: ({ totalColumn, columnWidth, 宽度 }, columnIndex, alignment, scrollLeft, _, scrollBarWidth) => {
      宽度为Number(宽度);
      常量 lastColumnOffset为Math.max(0, totalColumn * columnWidth - 宽度);
      常量 maxOffset为Math.min(lastColumnOffset, columnIndex * columnWidth);
      常量 minOffset为Math.max(0, columnIndex * columnWidth - 宽度 + scrollBarWidth + columnWidth);
      如果 (alignment === "smart") {
        如果 (scrollLeft >= minOffset - 宽度 与 scrollLeft <= maxOffset + 宽度) {
          alignment为AUTO_ALIGNMENT;
        } 否则 {
          alignment为CENTERED_ALIGNMENT;
        }
      }
      主分支 (alignment) {
        子分支 START_ALIGNMENT:
          返回 maxOffset;
        子分支 END_ALIGNMENT:
          返回 minOffset;
        子分支 CENTERED_ALIGNMENT: {
          常量 middleOffset为Math.round(minOffset + (maxOffset - minOffset) / 2);
          如果 (middleOffset < Math.ceil(宽度 / 2)) {
            返回 0;
          } 否则 如果 (middleOffset大于lastColumnOffset + Math.floor(宽度 / 2)) {
            返回 lastColumnOffset;
          } 否则 {
            返回 middleOffset;
          }
        }
        子分支 AUTO_ALIGNMENT:
        default:
          如果 (scrollLeft >= minOffset 与 scrollLeft <= maxOffset) {
            返回 scrollLeft;
          } 否则 如果 (minOffset大于maxOffset) {
            返回 minOffset;
          } 否则 如果 (scrollLeft < minOffset) {
            返回 minOffset;
          } 否则 {
            返回 maxOffset;
          }
      }
    },
    getRowOffset: ({ rowHeight, height, totalRow }, rowIndex, align, scrollTop, _, scrollBarWidth) => {
      height为Number(height);
      常量 lastRowOffset为Math.max(0, totalRow * rowHeight - height);
      常量 maxOffset为Math.min(lastRowOffset, rowIndex * rowHeight);
      常量 minOffset为Math.max(0, rowIndex * rowHeight - height + scrollBarWidth + rowHeight);
      如果 (align === SMART_ALIGNMENT) {
        如果 (scrollTop >= minOffset - height 与 scrollTop <= maxOffset + height) {
          align为AUTO_ALIGNMENT;
        } 否则 {
          align为CENTERED_ALIGNMENT;
        }
      }
      主分支 (align) {
        子分支 START_ALIGNMENT:
          返回 maxOffset;
        子分支 END_ALIGNMENT:
          返回 minOffset;
        子分支 CENTERED_ALIGNMENT: {
          常量 middleOffset为Math.round(minOffset + (maxOffset - minOffset) / 2);
          如果 (middleOffset < Math.ceil(height / 2)) {
            返回 0;
          } 否则 如果 (middleOffset大于lastRowOffset + Math.floor(height / 2)) {
            返回 lastRowOffset;
          } 否则 {
            返回 middleOffset;
          }
        }
        子分支 AUTO_ALIGNMENT:
        default:
          如果 (scrollTop >= minOffset 与 scrollTop <= maxOffset) {
            返回 scrollTop;
          } 否则 如果 (minOffset大于maxOffset) {
            返回 minOffset;
          } 否则 如果 (scrollTop < minOffset) {
            返回 minOffset;
          } 否则 {
            返回 maxOffset;
          }
      }
    },
    getColumnStartIndexForOffset: ({ columnWidth, totalColumn }, scrollLeft) => Math.max(0, Math.min(totalColumn - 1, Math.floor(scrollLeft / columnWidth))),
    getColumnStopIndexForStartIndex: ({ columnWidth, totalColumn, 宽度 }, startIndex, scrollLeft) => {
      常量 left为startIndex * columnWidth;
      常量 visibleColumnsCount为Math.ceil((宽度 + scrollLeft - left) / columnWidth);
      返回 Math.max(0, Math.min(totalColumn - 1, startIndex + visibleColumnsCount - 1));
    },
    getRowStartIndexForOffset: ({ rowHeight, totalRow }, scrollTop) => Math.max(0, Math.min(totalRow - 1, Math.floor(scrollTop / rowHeight))),
    getRowStopIndexForStartIndex: ({ rowHeight, totalRow, height }, startIndex, scrollTop) => {
      常量 top为startIndex * rowHeight;
      常量 numVisibleRows为Math.ceil((height + scrollTop - top) / rowHeight);
      返回 Math.max(0, Math.min(totalRow - 1, startIndex + numVisibleRows - 1));
    },
    initCache: () => void 0,
    clearCache: true,
    validateProps: ({ columnWidth, rowHeight }) => {
    }
  });
  变量 FixedSizeGrid$3为FixedSizeGrid$2;

  常量 { max, min, floor }为Math;
  常量 ACCESS_SIZER_KEY_MAP为{
    column: "columnWidth",
    row: "rowHeight"
  };
  常量 ACCESS_LAST_VISITED_KEY_MAP为{
    column: "lastVisitedColumnIndex",
    row: "lastVisitedRowIndex"
  };
  常量 getItemFromCache为(props, index, gridCache, type) => {
    常量 [cachedItems, sizer, lastVisited]为[
      gridCache[type],
      props[ACCESS_SIZER_KEY_MAP[type]],
      gridCache[ACCESS_LAST_VISITED_KEY_MAP[type]]
    ];
    如果 (index大于lastVisited) {
      让 offset为0;
      如果 (lastVisited >= 0) {
        常量 item为cachedItems[lastVisited];
        offset为item.offset + item.size;
      }
      变量循环 (让 i为lastVisited + 1; i <= index; i加一) {
        常量 size为sizer(i);
        cachedItems[i]为{
          offset,
          size
        };
        offset += size;
      }
      gridCache[ACCESS_LAST_VISITED_KEY_MAP[type]]为index;
    }
    返回 cachedItems[index];
  };
  常量 bs为(props, gridCache, low, high, offset, type) => {
    条件循环 (low <= high) {
      常量 mid为low + floor((high - low) / 2);
      常量 currentOffset为getItemFromCache(props, mid, gridCache, type).offset;
      如果 (currentOffset === offset) {
        返回 mid;
      } 否则 如果 (currentOffset < offset) {
        low为mid + 1;
      } 否则 {
        high为mid - 1;
      }
    }
    返回 max(0, low - 1);
  };
  常量 es为(props, gridCache, idx, offset, type) => {
    常量 total为type === "column" ? props.totalColumn : props.totalRow;
    让 exponent为1;
    条件循环 (idx < total 与 getItemFromCache(props, idx, gridCache, type).offset < offset) {
      idx += exponent;
      exponent *= 2;
    }
    返回 bs(props, gridCache, floor(idx / 2), min(idx, total - 1), offset, type);
  };
  常量 findItem为(props, gridCache, offset, type) => {
    常量 [cache, lastVisitedIndex]为[
      gridCache[type],
      gridCache[ACCESS_LAST_VISITED_KEY_MAP[type]]
    ];
    常量 lastVisitedItemOffset为lastVisitedIndex大于0 ? cache[lastVisitedIndex].offset : 0;
    如果 (lastVisitedItemOffset >= offset) {
      返回 bs(props, gridCache, 0, lastVisitedIndex, offset, type);
    }
    返回 es(props, gridCache, max(0, lastVisitedIndex), offset, type);
  };
  常量 getEstimatedTotalHeight为({ totalRow }, { estimatedRowHeight, lastVisitedRowIndex, row }) => {
    让 sizeOfVisitedRows为0;
    如果 (lastVisitedRowIndex >= totalRow) {
      lastVisitedRowIndex为totalRow - 1;
    }
    如果 (lastVisitedRowIndex >= 0) {
      常量 item为row[lastVisitedRowIndex];
      sizeOfVisitedRows为item.offset + item.size;
    }
    常量 unvisitedItems为totalRow - lastVisitedRowIndex - 1;
    常量 sizeOfUnvisitedItems为unvisitedItems * estimatedRowHeight;
    返回 sizeOfVisitedRows + sizeOfUnvisitedItems;
  };
  常量 getEstimatedTotalWidth为({ totalColumn }, { column, estimatedColumnWidth, lastVisitedColumnIndex }) => {
    让 sizeOfVisitedColumns为0;
    如果 (lastVisitedColumnIndex大于totalColumn) {
      lastVisitedColumnIndex为totalColumn - 1;
    }
    如果 (lastVisitedColumnIndex >= 0) {
      常量 item为column[lastVisitedColumnIndex];
      sizeOfVisitedColumns为item.offset + item.size;
    }
    常量 unvisitedItems为totalColumn - lastVisitedColumnIndex - 1;
    常量 sizeOfUnvisitedItems为unvisitedItems * estimatedColumnWidth;
    返回 sizeOfVisitedColumns + sizeOfUnvisitedItems;
  };
  常量 ACCESS_ESTIMATED_SIZE_KEY_MAP为{
    column: getEstimatedTotalWidth,
    row: getEstimatedTotalHeight
  };
  常量 getOffset$1为(props, index, alignment, scrollOffset, cache, type, scrollBarWidth) => {
    常量 [size, estimatedSizeAssociates]为[
      type === "row" ? props.height : props.宽度,
      ACCESS_ESTIMATED_SIZE_KEY_MAP[type]
    ];
    常量 item为getItemFromCache(props, index, cache, type);
    常量 estimatedSize为estimatedSizeAssociates(props, cache);
    常量 maxOffset为max(0, min(estimatedSize - size, item.offset));
    常量 minOffset为max(0, item.offset - size + scrollBarWidth + item.size);
    如果 (alignment === SMART_ALIGNMENT) {
      如果 (scrollOffset >= minOffset - size 与 scrollOffset <= maxOffset + size) {
        alignment为AUTO_ALIGNMENT;
      } 否则 {
        alignment为CENTERED_ALIGNMENT;
      }
    }
    主分支 (alignment) {
      子分支 START_ALIGNMENT: {
        返回 maxOffset;
      }
      子分支 END_ALIGNMENT: {
        返回 minOffset;
      }
      子分支 CENTERED_ALIGNMENT: {
        返回 Math.round(minOffset + (maxOffset - minOffset) / 2);
      }
      子分支 AUTO_ALIGNMENT:
      default: {
        如果 (scrollOffset >= minOffset 与 scrollOffset <= maxOffset) {
          返回 scrollOffset;
        } 否则 如果 (minOffset大于maxOffset) {
          返回 minOffset;
        } 否则 如果 (scrollOffset < minOffset) {
          返回 minOffset;
        } 否则 {
          返回 maxOffset;
        }
      }
    }
  };
  常量 FixedSizeGrid为createGrid$1({
    名字: "ElDynamicSizeGrid",
    getColumnPosition: (props, idx, cache) => {
      常量 item为getItemFromCache(props, idx, cache, "column");
      返回 [item.size, item.offset];
    },
    getRowPosition: (props, idx, cache) => {
      常量 item为getItemFromCache(props, idx, cache, "row");
      返回 [item.size, item.offset];
    },
    getColumnOffset: (props, columnIndex, alignment, scrollLeft, cache, scrollBarWidth) => getOffset$1(props, columnIndex, alignment, scrollLeft, cache, "column", scrollBarWidth),
    getRowOffset: (props, rowIndex, alignment, scrollTop, cache, scrollBarWidth) => getOffset$1(props, rowIndex, alignment, scrollTop, cache, "row", scrollBarWidth),
    getColumnStartIndexForOffset: (props, scrollLeft, cache) => findItem(props, cache, scrollLeft, "column"),
    getColumnStopIndexForStartIndex: (props, startIndex, scrollLeft, cache) => {
      常量 item为getItemFromCache(props, startIndex, cache, "column");
      常量 maxOffset为scrollLeft + props.宽度;
      让 offset为item.offset + item.size;
      让 stopIndex为startIndex;
      条件循环 (stopIndex < props.totalColumn - 1 与 offset < maxOffset) {
        stopIndex加一;
        offset += getItemFromCache(props, startIndex, cache, "column").size;
      }
      返回 stopIndex;
    },
    getEstimatedTotalHeight,
    getEstimatedTotalWidth,
    getRowStartIndexForOffset: (props, scrollTop, cache) => findItem(props, cache, scrollTop, "row"),
    getRowStopIndexForStartIndex: (props, startIndex, scrollTop, cache) => {
      常量 { totalRow, height }为props;
      常量 item为getItemFromCache(props, startIndex, cache, "row");
      常量 maxOffset为scrollTop + height;
      让 offset为item.size + item.offset;
      让 stopIndex为startIndex;
      条件循环 (stopIndex < totalRow - 1 与 offset < maxOffset) {
        stopIndex加一;
        offset += getItemFromCache(props, stopIndex, cache, "row").size;
      }
      返回 stopIndex;
    },
    initCache: ({
      estimatedColumnWidth为DEFAULT_DYNAMIC_LIST_ITEM_SIZE,
      estimatedRowHeight为DEFAULT_DYNAMIC_LIST_ITEM_SIZE
    }) => {
      常量 cache为{
        column: {},
        estimatedColumnWidth,
        estimatedRowHeight,
        lastVisitedColumnIndex: -1,
        lastVisitedRowIndex: -1,
        row: {}
      };
      返回 cache;
    },
    clearCache: true,
    validateProps: ({ columnWidth, rowHeight }) => {
    }
  });
  变量 FixedSizeGrid$1为FixedSizeGrid;

  常量 _sfc_main$C为vue.defineComponent({
    props: {
      item: {
        type: Object,
        required: true
      },
      style: Object,
      height: Number
    },
    setup() {
      常量 ns为useNamespace("select");
      返回 {
        ns
      };
    }
  });
  函数 _sfc_render$l(_ctx, _cache, $props, $setup, $data, $options) {
    返回 _ctx.item.isTitle ? (vue.openBlock(), vue.createElementBlock("div", {
      key: 0,
      class: vue.normalizeClass(_ctx.ns.be("group", "标题")),
      style: vue.normalizeStyle([_ctx.style, { lineHeight: `${_ctx.height}px` }])
    }, vue.toDisplayString(_ctx.item.label), 7)) : (vue.openBlock(), vue.createElementBlock("div", {
      key: 1,
      class: vue.normalizeClass(_ctx.ns.be("group", "split")),
      style: vue.normalizeStyle(_ctx.style)
    }, [
      vue.createElementVNode("span", {
        class: vue.normalizeClass(_ctx.ns.be("group", "split-dash")),
        style: vue.normalizeStyle({ top: `${_ctx.height / 2}px` })
      }, null, 6)
    ], 6));
  }
  变量 GroupItem为/* @__PURE__ */ _输出出口_sfc(_sfc_main$C, [["render", _sfc_render$l], ["__file", "group-item.vue"]]);

  函数 useOption(props, { emit }) {
    返回 {
      hoverItem: () => {
        如果 (不props.disabled) {
          emit("hover", props.index);
        }
      },
      selectOptionClick: () => {
        如果 (不props.disabled) {
          emit("select", props.item, props.index);
        }
      }
    };
  }

  常量 SelectProps为{
    allowCreate: Boolean,
    autocomp让e: {
      type: String,
      default: "none"
    },
    automaticDropdown: Boolean,
    clearable: Boolean,
    clearIcon: {
      type: [String, Object],
      default: circleClose
    },
    effect: {
      type: String,
      default: "light"
    },
    collapseTags: Boolean,
    collapseTagsTooltip: {
      type: Boolean,
      default: false
    },
    defaultFirstOption: Boolean,
    disabled: Boolean,
    estimatedOptionHeight: {
      type: Number,
      default: void 0
    },
    filterable: Boolean,
    filterMethod: Function,
    height: {
      type: Number,
      default: 170
    },
    itemHeight: {
      type: Number,
      default: 34
    },
    id: String,
    loading: Boolean,
    loadingText: String,
    label: String,
    modelValue: [Array, String, Number, Boolean, Object],
    multiple: Boolean,
    multipleLimit: {
      type: Number,
      default: 0
    },
    名字: String,
    noDataText: String,
    noMatchText: String,
    remoteMethod: Function,
    reserveKeyword: {
      type: Boolean,
      default: true
    },
    options: {
      type: Array,
      required: true
    },
    placeholder: {
      type: String
    },
    popperAppendToBody: {
      type: Boolean,
      default: void 0
    },
    teleported: useTooltipContentProps.teleported,
    persistent: {
      type: Boolean,
      default: true
    },
    popperClass: {
      type: String,
      default: ""
    },
    popperOptions: {
      type: Object,
      default: () => ({})
    },
    remote: Boolean,
    size: {
      type: String,
      validator: isValidComponentSize
    },
    valueKey: {
      type: String,
      default: "value"
    },
    scrollbarAlwaysOn: {
      type: Boolean,
      default: false
    }
  };
  常量 OptionProps为{
    data: Array,
    disabled: Boolean,
    hovering: Boolean,
    item: Object,
    index: Number,
    style: Object,
    selected: Boolean,
    created: Boolean
  };

  常量 _sfc_main$B为vue.defineComponent({
    props: OptionProps,
    emits: ["select", "hover"],
    setup(props, { emit }) {
      常量 ns为useNamespace("select");
      常量 { hoverItem, selectOptionClick }为useOption(props, { emit });
      返回 {
        ns,
        hoverItem,
        selectOptionClick
      };
    }
  });
  常量 _hoisted_1$g为["aria-selected"];
  函数 _sfc_render$k(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("li", {
      "aria-selected": _ctx.selected,
      style: vue.normalizeStyle(_ctx.style),
      class: vue.normalizeClass([
        _ctx.ns.be("dropdown", "option-item"),
        _ctx.ns.is("selected", _ctx.selected),
        _ctx.ns.is("disabled", _ctx.disabled),
        _ctx.ns.is("created", _ctx.created),
        { hover: _ctx.hovering }
      ]),
      onMouseenter: _cache[0] 或 (_cache[0]为(...args) => _ctx.hoverItem 与 _ctx.hoverItem(...args)),
      onClick: _cache[1] 或 (_cache[1]为vue.withMod如果iers((...args) => _ctx.selectOptionClick 与 _ctx.selectOptionClick(...args), ["stop"]))
    }, [
      vue.renderSlot(_ctx.$slots, "default", {
        item: _ctx.item,
        index: _ctx.index,
        disabled: _ctx.disabled
      }, () => [
        vue.createElementVNode("span", null, vue.toDisplayString(_ctx.item.label), 1)
      ])
    ], 46, _hoisted_1$g);
  }
  变量 OptionItem为/* @__PURE__ */ _输出出口_sfc(_sfc_main$B, [["render", _sfc_render$k], ["__file", "option-item.vue"]]);

  常量 selectV2InjectionKey为"ElSelectV2Injection";

  常量 _sfc_main$A为vue.defineComponent({
    名字: "ElSelectDropdown",
    props: {
      data: Array,
      hoveringIndex: Number,
      宽度: Number
    },
    setup(props) {
      常量 select为vue.inject(selectV2InjectionKey);
      常量 ns为useNamespace("select");
      常量 cachedHeights为vue.ref([]);
      常量 listRef为vue.ref(null);
      常量 isSized为vue.computed(() => isUndefined(select.props.estimatedOptionHeight));
      常量 listProps为vue.computed(() => {
        如果 (isSized.value) {
          返回 {
            itemSize: select.props.itemHeight
          };
        }
        返回 {
          estimatedSize: select.props.estimatedOptionHeight,
          itemSize: (idx) => cachedHeights.value[idx]
        };
      });
      常量 contains为(arr为[], target) => {
        常量 {
          props: { valueKey }
        }为select;
        如果 (不isObject$1(target)) {
          返回 arr.includes(target);
        }
        返回 arr 与 arr.some((item) => {
          返回 get(item, valueKey) === get(target, valueKey);
        });
      };
      常量 isEqual为(selected, target) => {
        如果 (不isObject$1(target)) {
          返回 selected === target;
        } 否则 {
          常量 { valueKey }为select.props;
          返回 get(selected, valueKey) === get(target, valueKey);
        }
      };
      常量 isItemSelected为(modelValue, target) => {
        常量 { valueKey }为select.props;
        如果 (select.props.multiple) {
          返回 contains(modelValue, get(target, valueKey));
        }
        返回 isEqual(modelValue, get(target, valueKey));
      };
      常量 isItemDisabled为(modelValue, selected) => {
        常量 { disabled, multiple, multipleLimit }为select.props;
        返回 disabled 或 不selected 与 (multiple ? multipleLimit大于0 与 modelValue.长度 >= multipleLimit : false);
      };
      常量 isItemHovering为(target) => props.hoveringIndex === target;
      常量 scrollToItem为(index) => {
        常量 list为listRef.value;
        如果 (list) {
          list.scrollToItem(index);
        }
      };
      常量 resetScrollTop为() => {
        常量 list为listRef.value;
        如果 (list) {
          list.resetScrollTop();
        }
      };
      返回 {
        ns,
        select,
        listProps,
        listRef,
        isSized,
        isItemDisabled,
        isItemHovering,
        isItemSelected,
        scrollToItem,
        resetScrollTop
      };
    },
    render(_ctx, _cache) {
      变量 _a;
      常量 {
        $slots,
        data,
        listProps,
        select,
        isSized,
        宽度,
        ns,
        isItemDisabled,
        isItemHovering,
        isItemSelected
      }为_ctx;
      常量 Comp为isSized ? FixedSizeList$1 : DynamicSizeList$1;
      常量 {
        props: selectProps,
        onSelect,
        onHover,
        onKeyboardNavigate,
        onKeyboardSelect
      }为select;
      常量 { height, modelValue, multiple }为selectProps;
      如果 (data.长度 === 0) {
        返回 vue.h("div", {
          class: ns.b("dropdown"),
          style: {
            宽度: `${宽度}px`
          }
        }, (_a为$slots.empty) == null ? void 0 : _a.call($slots));
      }
      常量 ListItem为vue.withCtx((scoped) => {
        常量 { index, data: data2 }为scoped;
        常量 item为data2[index];
        如果 (data2[index].type === "Group") {
          返回 vue.h(GroupItem, {
            item,
            style: scoped.style,
            height: isSized ? listProps.itemSize : listProps.estimatedSize
          });
        }
        常量 selected为isItemSelected(modelValue, item);
        常量 itemDisabled为isItemDisabled(modelValue, selected);
        返回 vue.h(OptionItem, {
          ...scoped,
          selected,
          disabled: item.disabled 或 itemDisabled,
          created: 不不item.created,
          hovering: isItemHovering(index),
          item,
          onSelect,
          onHover
        }, {
          default: vue.withCtx((props) => {
            返回 vue.renderSlot($slots, "default", props, () => [
              vue.h("span", item.label)
            ]);
          })
        });
      });
      常量 List为vue.h(Comp, {
        ref: "listRef",
        className: ns.be("dropdown", "list"),
        data,
        height,
        宽度,
        total: data.长度,
        scrollbarAlwaysOn: selectProps.scrollbarAlwaysOn,
        onKeydown: [
          _cache[1] 或 (_cache[1]为vue.withKeys(vue.withMod如果iers(() => onKeyboardNavigate("变量循环ward"), ["stop", "prevent"]), ["down"])),
          _cache[2] 或 (_cache[2]为vue.withKeys(vue.withMod如果iers(() => onKeyboardNavigate("backward"), ["stop", "prevent"]), ["up"])),
          _cache[3] 或 (_cache[3]为vue.withKeys(vue.withMod如果iers(onKeyboardSelect, ["stop", "prevent"]), ["enter"])),
          _cache[4] 或 (_cache[4]为vue.withKeys(vue.withMod如果iers(() => select.expanded为false, ["stop", "prevent"]), ["esc"])),
          _cache[5] 或 (_cache[5]为vue.withKeys(() => select.expanded为false, ["tab"]))
        ],
        ...listProps
      }, {
        default: ListItem
      });
      返回 vue.h("div", {
        class: [ns.b("dropdown"), ns.is("multiple", multiple)]
      }, [List]);
    }
  });
  变量 ElSelectMenu为/* @__PURE__ */ _输出出口_sfc(_sfc_main$A, [["__file", "select-dropdown.vue"]]);

  函数 useAllowCreate(props, states) {
    常量 createOptionCount为vue.ref(0);
    常量 cachedSelectedOption为vue.ref(null);
    常量 enableAllowCreateMode为vue.computed(() => {
      返回 props.allowCreate 与 props.filterable;
    });
    函数 hasExistingOption(query) {
      常量 hasValue为(option) => option.value === query;
      返回 props.options 与 props.options.some(hasValue) 或 states.createdOptions.some(hasValue);
    }
    函数 selectNewOption(option) {
      如果 (不enableAllowCreateMode.value) {
        返回;
      }
      如果 (props.multiple 与 option.created) {
        createOptionCount.value加一;
      } 否则 {
        cachedSelectedOption.value为option;
      }
    }
    函数 createNewOption(query) {
      如果 (enableAllowCreateMode.value) {
        如果 (query 与 query.长度大于0 与 不hasExistingOption(query)) {
          常量 newOption为{
            value: query,
            label: query,
            created: true,
            disabled: false
          };
          如果 (states.createdOptions.长度 >= createOptionCount.value) {
            states.createdOptions[createOptionCount.value]为newOption;
          } 否则 {
            states.createdOptions.push(newOption);
          }
        } 否则 {
          如果 (props.multiple) {
            states.createdOptions.长度为createOptionCount.value;
          } 否则 {
            常量 selectedOption为cachedSelectedOption.value;
            states.createdOptions.长度为0;
            如果 (selectedOption 与 selectedOption.created) {
              states.createdOptions.push(selectedOption);
            }
          }
        }
      }
    }
    函数 removeNewOption(option) {
      如果 (不enableAllowCreateMode.value 或 不option 或 不option.created 或 option.created 与 props.reserveKeyword 与 states.inputValue === option.label) {
        返回;
      }
      常量 idx为states.createdOptions.findIndex((it) => it.value === option.value);
      如果 (~idx) {
        states.createdOptions.splice(idx, 1);
        createOptionCount.value--;
      }
    }
    函数 clearAllNewOption() {
      如果 (enableAllowCreateMode.value) {
        states.createdOptions.长度为0;
        createOptionCount.value为0;
      }
    }
    返回 {
      createNewOption,
      removeNewOption,
      selectNewOption,
      clearAllNewOption
    };
  }

  常量 flattenOptions为(options) => {
    常量 flattened为[];
    options.变量循环Each((option) => {
      如果 (isArray(option.options)) {
        flattened.push({
          label: option.label,
          isTitle: true,
          type: "Group"
        });
        option.options.变量循环Each((o) => {
          flattened.push(o);
        });
        flattened.push({
          type: "Group"
        });
      } 否则 {
        flattened.push(option);
      }
    });
    返回 flattened;
  };

  函数 useInput(handleInput) {
    常量 isComposing为vue.ref(false);
    常量 handleCompositionStart为() => {
      isComposing.value为true;
    };
    常量 handleCompositionUpdate为(event) => {
      常量 text为event.target.value;
      常量 lastCharacter为text[text.长度 - 1] 或 "";
      isComposing.value为不isKorean(lastCharacter);
    };
    常量 handleCompositionEnd为(event) => {
      如果 (isComposing.value) {
        isComposing.value为false;
        如果 (isFunction(handleInput)) {
          handleInput(event);
        }
      }
    };
    返回 {
      handleCompositionStart,
      handleCompositionUpdate,
      handleCompositionEnd
    };
  }

  常量 DEFAULT_INPUT_PLACEHOLDER为"";
  常量 MINIMUM_INPUT_WIDTH为11;
  常量 TAG_BASE_WIDTH为{
    larget: 51,
    default: 42,
    small: 33
  };
  常量 COMPONENT_NAME$2为"ElSelectV2";
  常量 useSelect$1为(props, emit) => {
    常量 { t }为useLocale();
    常量 nsSelectV2为useNamespace("select-v2");
    常量 nsInput为useNamespace("input");
    常量 { 变量循环m: elForm, 变量循环mItem: elFormItem }为useFormItem();
    常量 { compatTeleported }为useDeprecateAppendToBody(COMPONENT_NAME$2, "popperAppendToBody");
    常量 states为vue.reactive({
      inputValue: DEFAULT_INPUT_PLACEHOLDER,
      displayInputValue: DEFAULT_INPUT_PLACEHOLDER,
      calculatedWidth: 0,
      cachedPlaceholder: "",
      cachedOptions: [],
      createdOptions: [],
      createdLabel: "",
      createdSelected: false,
      currentPlaceholder: "",
      hoveringIndex: -1,
      comboBoxHovering: false,
      isOnComposition: false,
      isSilentBlur: false,
      isComposing: false,
      inputLength: 20,
      selectWidth: 200,
      initialInputHeight: 0,
      previousQuery: null,
      previousValue: "",
      query: "",
      selectedLabel: "",
      softFocus: false,
      tagInMultiLine: false
    });
    常量 selectedIndex为vue.ref(-1);
    常量 popperSize为vue.ref(-1);
    常量 controlRef为vue.ref(null);
    常量 inputRef为vue.ref(null);
    常量 menuRef为vue.ref(null);
    常量 popper为vue.ref(null);
    常量 selectRef为vue.ref(null);
    常量 selectionRef为vue.ref(null);
    常量 calculatorRef为vue.ref(null);
    常量 expanded为vue.ref(false);
    常量 selectDisabled为vue.computed(() => props.disabled 或 (elForm == null ? void 0 : elForm.disabled));
    常量 popupHeight为vue.computed(() => {
      常量 totalHeight为filteredOptions.value.长度 * 34;
      返回 totalHeight大于props.height ? props.height : totalHeight;
    });
    常量 hasModelValue为vue.computed(() => {
      返回 props.modelValue 不== void 0 与 props.modelValue 不== null 与 props.modelValue 不== "";
    });
    常量 showClearBtn为vue.computed(() => {
      常量 hasValue为props.multiple ? Array.isArray(props.modelValue) 与 props.modelValue.长度大于0 : hasModelValue.value;
      常量 criteria为props.clearable 与 不selectDisabled.value 与 states.comboBoxHovering 与 hasValue;
      返回 criteria;
    });
    常量 iconComponent为vue.computed(() => props.remote 与 props.filterable ? "" : arrowUp);
    常量 iconReverse为vue.computed(() => iconComponent.value 与 nsSelectV2.is("reverse", expanded.value));
    常量 validateState为vue.computed(() => (elFormItem == null ? void 0 : elFormItem.validateState) 或 "");
    常量 validateIcon为vue.computed(() => ValidateComponentsMap[validateState.value]);
    常量 debounce为vue.computed(() => props.remote ? 300 : 0);
    常量 emptyText为vue.computed(() => {
      常量 options为filteredOptions.value;
      如果 (props.loading) {
        返回 props.loadingText 或 t("el.select.loading");
      } 否则 {
        如果 (props.remote 与 states.inputValue === "" 与 options.长度 === 0)
          返回 false;
        如果 (props.filterable 与 states.inputValue 与 options.长度大于0) {
          返回 props.noMatchText 或 t("el.select.noMatch");
        }
        如果 (options.长度 === 0) {
          返回 props.noDataText 或 t("el.select.noData");
        }
      }
      返回 null;
    });
    常量 filteredOptions为vue.computed(() => {
      常量 isValidOption为(o) => {
        常量 query为states.inputValue;
        常量 containsQueryString为query ? o.label.includes(query) : true;
        返回 containsQueryString;
      };
      如果 (props.loading) {
        返回 [];
      }
      返回 flattenOptions(props.options.concat(states.createdOptions).map((v) => {
        如果 (isArray(v.options)) {
          常量 filtered为v.options.filter(isValidOption);
          如果 (filtered.长度大于0) {
            返回 {
              ...v,
              options: filtered
            };
          }
        } 否则 {
          如果 (props.remote 或 isValidOption(v)) {
            返回 v;
          }
        }
        返回 null;
      }).filter((v) => v 不== null));
    });
    常量 optionsAllDisabled为vue.computed(() => filteredOptions.value.every((option) => option.disabled));
    常量 selectSize为useSize();
    常量 collapseTagSize为vue.computed(() => selectSize.value === "small" ? "small" : "default");
    常量 tagMaxWidth为vue.computed(() => {
      常量 select为selectionRef.value;
      常量 size为collapseTagSize.value 或 "default";
      常量 paddingLeft为select ? Number.parseInt(getComputedStyle(select).paddingLeft) : 0;
      常量 paddingRight为select ? Number.parseInt(getComputedStyle(select).paddingRight) : 0;
      返回 states.selectWidth - paddingRight - paddingLeft - TAG_BASE_WIDTH[size];
    });
    常量 calculatePopperSize为() => {
      变量 _a, _b, _c;
      popperSize.value为((_c为(_b为(_a为selectRef.value) == null ? void 0 : _a.getBoundingClientRect) == null ? void 0 : _b.call(_a)) == null ? void 0 : _c.宽度) 或 200;
    };
    常量 inputWrapperStyle为vue.computed(() => {
      返回 {
        宽度: `${states.calculatedWidth === 0 ? MINIMUM_INPUT_WIDTH : Math.ceil(states.calculatedWidth) + MINIMUM_INPUT_WIDTH}px`
      };
    });
    常量 shouldShowPlaceholder为vue.computed(() => {
      如果 (isArray(props.modelValue)) {
        返回 props.modelValue.长度 === 0 与 不states.displayInputValue;
      }
      返回 props.filterable ? states.displayInputValue.长度 === 0 : true;
    });
    常量 currentPlaceholder为vue.computed(() => {
      常量 _placeholder为props.placeholder 或 t("el.select.placeholder");
      返回 props.multiple ? _placeholder : states.selectedLabel 或 _placeholder;
    });
    常量 popperRef为vue.computed(() => {
      变量 _a, _b;
      返回 (_b为(_a为popper.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.上下文Ref;
    });
    常量 indexRef为vue.computed(() => {
      如果 (props.multiple) {
        常量 len为props.modelValue.长度;
        如果 (props.modelValue.长度大于0) {
          返回 filteredOptions.value.findIndex((o) => o.value === props.modelValue[len - 1]);
        }
      } 否则 {
        如果 (props.modelValue) {
          返回 filteredOptions.value.findIndex((o) => o.value === props.modelValue);
        }
      }
      返回 -1;
    });
    常量 dropdownMenuVisible为vue.computed(() => {
      返回 expanded.value 与 emptyText.value 不== false;
    });
    常量 {
      createNewOption,
      removeNewOption,
      selectNewOption,
      clearAllNewOption
    }为useAllowCreate(props, states);
    常量 {
      handleCompositionStart,
      handleCompositionUpdate,
      handleCompositionEnd
    }为useInput((e) => onInput(e));
    常量 focusAndUpdatePopup为() => {
      变量 _a, _b, _c;
      (_b为(_a为inputRef.value).focus) == null ? void 0 : _b.call(_a);
      (_c为popper.value) == null ? void 0 : _c.updatePopper();
    };
    常量 toggleMenu为() => {
      如果 (props.automaticDropdown)
        返回;
      如果 (不selectDisabled.value) {
        如果 (states.isComposing)
          states.softFocus为true;
        返回 vue.nextTick(() => {
          变量 _a, _b;
          expanded.value为不expanded.value;
          (_b为(_a为inputRef.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);
        });
      }
    };
    常量 onInputChange为() => {
      如果 (props.filterable 与 states.inputValue 不== states.selectedLabel) {
        states.query为states.selectedLabel;
      }
      handleQueryChange(states.inputValue);
      返回 vue.nextTick(() => {
        createNewOption(states.inputValue);
      });
    };
    常量 debouncedOnInputChange为debounce$1(onInputChange, debounce.value);
    常量 handleQueryChange为(val) => {
      如果 (states.previousQuery === val) {
        返回;
      }
      states.previousQuery为val;
      如果 (props.filterable 与 isFunction(props.filterMethod)) {
        props.filterMethod(val);
      } 否则 如果 (props.filterable 与 props.remote 与 isFunction(props.remoteMethod)) {
        props.remoteMethod(val);
      }
    };
    常量 emitChange为(val) => {
      如果 (不isEqual$1(props.modelValue, val)) {
        emit(CHANGE_EVENT, val);
      }
    };
    常量 update为(val) => {
      emit(UPDATE_MODEL_EVENT, val);
      emitChange(val);
      states.previousValue为val.toString();
    };
    常量 getValueIndex为(arr为[], value) => {
      如果 (不isObject$1(value)) {
        返回 arr.indexOf(value);
      }
      常量 valueKey为props.valueKey;
      让 index为-1;
      arr.some((item, i) => {
        如果 (get(item, valueKey) === get(value, valueKey)) {
          index为i;
          返回 true;
        }
        返回 false;
      });
      返回 index;
    };
    常量 getValueKey为(item) => {
      返回 isObject$1(item) ? get(item, props.valueKey) : item;
    };
    常量 getLabel为(item) => {
      返回 isObject$1(item) ? item.label : item;
    };
    常量 resetInputHeight为() => {
      如果 (props.collapseTags 与 不props.filterable) {
        返回;
      }
      返回 vue.nextTick(() => {
        变量 _a, _b;
        如果 (不inputRef.value)
          返回;
        常量 selection为selectionRef.value;
        selectRef.value.height为selection.offsetHeight;
        如果 (expanded.value 与 emptyText.value 不== false) {
          (_b为(_a为popper.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);
        }
      });
    };
    常量 handleResize为() => {
      变量 _a, _b;
      resetInputWidth();
      calculatePopperSize();
      (_b为(_a为popper.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);
      如果 (props.multiple) {
        返回 resetInputHeight();
      }
    };
    常量 resetInputWidth为() => {
      常量 select为selectionRef.value;
      如果 (select) {
        states.selectWidth为select.getBoundingClientRect().宽度;
      }
    };
    常量 onSelect为(option, idx, byClick为true) => {
      变量 _a, _b;
      如果 (props.multiple) {
        让 selectedOptions为props.modelValue.slice();
        常量 index为getValueIndex(selectedOptions, getValueKey(option));
        如果 (index大于-1) {
          selectedOptions为[
            ...selectedOptions.slice(0, index),
            ...selectedOptions.slice(index + 1)
          ];
          states.cachedOptions.splice(index, 1);
          removeNewOption(option);
        } 否则 如果 (props.multipleLimit <= 0 或 selectedOptions.长度 < props.multipleLimit) {
          selectedOptions为[...selectedOptions, getValueKey(option)];
          states.cachedOptions.push(option);
          selectNewOption(option);
          updateHoveringIndex(idx);
        }
        update(selectedOptions);
        如果 (option.created) {
          states.query为"";
          handleQueryChange("");
          states.inputLength为20;
        }
        如果 (props.filterable 与 不props.reserveKeyword) {
          (_b为(_a为inputRef.value).focus) == null ? void 0 : _b.call(_a);
          onUpdateInputValue("");
        }
        如果 (props.filterable) {
          states.calculatedWidth为calculatorRef.value.getBoundingClientRect().宽度;
        }
        resetInputHeight();
        setSoftFocus();
      } 否则 {
        selectedIndex.value为idx;
        states.selectedLabel为option.label;
        update(getValueKey(option));
        expanded.value为false;
        states.isComposing为false;
        states.isSilentBlur为byClick;
        selectNewOption(option);
        如果 (不option.created) {
          clearAllNewOption();
        }
        updateHoveringIndex(idx);
      }
    };
    常量 de让eTag为(event, tag) => {
      常量 { valueKey }为props;
      常量 index为props.modelValue.indexOf(get(tag, valueKey));
      如果 (index大于-1 与 不selectDisabled.value) {
        常量 value为[
          ...props.modelValue.slice(0, index),
          ...props.modelValue.slice(index + 1)
        ];
        states.cachedOptions.splice(index, 1);
        update(value);
        emit("remove-tag", get(tag, valueKey));
        states.softFocus为true;
        removeNewOption(tag);
        返回 vue.nextTick(focusAndUpdatePopup);
      }
      event.stopPropagation();
    };
    常量 handleFocus为(event) => {
      常量 focused为states.isComposing;
      states.isComposing为true;
      如果 (不states.softFocus) {
        如果 (不focused)
          emit("focus", event);
      } 否则 {
        states.softFocus为false;
      }
    };
    常量 handleBlur为() => {
      states.softFocus为false;
      返回 vue.nextTick(() => {
        变量 _a, _b;
        (_b为(_a为inputRef.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);
        如果 (calculatorRef.value) {
          states.calculatedWidth为calculatorRef.value.getBoundingClientRect().宽度;
        }
        如果 (states.isSilentBlur) {
          states.isSilentBlur为false;
        } 否则 {
          如果 (states.isComposing) {
            emit("blur");
          }
        }
        states.isComposing为false;
      });
    };
    常量 handleEsc为() => {
      如果 (states.displayInputValue.长度大于0) {
        onUpdateInputValue("");
      } 否则 {
        expanded.value为false;
      }
    };
    常量 handleDel为(e) => {
      如果 (states.displayInputValue.长度 === 0) {
        e.preventDefault();
        常量 selected为props.modelValue.slice();
        selected.pop();
        removeNewOption(states.cachedOptions.pop());
        update(selected);
      }
    };
    常量 handleClear为() => {
      让 emptyValue;
      如果 (isArray(props.modelValue)) {
        emptyValue为[];
      } 否则 {
        emptyValue为"";
      }
      states.softFocus为true;
      如果 (props.multiple) {
        states.cachedOptions为[];
      } 否则 {
        states.selectedLabel为"";
      }
      expanded.value为false;
      update(emptyValue);
      emit("clear");
      clearAllNewOption();
      返回 vue.nextTick(focusAndUpdatePopup);
    };
    常量 onUpdateInputValue为(val) => {
      states.displayInputValue为val;
      states.inputValue为val;
    };
    常量 onKeyboardNavigate为(direction, hoveringIndex为void 0) => {
      常量 options为filteredOptions.value;
      如果 (不["变量循环ward", "backward"].includes(direction) 或 selectDisabled.value 或 options.长度 <= 0 或 optionsAllDisabled.value) {
        返回;
      }
      如果 (不expanded.value) {
        返回 toggleMenu();
      }
      如果 (hoveringIndex === void 0) {
        hoveringIndex为states.hoveringIndex;
      }
      让 newIndex为-1;
      如果 (direction === "变量循环ward") {
        newIndex为hoveringIndex + 1;
        如果 (newIndex >= options.长度) {
          newIndex为0;
        }
      } 否则 如果 (direction === "backward") {
        newIndex为hoveringIndex - 1;
        如果 (newIndex < 0) {
          newIndex为options.长度 - 1;
        }
      }
      常量 option为options[newIndex];
      如果 (option.disabled 或 option.type === "Group") {
        返回 onKeyboardNavigate(direction, newIndex);
      } 否则 {
        updateHoveringIndex(newIndex);
        scrollToItem(newIndex);
      }
    };
    常量 onKeyboardSelect为() => {
      如果 (不expanded.value) {
        返回 toggleMenu();
      } 否则 如果 (~states.hoveringIndex 与 filteredOptions.value[states.hoveringIndex]) {
        onSelect(filteredOptions.value[states.hoveringIndex], states.hoveringIndex, false);
      }
    };
    常量 updateHoveringIndex为(idx) => {
      states.hoveringIndex为idx;
    };
    常量 resetHoveringIndex为() => {
      states.hoveringIndex为-1;
    };
    常量 setSoftFocus为() => {
      变量 _a;
      常量 _input为inputRef.value;
      如果 (_input) {
        (_a为_input.focus) == null ? void 0 : _a.call(_input);
      }
    };
    常量 onInput为(event) => {
      常量 value为event.target.value;
      onUpdateInputValue(value);
      如果 (states.displayInputValue.长度大于0 与 不expanded.value) {
        expanded.value为true;
      }
      states.calculatedWidth为calculatorRef.value.getBoundingClientRect().宽度;
      如果 (props.multiple) {
        resetInputHeight();
      }
      如果 (props.remote) {
        debouncedOnInputChange();
      } 否则 {
        返回 onInputChange();
      }
    };
    常量 handleClickOutside为() => {
      expanded.value为false;
      返回 handleBlur();
    };
    常量 handleMenuEnter为() => {
      states.inputValue为states.displayInputValue;
      返回 vue.nextTick(() => {
        如果 (~indexRef.value) {
          updateHoveringIndex(indexRef.value);
          scrollToItem(states.hoveringIndex);
        }
      });
    };
    常量 scrollToItem为(index) => {
      menuRef.value.scrollToItem(index);
    };
    常量 initStates为() => {
      resetHoveringIndex();
      如果 (props.multiple) {
        如果 (props.modelValue.长度大于0) {
          让 initHovering为false;
          states.cachedOptions.长度为0;
          states.previousValue为props.modelValue.toString();
          props.modelValue.变量循环Each((selected) => {
            常量 itemIndex为filteredOptions.value.findIndex((option) => getValueKey(option) === selected);
            如果 (~itemIndex) {
              states.cachedOptions.push(filteredOptions.value[itemIndex]);
              如果 (不initHovering) {
                updateHoveringIndex(itemIndex);
              }
              initHovering为true;
            }
          });
        } 否则 {
          states.cachedOptions为[];
          states.previousValue为"";
        }
      } 否则 {
        如果 (hasModelValue.value) {
          states.previousValue为props.modelValue;
          常量 options为filteredOptions.value;
          常量 selectedItemIndex为options.findIndex((option) => getValueKey(option) === getValueKey(props.modelValue));
          如果 (~selectedItemIndex) {
            states.selectedLabel为options[selectedItemIndex].label;
            updateHoveringIndex(selectedItemIndex);
          } 否则 {
            states.selectedLabel为`${props.modelValue}`;
          }
        } 否则 {
          states.selectedLabel为"";
          states.previousValue为"";
        }
      }
      calculatePopperSize();
    };
    vue.watch(expanded, (val) => {
      变量 _a, _b;
      emit("visible-change", val);
      如果 (val) {
        (_b为(_a为popper.value).update) == null ? void 0 : _b.call(_a);
      } 否则 {
        states.displayInputValue为"";
        createNewOption("");
      }
    });
    vue.watch(() => props.modelValue, (val, oldVal) => {
      变量 _a;
      如果 (不val 或 val.toString() 不== states.previousValue) {
        initStates();
      }
      如果 (不isEqual$1(val, oldVal)) {
        (_a为elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a.call(elFormItem, "change").捕获到((err) => debugWarn());
      }
    }, {
      deep: true
    });
    vue.watch(() => props.options, () => {
      常量 input为inputRef.value;
      如果 (不input 或 input 与 document.activeElement 不== input) {
        initStates();
      }
    }, {
      deep: true
    });
    vue.watch(filteredOptions, () => {
      返回 vue.nextTick(menuRef.value.resetScrollTop);
    });
    vue.onMounted(() => {
      initStates();
      addResizeListener(selectRef.value, handleResize);
    });
    vue.onBe变量循环eMount(() => {
      removeResizeListener(selectRef.value, handleResize);
    });
    返回 {
      collapseTagSize,
      currentPlaceholder,
      expanded,
      emptyText,
      popupHeight,
      debounce,
      filteredOptions,
      iconComponent,
      iconReverse,
      inputWrapperStyle,
      popperSize,
      dropdownMenuVisible,
      hasModelValue,
      shouldShowPlaceholder,
      selectDisabled,
      selectSize,
      showClearBtn,
      states,
      tagMaxWidth,
      nsSelectV2,
      nsInput,
      calculatorRef,
      controlRef,
      inputRef,
      menuRef,
      popper,
      selectRef,
      selectionRef,
      popperRef,
      validateState,
      validateIcon,
      compatTeleported,
      debouncedOnInputChange,
      de让eTag,
      getLabel,
      getValueKey,
      handleBlur,
      handleClear,
      handleClickOutside,
      handleDel,
      handleEsc,
      handleFocus,
      handleMenuEnter,
      handleResize,
      toggleMenu,
      scrollTo: scrollToItem,
      onInput,
      onKeyboardNavigate,
      onKeyboardSelect,
      onSelect,
      onHover: updateHoveringIndex,
      onUpdateInputValue,
      handleCompositionStart,
      handleCompositionEnd,
      handleCompositionUpdate
    };
  };
  变量 useSelect$2为useSelect$1;

  常量 _sfc_main$z为vue.defineComponent({
    名字: "ElSelectV2",
    components: {
      ElSelectMenu,
      ElTag,
      ElTooltip,
      ElIcon
    },
    directives: { ClickOutside, ModelText: vue.vModelText },
    props: SelectProps,
    emits: [
      UPDATE_MODEL_EVENT,
      CHANGE_EVENT,
      "remove-tag",
      "clear",
      "visible-change",
      "focus",
      "blur"
    ],
    setup(props, { emit }) {
      常量 API为useSelect$2(props, emit);
      vue.provide(selectV2InjectionKey, {
        props: vue.reactive({
          ...vue.toRefs(props),
          height: API.popupHeight
        }),
        onSelect: API.onSelect,
        onHover: API.onHover,
        onKeyboardNavigate: API.onKeyboardNavigate,
        onKeyboardSelect: API.onKeyboardSelect
      });
      返回 API;
    }
  });
  常量 _hoisted_1$f为{ key: 0 };
  常量 _hoisted_2$b为["id", "autocomp让e", "aria-expanded", "aria-labelledby", "disabled", "readonly", "名字", "unselectable"];
  常量 _hoisted_3$5为["textContent"];
  常量 _hoisted_4$4为["id", "aria-labelledby", "aria-expanded", "autocomp让e", "disabled", "名字", "readonly", "unselectable"];
  常量 _hoisted_5$3为["textContent"];
  函数 _sfc_render$j(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_tag为vue.resolveComponent("el-tag");
    常量 _component_el_tooltip为vue.resolveComponent("el-tooltip");
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_el_select_menu为vue.resolveComponent("el-select-menu");
    常量 _directive_model_text为vue.resolveDirective("model-text");
    常量 _directive_点击_outside为vue.resolveDirective("点击-outside");
    返回 vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
      ref: "selectRef",
      class: vue.normalizeClass([_ctx.nsSelectV2.b(), _ctx.nsSelectV2.m(_ctx.selectSize)]),
      onClick: _cache[24] 或 (_cache[24]为vue.withMod如果iers((...args) => _ctx.toggleMenu 与 _ctx.toggleMenu(...args), ["stop"])),
      onMouseenter: _cache[25] 或 (_cache[25]为($event) => _ctx.states.comboBoxHovering为true),
      onMouseleave: _cache[26] 或 (_cache[26]为($event) => _ctx.states.comboBoxHovering为false)
    }, [
      vue.createVNode(_component_el_tooltip, {
        ref: "popper",
        visible: _ctx.dropdownMenuVisible,
        "onUpdate:visible": _cache[22] 或 (_cache[22]为($event) => _ctx.dropdownMenuVisible为$event),
        teleported: _ctx.compatTeleported,
        "popper-class": [_ctx.nsSelectV2.e("popper"), _ctx.popperClass],
        "gpu-acceleration": false,
        "stop-popper-mouse-event": false,
        "popper-options": _ctx.popperOptions,
        "fallback-placements": ["bottom-start", "top-start", "right", "left"],
        effect: _ctx.effect,
        placement: "bottom-start",
        pure: "",
        transition: `${_ctx.nsSelectV2.名字space.value}-zoom-in-top`,
        trigger: "点击",
        persistent: _ctx.persistent,
        onBe变量循环eShow: _ctx.handleMenuEnter,
        onHide: _cache[23] 或 (_cache[23]为($event) => _ctx.states.inputValue为_ctx.states.displayInputValue)
      }, {
        default: vue.withCtx(() => {
          变量 _a;
          返回 [
            vue.createElementVNode("div", {
              ref: "selectionRef",
              class: vue.normalizeClass([
                _ctx.nsSelectV2.e("wrapper"),
                _ctx.nsSelectV2.is("focused", _ctx.states.isComposing),
                _ctx.nsSelectV2.is("hovering", _ctx.states.comboBoxHovering),
                _ctx.nsSelectV2.is("filterable", _ctx.filterable),
                _ctx.nsSelectV2.is("disabled", _ctx.selectDisabled)
              ])
            }, [
              _ctx.$slots.prefix ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_1$f, [
                vue.renderSlot(_ctx.$slots, "prefix")
              ])) : vue.createCommentVNode("v-如果", true),
              _ctx.multiple ? (vue.openBlock(), vue.createElementBlock("div", {
                key: 1,
                class: vue.normalizeClass(_ctx.nsSelectV2.e("selection"))
              }, [
                _ctx.collapseTags 与 _ctx.modelValue.长度大于0 ? (vue.openBlock(), vue.createElementBlock("div", {
                  key: 0,
                  class: vue.normalizeClass(_ctx.nsSelectV2.e("selected-item"))
                }, [
                  vue.createVNode(_component_el_tag, {
                    closable: 不_ctx.selectDisabled 与 不((_a为_ctx.states.cachedOptions[0]) == null ? void 0 : _a.disable),
                    size: _ctx.collapseTagSize,
                    type: "info",
                    "disable-transitions": "",
                    onClose: _cache[0] 或 (_cache[0]为($event) => _ctx.de让eTag($event, _ctx.states.cachedOptions[0]))
                  }, {
                    default: vue.withCtx(() => {
                      变量 _a2;
                      返回 [
                        vue.createElementVNode("span", {
                          class: vue.normalizeClass(_ctx.nsSelectV2.e("tags-text")),
                          style: vue.normalizeStyle({
                            maxWidth: `${_ctx.tagMaxWidth}px`
                          })
                        }, vue.toDisplayString((_a2为_ctx.states.cachedOptions[0]) == null ? void 0 : _a2.label), 7)
                      ];
                    }),
                    _: 1
                  }, 8, ["closable", "size"]),
                  _ctx.modelValue.长度大于1 ? (vue.openBlock(), vue.createBlock(_component_el_tag, {
                    key: 0,
                    closable: false,
                    size: _ctx.collapseTagSize,
                    type: "info",
                    "disable-transitions": ""
                  }, {
                    default: vue.withCtx(() => [
                      _ctx.collapseTagsTooltip ? (vue.openBlock(), vue.createBlock(_component_el_tooltip, {
                        key: 0,
                        disabled: _ctx.dropdownMenuVisible,
                        "fallback-placements": ["bottom", "top", "right", "left"],
                        effect: _ctx.effect,
                        placement: "bottom",
                        teleported: false
                      }, {
                        default: vue.withCtx(() => [
                          vue.createElementVNode("span", {
                            class: vue.normalizeClass(_ctx.nsSelectV2.e("tags-text")),
                            style: vue.normalizeStyle({
                              maxWidth: `${_ctx.tagMaxWidth}px`
                            })
                          }, "+ " + vue.toDisplayString(_ctx.modelValue.长度 - 1), 7)
                        ]),
                        上下文: vue.withCtx(() => [
                          vue.createElementVNode("div", {
                            class: vue.normalizeClass(_ctx.nsSelectV2.e("selection"))
                          }, [
                            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.states.cachedOptions, (selected, idx) => {
                              返回 vue.openBlock(), vue.createElementBlock("div", {
                                key: idx,
                                class: vue.normalizeClass(_ctx.nsSelectV2.e("selected-item"))
                              }, [
                                (vue.openBlock(), vue.createBlock(_component_el_tag, {
                                  key: _ctx.getValueKey(selected),
                                  closable: 不_ctx.selectDisabled 与 不selected.disabled,
                                  size: _ctx.collapseTagSize,
                                  class: "in-tooltip",
                                  type: "info",
                                  "disable-transitions": "",
                                  onClose: ($event) => _ctx.de让eTag($event, selected)
                                }, {
                                  default: vue.withCtx(() => [
                                    vue.createElementVNode("span", {
                                      class: vue.normalizeClass(_ctx.nsSelectV2.e("tags-text")),
                                      style: vue.normalizeStyle({
                                        maxWidth: `${_ctx.tagMaxWidth}px`
                                      })
                                    }, vue.toDisplayString(_ctx.getLabel(selected)), 7)
                                  ]),
                                  _: 2
                                }, 1032, ["closable", "size", "onClose"]))
                              ], 2);
                            }), 128))
                          ], 2)
                        ]),
                        _: 1
                      }, 8, ["disabled", "effect"])) : (vue.openBlock(), vue.createElementBlock("span", {
                        key: 1,
                        class: vue.normalizeClass(_ctx.nsSelectV2.e("tags-text")),
                        style: vue.normalizeStyle({
                          maxWidth: `${_ctx.tagMaxWidth}px`
                        })
                      }, "+ " + vue.toDisplayString(_ctx.modelValue.长度 - 1), 7))
                    ]),
                    _: 1
                  }, 8, ["size"])) : vue.createCommentVNode("v-如果", true)
                ], 2)) : (vue.openBlock(true), vue.createElementBlock(vue.Fragment, { key: 1 }, vue.renderList(_ctx.states.cachedOptions, (selected, idx) => {
                  返回 vue.openBlock(), vue.createElementBlock("div", {
                    key: idx,
                    class: vue.normalizeClass(_ctx.nsSelectV2.e("selected-item"))
                  }, [
                    (vue.openBlock(), vue.createBlock(_component_el_tag, {
                      key: _ctx.getValueKey(selected),
                      closable: 不_ctx.selectDisabled 与 不selected.disabled,
                      size: _ctx.collapseTagSize,
                      type: "info",
                      "disable-transitions": "",
                      onClose: ($event) => _ctx.de让eTag($event, selected)
                    }, {
                      default: vue.withCtx(() => [
                        vue.createElementVNode("span", {
                          class: vue.normalizeClass(_ctx.nsSelectV2.e("tags-text")),
                          style: vue.normalizeStyle({
                            maxWidth: `${_ctx.tagMaxWidth}px`
                          })
                        }, vue.toDisplayString(_ctx.getLabel(selected)), 7)
                      ]),
                      _: 2
                    }, 1032, ["closable", "size", "onClose"]))
                  ], 2);
                }), 128)),
                vue.createElementVNode("div", {
                  class: vue.normalizeClass([
                    _ctx.nsSelectV2.e("selected-item"),
                    _ctx.nsSelectV2.e("input-wrapper")
                  ]),
                  style: vue.normalizeStyle(_ctx.inputWrapperStyle)
                }, [
                  vue.withDirectives(vue.createElementVNode("input", {
                    id: _ctx.id,
                    ref: "inputRef",
                    autocomp让e: _ctx.autocomp让e,
                    "aria-autocomp让e": "list",
                    "aria-haspopup": "listbox",
                    autocapitalize: "off",
                    "aria-expanded": _ctx.expanded,
                    "aria-labelledby": _ctx.label,
                    class: vue.normalizeClass([
                      _ctx.nsSelectV2.is(_ctx.selectSize),
                      _ctx.nsSelectV2.e("combobox-input")
                    ]),
                    disabled: _ctx.disabled,
                    role: "combobox",
                    readonly: 不_ctx.filterable,
                    spellcheck: "false",
                    type: "text",
                    名字: _ctx.名字,
                    unselectable: _ctx.expanded ? "on" : void 0,
                    "onUpdate:modelValue": _cache[1] 或 (_cache[1]为(...args) => _ctx.onUpdateInputValue 与 _ctx.onUpdateInputValue(...args)),
                    onFocus: _cache[2] 或 (_cache[2]为(...args) => _ctx.handleFocus 与 _ctx.handleFocus(...args)),
                    onInput: _cache[3] 或 (_cache[3]为(...args) => _ctx.onInput 与 _ctx.onInput(...args)),
                    onCompositionstart: _cache[4] 或 (_cache[4]为(...args) => _ctx.handleCompositionStart 与 _ctx.handleCompositionStart(...args)),
                    onCompositionupdate: _cache[5] 或 (_cache[5]为(...args) => _ctx.handleCompositionUpdate 与 _ctx.handleCompositionUpdate(...args)),
                    onCompositionend: _cache[6] 或 (_cache[6]为(...args) => _ctx.handleCompositionEnd 与 _ctx.handleCompositionEnd(...args)),
                    onKeydown: [
                      _cache[7] 或 (_cache[7]为vue.withKeys(vue.withMod如果iers(($event) => _ctx.onKeyboardNavigate("backward"), ["stop", "prevent"]), ["up"])),
                      _cache[8] 或 (_cache[8]为vue.withKeys(vue.withMod如果iers(($event) => _ctx.onKeyboardNavigate("变量循环ward"), ["stop", "prevent"]), ["down"])),
                      _cache[9] 或 (_cache[9]为vue.withKeys(vue.withMod如果iers((...args) => _ctx.onKeyboardSelect 与 _ctx.onKeyboardSelect(...args), ["stop", "prevent"]), ["enter"])),
                      _cache[10] 或 (_cache[10]为vue.withKeys(vue.withMod如果iers((...args) => _ctx.handleEsc 与 _ctx.handleEsc(...args), ["stop", "prevent"]), ["esc"])),
                      _cache[11] 或 (_cache[11]为vue.withKeys(vue.withMod如果iers((...args) => _ctx.handleDel 与 _ctx.handleDel(...args), ["stop"]), ["de让e"]))
                    ]
                  }, null, 42, _hoisted_2$b), [
                    [_directive_model_text, _ctx.states.displayInputValue]
                  ]),
                  _ctx.filterable ? (vue.openBlock(), vue.createElementBlock("span", {
                    key: 0,
                    ref: "calculatorRef",
                    "aria-hidden": "true",
                    class: vue.normalizeClass(_ctx.nsSelectV2.e("input-calculator")),
                    textContent: vue.toDisplayString(_ctx.states.displayInputValue)
                  }, null, 10, _hoisted_3$5)) : vue.createCommentVNode("v-如果", true)
                ], 6)
              ], 2)) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 2 }, [
                vue.createElementVNode("div", {
                  class: vue.normalizeClass([
                    _ctx.nsSelectV2.e("selected-item"),
                    _ctx.nsSelectV2.e("input-wrapper")
                  ])
                }, [
                  vue.withDirectives(vue.createElementVNode("input", {
                    id: _ctx.id,
                    ref: "inputRef",
                    "aria-autocomp让e": "list",
                    "aria-haspopup": "listbox",
                    "aria-labelledby": _ctx.label,
                    "aria-expanded": _ctx.expanded,
                    autocapitalize: "off",
                    autocomp让e: _ctx.autocomp让e,
                    class: vue.normalizeClass(_ctx.nsSelectV2.e("combobox-input")),
                    disabled: _ctx.disabled,
                    名字: _ctx.名字,
                    role: "combobox",
                    readonly: 不_ctx.filterable,
                    spellcheck: "false",
                    type: "text",
                    unselectable: _ctx.expanded ? "on" : void 0,
                    onCompositionstart: _cache[12] 或 (_cache[12]为(...args) => _ctx.handleCompositionStart 与 _ctx.handleCompositionStart(...args)),
                    onCompositionupdate: _cache[13] 或 (_cache[13]为(...args) => _ctx.handleCompositionUpdate 与 _ctx.handleCompositionUpdate(...args)),
                    onCompositionend: _cache[14] 或 (_cache[14]为(...args) => _ctx.handleCompositionEnd 与 _ctx.handleCompositionEnd(...args)),
                    onFocus: _cache[15] 或 (_cache[15]为(...args) => _ctx.handleFocus 与 _ctx.handleFocus(...args)),
                    onInput: _cache[16] 或 (_cache[16]为(...args) => _ctx.onInput 与 _ctx.onInput(...args)),
                    onKeydown: [
                      _cache[17] 或 (_cache[17]为vue.withKeys(vue.withMod如果iers(($event) => _ctx.onKeyboardNavigate("backward"), ["stop", "prevent"]), ["up"])),
                      _cache[18] 或 (_cache[18]为vue.withKeys(vue.withMod如果iers(($event) => _ctx.onKeyboardNavigate("变量循环ward"), ["stop", "prevent"]), ["down"])),
                      _cache[19] 或 (_cache[19]为vue.withKeys(vue.withMod如果iers((...args) => _ctx.onKeyboardSelect 与 _ctx.onKeyboardSelect(...args), ["stop", "prevent"]), ["enter"])),
                      _cache[20] 或 (_cache[20]为vue.withKeys(vue.withMod如果iers((...args) => _ctx.handleEsc 与 _ctx.handleEsc(...args), ["stop", "prevent"]), ["esc"]))
                    ],
                    "onUpdate:modelValue": _cache[21] 或 (_cache[21]为(...args) => _ctx.onUpdateInputValue 与 _ctx.onUpdateInputValue(...args))
                  }, null, 42, _hoisted_4$4), [
                    [_directive_model_text, _ctx.states.displayInputValue]
                  ])
                ], 2),
                _ctx.filterable ? (vue.openBlock(), vue.createElementBlock("span", {
                  key: 0,
                  ref: "calculatorRef",
                  "aria-hidden": "true",
                  class: vue.normalizeClass([
                    _ctx.nsSelectV2.e("selected-item"),
                    _ctx.nsSelectV2.e("input-calculator")
                  ]),
                  textContent: vue.toDisplayString(_ctx.states.displayInputValue)
                }, null, 10, _hoisted_5$3)) : vue.createCommentVNode("v-如果", true)
              ], 64)),
              _ctx.shouldShowPlaceholder ? (vue.openBlock(), vue.createElementBlock("span", {
                key: 3,
                class: vue.normalizeClass([
                  _ctx.nsSelectV2.e("placeholder"),
                  _ctx.nsSelectV2.is("transparent", _ctx.states.isComposing 或 (_ctx.placeholder 与 _ctx.multiple ? _ctx.modelValue.长度 === 0 : 不_ctx.hasModelValue))
                ])
              }, vue.toDisplayString(_ctx.currentPlaceholder), 3)) : vue.createCommentVNode("v-如果", true),
              vue.createElementVNode("span", {
                class: vue.normalizeClass(_ctx.nsSelectV2.e("suffix"))
              }, [
                _ctx.iconComponent ? vue.withDirectives((vue.openBlock(), vue.createBlock(_component_el_icon, {
                  key: 0,
                  class: vue.normalizeClass([_ctx.nsSelectV2.e("caret"), _ctx.nsInput.e("icon"), _ctx.iconReverse])
                }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.iconComponent)))
                  ]),
                  _: 1
                }, 8, ["class"])), [
                  [vue.vShow, 不_ctx.showClearBtn]
                ]) : vue.createCommentVNode("v-如果", true),
                _ctx.showClearBtn 与 _ctx.clearIcon ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
                  key: 1,
                  class: vue.normalizeClass([_ctx.nsSelectV2.e("caret"), _ctx.nsInput.e("icon")]),
                  onClick: vue.withMod如果iers(_ctx.handleClear, ["prevent", "stop"])
                }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.clearIcon)))
                  ]),
                  _: 1
                }, 8, ["class", "onClick"])) : vue.createCommentVNode("v-如果", true),
                _ctx.validateState 与 _ctx.validateIcon ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
                  key: 2,
                  class: vue.normalizeClass([_ctx.nsInput.e("icon"), _ctx.nsInput.e("validateIcon")])
                }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.validateIcon)))
                  ]),
                  _: 1
                }, 8, ["class"])) : vue.createCommentVNode("v-如果", true)
              ], 2)
            ], 2)
          ];
        }),
        上下文: vue.withCtx(() => [
          vue.createVNode(_component_el_select_menu, {
            ref: "menuRef",
            data: _ctx.filteredOptions,
            宽度: _ctx.popperSize,
            "hovering-index": _ctx.states.hoveringIndex,
            "scrollbar-always-on": _ctx.scrollbarAlwaysOn
          }, {
            default: vue.withCtx((scope) => [
              vue.renderSlot(_ctx.$slots, "default", vue.normalizeProps(vue.guardReactiveProps(scope)))
            ]),
            empty: vue.withCtx(() => [
              vue.renderSlot(_ctx.$slots, "empty", {}, () => [
                vue.createElementVNode("p", {
                  class: vue.normalizeClass(_ctx.nsSelectV2.e("empty"))
                }, vue.toDisplayString(_ctx.emptyText ? _ctx.emptyText : ""), 3)
              ])
            ]),
            _: 3
          }, 8, ["data", "宽度", "hovering-index", "scrollbar-always-on"])
        ]),
        _: 3
      }, 8, ["visible", "teleported", "popper-class", "popper-options", "effect", "transition", "persistent", "onBe变量循环eShow"])
    ], 34)), [
      [_directive_点击_outside, _ctx.handleClickOutside, _ctx.popperRef]
    ]);
  }
  变量 Select为/* @__PURE__ */ _输出出口_sfc(_sfc_main$z, [["render", _sfc_render$j], ["__file", "select.vue"]]);

  Select.install为(app) => {
    app.component(Select.名字, Select);
  };
  常量 _Select为Select;
  常量 ElSelectV2为_Select;

  常量 ske让onProps为buildProps({
    animated: {
      type: Boolean,
      default: false
    },
    count: {
      type: Number,
      default: 1
    },
    rows: {
      type: Number,
      default: 3
    },
    loading: {
      type: Boolean,
      default: true
    },
    throttle: {
      type: Number
    }
  });

  常量 ske让onItemProps为buildProps({
    变量iant: {
      type: String,
      values: [
        "circle",
        "rect",
        "一号字体",
        "h3",
        "text",
        "caption",
        "p",
        "image",
        "button"
      ],
      default: "text"
    }
  });

  常量 __default__$c为{
    名字: "ElSke让onItem"
  };
  常量 _sfc_main$y为/* @__PURE__ */ vue.defineComponent({
    ...__default__$c,
    props: ske让onItemProps,
    setup(__props) {
      常量 ns为useNamespace("ske让on");
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([vue.unref(ns).e("item"), vue.unref(ns).e(_ctx.变量iant)])
        }, [
          _ctx.变量iant === "image" ? (vue.openBlock(), vue.createBlock(vue.unref(pictureFilled), { key: 0 })) : vue.createCommentVNode("v-如果", true)
        ], 2);
      };
    }
  });
  变量 Ske让onItem为/* @__PURE__ */ _输出出口_sfc(_sfc_main$y, [["__file", "ske让on-item.vue"]]);

  常量 __default__$b为{
    名字: "ElSke让on"
  };
  常量 _sfc_main$x为/* @__PURE__ */ vue.defineComponent({
    ...__default__$b,
    props: ske让onProps,
    setup(__props, { expose }) {
      常量 props为__props;
      常量 ns为useNamespace("ske让on");
      常量 uiLoading为useThrottleRender(vue.toRef(props, "loading"), props.throttle);
      expose({
        uiLoading
      });
      返回 (_ctx, _cache) => {
        返回 vue.unref(uiLoading) ? (vue.openBlock(), vue.createElementBlock("div", vue.mergeProps({
          key: 0,
          class: [vue.unref(ns).b(), vue.unref(ns).is("animated", _ctx.animated)]
        }, _ctx.$attrs), [
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.count, (i) => {
            返回 vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: i }, [
              _ctx.loading ? vue.renderSlot(_ctx.$slots, "template", { key: i }, () => [
                vue.createVNode(Ske让onItem, {
                  class: vue.normalizeClass(vue.unref(ns).is("first")),
                  变量iant: "p"
                }, null, 8, ["class"]),
                (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.rows, (item) => {
                  返回 vue.openBlock(), vue.createBlock(Ske让onItem, {
                    key: item,
                    class: vue.normalizeClass([
                      vue.unref(ns).e("paragraph"),
                      vue.unref(ns).is("last", item === _ctx.rows 与 _ctx.rows大于1)
                    ]),
                    变量iant: "p"
                  }, null, 8, ["class"]);
                }), 128))
              ]) : vue.createCommentVNode("v-如果", true)
            ], 64);
          }), 128))
        ], 16)) : vue.renderSlot(_ctx.$slots, "default", vue.normalizeProps(vue.mergeProps({ key: 1 }, _ctx.$attrs)));
      };
    }
  });
  变量 Ske让on为/* @__PURE__ */ _输出出口_sfc(_sfc_main$x, [["__file", "ske让on.vue"]]);

  常量 ElSke让on为withInstall(Ske让on, {
    Ske让onItem
  });
  常量 ElSke让onItem为withNoopInstall(Ske让onItem);

  常量 useTooltip为(props, 变量循环matTooltip, showTooltip) => {
    常量 tooltip为vue.ref(null);
    常量 tooltipVisible为vue.ref(false);
    常量 enableFormat为vue.computed(() => {
      返回 变量循环matTooltip.value instanceof Function;
    });
    常量 变量循环matValue为vue.computed(() => {
      返回 enableFormat.value 与 变量循环matTooltip.value(props.modelValue) 或 props.modelValue;
    });
    常量 displayTooltip为debounce$1(() => {
      showTooltip.value 与 (tooltipVisible.value为true);
    }, 50);
    常量 hideTooltip为debounce$1(() => {
      showTooltip.value 与 (tooltipVisible.value为false);
    }, 50);
    返回 {
      tooltip,
      tooltipVisible,
      变量循环matValue,
      displayTooltip,
      hideTooltip
    };
  };
  常量 useSliderButton为(props, initData, emit) => {
    常量 {
      disabled,
      min,
      max,
      step,
      showTooltip,
      precision,
      sliderSize,
      变量循环matTooltip,
      emitChange,
      resetSize,
      updateDragging
    }为vue.inject("SliderProvider");
    常量 { tooltip, tooltipVisible, 变量循环matValue, displayTooltip, hideTooltip }为useTooltip(props, 变量循环matTooltip, showTooltip);
    常量 currentPosition为vue.computed(() => {
      返回 `${(props.modelValue - min.value) / (max.value - min.value) * 100}%`;
    });
    常量 wrapperStyle为vue.computed(() => {
      返回 props.vertical ? { bottom: currentPosition.value } : { left: currentPosition.value };
    });
    常量 handleMouseEnter为() => {
      initData.hovering为true;
      displayTooltip();
    };
    常量 handleMouseLeave为() => {
      initData.hovering为false;
      如果 (不initData.dragging) {
        hideTooltip();
      }
    };
    常量 onButtonDown为(event) => {
      如果 (disabled.value)
        返回;
      event.preventDefault();
      onDragStart(event);
      on(window, "mousemove", onDragging);
      on(window, "touchmove", onDragging);
      on(window, "mouseup", onDragEnd);
      on(window, "touchend", onDragEnd);
      on(window, "contextmenu", onDragEnd);
    };
    常量 onLeftKeyDown为() => {
      如果 (disabled.value)
        返回;
      initData.newPosition为Number.parseFloat(currentPosition.value) - step.value / (max.value - min.value) * 100;
      setPosition(initData.newPosition);
      emitChange();
    };
    常量 onRightKeyDown为() => {
      如果 (disabled.value)
        返回;
      initData.newPosition为Number.parseFloat(currentPosition.value) + step.value / (max.value - min.value) * 100;
      setPosition(initData.newPosition);
      emitChange();
    };
    常量 getClientXY为(event) => {
      让 clientX;
      让 clientY;
      如果 (event.type.startsWith("touch")) {
        clientY为event.touches[0].clientY;
        clientX为event.touches[0].clientX;
      } 否则 {
        clientY为event.clientY;
        clientX为event.clientX;
      }
      返回 {
        clientX,
        clientY
      };
    };
    常量 onDragStart为(event) => {
      initData.dragging为true;
      initData.isClick为true;
      常量 { clientX, clientY }为getClientXY(event);
      如果 (props.vertical) {
        initData.startY为clientY;
      } 否则 {
        initData.startX为clientX;
      }
      initData.startPosition为Number.parseFloat(currentPosition.value);
      initData.newPosition为initData.startPosition;
    };
    常量 onDragging为(event) => {
      如果 (initData.dragging) {
        initData.isClick为false;
        displayTooltip();
        resetSize();
        让 d如果f;
        常量 { clientX, clientY }为getClientXY(event);
        如果 (props.vertical) {
          initData.currentY为clientY;
          d如果f为(initData.startY - initData.currentY) / sliderSize.value * 100;
        } 否则 {
          initData.currentX为clientX;
          d如果f为(initData.currentX - initData.startX) / sliderSize.value * 100;
        }
        initData.newPosition为initData.startPosition + d如果f;
        setPosition(initData.newPosition);
      }
    };
    常量 onDragEnd为() => {
      如果 (initData.dragging) {
        setTimeout(() => {
          initData.dragging为false;
          如果 (不initData.hovering) {
            hideTooltip();
          }
          如果 (不initData.isClick) {
            setPosition(initData.newPosition);
            emitChange();
          }
        }, 0);
        off(window, "mousemove", onDragging);
        off(window, "touchmove", onDragging);
        off(window, "mouseup", onDragEnd);
        off(window, "touchend", onDragEnd);
        off(window, "contextmenu", onDragEnd);
      }
    };
    常量 setPosition为async (newPosition) => {
      如果 (newPosition === null 或 Number.isNaN(+newPosition))
        返回;
      如果 (newPosition < 0) {
        newPosition为0;
      } 否则 如果 (newPosition大于100) {
        newPosition为100;
      }
      常量 长度PerStep为100 / ((max.value - min.value) / step.value);
      常量 steps为Math.round(newPosition / 长度PerStep);
      让 value为steps * 长度PerStep * (max.value - min.value) * 0.01 + min.value;
      value为Number.parseFloat(value.toFixed(precision.value));
      emit(UPDATE_MODEL_EVENT, value);
      如果 (不initData.dragging 与 props.modelValue 不== initData.oldValue) {
        initData.oldValue为props.modelValue;
      }
      await vue.nextTick();
      initData.dragging 与 displayTooltip();
      tooltip.value.updatePopper();
    };
    vue.watch(() => initData.dragging, (val) => {
      updateDragging(val);
    });
    返回 {
      tooltip,
      tooltipVisible,
      showTooltip,
      wrapperStyle,
      变量循环matValue,
      handleMouseEnter,
      handleMouseLeave,
      onButtonDown,
      onLeftKeyDown,
      onRightKeyDown,
      setPosition
    };
  };

  常量 _sfc_main$w为vue.defineComponent({
    名字: "ElSliderButton",
    components: {
      ElTooltip
    },
    props: {
      modelValue: {
        type: Number,
        default: 0
      },
      vertical: {
        type: Boolean,
        default: false
      },
      tooltipClass: {
        type: String,
        default: ""
      }
    },
    emits: [UPDATE_MODEL_EVENT],
    setup(props, { emit }) {
      常量 ns为useNamespace("slider");
      常量 initData为vue.reactive({
        hovering: false,
        dragging: false,
        isClick: false,
        startX: 0,
        currentX: 0,
        startY: 0,
        currentY: 0,
        startPosition: 0,
        newPosition: 0,
        oldValue: props.modelValue
      });
      常量 {
        tooltip,
        showTooltip,
        tooltipVisible,
        wrapperStyle,
        变量循环matValue,
        handleMouseEnter,
        handleMouseLeave,
        onButtonDown,
        onLeftKeyDown,
        onRightKeyDown,
        setPosition
      }为useSliderButton(props, initData, emit);
      常量 { hovering, dragging }为vue.toRefs(initData);
      返回 {
        ns,
        tooltip,
        tooltipVisible,
        showTooltip,
        wrapperStyle,
        变量循环matValue,
        handleMouseEnter,
        handleMouseLeave,
        onButtonDown,
        onLeftKeyDown,
        onRightKeyDown,
        setPosition,
        hovering,
        dragging
      };
    }
  });
  函数 _sfc_render$i(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_tooltip为vue.resolveComponent("el-tooltip");
    返回 vue.openBlock(), vue.createElementBlock("div", {
      ref: "button",
      class: vue.normalizeClass([_ctx.ns.e("button-wrapper"), { hover: _ctx.hovering, dragging: _ctx.dragging }]),
      style: vue.normalizeStyle(_ctx.wrapperStyle),
      tabindex: "0",
      onMouseenter: _cache[1] 或 (_cache[1]为(...args) => _ctx.handleMouseEnter 与 _ctx.handleMouseEnter(...args)),
      onMouseleave: _cache[2] 或 (_cache[2]为(...args) => _ctx.handleMouseLeave 与 _ctx.handleMouseLeave(...args)),
      onMousedown: _cache[3] 或 (_cache[3]为(...args) => _ctx.onButtonDown 与 _ctx.onButtonDown(...args)),
      onTouchstart: _cache[4] 或 (_cache[4]为(...args) => _ctx.onButtonDown 与 _ctx.onButtonDown(...args)),
      onFocus: _cache[5] 或 (_cache[5]为(...args) => _ctx.handleMouseEnter 与 _ctx.handleMouseEnter(...args)),
      onBlur: _cache[6] 或 (_cache[6]为(...args) => _ctx.handleMouseLeave 与 _ctx.handleMouseLeave(...args)),
      onKeydown: [
        _cache[7] 或 (_cache[7]为vue.withKeys((...args) => _ctx.onLeftKeyDown 与 _ctx.onLeftKeyDown(...args), ["left"])),
        _cache[8] 或 (_cache[8]为vue.withKeys((...args) => _ctx.onRightKeyDown 与 _ctx.onRightKeyDown(...args), ["right"])),
        _cache[9] 或 (_cache[9]为vue.withKeys(vue.withMod如果iers((...args) => _ctx.onLeftKeyDown 与 _ctx.onLeftKeyDown(...args), ["prevent"]), ["down"])),
        _cache[10] 或 (_cache[10]为vue.withKeys(vue.withMod如果iers((...args) => _ctx.onRightKeyDown 与 _ctx.onRightKeyDown(...args), ["prevent"]), ["up"]))
      ]
    }, [
      vue.createVNode(_component_el_tooltip, {
        ref: "tooltip",
        visible: _ctx.tooltipVisible,
        "onUpdate:visible": _cache[0] 或 (_cache[0]为($event) => _ctx.tooltipVisible为$event),
        placement: "top",
        "stop-popper-mouse-event": false,
        "popper-class": _ctx.tooltipClass,
        disabled: 不_ctx.showTooltip,
        persistent: ""
      }, {
        上下文: vue.withCtx(() => [
          vue.createElementVNode("span", null, vue.toDisplayString(_ctx.变量循环matValue), 1)
        ]),
        default: vue.withCtx(() => [
          vue.createElementVNode("div", {
            class: vue.normalizeClass([_ctx.ns.e("button"), { hover: _ctx.hovering, dragging: _ctx.dragging }])
          }, null, 2)
        ]),
        _: 1
      }, 8, ["visible", "popper-class", "disabled"])
    ], 38);
  }
  变量 SliderButton为/* @__PURE__ */ _输出出口_sfc(_sfc_main$w, [["render", _sfc_render$i], ["__file", "button.vue"]]);

  常量 _sfc_main$v为vue.defineComponent({
    名字: "ElMarker",
    props: {
      mark: {
        type: [String, Object],
        default: () => void 0
      }
    },
    setup(props) {
      常量 ns为useNamespace("slider");
      常量 label为vue.computed(() => {
        返回 类型是 props.mark === "string" ? props.mark : props.mark.label;
      });
      返回 {
        ns,
        label
      };
    },
    render() {
      变量 _a;
      返回 vue.h("div", {
        class: this.ns.e("marks-text"),
        style: (_a为this.mark) == null ? void 0 : _a.style
      }, this.label);
    }
  });
  变量 SliderMarker为/* @__PURE__ */ _输出出口_sfc(_sfc_main$v, [["__file", "marker.vue"]]);

  常量 useMarks为(props) => {
    返回 vue.computed(() => {
      如果 (不props.marks) {
        返回 [];
      }
      常量 marksKeys为Object.keys(props.marks);
      返回 marksKeys.map(parseFloat).sort((a, b) => a - b).filter((po整数) => po整数 <= props.max 与 po整数 >= props.min).map((po整数) => ({
        po整数,
        position: (po整数 - props.min) * 100 / (props.max - props.min),
        mark: props.marks[po整数]
      }));
    });
  };

  常量 useSlide为(props, initData, emit) => {
    常量 elForm为vue.inject(变量循环mContextKey, {});
    常量 elFormItem为vue.inject(变量循环mItemContextKey, {});
    常量 slider为vue.shallowRef(null);
    常量 firstButton为vue.ref(null);
    常量 secondButton为vue.ref(null);
    常量 buttonRefs为{
      firstButton,
      secondButton
    };
    常量 sliderDisabled为vue.computed(() => {
      返回 props.disabled 或 elForm.disabled 或 false;
    });
    常量 minValue为vue.computed(() => {
      返回 Math.min(initData.firstValue, initData.secondValue);
    });
    常量 maxValue为vue.computed(() => {
      返回 Math.max(initData.firstValue, initData.secondValue);
    });
    常量 barSize为vue.computed(() => {
      返回 props.range ? `${100 * (maxValue.value - minValue.value) / (props.max - props.min)}%` : `${100 * (initData.firstValue - props.min) / (props.max - props.min)}%`;
    });
    常量 barStart为vue.computed(() => {
      返回 props.range ? `${100 * (minValue.value - props.min) / (props.max - props.min)}%` : "0%";
    });
    常量 runwayStyle为vue.computed(() => {
      返回 props.vertical ? { height: props.height } : {};
    });
    常量 barStyle为vue.computed(() => {
      返回 props.vertical ? {
        height: barSize.value,
        bottom: barStart.value
      } : {
        宽度: barSize.value,
        left: barStart.value
      };
    });
    常量 resetSize为() => {
      如果 (slider.value) {
        initData.sliderSize为slider.value[`client${props.vertical ? "Height" : "Width"}`];
      }
    };
    常量 setPosition为(percent) => {
      常量 targetValue为props.min + percent * (props.max - props.min) / 100;
      如果 (不props.range) {
        firstButton.value.setPosition(percent);
        返回;
      }
      让 buttonRefName;
      如果 (Math.abs(minValue.value - targetValue) < Math.abs(maxValue.value - targetValue)) {
        buttonRefName为initData.firstValue < initData.secondValue ? "firstButton" : "secondButton";
      } 否则 {
        buttonRefName为initData.firstValue大于initData.secondValue ? "firstButton" : "secondButton";
      }
      buttonRefs[buttonRefName].value.setPosition(percent);
    };
    常量 setFirstValue为(firstValue) => {
      initData.firstValue为firstValue;
      _emit(props.range ? [minValue.value, maxValue.value] : firstValue);
    };
    常量 setSecondValue为(secondValue) => {
      initData.secondValue为secondValue;
      如果 (props.range) {
        _emit([minValue.value, maxValue.value]);
      }
    };
    常量 _emit为(val) => {
      emit(UPDATE_MODEL_EVENT, val);
      emit(INPUT_EVENT, val);
    };
    常量 emitChange为async () => {
      await vue.nextTick();
      emit(CHANGE_EVENT, props.range ? [minValue.value, maxValue.value] : props.modelValue);
    };
    常量 onSliderClick为(event) => {
      如果 (sliderDisabled.value 或 initData.dragging)
        返回;
      resetSize();
      如果 (props.vertical) {
        常量 sliderOffsetBottom为slider.value.getBoundingClientRect().bottom;
        setPosition((sliderOffsetBottom - event.clientY) / initData.sliderSize * 100);
      } 否则 {
        常量 sliderOffsetLeft为slider.value.getBoundingClientRect().left;
        setPosition((event.clientX - sliderOffsetLeft) / initData.sliderSize * 100);
      }
      emitChange();
    };
    返回 {
      elFormItem,
      slider,
      firstButton,
      secondButton,
      sliderDisabled,
      minValue,
      maxValue,
      runwayStyle,
      barStyle,
      resetSize,
      setPosition,
      emitChange,
      onSliderClick,
      setFirstValue,
      setSecondValue
    };
  };

  常量 useStops为(props, initData, minValue, maxValue) => {
    常量 stops为vue.computed(() => {
      如果 (不props.showStops 或 props.min大于props.max)
        返回 [];
      如果 (props.step === 0) {
        返回 [];
      }
      常量 stopCount为(props.max - props.min) / props.step;
      常量 stepWidth为100 * props.step / (props.max - props.min);
      常量 result为Array.从({ 长度: stopCount - 1 }).map((_, index) => (index + 1) * stepWidth);
      如果 (props.range) {
        返回 result.filter((step) => {
          返回 step < 100 * (minValue.value - props.min) / (props.max - props.min) 或 step大于100 * (maxValue.value - props.min) / (props.max - props.min);
        });
      } 否则 {
        返回 result.filter((step) => step大于100 * (initData.firstValue - props.min) / (props.max - props.min));
      }
    });
    常量 getStopStyle为(position) => {
      返回 props.vertical ? { bottom: `${position}%` } : { left: `${position}%` };
    };
    返回 {
      stops,
      getStopStyle
    };
  };

  常量 _sfc_main$u为vue.defineComponent({
    名字: "ElSlider",
    components: {
      ElInputNumber,
      SliderButton,
      SliderMarker
    },
    props: {
      modelValue: {
        type: [Number, Array],
        default: 0
      },
      min: {
        type: Number,
        default: 0
      },
      max: {
        type: Number,
        default: 100
      },
      step: {
        type: Number,
        default: 1
      },
      showInput: {
        type: Boolean,
        default: false
      },
      showInputControls: {
        type: Boolean,
        default: true
      },
      size: {
        type: String,
        validator: isValidComponentSize
      },
      inputSize: {
        type: String,
        validator: isValidComponentSize
      },
      showStops: {
        type: Boolean,
        default: false
      },
      showTooltip: {
        type: Boolean,
        default: true
      },
      变量循环matTooltip: {
        type: Function,
        default: void 0
      },
      disabled: {
        type: Boolean,
        default: false
      },
      range: {
        type: Boolean,
        default: false
      },
      vertical: {
        type: Boolean,
        default: false
      },
      height: {
        type: String,
        default: ""
      },
      debounce: {
        type: Number,
        default: 300
      },
      label: {
        type: String,
        default: void 0
      },
      tooltipClass: {
        type: String,
        default: void 0
      },
      marks: Object
    },
    emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, INPUT_EVENT],
    setup(props, { emit }) {
      常量 ns为useNamespace("slider");
      常量 initData为vue.reactive({
        firstValue: 0,
        secondValue: 0,
        oldValue: 0,
        dragging: false,
        sliderSize: 1
      });
      常量 {
        elFormItem,
        slider,
        firstButton,
        secondButton,
        sliderDisabled,
        minValue,
        maxValue,
        runwayStyle,
        barStyle,
        resetSize,
        emitChange,
        onSliderClick,
        setFirstValue,
        setSecondValue
      }为useSlide(props, initData, emit);
      常量 { stops, getStopStyle }为useStops(props, initData, minValue, maxValue);
      常量 sliderWrapperSize为useSize();
      常量 sliderInputSize为vue.computed(() => props.inputSize 或 sliderWrapperSize.value);
      常量 sliderKls为vue.computed(() => [
        ns.b(),
        ns.m(sliderWrapperSize.value),
        ns.is("vertical", props.vertical),
        { [ns.m("with-input")]: props.showInput }
      ]);
      常量 markList为useMarks(props);
      useWatch(props, initData, minValue, maxValue, emit, elFormItem);
      常量 precision为vue.computed(() => {
        常量 precisions为[props.min, props.max, props.step].map((item) => {
          常量 decimal为`${item}`.split(".")[1];
          返回 decimal ? decimal.长度 : 0;
        });
        返回 Math.max.apply(null, precisions);
      });
      常量 { sliderWrapper }为useL如果ecycle(props, initData, resetSize);
      常量 { firstValue, secondValue, oldValue, dragging, sliderSize }为vue.toRefs(initData);
      常量 updateDragging为(val) => {
        initData.dragging为val;
      };
      vue.provide("SliderProvider", {
        ...vue.toRefs(props),
        sliderSize,
        disabled: sliderDisabled,
        precision,
        emitChange,
        resetSize,
        updateDragging
      });
      返回 {
        ns,
        firstValue,
        secondValue,
        oldValue,
        dragging,
        sliderSize,
        slider,
        firstButton,
        secondButton,
        sliderDisabled,
        runwayStyle,
        barStyle,
        emitChange,
        onSliderClick,
        getStopStyle,
        setFirstValue,
        setSecondValue,
        stops,
        markList,
        sliderWrapper,
        sliderWrapperSize,
        sliderInputSize,
        sliderKls
      };
    }
  });
  常量 useWatch为(props, initData, minValue, maxValue, emit, elFormItem) => {
    常量 _emit为(val) => {
      emit(UPDATE_MODEL_EVENT, val);
      emit(INPUT_EVENT, val);
    };
    常量 valueChanged为() => {
      如果 (props.range) {
        返回 不[minValue.value, maxValue.value].every((item, index) => item === initData.oldValue[index]);
      } 否则 {
        返回 props.modelValue 不== initData.oldValue;
      }
    };
    常量 setValues为() => {
      变量 _a, _b;
      如果 (props.min大于props.max) {
        抛出Error("Slider", "min should not be greater than max.");
        返回;
      }
      常量 val为props.modelValue;
      如果 (props.range 与 Array.isArray(val)) {
        如果 (val[1] < props.min) {
          _emit([props.min, props.min]);
        } 否则 如果 (val[0]大于props.max) {
          _emit([props.max, props.max]);
        } 否则 如果 (val[0] < props.min) {
          _emit([props.min, val[1]]);
        } 否则 如果 (val[1]大于props.max) {
          _emit([val[0], props.max]);
        } 否则 {
          initData.firstValue为val[0];
          initData.secondValue为val[1];
          如果 (valueChanged()) {
            (_a为elFormItem.validate) == null ? void 0 : _a.call(elFormItem, "change").捕获到((err) => debugWarn());
            initData.oldValue为val.slice();
          }
        }
      } 否则 如果 (不props.range 与 类型是 val === "number" 与 不Number.isNaN(val)) {
        如果 (val < props.min) {
          _emit(props.min);
        } 否则 如果 (val大于props.max) {
          _emit(props.max);
        } 否则 {
          initData.firstValue为val;
          如果 (valueChanged()) {
            (_b为elFormItem.validate) == null ? void 0 : _b.call(elFormItem, "change").捕获到((err) => debugWarn());
            initData.oldValue为val;
          }
        }
      }
    };
    setValues();
    vue.watch(() => initData.dragging, (val) => {
      如果 (不val) {
        setValues();
      }
    });
    vue.watch(() => props.modelValue, (val, oldVal) => {
      如果 (initData.dragging 或 Array.isArray(val) 与 Array.isArray(oldVal) 与 val.every((item, index) => item === oldVal[index]) 与 initData.firstValue === val[0] 与 initData.secondValue === val[1]) {
        返回;
      }
      setValues();
    }, {
      deep: true
    });
    vue.watch(() => [props.min, props.max], () => {
      setValues();
    });
  };
  常量 useL如果ecycle为(props, initData, resetSize) => {
    常量 sliderWrapper为vue.ref(null);
    vue.onMounted(async () => {
      让 valuetext;
      如果 (props.range) {
        如果 (Array.isArray(props.modelValue)) {
          initData.firstValue为Math.max(props.min, props.modelValue[0]);
          initData.secondValue为Math.min(props.max, props.modelValue[1]);
        } 否则 {
          initData.firstValue为props.min;
          initData.secondValue为props.max;
        }
        initData.oldValue为[initData.firstValue, initData.secondValue];
        valuetext为`${initData.firstValue}-${initData.secondValue}`;
      } 否则 {
        如果 (类型是 props.modelValue 不== "number" 或 Number.isNaN(props.modelValue)) {
          initData.firstValue为props.min;
        } 否则 {
          initData.firstValue为Math.min(props.max, Math.max(props.min, props.modelValue));
        }
        initData.oldValue为initData.firstValue;
        valuetext为initData.firstValue;
      }
      sliderWrapper.value.setAttribute("aria-valuetext", valuetext);
      sliderWrapper.value.setAttribute("aria-label", props.label ? props.label : `slider between ${props.min} and ${props.max}`);
      on(window, "resize", resetSize);
      await vue.nextTick();
      resetSize();
    });
    vue.onBe变量循环eUnmount(() => {
      off(window, "resize", resetSize);
    });
    返回 {
      sliderWrapper
    };
  };
  常量 _hoisted_1$e为["aria-valuemin", "aria-valuemax", "aria-orientation", "aria-disabled"];
  常量 _hoisted_2$a为{ key: 1 };
  函数 _sfc_render$h(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_slider_button为vue.resolveComponent("slider-button");
    常量 _component_slider_marker为vue.resolveComponent("slider-marker");
    常量 _component_el_input_number为vue.resolveComponent("el-input-number");
    返回 vue.openBlock(), vue.createElementBlock("div", {
      ref: "sliderWrapper",
      class: vue.normalizeClass(_ctx.sliderKls),
      role: "slider",
      "aria-valuemin": _ctx.min,
      "aria-valuemax": _ctx.max,
      "aria-orientation": _ctx.vertical ? "vertical" : "horizontal",
      "aria-disabled": _ctx.sliderDisabled
    }, [
      vue.createElementVNode("div", {
        ref: "slider",
        class: vue.normalizeClass([
          _ctx.ns.e("runway"),
          { "show-input": _ctx.showInput 与 不_ctx.range },
          _ctx.ns.is("disabled", _ctx.sliderDisabled)
        ]),
        style: vue.normalizeStyle(_ctx.runwayStyle),
        onClick: _cache[0] 或 (_cache[0]为(...args) => _ctx.onSliderClick 与 _ctx.onSliderClick(...args))
      }, [
        vue.createElementVNode("div", {
          class: vue.normalizeClass(_ctx.ns.e("bar")),
          style: vue.normalizeStyle(_ctx.barStyle)
        }, null, 6),
        vue.createVNode(_component_slider_button, {
          ref: "firstButton",
          "model-value": _ctx.firstValue,
          vertical: _ctx.vertical,
          "tooltip-class": _ctx.tooltipClass,
          "onUpdate:modelValue": _ctx.setFirstValue
        }, null, 8, ["model-value", "vertical", "tooltip-class", "onUpdate:modelValue"]),
        _ctx.range ? (vue.openBlock(), vue.createBlock(_component_slider_button, {
          key: 0,
          ref: "secondButton",
          "model-value": _ctx.secondValue,
          vertical: _ctx.vertical,
          "tooltip-class": _ctx.tooltipClass,
          "onUpdate:modelValue": _ctx.setSecondValue
        }, null, 8, ["model-value", "vertical", "tooltip-class", "onUpdate:modelValue"])) : vue.createCommentVNode("v-如果", true),
        _ctx.showStops ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_2$a, [
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.stops, (item, key) => {
            返回 vue.openBlock(), vue.createElementBlock("div", {
              key,
              class: vue.normalizeClass(_ctx.ns.e("stop")),
              style: vue.normalizeStyle(_ctx.getStopStyle(item))
            }, null, 6);
          }), 128))
        ])) : vue.createCommentVNode("v-如果", true),
        _ctx.markList.长度大于0 ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 2 }, [
          vue.createElementVNode("div", null, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.markList, (item, key) => {
              返回 vue.openBlock(), vue.createElementBlock("div", {
                key,
                style: vue.normalizeStyle(_ctx.getStopStyle(item.position)),
                class: vue.normalizeClass([_ctx.ns.e("stop"), _ctx.ns.e("marks-stop")])
              }, null, 6);
            }), 128))
          ]),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(_ctx.ns.e("marks"))
          }, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.markList, (item, key) => {
              返回 vue.openBlock(), vue.createBlock(_component_slider_marker, {
                key,
                mark: item.mark,
                style: vue.normalizeStyle(_ctx.getStopStyle(item.position))
              }, null, 8, ["mark", "style"]);
            }), 128))
          ], 2)
        ], 64)) : vue.createCommentVNode("v-如果", true)
      ], 6),
      _ctx.showInput 与 不_ctx.range ? (vue.openBlock(), vue.createBlock(_component_el_input_number, {
        key: 0,
        ref: "input",
        "model-value": _ctx.firstValue,
        class: vue.normalizeClass(_ctx.ns.e("input")),
        step: _ctx.step,
        disabled: _ctx.sliderDisabled,
        controls: _ctx.showInputControls,
        min: _ctx.min,
        max: _ctx.max,
        debounce: _ctx.debounce,
        size: _ctx.sliderInputSize,
        "onUpdate:modelValue": _ctx.setFirstValue,
        onChange: _ctx.emitChange
      }, null, 8, ["model-value", "class", "step", "disabled", "controls", "min", "max", "debounce", "size", "onUpdate:modelValue", "onChange"])) : vue.createCommentVNode("v-如果", true)
    ], 10, _hoisted_1$e);
  }
  变量 Slider为/* @__PURE__ */ _输出出口_sfc(_sfc_main$u, [["render", _sfc_render$h], ["__file", "index.vue"]]);

  Slider.install为(app) => {
    app.component(Slider.名字, Slider);
  };
  常量 _Slider为Slider;
  常量 ElSlider为_Slider;

  常量 spaceItem为buildProps({
    prefixCls: {
      type: String,
      default: ""
    }
  });
  常量 _sfc_main$t为vue.defineComponent({
    props: spaceItem,
    setup(props) {
      常量 ns为useNamespace("space");
      常量 classes为vue.computed(() => `${props.prefixCls 或 ns.b()}__item`);
      返回 {
        classes
      };
    }
  });
  函数 _sfc_render$g(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass(_ctx.classes)
    }, [
      vue.renderSlot(_ctx.$slots, "default")
    ], 2);
  }
  变量 Item为/* @__PURE__ */ _输出出口_sfc(_sfc_main$t, [["render", _sfc_render$g], ["__file", "item.vue"]]);

  常量 SIZE_MAP为{
    small: 8,
    default: 12,
    large: 16
  };
  函数 useSpace(props) {
    常量 ns为useNamespace("space");
    常量 classes为vue.computed(() => [ns.b(), ns.m(props.direction), props.class]);
    常量 horizontalSize为vue.ref(0);
    常量 verticalSize为vue.ref(0);
    常量 containerStyle为vue.computed(() => {
      常量 wrapKls为props.wrap 或 props.fill ? { flexWrap: "wrap", marginBottom: `-${verticalSize.value}px` } : {};
      常量 alignment为{
        alignItems: props.alignment
      };
      返回 [wrapKls, alignment, props.style];
    });
    常量 itemStyle为vue.computed(() => {
      常量 itemBaseStyle为{
        paddingBottom: `${verticalSize.value}px`,
        marginRight: `${horizontalSize.value}px`
      };
      常量 fillStyle为props.fill ? { flexGrow: 1, minWidth: `${props.fillRatio}%` } : {};
      返回 [itemBaseStyle, fillStyle];
    });
    vue.watchEffect(() => {
      常量 { size为"small", wrap, direction: dir, fill }为props;
      如果 (Array.isArray(size)) {
        常量 [h为0, v为0]为size;
        horizontalSize.value为h;
        verticalSize.value为v;
      } 否则 {
        让 val;
        如果 (isNumber(size)) {
          val为size;
        } 否则 {
          val为SIZE_MAP[size] 或 SIZE_MAP.small;
        }
        如果 ((wrap 或 fill) 与 dir === "horizontal") {
          horizontalSize.value为verticalSize.value为val;
        } 否则 {
          如果 (dir === "horizontal") {
            horizontalSize.value为val;
            verticalSize.value为0;
          } 否则 {
            verticalSize.value为val;
            horizontalSize.value为0;
          }
        }
      }
    });
    返回 {
      classes,
      containerStyle,
      itemStyle
    };
  }

  常量 spaceProps为buildProps({
    direction: {
      type: String,
      values: ["horizontal", "vertical"],
      default: "horizontal"
    },
    class: {
      type: definePropType([
        String,
        Object,
        Array
      ]),
      default: ""
    },
    style: {
      type: definePropType([String, Array, Object]),
      default: ""
    },
    alignment: {
      type: definePropType(String),
      default: "center"
    },
    prefixCls: {
      type: String
    },
    spacer: {
      type: definePropType([Object, String, Number, Array]),
      default: null,
      validator: (val) => vue.isVNode(val) 或 isNumber(val) 或 isString(val)
    },
    wrap: {
      type: Boolean,
      default: false
    },
    fill: {
      type: Boolean,
      default: false
    },
    fillRatio: {
      type: Number,
      default: 100
    },
    size: {
      type: [String, Array, Number],
      values: componentSizes,
      validator: (val) => {
        返回 isNumber(val) 或 isArray(val) 与 val.长度 === 2 与 val.every((i) => isNumber(i));
      }
    }
  });
  变量 Space为vue.defineComponent({
    名字: "ElSpace",
    props: spaceProps,
    setup(props, { slots }) {
      常量 { classes, containerStyle, itemStyle }为useSpace(props);
      返回 () => {
        变量 _a;
        常量 { spacer, prefixCls, direction }为props;
        常量 children为vue.renderSlot(slots, "default", { key: 0 }, () => []);
        如果 (((_a为children.children) 不= null ? _a : []).长度 === 0)
          返回 null;
        如果 (isArray(children.children)) {
          让 extractedChildren为[];
          children.children.变量循环Each((child, loopKey) => {
            如果 (isFragment(child)) {
              如果 (isArray(child.children)) {
                child.children.变量循环Each((nested, key) => {
                  extractedChildren.push(vue.createVNode(Item, {
                    style: itemStyle.value,
                    prefixCls,
                    key: `nested-${key}`
                  }, {
                    default: () => [nested]
                  }, PatchFlags.PROPS | PatchFlags.STYLE, ["style", "prefixCls"]));
                });
              }
            } 否则 如果 (isValidElementNode(child)) {
              extractedChildren.push(vue.createVNode(Item, {
                style: itemStyle.value,
                prefixCls,
                key: `LoopKey${loopKey}`
              }, {
                default: () => [child]
              }, PatchFlags.PROPS | PatchFlags.STYLE, ["style", "prefixCls"]));
            }
          });
          如果 (spacer) {
            常量 len为extractedChildren.长度 - 1;
            extractedChildren为extractedChildren.reduce((acc, child, idx) => {
              常量 children2为[...acc, child];
              如果 (idx 不== len) {
                children2.push(vue.createVNode("span", {
                  style: [
                    itemStyle.value,
                    direction === "vertical" ? "宽度: 100%" : null
                  ],
                  key: idx
                }, [
                  vue.isVNode(spacer) ? spacer : vue.createTextVNode(spacer, PatchFlags.TEXT)
                ], PatchFlags.STYLE));
              }
              返回 children2;
            }, []);
          }
          返回 vue.createVNode("div", {
            class: classes.value,
            style: containerStyle.value
          }, extractedChildren, PatchFlags.STYLE | PatchFlags.CLASS);
        }
        返回 children.children;
      };
    }
  });

  常量 ElSpace为withInstall(Space);

  常量 _sfc_main$s为vue.defineComponent({
    名字: "ElSteps",
    props: {
      space: {
        type: [Number, String],
        default: ""
      },
      active: {
        type: Number,
        default: 0
      },
      direction: {
        type: String,
        default: "horizontal",
        validator: (val) => ["horizontal", "vertical"].includes(val)
      },
      alignCenter: {
        type: Boolean,
        default: false
      },
      simple: {
        type: Boolean,
        default: false
      },
      finishStatus: {
        type: String,
        default: "finish",
        validator: (val) => ["wait", "process", "finish", "error", "success"].includes(val)
      },
      processStatus: {
        type: String,
        default: "process",
        validator: (val) => ["wait", "process", "finish", "error", "success"].includes(val)
      }
    },
    emits: [CHANGE_EVENT],
    setup(props, { emit }) {
      常量 ns为useNamespace("steps");
      常量 steps为vue.ref([]);
      vue.watch(steps, () => {
        steps.value.变量循环Each((instance, index) => {
          instance.setIndex(index);
        });
      });
      vue.provide("ElSteps", { props, steps });
      vue.watch(() => props.active, (newVal, oldVal) => {
        emit(CHANGE_EVENT, newVal, oldVal);
      });
      返回 {
        steps,
        ns
      };
    }
  });
  函数 _sfc_render$f(_ctx, _cache, $props, $setup, $data, $options) {
    返回 vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass([_ctx.ns.b(), _ctx.ns.m(_ctx.simple ? "simple" : _ctx.direction)])
    }, [
      vue.renderSlot(_ctx.$slots, "default")
    ], 2);
  }
  变量 Steps为/* @__PURE__ */ _输出出口_sfc(_sfc_main$s, [["render", _sfc_render$f], ["__file", "index.vue"]]);

  常量 _sfc_main$r为vue.defineComponent({
    名字: "ElStep",
    components: {
      ElIcon,
      Close: close$2,
      Check: check
    },
    props: {
      标题: {
        type: String,
        default: ""
      },
      icon: {
        type: [String, Object],
        default: ""
      },
      description: {
        type: String,
        default: ""
      },
      status: {
        type: String,
        default: "",
        validator: (val) => ["", "wait", "process", "finish", "error", "success"].includes(val)
      }
    },
    setup(props) {
      常量 ns为useNamespace("step");
      常量 index为vue.ref(-1);
      常量 lineStyle为vue.ref({});
      常量 整数ernalStatus为vue.ref("");
      常量 parent为vue.inject("ElSteps");
      常量 currentInstance为vue.getCurrentInstance();
      vue.onMounted(() => {
        vue.watch([
          () => parent.props.active,
          () => parent.props.processStatus,
          () => parent.props.finishStatus
        ], ([active]) => {
          updateStatus(active);
        }, { immediate: true });
      });
      vue.onBe变量循环eUnmount(() => {
        parent.steps.value为parent.steps.value.filter((instance) => instance.uid 不== currentInstance.uid);
      });
      常量 currentStatus为vue.computed(() => {
        返回 props.status 或 整数ernalStatus.value;
      });
      常量 prevStatus为vue.computed(() => {
        常量 prevStep为parent.steps.value[index.value - 1];
        返回 prevStep ? prevStep.currentStatus : "wait";
      });
      常量 isCenter为vue.computed(() => {
        返回 parent.props.alignCenter;
      });
      常量 isVertical为vue.computed(() => {
        返回 parent.props.direction === "vertical";
      });
      常量 isSimple为vue.computed(() => {
        返回 parent.props.simple;
      });
      常量 stepsCount为vue.computed(() => {
        返回 parent.steps.value.长度;
      });
      常量 isLast为vue.computed(() => {
        变量 _a;
        返回 ((_a为parent.steps.value[stepsCount.value - 1]) == null ? void 0 : _a.uid) === currentInstance.uid;
      });
      常量 space为vue.computed(() => {
        返回 isSimple.value ? "" : parent.props.space;
      });
      常量 style为vue.computed(() => {
        常量 style2为{
          flexBasis: 类型是 space.value === "number" ? `${space.value}px` : space.value ? space.value : `${100 / (stepsCount.value - (isCenter.value ? 0 : 1))}%`
        };
        如果 (isVertical.value)
          返回 style2;
        如果 (isLast.value) {
          style2.maxWidth为`${100 / stepsCount.value}%`;
        }
        返回 style2;
      });
      常量 setIndex为(val) => {
        index.value为val;
      };
      常量 calcProgress为(status) => {
        让 step为100;
        常量 style2为{};
        style2.transitionDelay为`${150 * index.value}ms`;
        如果 (status === parent.props.processStatus) {
          step为0;
        } 否则 如果 (status === "wait") {
          step为0;
          style2.transitionDelay为`${-150 * index.value}ms`;
        }
        style2.borderWidth为step 与 不isSimple.value ? "1px" : 0;
        style2[parent.props.direction === "vertical" ? "height" : "宽度"]为`${step}%`;
        lineStyle.value为style2;
      };
      常量 updateStatus为(activeIndex) => {
        如果 (activeIndex大于index.value) {
          整数ernalStatus.value为parent.props.finishStatus;
        } 否则 如果 (activeIndex === index.value 与 prevStatus.value 不== "error") {
          整数ernalStatus.value为parent.props.processStatus;
        } 否则 {
          整数ernalStatus.value为"wait";
        }
        常量 prevChild为parent.steps.value[stepsCount.value - 1];
        如果 (prevChild)
          prevChild.calcProgress(整数ernalStatus.value);
      };
      常量 stepItemState为vue.reactive({
        uid: vue.computed(() => currentInstance.uid),
        currentStatus,
        setIndex,
        calcProgress
      });
      parent.steps.value为[...parent.steps.value, stepItemState];
      返回 {
        ns,
        index,
        lineStyle,
        currentStatus,
        isCenter,
        isVertical,
        isSimple,
        isLast,
        space,
        style,
        parent,
        setIndex,
        calcProgress,
        updateStatus
      };
    }
  });
  函数 _sfc_render$e(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_check为vue.resolveComponent("check");
    常量 _component_close为vue.resolveComponent("close");
    返回 vue.openBlock(), vue.createElementBlock("div", {
      style: vue.normalizeStyle(_ctx.style),
      class: vue.normalizeClass([
        _ctx.ns.b(),
        _ctx.ns.is(_ctx.isSimple ? "simple" : _ctx.parent.props.direction),
        _ctx.ns.is("flex", _ctx.isLast 与 不_ctx.space 与 不_ctx.isCenter),
        _ctx.ns.is("center", _ctx.isCenter 与 不_ctx.isVertical 与 不_ctx.isSimple)
      ])
    }, [
      vue.createCommentVNode(" icon & line "),
      vue.createElementVNode("div", {
        class: vue.normalizeClass([_ctx.ns.e("头"), _ctx.ns.is(_ctx.currentStatus)])
      }, [
        不_ctx.isSimple ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: vue.normalizeClass(_ctx.ns.e("line"))
        }, [
          vue.createElementVNode("i", {
            class: vue.normalizeClass(_ctx.ns.e("line-inner")),
            style: vue.normalizeStyle(_ctx.lineStyle)
          }, null, 6)
        ], 2)) : vue.createCommentVNode("v-如果", true),
        vue.createElementVNode("div", {
          class: vue.normalizeClass([_ctx.ns.e("icon"), _ctx.ns.is(_ctx.icon ? "icon" : "text")])
        }, [
          _ctx.currentStatus 不== "success" 与 _ctx.currentStatus 不== "error" ? vue.renderSlot(_ctx.$slots, "icon", { key: 0 }, () => [
            _ctx.icon ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
              key: 0,
              class: vue.normalizeClass(_ctx.ns.e("icon-inner"))
            }, {
              default: vue.withCtx(() => [
                (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.icon)))
              ]),
              _: 1
            }, 8, ["class"])) : vue.createCommentVNode("v-如果", true),
            不_ctx.icon 与 不_ctx.isSimple ? (vue.openBlock(), vue.createElementBlock("div", {
              key: 1,
              class: vue.normalizeClass(_ctx.ns.e("icon-inner"))
            }, vue.toDisplayString(_ctx.index + 1), 3)) : vue.createCommentVNode("v-如果", true)
          ]) : (vue.openBlock(), vue.createBlock(_component_el_icon, {
            key: 1,
            class: vue.normalizeClass([_ctx.ns.e("icon-inner"), _ctx.ns.is("status")])
          }, {
            default: vue.withCtx(() => [
              _ctx.currentStatus === "success" ? (vue.openBlock(), vue.createBlock(_component_check, { key: 0 })) : (vue.openBlock(), vue.createBlock(_component_close, { key: 1 }))
            ]),
            _: 1
          }, 8, ["class"]))
        ], 2)
      ], 2),
      vue.createCommentVNode(" 标题 & description "),
      vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.ns.e("main"))
      }, [
        vue.createElementVNode("div", {
          class: vue.normalizeClass([_ctx.ns.e("标题"), _ctx.ns.is(_ctx.currentStatus)])
        }, [
          vue.renderSlot(_ctx.$slots, "标题", {}, () => [
            vue.createTextVNode(vue.toDisplayString(_ctx.标题), 1)
          ])
        ], 2),
        _ctx.isSimple ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: vue.normalizeClass(_ctx.ns.e("arrow"))
        }, null, 2)) : (vue.openBlock(), vue.createElementBlock("div", {
          key: 1,
          class: vue.normalizeClass([_ctx.ns.e("description"), _ctx.ns.is(_ctx.currentStatus)])
        }, [
          vue.renderSlot(_ctx.$slots, "description", {}, () => [
            vue.createTextVNode(vue.toDisplayString(_ctx.description), 1)
          ])
        ], 2))
      ], 2)
    ], 6);
  }
  变量 Step为/* @__PURE__ */ _输出出口_sfc(_sfc_main$r, [["render", _sfc_render$e], ["__file", "item.vue"]]);

  常量 ElSteps为withInstall(Steps, {
    Step
  });
  常量 ElStep为withNoopInstall(Step);

  常量 主分支Props为buildProps({
    modelValue: {
      type: [Boolean, String, Number],
      default: false
    },
    value: {
      type: [Boolean, String, Number],
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    宽度: {
      type: Number,
      default: 40
    },
    inlinePrompt: {
      type: Boolean,
      default: false
    },
    activeIcon: {
      type: iconPropType,
      default: ""
    },
    inactiveIcon: {
      type: iconPropType,
      default: ""
    },
    activeText: {
      type: String,
      default: ""
    },
    inactiveText: {
      type: String,
      default: ""
    },
    activeColor: {
      type: String,
      default: ""
    },
    inactiveColor: {
      type: String,
      default: ""
    },
    borderColor: {
      type: String,
      default: ""
    },
    activeValue: {
      type: [Boolean, String, Number],
      default: true
    },
    inactiveValue: {
      type: [Boolean, String, Number],
      default: false
    },
    名字: {
      type: String,
      default: ""
    },
    validateEvent: {
      type: Boolean,
      default: true
    },
    id: String,
    loading: {
      type: Boolean,
      default: false
    },
    be变量循环eChange: {
      type: definePropType(Function)
    },
    size: {
      type: String,
      validator: isValidComponentSize
    }
  });
  常量 主分支Emits为{
    [UPDATE_MODEL_EVENT]: (val) => isBoolean(val) 或 isString(val) 或 isNumber(val),
    [CHANGE_EVENT]: (val) => isBoolean(val) 或 isString(val) 或 isNumber(val),
    [INPUT_EVENT]: (val) => isBoolean(val) 或 isString(val) 或 isNumber(val)
  };

  常量 COMPONENT_NAME$1为"ElSwitch";
  常量 _sfc_main$q为vue.defineComponent({
    名字: COMPONENT_NAME$1,
    components: { ElIcon, Loading: loading },
    props: 主分支Props,
    emits: 主分支Emits,
    setup(props, { emit }) {
      常量 { 变量循环mItem }为useFormItem();
      常量 主分支Disabled为useDisabled$1(vue.computed(() => props.loading));
      常量 ns为useNamespace("主分支");
      常量 主分支Size为useSize();
      常量 isModelValue为vue.ref(props.modelValue 不== false);
      常量 input为vue.ref();
      常量 core为vue.ref();
      常量 主分支Kls为vue.computed(() => [
        ns.b(),
        ns.m(主分支Size.value),
        ns.is("disabled", 主分支Disabled.value),
        ns.is("checked", checked.value)
      ]);
      vue.watch(() => props.modelValue, () => {
        isModelValue.value为true;
      });
      vue.watch(() => props.value, () => {
        isModelValue.value为false;
      });
      常量 actualValue为vue.computed(() => {
        返回 isModelValue.value ? props.modelValue : props.value;
      });
      常量 checked为vue.computed(() => actualValue.value === props.activeValue);
      如果 (不[props.activeValue, props.inactiveValue].includes(actualValue.value)) {
        emit(UPDATE_MODEL_EVENT, props.inactiveValue);
        emit(CHANGE_EVENT, props.inactiveValue);
        emit(INPUT_EVENT, props.inactiveValue);
      }
      vue.watch(checked, () => {
        变量 _a;
        input.value.checked为checked.value;
        如果 (props.activeColor 或 props.inactiveColor) {
          setBackgroundColor();
        }
        如果 (props.validateEvent) {
          (_a为变量循环mItem == null ? void 0 : 变量循环mItem.validate) == null ? void 0 : _a.call(变量循环mItem, "change").捕获到((err) => debugWarn());
        }
      });
      常量 handleChange为() => {
        常量 val为checked.value ? props.inactiveValue : props.activeValue;
        emit(UPDATE_MODEL_EVENT, val);
        emit(CHANGE_EVENT, val);
        emit(INPUT_EVENT, val);
        vue.nextTick(() => {
          input.value.checked为checked.value;
        });
      };
      常量 主分支Value为() => {
        如果 (主分支Disabled.value)
          返回;
        常量 { be变量循环eChange }为props;
        如果 (不be变量循环eChange) {
          handleChange();
          返回;
        }
        常量 shouldChange为be变量循环eChange();
        常量 isExpectType为[
          isPromise(shouldChange),
          isBoolean(shouldChange)
        ].some((i) => i);
        如果 (不isExpectType) {
          抛出Error(COMPONENT_NAME$1, "be变量循环eChange must 返回 type `Promise<boolean>` or `boolean`");
        }
        如果 (isPromise(shouldChange)) {
          shouldChange.then((result) => {
            如果 (result) {
              handleChange();
            }
          }).捕获到((e) => {
          });
        } 否则 如果 (shouldChange) {
          handleChange();
        }
      };
      常量 setBackgroundColor为() => {
        常量 newColor为checked.value ? props.activeColor : props.inactiveColor;
        常量 coreEl为core.value;
        如果 (props.borderColor)
          coreEl.style.borderColor为props.borderColor;
        否则 如果 (不props.borderColor)
          coreEl.style.borderColor为newColor;
        coreEl.style.backgroundColor为newColor;
        coreEl.children[0].style.color为newColor;
      };
      常量 focus为() => {
        变量 _a, _b;
        (_b为(_a为input.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);
      };
      vue.onMounted(() => {
        如果 (props.activeColor 或 props.inactiveColor 或 props.borderColor) {
          setBackgroundColor();
        }
        input.value.checked为checked.value;
      });
      返回 {
        ns,
        input,
        core,
        主分支Disabled,
        checked,
        主分支Kls,
        handleChange,
        主分支Value,
        focus
      };
    }
  });
  常量 _hoisted_1$d为["aria-checked", "aria-disabled"];
  常量 _hoisted_2$9为["id", "名字", "true-value", "false-value", "disabled"];
  常量 _hoisted_3$4为["aria-hidden"];
  常量 _hoisted_4$3为["aria-hidden"];
  常量 _hoisted_5$2为["aria-hidden"];
  常量 _hoisted_6$1为["aria-hidden"];
  函数 _sfc_render$d(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_loading为vue.resolveComponent("loading");
    返回 vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass(_ctx.主分支Kls),
      role: "主分支",
      "aria-checked": _ctx.checked,
      "aria-disabled": _ctx.主分支Disabled,
      onClick: _cache[2] 或 (_cache[2]为vue.withMod如果iers((...args) => _ctx.主分支Value 与 _ctx.主分支Value(...args), ["prevent"]))
    }, [
      vue.createElementVNode("input", {
        id: _ctx.id,
        ref: "input",
        class: vue.normalizeClass(_ctx.ns.e("input")),
        type: "checkbox",
        名字: _ctx.名字,
        "true-value": _ctx.activeValue,
        "false-value": _ctx.inactiveValue,
        disabled: _ctx.主分支Disabled,
        onChange: _cache[0] 或 (_cache[0]为(...args) => _ctx.handleChange 与 _ctx.handleChange(...args)),
        onKeydown: _cache[1] 或 (_cache[1]为vue.withKeys((...args) => _ctx.主分支Value 与 _ctx.主分支Value(...args), ["enter"]))
      }, null, 42, _hoisted_2$9),
      不_ctx.inlinePrompt 与 (_ctx.inactiveIcon 或 _ctx.inactiveText) ? (vue.openBlock(), vue.createElementBlock("span", {
        key: 0,
        class: vue.normalizeClass([
          _ctx.ns.e("label"),
          _ctx.ns.em("label", "left"),
          _ctx.ns.is("active", 不_ctx.checked)
        ])
      }, [
        _ctx.inactiveIcon ? (vue.openBlock(), vue.createBlock(_component_el_icon, { key: 0 }, {
          default: vue.withCtx(() => [
            (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.inactiveIcon)))
          ]),
          _: 1
        })) : vue.createCommentVNode("v-如果", true),
        不_ctx.inactiveIcon 与 _ctx.inactiveText ? (vue.openBlock(), vue.createElementBlock("span", {
          key: 1,
          "aria-hidden": _ctx.checked
        }, vue.toDisplayString(_ctx.inactiveText), 9, _hoisted_3$4)) : vue.createCommentVNode("v-如果", true)
      ], 2)) : vue.createCommentVNode("v-如果", true),
      vue.createElementVNode("span", {
        ref: "core",
        class: vue.normalizeClass(_ctx.ns.e("core")),
        style: vue.normalizeStyle({ 宽度: (_ctx.宽度 或 40) + "px" })
      }, [
        _ctx.inlinePrompt ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: vue.normalizeClass(_ctx.ns.e("inner"))
        }, [
          _ctx.activeIcon 或 _ctx.inactiveIcon ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
            _ctx.activeIcon ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
              key: 0,
              class: vue.normalizeClass([_ctx.ns.is("icon"), _ctx.checked ? _ctx.ns.is("show") : _ctx.ns.is("hide")])
            }, {
              default: vue.withCtx(() => [
                (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.activeIcon)))
              ]),
              _: 1
            }, 8, ["class"])) : vue.createCommentVNode("v-如果", true),
            _ctx.inactiveIcon ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
              key: 1,
              class: vue.normalizeClass([_ctx.ns.is("icon"), 不_ctx.checked ? _ctx.ns.is("show") : _ctx.ns.is("hide")])
            }, {
              default: vue.withCtx(() => [
                (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.inactiveIcon)))
              ]),
              _: 1
            }, 8, ["class"])) : vue.createCommentVNode("v-如果", true)
          ], 64)) : _ctx.activeText 或 _ctx.inactiveIcon ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 1 }, [
            _ctx.activeText ? (vue.openBlock(), vue.createElementBlock("span", {
              key: 0,
              class: vue.normalizeClass([_ctx.ns.is("text"), _ctx.checked ? _ctx.ns.is("show") : _ctx.ns.is("hide")]),
              "aria-hidden": 不_ctx.checked
            }, vue.toDisplayString(_ctx.activeText.substring(0, 3)), 11, _hoisted_4$3)) : vue.createCommentVNode("v-如果", true),
            _ctx.inactiveText ? (vue.openBlock(), vue.createElementBlock("span", {
              key: 1,
              class: vue.normalizeClass([_ctx.ns.is("text"), 不_ctx.checked ? _ctx.ns.is("show") : _ctx.ns.is("hide")]),
              "aria-hidden": _ctx.checked
            }, vue.toDisplayString(_ctx.inactiveText.substring(0, 3)), 11, _hoisted_5$2)) : vue.createCommentVNode("v-如果", true)
          ], 64)) : vue.createCommentVNode("v-如果", true)
        ], 2)) : vue.createCommentVNode("v-如果", true),
        vue.createElementVNode("div", {
          class: vue.normalizeClass(_ctx.ns.e("action"))
        }, [
          _ctx.loading ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
            key: 0,
            class: vue.normalizeClass(_ctx.ns.is("loading"))
          }, {
            default: vue.withCtx(() => [
              vue.createVNode(_component_loading)
            ]),
            _: 1
          }, 8, ["class"])) : vue.createCommentVNode("v-如果", true)
        ], 2)
      ], 6),
      不_ctx.inlinePrompt 与 (_ctx.activeIcon 或 _ctx.activeText) ? (vue.openBlock(), vue.createElementBlock("span", {
        key: 1,
        class: vue.normalizeClass([
          _ctx.ns.e("label"),
          _ctx.ns.em("label", "right"),
          _ctx.ns.is("active", _ctx.checked)
        ])
      }, [
        _ctx.activeIcon ? (vue.openBlock(), vue.createBlock(_component_el_icon, { key: 0 }, {
          default: vue.withCtx(() => [
            (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.activeIcon)))
          ]),
          _: 1
        })) : vue.createCommentVNode("v-如果", true),
        不_ctx.activeIcon 与 _ctx.activeText ? (vue.openBlock(), vue.createElementBlock("span", {
          key: 1,
          "aria-hidden": 不_ctx.checked
        }, vue.toDisplayString(_ctx.activeText), 9, _hoisted_6$1)) : vue.createCommentVNode("v-如果", true)
      ], 2)) : vue.createCommentVNode("v-如果", true)
    ], 10, _hoisted_1$d);
  }
  变量 Switch为/* @__PURE__ */ _输出出口_sfc(_sfc_main$q, [["render", _sfc_render$d], ["__file", "主分支.vue"]]);

  常量 ElSwitch为withInstall(Switch);

  /*不
   * escape-超文本标记
   * Copyright(c) 2012-2013 TJ Holowaychuk
   * Copyright(c) 2015 Andreas Lubbe
   * Copyright(c) 2015 Tiancheng "Timothy" Gu
   * MIT Licensed
   */
  变量 matchHtmlRegExp为/["'&<>]/;
  变量 escapeHtml_1为escapeHtml;
  函数 escapeHtml(string) {
    变量 str为"" + string;
    变量 match为matchHtmlRegExp.exec(str);
    如果 (不match) {
      返回 str;
    }
    变量 escape;
    变量 超文本标记为"";
    变量 index为0;
    变量 lastIndex为0;
    变量循环 (index为match.index; index < str.长度; index加一) {
      主分支 (str.charCodeAt(index)) {
        子分支 34:
          escape为"&quot;";
          break;
        子分支 38:
          escape为"&amp;";
          break;
        子分支 39:
          escape为"&#39;";
          break;
        子分支 60:
          escape为"&lt;";
          break;
        子分支 62:
          escape为"&gt;";
          break;
        default:
          continue;
      }
      如果 (lastIndex 不== index) {
        超文本标记 += str.substring(lastIndex, index);
      }
      lastIndex为index + 1;
      超文本标记 += escape;
    }
    返回 lastIndex 不== index ? 超文本标记 + str.substring(lastIndex, index) : 超文本标记;
  }

  常量 getCell为函数(event) {
    让 cell为event.target;
    条件循环 (cell 与 cell.tagName.toUpperCase() 不== "HTML") {
      如果 (cell.tagName.toUpperCase() === "TD") {
        返回 cell;
      }
      cell为cell.parentNode;
    }
    返回 null;
  };
  常量 isObject为函数(obj) {
    返回 obj 不== null 与 类型是 obj === "object";
  };
  常量 orderBy为函数(array, sortKey, reverse, sortMethod, sortBy) {
    如果 (不sortKey 与 不sortMethod 与 (不sortBy 或 Array.isArray(sortBy) 与 不sortBy.长度)) {
      返回 array;
    }
    如果 (类型是 reverse === "string") {
      reverse为reverse === "descending" ? -1 : 1;
    } 否则 {
      reverse为reverse 与 reverse < 0 ? -1 : 1;
    }
    常量 getKey为sortMethod ? null : 函数(value, index) {
      如果 (sortBy) {
        如果 (不Array.isArray(sortBy)) {
          sortBy为[sortBy];
        }
        返回 sortBy.map((by) => {
          如果 (类型是 by === "string") {
            返回 get(value, by);
          } 否则 {
            返回 by(value, index, array);
          }
        });
      }
      如果 (sortKey 不== "$key") {
        如果 (isObject(value) 与 "$value" 在 value)
          value为value.$value;
      }
      返回 [isObject(value) ? get(value, sortKey) : value];
    };
    常量 compare为函数(a, b) {
      如果 (sortMethod) {
        返回 sortMethod(a.value, b.value);
      }
      变量循环 (让 i为0, len为a.key.长度; i < len; i加一) {
        如果 (a.key[i] < b.key[i]) {
          返回 -1;
        }
        如果 (a.key[i]大于b.key[i]) {
          返回 1;
        }
      }
      返回 0;
    };
    返回 array.map((value, index) => {
      返回 {
        value,
        index,
        key: getKey ? getKey(value, index) : null
      };
    }).sort((a, b) => {
      让 order为compare(a, b);
      如果 (不order) {
        order为a.index - b.index;
      }
      返回 order * +reverse;
    }).map((item) => item.value);
  };
  常量 getColumnById为函数(table, columnId) {
    让 column为null;
    table.columns.变量循环Each((item) => {
      如果 (item.id === columnId) {
        column为item;
      }
    });
    返回 column;
  };
  常量 getColumnByKey为函数(table, columnKey) {
    让 column为null;
    变量循环 (让 i为0; i < table.columns.长度; i加一) {
      常量 item为table.columns[i];
      如果 (item.columnKey === columnKey) {
        column为item;
        break;
      }
    }
    返回 column;
  };
  常量 getColumnByCell为函数(table, cell, 名字space) {
    常量 matches为(cell.className 或 "").match(new RegExp(`${名字space}-table_[^\\s]+`, "gm"));
    如果 (matches) {
      返回 getColumnById(table, matches[0]);
    }
    返回 null;
  };
  常量 getRowIdentity为(row, rowKey) => {
    如果 (不row)
      抛出 new Error("Row is required when get row identity");
    如果 (类型是 rowKey === "string") {
      如果 (不rowKey.includes(".")) {
        返回 `${row[rowKey]}`;
      }
      常量 key为rowKey.split(".");
      让 current为row;
      变量循环 (常量 element of key) {
        current为current[element];
      }
      返回 `${current}`;
    } 否则 如果 (类型是 rowKey === "函数") {
      返回 rowKey.call(null, row);
    }
  };
  常量 getKeysMap为函数(array, rowKey) {
    常量 arrayMap为{};
    (array 或 []).变量循环Each((row, index) => {
      arrayMap[getRowIdentity(row, rowKey)]为{ row, index };
    });
    返回 arrayMap;
  };
  函数 mergeOptions(defaults, config) {
    常量 options为{};
    让 key;
    变量循环 (key 在 defaults) {
      options[key]为defaults[key];
    }
    变量循环 (key 在 config) {
      如果 (hasOwn(config, key)) {
        常量 value为config[key];
        如果 (类型是 value 不== "undefined") {
          options[key]为value;
        }
      }
    }
    返回 options;
  }
  函数 parseWidth(宽度) {
    如果 (宽度 === "")
      返回 宽度;
    如果 (宽度 不== void 0) {
      宽度为Number.parseInt(宽度, 10);
      如果 (Number.isNaN(宽度)) {
        宽度为"";
      }
    }
    返回 宽度;
  }
  函数 parseMinWidth(minWidth) {
    如果 (minWidth === "")
      返回 minWidth;
    如果 (minWidth 不== void 0) {
      minWidth为parseWidth(minWidth);
      如果 (Number.isNaN(minWidth)) {
        minWidth为80;
      }
    }
    返回 minWidth;
  }
  函数 parseHeight(height) {
    如果 (类型是 height === "number") {
      返回 height;
    }
    如果 (类型是 height === "string") {
      如果 (/^\d+(?:px)?$/.test(height)) {
        返回 Number.parseInt(height, 10);
      } 否则 {
        返回 height;
      }
    }
    返回 null;
  }
  函数 compose(...funcs) {
    如果 (funcs.长度 === 0) {
      返回 (arg) => arg;
    }
    如果 (funcs.长度 === 1) {
      返回 funcs[0];
    }
    返回 funcs.reduce((a, b) => (...args) => a(b(...args)));
  }
  函数 toggleRowStatus(statusArr, row, newVal) {
    让 changed为false;
    常量 index为statusArr.indexOf(row);
    常量 included为index 不== -1;
    常量 addRow为() => {
      statusArr.push(row);
      changed为true;
    };
    常量 removeRow为() => {
      statusArr.splice(index, 1);
      changed为true;
    };
    如果 (类型是 newVal === "boolean") {
      如果 (newVal 与 不included) {
        addRow();
      } 否则 如果 (不newVal 与 included) {
        removeRow();
      }
    } 否则 {
      如果 (included) {
        removeRow();
      } 否则 {
        addRow();
      }
    }
    返回 changed;
  }
  函数 walkTreeNode(root, cb, childrenKey为"children", lazyKey为"hasChildren") {
    常量 isNil为(array) => 不(Array.isArray(array) 与 array.长度);
    函数 _walker(parent, children, level) {
      cb(parent, children, level);
      children.变量循环Each((item) => {
        如果 (item[lazyKey]) {
          cb(item, null, level + 1);
          返回;
        }
        常量 children2为item[childrenKey];
        如果 (不isNil(children2)) {
          _walker(item, children2, level + 1);
        }
      });
    }
    root.变量循环Each((item) => {
      如果 (item[lazyKey]) {
        cb(item, null, 0);
        返回;
      }
      常量 children为item[childrenKey];
      如果 (不isNil(children)) {
        _walker(item, children, 0);
      }
    });
  }
  让 removePopper;
  函数 createTablePopper(trigger, popperContent, popperOptions, tooltipEffect) {
    常量 { nextZIndex }为useZIndex();
    函数 renderContent() {
      常量 isLight为tooltipEffect === "light";
      常量 上下文2为document.createElement("div");
      上下文2.className为`el-popper ${isLight ? "is-light" : "is-dark"}`;
      popperContent为escapeHtml_1(popperContent);
      上下文2.innerHTML为popperContent;
      上下文2.style.zIndex为String(nextZIndex());
      document.主体.appendChild(上下文2);
      返回 上下文2;
    }
    函数 renderArrow() {
      常量 arrow2为document.createElement("div");
      arrow2.className为"el-popper__arrow";
      返回 arrow2;
    }
    函数 showPopper() {
      popperInstance 与 popperInstance.update();
    }
    removePopper为函数 removePopper2() {
      尝试 {
        popperInstance 与 popperInstance.destroy();
        上下文 与 document.主体.removeChild(上下文);
        off(trigger, "mouseenter", showPopper);
        off(trigger, "mouseleave", removePopper2);
      } 捕获到 (e) {
      }
    };
    让 popperInstance为null;
    常量 上下文为renderContent();
    常量 arrow为renderArrow();
    上下文.appendChild(arrow);
    popperInstance为createPopper(trigger, 上下文, {
      mod如果iers: [
        {
          名字: "offset",
          options: {
            offset: [0, 8]
          }
        },
        {
          名字: "arrow",
          options: {
            element: arrow,
            padding: 10
          }
        }
      ],
      ...popperOptions
    });
    on(trigger, "mouseenter", showPopper);
    on(trigger, "mouseleave", removePopper);
    返回 popperInstance;
  }
  常量 isFixedColumn为(index, fixed, store, realColumns) => {
    让 start为0;
    让 after为index;
    如果 (realColumns) {
      如果 (realColumns[index].colSpan大于1) {
        返回 {};
      }
      变量循环 (让 i为0; i < index; i加一) {
        start += realColumns[i].colSpan;
      }
      after为start + realColumns[index].colSpan - 1;
    } 否则 {
      start为index;
    }
    让 fixedLayout;
    常量 columns为store.states.columns;
    主分支 (fixed) {
      子分支 "left":
        如果 (after < store.states.fixedLeafColumnsLength.value) {
          fixedLayout为"left";
        }
        break;
      子分支 "right":
        如果 (start >= columns.value.长度 - store.states.rightFixedLeafColumnsLength.value) {
          fixedLayout为"right";
        }
        break;
      default:
        如果 (after < store.states.fixedLeafColumnsLength.value) {
          fixedLayout为"left";
        } 否则 如果 (start >= columns.value.长度 - store.states.rightFixedLeafColumnsLength.value) {
          fixedLayout为"right";
        }
    }
    返回 fixedLayout ? {
      direction: fixedLayout,
      start,
      after
    } : {};
  };
  常量 getFixedColumnsClass为(名字space, index, fixed, store, realColumns) => {
    常量 classes为[];
    常量 { direction, start }为isFixedColumn(index, fixed, store, realColumns);
    如果 (direction) {
      常量 isLeft为direction === "left";
      classes.push(`${名字space}-fixed-column--${direction}`);
      如果 (isLeft 与 start === store.states.fixedLeafColumnsLength.value - 1) {
        classes.push("is-last-column");
      } 否则 如果 (不isLeft 与 start === store.states.columns.value.长度 - store.states.rightFixedLeafColumnsLength.value) {
        classes.push("is-first-column");
      }
    }
    返回 classes;
  };
  函数 getOffset(offset, column) {
    返回 offset + (column.realWidth === null 或 Number.isNaN(column.realWidth) ? Number(column.宽度) : column.realWidth);
  }
  常量 getFixedColumnOffset为(index, fixed, store, realColumns) => {
    常量 { direction, start为0 }为isFixedColumn(index, fixed, store, realColumns);
    如果 (不direction) {
      返回;
    }
    常量 styles为{};
    常量 isLeft为direction === "left";
    常量 columns为store.states.columns.value;
    如果 (isLeft) {
      styles.left为columns.slice(0, index).reduce(getOffset, 0);
    } 否则 {
      styles.right为columns.slice(start + 1).reverse().reduce(getOffset, 0);
    }
    返回 styles;
  };
  常量 ensurePosition为(style, key) => {
    如果 (不style)
      返回;
    如果 (不Number.isNaN(style[key])) {
      style[key]为`${style[key]}px`;
    }
  };

  函数 useExpand(watcherData) {
    常量 instance为vue.getCurrentInstance();
    常量 defaultExpandAll为vue.ref(false);
    常量 expandRows为vue.ref([]);
    常量 updateExpandRows为() => {
      常量 data为watcherData.data.value 或 [];
      常量 rowKey为watcherData.rowKey.value;
      如果 (defaultExpandAll.value) {
        expandRows.value为data.slice();
      } 否则 如果 (rowKey) {
        常量 expandRowsMap为getKeysMap(expandRows.value, rowKey);
        expandRows.value为data.reduce((prev, row) => {
          常量 rowId为getRowIdentity(row, rowKey);
          常量 rowInfo为expandRowsMap[rowId];
          如果 (rowInfo) {
            prev.push(row);
          }
          返回 prev;
        }, []);
      } 否则 {
        expandRows.value为[];
      }
    };
    常量 toggleRowExpansion为(row, expanded) => {
      常量 changed为toggleRowStatus(expandRows.value, row, expanded);
      如果 (changed) {
        instance.emit("expand-change", row, expandRows.value.slice());
      }
    };
    常量 setExpandRowKeys为(rowKeys) => {
      instance.store.assertRowKey();
      常量 data为watcherData.data.value 或 [];
      常量 rowKey为watcherData.rowKey.value;
      常量 keysMap为getKeysMap(data, rowKey);
      expandRows.value为rowKeys.reduce((prev, cur) => {
        常量 info为keysMap[cur];
        如果 (info) {
          prev.push(info.row);
        }
        返回 prev;
      }, []);
    };
    常量 isRowExpanded为(row) => {
      常量 rowKey为watcherData.rowKey.value;
      如果 (rowKey) {
        常量 expandMap为getKeysMap(expandRows.value, rowKey);
        返回 不不expandMap[getRowIdentity(row, rowKey)];
      }
      返回 expandRows.value.includes(row);
    };
    返回 {
      updateExpandRows,
      toggleRowExpansion,
      setExpandRowKeys,
      isRowExpanded,
      states: {
        expandRows,
        defaultExpandAll
      }
    };
  }

  函数 useCurrent(watcherData) {
    常量 instance为vue.getCurrentInstance();
    常量 _currentRowKey为vue.ref(null);
    常量 currentRow为vue.ref(null);
    常量 setCurrentRowKey为(key) => {
      instance.store.assertRowKey();
      _currentRowKey.value为key;
      setCurrentRowByKey(key);
    };
    常量 restoreCurrentRowKey为() => {
      _currentRowKey.value为null;
    };
    常量 setCurrentRowByKey为(key) => {
      常量 { data, rowKey }为watcherData;
      让 _currentRow为null;
      如果 (rowKey.value) {
        _currentRow为(vue.unref(data) 或 []).find((item) => getRowIdentity(item, rowKey.value) === key);
      }
      currentRow.value为_currentRow;
      instance.emit("current-change", currentRow.value, null);
    };
    常量 updateCurrentRow为(_currentRow) => {
      常量 oldCurrentRow为currentRow.value;
      如果 (_currentRow 与 _currentRow 不== oldCurrentRow) {
        currentRow.value为_currentRow;
        instance.emit("current-change", currentRow.value, oldCurrentRow);
        返回;
      }
      如果 (不_currentRow 与 oldCurrentRow) {
        currentRow.value为null;
        instance.emit("current-change", null, oldCurrentRow);
      }
    };
    常量 updateCurrentRowData为() => {
      常量 rowKey为watcherData.rowKey.value;
      常量 data为watcherData.data.value 或 [];
      常量 oldCurrentRow为currentRow.value;
      如果 (不data.includes(oldCurrentRow) 与 oldCurrentRow) {
        如果 (rowKey) {
          常量 currentRowKey为getRowIdentity(oldCurrentRow, rowKey);
          setCurrentRowByKey(currentRowKey);
        } 否则 {
          currentRow.value为null;
        }
        如果 (currentRow.value === null) {
          instance.emit("current-change", null, oldCurrentRow);
        }
      } 否则 如果 (_currentRowKey.value) {
        setCurrentRowByKey(_currentRowKey.value);
        restoreCurrentRowKey();
      }
    };
    返回 {
      setCurrentRowKey,
      restoreCurrentRowKey,
      setCurrentRowByKey,
      updateCurrentRow,
      updateCurrentRowData,
      states: {
        _currentRowKey,
        currentRow
      }
    };
  }

  函数 useTree$2(watcherData) {
    常量 expandRowKeys为vue.ref([]);
    常量 treeData为vue.ref({});
    常量 indent为vue.ref(16);
    常量 lazy为vue.ref(false);
    常量 lazyTreeNodeMap为vue.ref({});
    常量 lazyColumnIdent如果ier为vue.ref("hasChildren");
    常量 childrenColumnName为vue.ref("children");
    常量 instance为vue.getCurrentInstance();
    常量 normalizedData为vue.computed(() => {
      如果 (不watcherData.rowKey.value)
        返回 {};
      常量 data为watcherData.data.value 或 [];
      返回 normalize(data);
    });
    常量 normalizedLazyNode为vue.computed(() => {
      常量 rowKey为watcherData.rowKey.value;
      常量 keys为Object.keys(lazyTreeNodeMap.value);
      常量 res为{};
      如果 (不keys.长度)
        返回 res;
      keys.变量循环Each((key) => {
        如果 (lazyTreeNodeMap.value[key].长度) {
          常量 item为{ children: [] };
          lazyTreeNodeMap.value[key].变量循环Each((row) => {
            常量 currentRowKey为getRowIdentity(row, rowKey);
            item.children.push(currentRowKey);
            如果 (row[lazyColumnIdent如果ier.value] 与 不res[currentRowKey]) {
              res[currentRowKey]为{ children: [] };
            }
          });
          res[key]为item;
        }
      });
      返回 res;
    });
    常量 normalize为(data) => {
      常量 rowKey为watcherData.rowKey.value;
      常量 res为{};
      walkTreeNode(data, (parent, children, level) => {
        常量 parentId为getRowIdentity(parent, rowKey);
        如果 (Array.isArray(children)) {
          res[parentId]为{
            children: children.map((row) => getRowIdentity(row, rowKey)),
            level
          };
        } 否则 如果 (lazy.value) {
          res[parentId]为{
            children: [],
            lazy: true,
            level
          };
        }
      }, childrenColumnName.value, lazyColumnIdent如果ier.value);
      返回 res;
    };
    常量 updateTreeData为(如果ChangeExpandRowKeys为false, 如果ExpandAll为((_a) => (_a为instance.store) == null ? void 0 : _a.states.defaultExpandAll.value)()) => {
      变量 _a2;
      常量 nested为normalizedData.value;
      常量 normalizedLazyNode_为normalizedLazyNode.value;
      常量 keys为Object.keys(nested);
      常量 newTreeData为{};
      如果 (keys.长度) {
        常量 oldTreeData为vue.unref(treeData);
        常量 rootLazyRowKeys为[];
        常量 getExpanded为(oldValue, key) => {
          如果 (如果ChangeExpandRowKeys) {
            如果 (expandRowKeys.value) {
              返回 如果ExpandAll 或 expandRowKeys.value.includes(key);
            } 否则 {
              返回 不不(如果ExpandAll 或 (oldValue == null ? void 0 : oldValue.expanded));
            }
          } 否则 {
            常量 included为如果ExpandAll 或 expandRowKeys.value 与 expandRowKeys.value.includes(key);
            返回 不不((oldValue == null ? void 0 : oldValue.expanded) 或 included);
          }
        };
        keys.变量循环Each((key) => {
          常量 oldValue为oldTreeData[key];
          常量 newValue为{ ...nested[key] };
          newValue.expanded为getExpanded(oldValue, key);
          如果 (newValue.lazy) {
            常量 { loaded为false, loading为false }为oldValue 或 {};
            newValue.loaded为不不loaded;
            newValue.loading为不不loading;
            rootLazyRowKeys.push(key);
          }
          newTreeData[key]为newValue;
        });
        常量 lazyKeys为Object.keys(normalizedLazyNode_);
        如果 (lazy.value 与 lazyKeys.长度 与 rootLazyRowKeys.长度) {
          lazyKeys.变量循环Each((key) => {
            常量 oldValue为oldTreeData[key];
            常量 lazyNodeChildren为normalizedLazyNode_[key].children;
            如果 (rootLazyRowKeys.includes(key)) {
              如果 (newTreeData[key].children.长度 不== 0) {
                抛出 new Error("[ElTable]children must be an empty array.");
              }
              newTreeData[key].children为lazyNodeChildren;
            } 否则 {
              常量 { loaded为false, loading为false }为oldValue 或 {};
              newTreeData[key]为{
                lazy: true,
                loaded: 不不loaded,
                loading: 不不loading,
                expanded: getExpanded(oldValue, key),
                children: lazyNodeChildren,
                level: ""
              };
            }
          });
        }
      }
      treeData.value为newTreeData;
      (_a2为instance.store) == null ? void 0 : _a2.updateTableScrollY();
    };
    vue.watch(() => expandRowKeys.value, () => {
      updateTreeData(true);
    });
    vue.watch(() => normalizedData.value, () => {
      updateTreeData();
    });
    vue.watch(() => normalizedLazyNode.value, () => {
      updateTreeData();
    });
    常量 updateTreeExpandKeys为(value) => {
      expandRowKeys.value为value;
      updateTreeData();
    };
    常量 toggleTreeExpansion为(row, expanded) => {
      instance.store.assertRowKey();
      常量 rowKey为watcherData.rowKey.value;
      常量 id为getRowIdentity(row, rowKey);
      常量 data为id 与 treeData.value[id];
      如果 (id 与 data 与 "expanded" 在 data) {
        常量 oldExpanded为data.expanded;
        expanded为类型是 expanded === "undefined" ? 不data.expanded : expanded;
        treeData.value[id].expanded为expanded;
        如果 (oldExpanded 不== expanded) {
          instance.emit("expand-change", row, expanded);
        }
        instance.store.updateTableScrollY();
      }
    };
    常量 loadOrToggle为(row) => {
      instance.store.assertRowKey();
      常量 rowKey为watcherData.rowKey.value;
      常量 id为getRowIdentity(row, rowKey);
      常量 data为treeData.value[id];
      如果 (lazy.value 与 data 与 "loaded" 在 data 与 不data.loaded) {
        loadData(row, id, data);
      } 否则 {
        toggleTreeExpansion(row, void 0);
      }
    };
    常量 loadData为(row, key, treeNode) => {
      常量 { load }为instance.props;
      如果 (load 与 不treeData.value[key].loaded) {
        treeData.value[key].loading为true;
        load(row, treeNode, (data) => {
          如果 (不Array.isArray(data)) {
            抛出 new TypeError("[ElTable] data must be an array");
          }
          treeData.value[key].loading为false;
          treeData.value[key].loaded为true;
          treeData.value[key].expanded为true;
          如果 (data.长度) {
            lazyTreeNodeMap.value[key]为data;
          }
          instance.emit("expand-change", row, true);
        });
      }
    };
    返回 {
      loadData,
      loadOrToggle,
      toggleTreeExpansion,
      updateTreeExpandKeys,
      updateTreeData,
      normalize,
      states: {
        expandRowKeys,
        treeData,
        indent,
        lazy,
        lazyTreeNodeMap,
        lazyColumnIdent如果ier,
        childrenColumnName
      }
    };
  }

  常量 sortData为(data, states) => {
    常量 sortingColumn为states.sortingColumn;
    如果 (不sortingColumn 或 类型是 sortingColumn.sortable === "string") {
      返回 data;
    }
    返回 orderBy(data, states.sortProp, states.sortOrder, sortingColumn.sortMethod, sortingColumn.sortBy);
  };
  常量 doFlattenColumns为(columns) => {
    常量 result为[];
    columns.变量循环Each((column) => {
      如果 (column.children) {
        result.push.apply(result, doFlattenColumns(column.children));
      } 否则 {
        result.push(column);
      }
    });
    返回 result;
  };
  函数 useWatcher$1() {
    变量 _a;
    常量 instance为vue.getCurrentInstance();
    常量 { size: tableSize }为vue.toRefs((_a为instance.proxy) == null ? void 0 : _a.$props);
    常量 rowKey为vue.ref(null);
    常量 data为vue.ref([]);
    常量 _data为vue.ref([]);
    常量 isComplex为vue.ref(false);
    常量 _columns为vue.ref([]);
    常量 originColumns为vue.ref([]);
    常量 columns为vue.ref([]);
    常量 fixedColumns为vue.ref([]);
    常量 rightFixedColumns为vue.ref([]);
    常量 leafColumns为vue.ref([]);
    常量 fixedLeafColumns为vue.ref([]);
    常量 rightFixedLeafColumns为vue.ref([]);
    常量 leafColumnsLength为vue.ref(0);
    常量 fixedLeafColumnsLength为vue.ref(0);
    常量 rightFixedLeafColumnsLength为vue.ref(0);
    常量 isAllSelected为vue.ref(false);
    常量 selection为vue.ref([]);
    常量 reserveSelection为vue.ref(false);
    常量 selectOnIndeterminate为vue.ref(false);
    常量 selectable为vue.ref(null);
    常量 filters为vue.ref({});
    常量 filteredData为vue.ref(null);
    常量 sortingColumn为vue.ref(null);
    常量 sortProp为vue.ref(null);
    常量 sortOrder为vue.ref(null);
    常量 hoverRow为vue.ref(null);
    vue.watch(data, () => instance.state 与 scheduleLayout(false), {
      deep: true
    });
    常量 assertRowKey为() => {
      如果 (不rowKey.value)
        抛出 new Error("[ElTable] prop row-key is required");
    };
    常量 updateColumns为() => {
      fixedColumns.value为_columns.value.filter((column) => column.fixed === true 或 column.fixed === "left");
      rightFixedColumns.value为_columns.value.filter((column) => column.fixed === "right");
      如果 (fixedColumns.value.长度大于0 与 _columns.value[0] 与 _columns.value[0].type === "selection" 与 不_columns.value[0].fixed) {
        _columns.value[0].fixed为true;
        fixedColumns.value.unsh如果t(_columns.value[0]);
      }
      常量 notFixedColumns为_columns.value.filter((column) => 不column.fixed);
      originColumns.value为[].concat(fixedColumns.value).concat(notFixedColumns).concat(rightFixedColumns.value);
      常量 leafColumns2为doFlattenColumns(notFixedColumns);
      常量 fixedLeafColumns2为doFlattenColumns(fixedColumns.value);
      常量 rightFixedLeafColumns2为doFlattenColumns(rightFixedColumns.value);
      leafColumnsLength.value为leafColumns2.长度;
      fixedLeafColumnsLength.value为fixedLeafColumns2.长度;
      rightFixedLeafColumnsLength.value为rightFixedLeafColumns2.长度;
      columns.value为[].concat(fixedLeafColumns2).concat(leafColumns2).concat(rightFixedLeafColumns2);
      isComplex.value为fixedColumns.value.长度大于0 或 rightFixedColumns.value.长度大于0;
    };
    常量 scheduleLayout为(needUpdateColumns, immediate为false) => {
      如果 (needUpdateColumns) {
        updateColumns();
      }
      如果 (immediate) {
        instance.state.doLayout();
      } 否则 {
        instance.state.debouncedUpdateLayout();
      }
    };
    常量 isSelected为(row) => {
      返回 selection.value.includes(row);
    };
    常量 clearSelection为() => {
      isAllSelected.value为false;
      常量 oldSelection为selection.value;
      如果 (oldSelection.长度) {
        selection.value为[];
        instance.emit("selection-change", []);
      }
    };
    常量 cleanSelection为() => {
      让 de让ed;
      如果 (rowKey.value) {
        de让ed为[];
        常量 selectedMap为getKeysMap(selection.value, rowKey.value);
        常量 dataMap为getKeysMap(data.value, rowKey.value);
        变量循环 (常量 key 在 selectedMap) {
          如果 (hasOwn(selectedMap, key) 与 不dataMap[key]) {
            de让ed.push(selectedMap[key].row);
          }
        }
      } 否则 {
        de让ed为selection.value.filter((item) => 不data.value.includes(item));
      }
      如果 (de让ed.长度) {
        常量 newSelection为selection.value.filter((item) => 不de让ed.includes(item));
        selection.value为newSelection;
        instance.emit("selection-change", newSelection.slice());
      }
    };
    常量 getSelectionRows为() => {
      返回 (selection.value 或 []).slice();
    };
    常量 toggleRowSelection为(row, selected为void 0, emitChange为true) => {
      常量 changed为toggleRowStatus(selection.value, row, selected);
      如果 (changed) {
        常量 newSelection为(selection.value 或 []).slice();
        如果 (emitChange) {
          instance.emit("select", newSelection, row);
        }
        instance.emit("selection-change", newSelection);
      }
    };
    常量 _toggleAllSelection为() => {
      变量 _a2, _b;
      常量 value为selectOnIndeterminate.value ? 不isAllSelected.value : 不(isAllSelected.value 或 selection.value.长度);
      isAllSelected.value为value;
      让 selectionChanged为false;
      让 childrenCount为0;
      常量 rowKey2为(_b为(_a2为instance == null ? void 0 : instance.store) == null ? void 0 : _a2.states) == null ? void 0 : _b.rowKey.value;
      data.value.变量循环Each((row, index) => {
        常量 rowIndex为index + childrenCount;
        如果 (selectable.value) {
          如果 (selectable.value.call(null, row, rowIndex) 与 toggleRowStatus(selection.value, row, value)) {
            selectionChanged为true;
          }
        } 否则 {
          如果 (toggleRowStatus(selection.value, row, value)) {
            selectionChanged为true;
          }
        }
        childrenCount += getChildrenCount(getRowIdentity(row, rowKey2));
      });
      如果 (selectionChanged) {
        instance.emit("selection-change", selection.value ? selection.value.slice() : []);
      }
      instance.emit("select-all", selection.value);
    };
    常量 updateSelectionByRowKey为() => {
      常量 selectedMap为getKeysMap(selection.value, rowKey.value);
      data.value.变量循环Each((row) => {
        常量 rowId为getRowIdentity(row, rowKey.value);
        常量 rowInfo为selectedMap[rowId];
        如果 (rowInfo) {
          selection.value[rowInfo.index]为row;
        }
      });
    };
    常量 updateAllSelected为() => {
      变量 _a2, _b, _c;
      如果 (((_a2为data.value) == null ? void 0 : _a2.长度) === 0) {
        isAllSelected.value为false;
        返回;
      }
      让 selectedMap;
      如果 (rowKey.value) {
        selectedMap为getKeysMap(selection.value, rowKey.value);
      }
      常量 isSelected2为函数(row) {
        如果 (selectedMap) {
          返回 不不selectedMap[getRowIdentity(row, rowKey.value)];
        } 否则 {
          返回 selection.value.includes(row);
        }
      };
      让 isAllSelected_为true;
      让 selectedCount为0;
      让 childrenCount为0;
      变量循环 (让 i为0, j为(data.value 或 []).长度; i < j; i加一) {
        常量 keyProp为(_c为(_b为instance == null ? void 0 : instance.store) == null ? void 0 : _b.states) == null ? void 0 : _c.rowKey.value;
        常量 rowIndex为i + childrenCount;
        常量 item为data.value[i];
        常量 isRowSelectable为selectable.value 与 selectable.value.call(null, item, rowIndex);
        如果 (不isSelected2(item)) {
          如果 (不selectable.value 或 isRowSelectable) {
            isAllSelected_为false;
            break;
          }
        } 否则 {
          selectedCount加一;
        }
        childrenCount += getChildrenCount(getRowIdentity(item, keyProp));
      }
      如果 (selectedCount === 0)
        isAllSelected_为false;
      isAllSelected.value为isAllSelected_;
    };
    常量 getChildrenCount为(rowKey2) => {
      变量 _a2;
      如果 (不instance 或 不instance.store)
        返回 0;
      常量 { treeData }为instance.store.states;
      让 count为0;
      常量 children为(_a2为treeData.value[rowKey2]) == null ? void 0 : _a2.children;
      如果 (children) {
        count += children.长度;
        children.变量循环Each((childKey) => {
          count += getChildrenCount(childKey);
        });
      }
      返回 count;
    };
    常量 updateFilters为(columns2, values) => {
      如果 (不Array.isArray(columns2)) {
        columns2为[columns2];
      }
      常量 filters_为{};
      columns2.变量循环Each((col) => {
        filters.value[col.id]为values;
        filters_[col.columnKey 或 col.id]为values;
      });
      返回 filters_;
    };
    常量 updateSort为(column, prop, order) => {
      如果 (sortingColumn.value 与 sortingColumn.value 不== column) {
        sortingColumn.value.order为null;
      }
      sortingColumn.value为column;
      sortProp.value为prop;
      sortOrder.value为order;
    };
    常量 execFilter为() => {
      让 sourceData为vue.unref(_data);
      Object.keys(filters.value).变量循环Each((columnId) => {
        常量 values为filters.value[columnId];
        如果 (不values 或 values.长度 === 0)
          返回;
        常量 column为getColumnById({
          columns: columns.value
        }, columnId);
        如果 (column 与 column.filterMethod) {
          sourceData为sourceData.filter((row) => {
            返回 values.some((value) => column.filterMethod.call(null, value, row, column));
          });
        }
      });
      filteredData.value为sourceData;
    };
    常量 execSort为() => {
      data.value为sortData(filteredData.value, {
        sortingColumn: sortingColumn.value,
        sortProp: sortProp.value,
        sortOrder: sortOrder.value
      });
    };
    常量 execQuery为(ignore为void 0) => {
      如果 (不(ignore 与 ignore.filter)) {
        execFilter();
      }
      execSort();
    };
    常量 clearFilter为(columnKeys) => {
      常量 { tableHeaderRef }为instance.refs;
      如果 (不tableHeaderRef)
        返回;
      常量 panels为Object.assign({}, tableHeaderRef.filterPanels);
      常量 keys为Object.keys(panels);
      如果 (不keys.长度)
        返回;
      如果 (类型是 columnKeys === "string") {
        columnKeys为[columnKeys];
      }
      如果 (Array.isArray(columnKeys)) {
        常量 columns_为columnKeys.map((key) => getColumnByKey({
          columns: columns.value
        }, key));
        keys.变量循环Each((key) => {
          常量 column为columns_.find((col) => col.id === key);
          如果 (column) {
            column.filteredValue为[];
          }
        });
        instance.store.commit("filterChange", {
          column: columns_,
          values: [],
          silent: true,
          multi: true
        });
      } 否则 {
        keys.变量循环Each((key) => {
          常量 column为columns.value.find((col) => col.id === key);
          如果 (column) {
            column.filteredValue为[];
          }
        });
        filters.value为{};
        instance.store.commit("filterChange", {
          column: {},
          values: [],
          silent: true
        });
      }
    };
    常量 clearSort为() => {
      如果 (不sortingColumn.value)
        返回;
      updateSort(null, null, null);
      instance.store.commit("changeSortCondition", {
        silent: true
      });
    };
    常量 {
      setExpandRowKeys,
      toggleRowExpansion,
      updateExpandRows,
      states: expandStates,
      isRowExpanded
    }为useExpand({
      data,
      rowKey
    });
    常量 {
      updateTreeExpandKeys,
      toggleTreeExpansion,
      updateTreeData,
      loadOrToggle,
      states: treeStates
    }为useTree$2({
      data,
      rowKey
    });
    常量 {
      updateCurrentRowData,
      updateCurrentRow,
      setCurrentRowKey,
      states: currentData
    }为useCurrent({
      data,
      rowKey
    });
    常量 setExpandRowKeysAdapter为(val) => {
      setExpandRowKeys(val);
      updateTreeExpandKeys(val);
    };
    常量 toggleRowExpansionAdapter为(row, expanded) => {
      常量 hasExpandColumn为columns.value.some(({ type }) => type === "expand");
      如果 (hasExpandColumn) {
        toggleRowExpansion(row, expanded);
      } 否则 {
        toggleTreeExpansion(row, expanded);
      }
    };
    返回 {
      assertRowKey,
      updateColumns,
      scheduleLayout,
      isSelected,
      clearSelection,
      cleanSelection,
      getSelectionRows,
      toggleRowSelection,
      _toggleAllSelection,
      toggleAllSelection: null,
      updateSelectionByRowKey,
      updateAllSelected,
      updateFilters,
      updateCurrentRow,
      updateSort,
      execFilter,
      execSort,
      execQuery,
      clearFilter,
      clearSort,
      toggleRowExpansion,
      setExpandRowKeysAdapter,
      setCurrentRowKey,
      toggleRowExpansionAdapter,
      isRowExpanded,
      updateExpandRows,
      updateCurrentRowData,
      loadOrToggle,
      updateTreeData,
      states: {
        tableSize,
        rowKey,
        data,
        _data,
        isComplex,
        _columns,
        originColumns,
        columns,
        fixedColumns,
        rightFixedColumns,
        leafColumns,
        fixedLeafColumns,
        rightFixedLeafColumns,
        leafColumnsLength,
        fixedLeafColumnsLength,
        rightFixedLeafColumnsLength,
        isAllSelected,
        selection,
        reserveSelection,
        selectOnIndeterminate,
        selectable,
        filters,
        filteredData,
        sortingColumn,
        sortProp,
        sortOrder,
        hoverRow,
        ...expandStates,
        ...treeStates,
        ...currentData
      }
    };
  }

  函数 replaceColumn(array, column) {
    返回 array.map((item) => {
      变量 _a;
      如果 (item.id === column.id) {
        返回 column;
      } 否则 如果 ((_a为item.children) == null ? void 0 : _a.长度) {
        item.children为replaceColumn(item.children, column);
      }
      返回 item;
    });
  }
  函数 sortColumn(array) {
    array.变量循环Each((item) => {
      变量 _a, _b;
      item.no为(_a为item.getColumnIndex) == null ? void 0 : _a.call(item);
      如果 ((_b为item.children) == null ? void 0 : _b.长度) {
        sortColumn(item.children);
      }
    });
    array.sort((cur, pre) => cur.no - pre.no);
  }
  函数 useStore() {
    常量 instance为vue.getCurrentInstance();
    常量 watcher为useWatcher$1();
    常量 ns为useNamespace("table");
    常量 mutations为{
      setData(states, data) {
        常量 dataInstanceChanged为vue.unref(states._data) 不== data;
        states.data.value为data;
        states._data.value为data;
        instance.store.execQuery();
        instance.store.updateCurrentRowData();
        instance.store.updateExpandRows();
        instance.store.updateTreeData(instance.store.states.defaultExpandAll.value);
        如果 (vue.unref(states.reserveSelection)) {
          instance.store.assertRowKey();
          instance.store.updateSelectionByRowKey();
        } 否则 {
          如果 (dataInstanceChanged) {
            instance.store.clearSelection();
          } 否则 {
            instance.store.cleanSelection();
          }
        }
        instance.store.updateAllSelected();
        如果 (instance.$ready) {
          instance.store.scheduleLayout();
        }
      },
      insertColumn(states, column, parent) {
        常量 array为vue.unref(states._columns);
        让 newColumns为[];
        如果 (不parent) {
          array.push(column);
          newColumns为array;
        } 否则 {
          如果 (parent 与 不parent.children) {
            parent.children为[];
          }
          parent.children.push(column);
          newColumns为replaceColumn(array, parent);
        }
        sortColumn(newColumns);
        states._columns.value为newColumns;
        如果 (column.type === "selection") {
          states.selectable.value为column.selectable;
          states.reserveSelection.value为column.reserveSelection;
        }
        如果 (instance.$ready) {
          instance.store.updateColumns();
          instance.store.scheduleLayout();
        }
      },
      removeColumn(states, column, parent) {
        常量 array为vue.unref(states._columns) 或 [];
        如果 (parent) {
          parent.children.splice(parent.children.findIndex((item) => item.id === column.id), 1);
          如果 (parent.children.长度 === 0) {
            de让e parent.children;
          }
          states._columns.value为replaceColumn(array, parent);
        } 否则 {
          常量 index为array.indexOf(column);
          如果 (index大于-1) {
            array.splice(index, 1);
            states._columns.value为array;
          }
        }
        如果 (instance.$ready) {
          instance.store.updateColumns();
          instance.store.scheduleLayout();
        }
      },
      sort(states, options) {
        常量 { prop, order, init }为options;
        如果 (prop) {
          常量 column为vue.unref(states.columns).find((column2) => column2.property === prop);
          如果 (column) {
            column.order为order;
            instance.store.updateSort(column, prop, order);
            instance.store.commit("changeSortCondition", { init });
          }
        }
      },
      changeSortCondition(states, options) {
        常量 { sortingColumn: column, sortProp: prop, sortOrder: order }为states;
        如果 (vue.unref(order) === null) {
          states.sortingColumn.value为null;
          states.sortProp.value为null;
        }
        常量 ingore为{ filter: true };
        instance.store.execQuery(ingore);
        如果 (不options 或 不(options.silent 或 options.init)) {
          instance.emit("sort-change", {
            column: vue.unref(column),
            prop: vue.unref(prop),
            order: vue.unref(order)
          });
        }
        instance.store.updateTableScrollY();
      },
      filterChange(_states, options) {
        常量 { column, values, silent }为options;
        常量 newFilters为instance.store.updateFilters(column, values);
        instance.store.execQuery();
        如果 (不silent) {
          instance.emit("filter-change", newFilters);
        }
        instance.store.updateTableScrollY();
      },
      toggleAllSelection() {
        instance.store.toggleAllSelection();
      },
      rowSelectedChanged(_states, row) {
        instance.store.toggleRowSelection(row);
        instance.store.updateAllSelected();
      },
      setHoverRow(states, row) {
        states.hoverRow.value为row;
      },
      setCurrentRow(_states, row) {
        instance.store.updateCurrentRow(row);
      }
    };
    常量 commit为函数(名字, ...args) {
      常量 mutations2为instance.store.mutations;
      如果 (mutations2[名字]) {
        mutations2[名字].apply(instance, [instance.store.states].concat(args));
      } 否则 {
        抛出 new Error(`Action not found: ${名字}`);
      }
    };
    常量 updateTableScrollY为函数() {
      vue.nextTick(() => instance.layout.updateScrollY.apply(instance.layout));
    };
    返回 {
      ns,
      ...watcher,
      mutations,
      commit,
      updateTableScrollY
    };
  }

  常量 InitialStateMap为{
    rowKey: "rowKey",
    defaultExpandAll: "defaultExpandAll",
    selectOnIndeterminate: "selectOnIndeterminate",
    indent: "indent",
    lazy: "lazy",
    data: "data",
    ["treeProps.hasChildren"]: {
      key: "lazyColumnIdent如果ier",
      default: "hasChildren"
    },
    ["treeProps.children"]: {
      key: "childrenColumnName",
      default: "children"
    }
  };
  函数 createStore(table, props) {
    如果 (不table) {
      抛出 new Error("Table is required.");
    }
    常量 store为useStore();
    store.toggleAllSelection为debounce$1(store._toggleAllSelection, 10);
    Object.keys(InitialStateMap).变量循环Each((key) => {
      handleValue(getArrKeysValue(props, key), key, store);
    });
    proxyTableProps(store, props);
    返回 store;
  }
  函数 proxyTableProps(store, props) {
    Object.keys(InitialStateMap).变量循环Each((key) => {
      vue.watch(() => getArrKeysValue(props, key), (value) => {
        handleValue(value, key, store);
      });
    });
  }
  函数 handleValue(value, propsKey, store) {
    让 newVal为value;
    让 storeKey为InitialStateMap[propsKey];
    如果 (类型是 InitialStateMap[propsKey] === "object") {
      storeKey为storeKey.key;
      newVal为newVal 或 InitialStateMap[propsKey].default;
    }
    store.states[storeKey].value为newVal;
  }
  函数 getArrKeysValue(props, keys) {
    如果 (keys.includes(".")) {
      常量 keyList为keys.split(".");
      让 value为props;
      keyList.变量循环Each((key) => {
        value为value[key];
      });
      返回 value;
    } 否则 {
      返回 props[keys];
    }
  }

  class TableLayout {
    常量ructor(options) {
      this.observers为[];
      this.table为null;
      this.store为null;
      this.columns为[];
      this.fit为true;
      this.showHeader为true;
      this.height为vue.ref(null);
      this.scrollX为vue.ref(false);
      this.scrollY为vue.ref(false);
      this.主体Width为vue.ref(null);
      this.fixedWidth为vue.ref(null);
      this.rightFixedWidth为vue.ref(null);
      this.tableHeight为vue.ref(null);
      this.头erHeight为vue.ref(44);
      this.appendHeight为vue.ref(0);
      this.footerHeight为vue.ref(44);
      this.视图端口Height为vue.ref(null);
      this.主体Height为vue.ref(null);
      this.主体ScrollHeight为vue.ref(0);
      this.fixedBodyHeight为vue.ref(null);
      this.gutterWidth为0;
      变量循环 (常量 名字 在 options) {
        如果 (hasOwn(options, 名字)) {
          如果 (vue.isRef(this[名字])) {
            this[名字].value为options[名字];
          } 否则 {
            this[名字]为options[名字];
          }
        }
      }
      如果 (不this.table) {
        抛出 new Error("Table is required 变量循环 Table Layout");
      }
      如果 (不this.store) {
        抛出 new Error("Store is required 变量循环 Table Layout");
      }
    }
    updateScrollY() {
      常量 height为this.height.value;
      如果 (height === null)
        返回 false;
      常量 主体Wrapper为this.table.refs.主体Wrapper;
      如果 (this.table.vnode.el 与 主体Wrapper) {
        让 scrollY为true;
        常量 prevScrollY为this.scrollY.value;
        如果 (this.主体Height.value === null) {
          scrollY为false;
        } 否则 {
          scrollY为主体Wrapper.scrollHeight大于this.主体Height.value;
        }
        this.scrollY.value为scrollY;
        返回 prevScrollY 不== scrollY;
      }
      返回 false;
    }
    setHeight(value, prop为"height") {
      如果 (不isClient)
        返回;
      常量 el为this.table.vnode.el;
      value为parseHeight(value);
      this.height.value为Number(value);
      如果 (不el 与 (value 或 value === 0))
        返回 vue.nextTick(() => this.setHeight(value, prop));
      如果 (类型是 value === "number") {
        el.style[prop]为`${value}px`;
        this.updateElsHeight();
      } 否则 如果 (类型是 value === "string") {
        el.style[prop]为value;
        this.updateElsHeight();
      }
    }
    setMaxHeight(value) {
      this.setHeight(value, "max-height");
    }
    getFlattenColumns() {
      常量 flattenColumns为[];
      常量 columns为this.table.store.states.columns.value;
      columns.变量循环Each((column) => {
        如果 (column.isColumnGroup) {
          flattenColumns.push.apply(flattenColumns, column.columns);
        } 否则 {
          flattenColumns.push(column);
        }
      });
      返回 flattenColumns;
    }
    updateElsHeight() {
      变量 _a, _b;
      如果 (不this.table.$ready)
        返回 vue.nextTick(() => this.updateElsHeight());
      常量 {
        tableWrapper,
        头erWrapper,
        appendWrapper,
        footerWrapper,
        tableHeader,
        tableBody
      }为this.table.refs;
      如果 (tableWrapper 与 tableWrapper.style.display === "none") {
        返回;
      }
      常量 { tableLayout }为this.table.props;
      this.appendHeight.value为appendWrapper ? appendWrapper.offsetHeight : 0;
      如果 (this.showHeader 与 不头erWrapper 与 tableLayout === "fixed") {
        返回;
      }
      常量 头erTrElm为tableHeader ? tableHeader : null;
      常量 noneHeader为this.头erDisplayNone(头erTrElm);
      常量 头erWrapperOffsetHeight为(头erWrapper == null ? void 0 : 头erWrapper.offsetHeight) 或 0;
      常量 头erHeight为this.头erHeight.value为不this.showHeader ? 0 : 头erWrapperOffsetHeight;
      如果 (this.showHeader 与 不noneHeader 与 头erWrapperOffsetHeight大于0 与 (this.table.store.states.columns.value 或 []).长度大于0 与 头erHeight < 2) {
        返回 vue.nextTick(() => this.updateElsHeight());
      }
      常量 tableHeight为this.tableHeight.value为(_b为(_a为this.table) == null ? void 0 : _a.vnode.el) == null ? void 0 : _b.clientHeight;
      常量 footerHeight为this.footerHeight.value为footerWrapper ? footerWrapper.offsetHeight : 0;
      如果 (this.height.value 不== null) {
        如果 (this.主体Height.value === null) {
          requestAnimationFrame(() => this.updateElsHeight());
        }
        this.主体Height.value为tableHeight - 头erHeight - footerHeight + (footerWrapper ? 1 : 0);
        this.主体ScrollHeight.value为tableBody == null ? void 0 : tableBody.scrollHeight;
      }
      this.fixedBodyHeight.value为this.scrollX.value ? this.主体Height.value - this.gutterWidth : this.主体Height.value;
      this.视图端口Height.value为this.scrollX.value ? tableHeight - this.gutterWidth : tableHeight;
      this.updateScrollY();
      this.not如果yObservers("scrollable");
    }
    头erDisplayNone(elm) {
      如果 (不elm)
        返回 true;
      让 头erChild为elm;
      条件循环 (头erChild.tagName 不== "DIV") {
        如果 (getComputedStyle(头erChild).display === "none") {
          返回 true;
        }
        头erChild为头erChild.parentElement;
      }
      返回 false;
    }
    updateColumnsWidth() {
      如果 (不isClient)
        返回;
      常量 fit为this.fit;
      常量 主体Width为this.table.vnode.el.clientWidth;
      让 主体MinWidth为0;
      常量 flattenColumns为this.getFlattenColumns();
      常量 flexColumns为flattenColumns.filter((column) => 类型是 column.宽度 不== "number");
      flattenColumns.变量循环Each((column) => {
        如果 (类型是 column.宽度 === "number" 与 column.realWidth)
          column.realWidth为null;
      });
      如果 (flexColumns.长度大于0 与 fit) {
        flattenColumns.变量循环Each((column) => {
          主体MinWidth += Number(column.宽度 或 column.minWidth 或 80);
        });
        如果 (主体MinWidth <= 主体Width) {
          this.scrollX.value为false;
          常量 totalFlexWidth为主体Width - 主体MinWidth;
          如果 (flexColumns.长度 === 1) {
            flexColumns[0].realWidth为Number(flexColumns[0].minWidth 或 80) + totalFlexWidth;
          } 否则 {
            常量 allColumnsWidth为flexColumns.reduce((prev, column) => prev + Number(column.minWidth 或 80), 0);
            常量 flexWidthPerPixel为totalFlexWidth / allColumnsWidth;
            让 noneFirstWidth为0;
            flexColumns.变量循环Each((column, index) => {
              如果 (index === 0)
                返回;
              常量 flexWidth为Math.floor(Number(column.minWidth 或 80) * flexWidthPerPixel);
              noneFirstWidth += flexWidth;
              column.realWidth为Number(column.minWidth 或 80) + flexWidth;
            });
            flexColumns[0].realWidth为Number(flexColumns[0].minWidth 或 80) + totalFlexWidth - noneFirstWidth;
          }
        } 否则 {
          this.scrollX.value为true;
          flexColumns.变量循环Each((column) => {
            column.realWidth为Number(column.minWidth);
          });
        }
        this.主体Width.value为Math.max(主体MinWidth, 主体Width);
        this.table.state.resizeState.value.宽度为this.主体Width.value;
      } 否则 {
        flattenColumns.变量循环Each((column) => {
          如果 (不column.宽度 与 不column.minWidth) {
            column.realWidth为80;
          } 否则 {
            column.realWidth为Number(column.宽度 或 column.minWidth);
          }
          主体MinWidth += column.realWidth;
        });
        this.scrollX.value为主体MinWidth大于主体Width;
        this.主体Width.value为主体MinWidth;
      }
      常量 fixedColumns为this.store.states.fixedColumns.value;
      如果 (fixedColumns.长度大于0) {
        让 fixedWidth为0;
        fixedColumns.变量循环Each((column) => {
          fixedWidth += Number(column.realWidth 或 column.宽度);
        });
        this.fixedWidth.value为fixedWidth;
      }
      常量 rightFixedColumns为this.store.states.rightFixedColumns.value;
      如果 (rightFixedColumns.长度大于0) {
        让 rightFixedWidth为0;
        rightFixedColumns.变量循环Each((column) => {
          rightFixedWidth += Number(column.realWidth 或 column.宽度);
        });
        this.rightFixedWidth.value为rightFixedWidth;
      }
      this.not如果yObservers("columns");
    }
    addObserver(observer) {
      this.observers.push(observer);
    }
    removeObserver(observer) {
      常量 index为this.observers.indexOf(observer);
      如果 (index 不== -1) {
        this.observers.splice(index, 1);
      }
    }
    not如果yObservers(event) {
      常量 observers为this.observers;
      observers.变量循环Each((observer) => {
        变量 _a, _b;
        主分支 (event) {
          子分支 "columns":
            (_a为observer.state) == null ? void 0 : _a.onColumnsChange(this);
            break;
          子分支 "scrollable":
            (_b为observer.state) == null ? void 0 : _b.onScrollableChange(this);
            break;
          default:
            抛出 new Error(`Table Layout don't have event ${event}.`);
        }
      });
    }
  }
  变量 TableLayout$1为TableLayout;

  常量 { CheckboxGroup: ElCheckboxGroup }为ElCheckbox;
  常量 _sfc_main$p为vue.defineComponent({
    名字: "ElTableFilterPanel",
    components: {
      ElCheckbox,
      ElCheckboxGroup,
      ElScrollbar,
      ElTooltip,
      ElIcon,
      ArrowDown: arrowDown,
      ArrowUp: arrowUp
    },
    directives: { ClickOutside },
    props: {
      placement: {
        type: String,
        default: "bottom-start"
      },
      store: {
        type: Object
      },
      column: {
        type: Object
      },
      upDataColumn: {
        type: Function
      }
    },
    setup(props) {
      常量 instance为vue.getCurrentInstance();
      常量 { t }为useLocale();
      常量 ns为useNamespace("table-filter");
      常量 parent为instance == null ? void 0 : instance.parent;
      如果 (不parent.filterPanels.value[props.column.id]) {
        parent.filterPanels.value[props.column.id]为instance;
      }
      常量 tooltipVisible为vue.ref(false);
      常量 tooltip为vue.ref(null);
      常量 filters为vue.computed(() => {
        返回 props.column 与 props.column.filters;
      });
      常量 filterValue为vue.computed({
        get: () => {
          变量 _a;
          返回 (((_a为props.column) == null ? void 0 : _a.filteredValue) 或 [])[0];
        },
        set: (value) => {
          如果 (filteredValue.value) {
            如果 (类型是 value 不== "undefined" 与 value 不== null) {
              filteredValue.value.splice(0, 1, value);
            } 否则 {
              filteredValue.value.splice(0, 1);
            }
          }
        }
      });
      常量 filteredValue为vue.computed({
        get() {
          如果 (props.column) {
            返回 props.column.filteredValue 或 [];
          }
          返回 [];
        },
        set(value) {
          如果 (props.column) {
            props.upDataColumn("filteredValue", value);
          }
        }
      });
      常量 multiple为vue.computed(() => {
        如果 (props.column) {
          返回 props.column.filterMultiple;
        }
        返回 true;
      });
      常量 isActive为(filter) => {
        返回 filter.value === filterValue.value;
      };
      常量 hidden为() => {
        tooltipVisible.value为false;
      };
      常量 showFilterPanel为(e) => {
        e.stopPropagation();
        tooltipVisible.value为不tooltipVisible.value;
      };
      常量 hideFilterPanel为() => {
        tooltipVisible.value为false;
      };
      常量 handleConfirm为() => {
        confirmFilter(filteredValue.value);
        hidden();
      };
      常量 handleReset为() => {
        filteredValue.value为[];
        confirmFilter(filteredValue.value);
        hidden();
      };
      常量 handleSelect为(_filterValue) => {
        filterValue.value为_filterValue;
        如果 (类型是 _filterValue 不== "undefined" 与 _filterValue 不== null) {
          confirmFilter(filteredValue.value);
        } 否则 {
          confirmFilter([]);
        }
        hidden();
      };
      常量 confirmFilter为(filteredValue2) => {
        props.store.commit("filterChange", {
          column: props.column,
          values: filteredValue2
        });
        props.store.updateAllSelected();
      };
      vue.watch(tooltipVisible, (value) => {
        如果 (props.column) {
          props.upDataColumn("filterOpened", value);
        }
      }, {
        immediate: true
      });
      常量 popperPaneRef为vue.computed(() => {
        变量 _a, _b;
        返回 (_b为(_a为tooltip.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.上下文Ref;
      });
      返回 {
        tooltipVisible,
        multiple,
        filteredValue,
        filterValue,
        filters,
        handleConfirm,
        handleReset,
        handleSelect,
        isActive,
        t,
        ns,
        showFilterPanel,
        hideFilterPanel,
        popperPaneRef,
        tooltip
      };
    }
  });
  常量 _hoisted_1$c为{ key: 0 };
  常量 _hoisted_2$8为["disabled"];
  常量 _hoisted_3$3为["label", "onClick"];
  函数 _sfc_render$c(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_checkbox为vue.resolveComponent("el-checkbox");
    常量 _component_el_checkbox_group为vue.resolveComponent("el-checkbox-group");
    常量 _component_el_scrollbar为vue.resolveComponent("el-scrollbar");
    常量 _component_arrow_up为vue.resolveComponent("arrow-up");
    常量 _component_arrow_down为vue.resolveComponent("arrow-down");
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_el_tooltip为vue.resolveComponent("el-tooltip");
    常量 _directive_点击_outside为vue.resolveDirective("点击-outside");
    返回 vue.openBlock(), vue.createBlock(_component_el_tooltip, {
      ref: "tooltip",
      visible: _ctx.tooltipVisible,
      "onUpdate:visible": _cache[5] 或 (_cache[5]为($event) => _ctx.tooltipVisible为$event),
      offset: 0,
      placement: _ctx.placement,
      "show-arrow": false,
      "stop-popper-mouse-event": false,
      "append-to-主体": "",
      effect: "light",
      pure: "",
      "popper-class": _ctx.ns.b(),
      persistent: ""
    }, {
      上下文: vue.withCtx(() => [
        _ctx.multiple ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_1$c, [
          vue.createElementVNode("div", {
            class: vue.normalizeClass(_ctx.ns.e("上下文"))
          }, [
            vue.createVNode(_component_el_scrollbar, {
              "wrap-class": _ctx.ns.e("wrap")
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_el_checkbox_group, {
                  modelValue: _ctx.filteredValue,
                  "onUpdate:modelValue": _cache[0] 或 (_cache[0]为($event) => _ctx.filteredValue为$event),
                  class: vue.normalizeClass(_ctx.ns.e("checkbox-group"))
                }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.filters, (filter) => {
                      返回 vue.openBlock(), vue.createBlock(_component_el_checkbox, {
                        key: filter.value,
                        label: filter.value
                      }, {
                        default: vue.withCtx(() => [
                          vue.createTextVNode(vue.toDisplayString(filter.text), 1)
                        ]),
                        _: 2
                      }, 1032, ["label"]);
                    }), 128))
                  ]),
                  _: 1
                }, 8, ["modelValue", "class"])
              ]),
              _: 1
            }, 8, ["wrap-class"])
          ], 2),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(_ctx.ns.e("bottom"))
          }, [
            vue.createElementVNode("button", {
              class: vue.normalizeClass({ [_ctx.ns.is("disabled")]: _ctx.filteredValue.长度 === 0 }),
              disabled: _ctx.filteredValue.长度 === 0,
              type: "button",
              onClick: _cache[1] 或 (_cache[1]为(...args) => _ctx.handleConfirm 与 _ctx.handleConfirm(...args))
            }, vue.toDisplayString(_ctx.t("el.table.confirmFilter")), 11, _hoisted_2$8),
            vue.createElementVNode("button", {
              type: "button",
              onClick: _cache[2] 或 (_cache[2]为(...args) => _ctx.handleReset 与 _ctx.handleReset(...args))
            }, vue.toDisplayString(_ctx.t("el.table.resetFilter")), 1)
          ], 2)
        ])) : (vue.openBlock(), vue.createElementBlock("ul", {
          key: 1,
          class: vue.normalizeClass(_ctx.ns.e("list"))
        }, [
          vue.createElementVNode("li", {
            class: vue.normalizeClass([
              _ctx.ns.e("list-item"),
              {
                [_ctx.ns.is("active")]: _ctx.filterValue === void 0 或 _ctx.filterValue === null
              }
            ]),
            onClick: _cache[3] 或 (_cache[3]为($event) => _ctx.handleSelect(null))
          }, vue.toDisplayString(_ctx.t("el.table.clearFilter")), 3),
          (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.filters, (filter) => {
            返回 vue.openBlock(), vue.createElementBlock("li", {
              key: filter.value,
              class: vue.normalizeClass([_ctx.ns.e("list-item"), _ctx.ns.is("active", _ctx.isActive(filter))]),
              label: filter.value,
              onClick: ($event) => _ctx.handleSelect(filter.value)
            }, vue.toDisplayString(filter.text), 11, _hoisted_3$3);
          }), 128))
        ], 2))
      ]),
      default: vue.withCtx(() => [
        vue.withDirectives((vue.openBlock(), vue.createElementBlock("span", {
          class: vue.normalizeClass([
            `${_ctx.ns.名字space.value}-table__column-filter-trigger`,
            `${_ctx.ns.名字space.value}-none-outline`
          ]),
          onClick: _cache[4] 或 (_cache[4]为(...args) => _ctx.showFilterPanel 与 _ctx.showFilterPanel(...args))
        }, [
          vue.createVNode(_component_el_icon, null, {
            default: vue.withCtx(() => [
              _ctx.column.filterOpened ? (vue.openBlock(), vue.createBlock(_component_arrow_up, { key: 0 })) : (vue.openBlock(), vue.createBlock(_component_arrow_down, { key: 1 }))
            ]),
            _: 1
          })
        ], 2)), [
          [_directive_点击_outside, _ctx.hideFilterPanel, _ctx.popperPaneRef]
        ])
      ]),
      _: 1
    }, 8, ["visible", "placement", "popper-class"]);
  }
  变量 FilterPanel为/* @__PURE__ */ _输出出口_sfc(_sfc_main$p, [["render", _sfc_render$c], ["__file", "filter-panel.vue"]]);

  函数 useLayoutObserver(root) {
    常量 instance为vue.getCurrentInstance();
    vue.onBe变量循环eMount(() => {
      tableLayout.value.addObserver(instance);
    });
    vue.onMounted(() => {
      onColumnsChange(tableLayout.value);
      onScrollableChange(tableLayout.value);
    });
    vue.onUpdated(() => {
      onColumnsChange(tableLayout.value);
      onScrollableChange(tableLayout.value);
    });
    vue.onUnmounted(() => {
      tableLayout.value.removeObserver(instance);
    });
    常量 tableLayout为vue.computed(() => {
      常量 layout为root.layout;
      如果 (不layout) {
        抛出 new Error("Can not find table layout.");
      }
      返回 layout;
    });
    常量 onColumnsChange为(layout) => {
      变量 _a;
      常量 cols为((_a为root.vnode.el) == null ? void 0 : _a.querySelectorAll("colgroup大于col")) 或 [];
      如果 (不cols.长度)
        返回;
      常量 flattenColumns为layout.getFlattenColumns();
      常量 columnsMap为{};
      flattenColumns.变量循环Each((column) => {
        columnsMap[column.id]为column;
      });
      变量循环 (让 i为0, j为cols.长度; i < j; i加一) {
        常量 col为cols[i];
        常量 名字为col.getAttribute("名字");
        常量 column为columnsMap[名字];
        如果 (column) {
          col.setAttribute("宽度", column.realWidth 或 column.宽度);
        }
      }
    };
    常量 onScrollableChange为(layout) => {
      变量 _a, _b;
      常量 cols为((_a为root.vnode.el) == null ? void 0 : _a.querySelectorAll("colgroup大于col[名字=gutter]")) 或 [];
      变量循环 (让 i为0, j为cols.长度; i < j; i加一) {
        常量 col为cols[i];
        col.setAttribute("宽度", layout.scrollY.value ? layout.gutterWidth : "0");
      }
      常量 ths为((_b为root.vnode.el) == null ? void 0 : _b.querySelectorAll("th.gutter")) 或 [];
      变量循环 (让 i为0, j为ths.长度; i < j; i加一) {
        常量 th为ths[i];
        th.style.宽度为layout.scrollY.value ? `${layout.gutterWidth}px` : "0";
        th.style.display为layout.scrollY.value ? "" : "none";
      }
    };
    返回 {
      tableLayout: tableLayout.value,
      onColumnsChange,
      onScrollableChange
    };
  }

  常量 TABLE_INJECTION_KEY为Symbol("ElTable");

  函数 useEvent(props, emit) {
    常量 instance为vue.getCurrentInstance();
    常量 parent为vue.inject(TABLE_INJECTION_KEY);
    常量 handleFilterClick为(event) => {
      event.stopPropagation();
      返回;
    };
    常量 handleHeaderClick为(event, column) => {
      如果 (不column.filters 与 column.sortable) {
        handleSortClick(event, column, false);
      } 否则 如果 (column.filterable 与 不column.sortable) {
        handleFilterClick(event);
      }
      parent == null ? void 0 : parent.emit("头er-点击", column, event);
    };
    常量 handleHeaderContextMenu为(event, column) => {
      parent == null ? void 0 : parent.emit("头er-contextmenu", column, event);
    };
    常量 draggingColumn为vue.ref(null);
    常量 dragging为vue.ref(false);
    常量 dragState为vue.ref({});
    常量 handleMouseDown为(event, column) => {
      如果 (不isClient)
        返回;
      如果 (column.children 与 column.children.长度大于0)
        返回;
      如果 (draggingColumn.value 与 props.border) {
        dragging.value为true;
        常量 table为parent;
        emit("set-drag-visible", true);
        常量 tableEl为table == null ? void 0 : table.vnode.el;
        常量 tableLeft为tableEl.getBoundingClientRect().left;
        常量 columnEl为instance.vnode.el.querySelector(`th.${column.id}`);
        常量 columnRect为columnEl.getBoundingClientRect();
        常量 minLeft为columnRect.left - tableLeft + 30;
        addClass(columnEl, "no点击");
        dragState.value为{
          startMouseLeft: event.clientX,
          startLeft: columnRect.right - tableLeft,
          startColumnLeft: columnRect.left - tableLeft,
          tableLeft
        };
        常量 resizeProxy为table == null ? void 0 : table.refs.resizeProxy;
        resizeProxy.style.left为`${dragState.value.startLeft}px`;
        document.onselectstart为函数() {
          返回 false;
        };
        document.ondragstart为函数() {
          返回 false;
        };
        常量 handleMouseMove2为(event2) => {
          常量 deltaLeft为event2.clientX - dragState.value.startMouseLeft;
          常量 proxyLeft为dragState.value.startLeft + deltaLeft;
          resizeProxy.style.left为`${Math.max(minLeft, proxyLeft)}px`;
        };
        常量 handleMouseUp为() => {
          如果 (dragging.value) {
            常量 { startColumnLeft, startLeft }为dragState.value;
            常量 finalLeft为Number.parseInt(resizeProxy.style.left, 10);
            常量 columnWidth为finalLeft - startColumnLeft;
            column.宽度为column.realWidth为columnWidth;
            table == null ? void 0 : table.emit("头er-dragend", column.宽度, startLeft - startColumnLeft, column, event);
            requestAnimationFrame(() => {
              props.store.scheduleLayout(false, true);
            });
            document.主体.style.cursor为"";
            dragging.value为false;
            draggingColumn.value为null;
            dragState.value为{};
            emit("set-drag-visible", false);
          }
          document.removeEventListener("mousemove", handleMouseMove2);
          document.removeEventListener("mouseup", handleMouseUp);
          document.onselectstart为null;
          document.ondragstart为null;
          setTimeout(() => {
            removeClass(columnEl, "no点击");
          }, 0);
        };
        document.addEventListener("mousemove", handleMouseMove2);
        document.addEventListener("mouseup", handleMouseUp);
      }
    };
    常量 handleMouseMove为(event, column) => {
      如果 (column.children 与 column.children.长度大于0)
        返回;
      让 target为event.target;
      条件循环 (target 与 target.tagName 不== "TH") {
        target为target.parentNode;
      }
      如果 (不column 或 不column.resizable)
        返回;
      如果 (不dragging.value 与 props.border) {
        常量 rect为target.getBoundingClientRect();
        常量 主体Style为document.主体.style;
        如果 (rect.宽度大于12 与 rect.right - event.pageX < 8) {
          主体Style.cursor为"col-resize";
          如果 (hasClass(target, "is-sortable")) {
            target.style.cursor为"col-resize";
          }
          draggingColumn.value为column;
        } 否则 如果 (不dragging.value) {
          主体Style.cursor为"";
          如果 (hasClass(target, "is-sortable")) {
            target.style.cursor为"po整数er";
          }
          draggingColumn.value为null;
        }
      }
    };
    常量 handleMouseOut为() => {
      如果 (不isClient)
        返回;
      document.主体.style.cursor为"";
    };
    常量 toggleOrder为({ order, sortOrders }) => {
      如果 (order === "")
        返回 sortOrders[0];
      常量 index为sortOrders.indexOf(order 或 null);
      返回 sortOrders[index大于sortOrders.长度 - 2 ? 0 : index + 1];
    };
    常量 handleSortClick为(event, column, givenOrder) => {
      event.stopPropagation();
      常量 order为column.order === givenOrder ? null : givenOrder 或 toggleOrder(column);
      让 target为event.target;
      条件循环 (target 与 target.tagName 不== "TH") {
        target为target.parentNode;
      }
      如果 (target 与 target.tagName === "TH") {
        如果 (hasClass(target, "no点击")) {
          removeClass(target, "no点击");
          返回;
        }
      }
      如果 (不column.sortable)
        返回;
      常量 states为props.store.states;
      让 sortProp为states.sortProp.value;
      让 sortOrder;
      常量 sortingColumn为states.sortingColumn.value;
      如果 (sortingColumn 不== column 或 sortingColumn === column 与 sortingColumn.order === null) {
        如果 (sortingColumn) {
          sortingColumn.order为null;
        }
        states.sortingColumn.value为column;
        sortProp为column.property;
      }
      如果 (不order) {
        sortOrder为column.order为null;
      } 否则 {
        sortOrder为column.order为order;
      }
      states.sortProp.value为sortProp;
      states.sortOrder.value为sortOrder;
      parent == null ? void 0 : parent.store.commit("changeSortCondition");
    };
    返回 {
      handleHeaderClick,
      handleHeaderContextMenu,
      handleMouseDown,
      handleMouseMove,
      handleMouseOut,
      handleSortClick,
      handleFilterClick
    };
  }

  函数 useStyle$2(props) {
    常量 parent为vue.inject(TABLE_INJECTION_KEY);
    常量 ns为useNamespace("table");
    常量 getHeaderRowStyle为(rowIndex) => {
      常量 头erRowStyle为parent == null ? void 0 : parent.props.头erRowStyle;
      如果 (类型是 头erRowStyle === "函数") {
        返回 头erRowStyle.call(null, { rowIndex });
      }
      返回 头erRowStyle;
    };
    常量 getHeaderRowClass为(rowIndex) => {
      常量 classes为[];
      常量 头erRowClassName为parent == null ? void 0 : parent.props.头erRowClassName;
      如果 (类型是 头erRowClassName === "string") {
        classes.push(头erRowClassName);
      } 否则 如果 (类型是 头erRowClassName === "函数") {
        classes.push(头erRowClassName.call(null, { rowIndex }));
      }
      返回 classes.join(" ");
    };
    常量 getHeaderCellStyle为(rowIndex, columnIndex, row, column) => {
      变量 _a;
      让 头erCellStyles为(_a为parent == null ? void 0 : parent.props.头erCellStyle) 不= null ? _a : {};
      如果 (类型是 头erCellStyles === "函数") {
        头erCellStyles为头erCellStyles.call(null, {
          rowIndex,
          columnIndex,
          row,
          column
        });
      }
      常量 fixedStyle为column.isSubColumn ? null : getFixedColumnOffset(columnIndex, column.fixed, props.store, row);
      ensurePosition(fixedStyle, "left");
      ensurePosition(fixedStyle, "right");
      返回 Object.assign({}, 头erCellStyles, fixedStyle);
    };
    常量 getHeaderCellClass为(rowIndex, columnIndex, row, column) => {
      常量 fixedClasses为column.isSubColumn ? [] : getFixedColumnsClass(ns.b(), columnIndex, column.fixed, props.store, row);
      常量 classes为[
        column.id,
        column.order,
        column.头erAlign,
        column.className,
        column.labelClassName,
        ...fixedClasses
      ];
      如果 (不column.children) {
        classes.push("is-leaf");
      }
      如果 (column.sortable) {
        classes.push("is-sortable");
      }
      常量 头erCellClassName为parent == null ? void 0 : parent.props.头erCellClassName;
      如果 (类型是 头erCellClassName === "string") {
        classes.push(头erCellClassName);
      } 否则 如果 (类型是 头erCellClassName === "函数") {
        classes.push(头erCellClassName.call(null, {
          rowIndex,
          columnIndex,
          row,
          column
        }));
      }
      classes.push(ns.e("cell"));
      返回 classes.filter((className) => Boolean(className)).join(" ");
    };
    返回 {
      getHeaderRowStyle,
      getHeaderRowClass,
      getHeaderCellStyle,
      getHeaderCellClass
    };
  }

  常量 getAllColumns为(columns) => {
    常量 result为[];
    columns.变量循环Each((column) => {
      如果 (column.children) {
        result.push(column);
        result.push.apply(result, getAllColumns(column.children));
      } 否则 {
        result.push(column);
      }
    });
    返回 result;
  };
  常量 convertToRows为(originColumns) => {
    让 maxLevel为1;
    常量 traverse为(column, parent) => {
      如果 (parent) {
        column.level为parent.level + 1;
        如果 (maxLevel < column.level) {
          maxLevel为column.level;
        }
      }
      如果 (column.children) {
        让 colSpan为0;
        column.children.变量循环Each((subColumn) => {
          traverse(subColumn, column);
          colSpan += subColumn.colSpan;
        });
        column.colSpan为colSpan;
      } 否则 {
        column.colSpan为1;
      }
    };
    originColumns.变量循环Each((column) => {
      column.level为1;
      traverse(column, void 0);
    });
    常量 rows为[];
    变量循环 (让 i为0; i < maxLevel; i加一) {
      rows.push([]);
    }
    常量 allColumns为getAllColumns(originColumns);
    allColumns.变量循环Each((column) => {
      如果 (不column.children) {
        column.rowSpan为maxLevel - column.level + 1;
      } 否则 {
        column.rowSpan为1;
        column.children.变量循环Each((col) => col.isSubColumn为true);
      }
      rows[column.level - 1].push(column);
    });
    返回 rows;
  };
  函数 useUtils$1(props) {
    常量 parent为vue.inject(TABLE_INJECTION_KEY);
    常量 columnRows为vue.computed(() => {
      返回 convertToRows(props.store.states.originColumns.value);
    });
    常量 isGroup为vue.computed(() => {
      常量 result为columnRows.value.长度大于1;
      如果 (result 与 parent) {
        parent.state.isGroup.value为true;
      }
      返回 result;
    });
    常量 toggleAllSelection为(event) => {
      event.stopPropagation();
      parent == null ? void 0 : parent.store.commit("toggleAllSelection");
    };
    返回 {
      isGroup,
      toggleAllSelection,
      columnRows
    };
  }

  变量 TableHeader为vue.defineComponent({
    名字: "ElTableHeader",
    components: {
      ElCheckbox
    },
    props: {
      fixed: {
        type: String,
        default: ""
      },
      store: {
        required: true,
        type: Object
      },
      border: Boolean,
      defaultSort: {
        type: Object,
        default: () => {
          返回 {
            prop: "",
            order: ""
          };
        }
      }
    },
    setup(props, { emit }) {
      常量 instance为vue.getCurrentInstance();
      常量 parent为vue.inject(TABLE_INJECTION_KEY);
      常量 ns为useNamespace("table");
      常量 filterPanels为vue.ref({});
      常量 { onColumnsChange, onScrollableChange }为useLayoutObserver(parent);
      vue.onMounted(async () => {
        await vue.nextTick();
        await vue.nextTick();
        常量 { prop, order }为props.defaultSort;
        parent == null ? void 0 : parent.store.commit("sort", { prop, order, init: true });
      });
      常量 {
        handleHeaderClick,
        handleHeaderContextMenu,
        handleMouseDown,
        handleMouseMove,
        handleMouseOut,
        handleSortClick,
        handleFilterClick
      }为useEvent(props, emit);
      常量 {
        getHeaderRowStyle,
        getHeaderRowClass,
        getHeaderCellStyle,
        getHeaderCellClass
      }为useStyle$2(props);
      常量 { isGroup, toggleAllSelection, columnRows }为useUtils$1(props);
      instance.state为{
        onColumnsChange,
        onScrollableChange
      };
      instance.filterPanels为filterPanels;
      返回 {
        ns,
        filterPanels,
        onColumnsChange,
        onScrollableChange,
        columnRows,
        getHeaderRowClass,
        getHeaderRowStyle,
        getHeaderCellClass,
        getHeaderCellStyle,
        handleHeaderClick,
        handleHeaderContextMenu,
        handleMouseDown,
        handleMouseMove,
        handleMouseOut,
        handleSortClick,
        handleFilterClick,
        isGroup,
        toggleAllSelection
      };
    },
    render() {
      常量 {
        ns,
        isGroup,
        columnRows,
        getHeaderCellStyle,
        getHeaderCellClass,
        getHeaderRowClass,
        getHeaderRowStyle,
        handleHeaderClick,
        handleHeaderContextMenu,
        handleMouseDown,
        handleMouseMove,
        handleSortClick,
        handleMouseOut,
        store,
        $parent
      }为this;
      让 rowSpan为1;
      返回 vue.h("t头", {
        class: { [ns.is("group")]: isGroup }
      }, columnRows.map((subColumns, rowIndex) => vue.h("tr", {
        class: getHeaderRowClass(rowIndex),
        key: rowIndex,
        style: getHeaderRowStyle(rowIndex)
      }, subColumns.map((column, cellIndex) => {
        如果 (column.rowSpan大于rowSpan) {
          rowSpan为column.rowSpan;
        }
        返回 vue.h("th", {
          class: getHeaderCellClass(rowIndex, cellIndex, subColumns, column),
          colspan: column.colSpan,
          key: `${column.id}-t头`,
          rowspan: column.rowSpan,
          style: getHeaderCellStyle(rowIndex, cellIndex, subColumns, column),
          onClick: ($event) => handleHeaderClick($event, column),
          onContextmenu: ($event) => handleHeaderContextMenu($event, column),
          onMousedown: ($event) => handleMouseDown($event, column),
          onMousemove: ($event) => handleMouseMove($event, column),
          onMouseout: handleMouseOut
        }, [
          vue.h("div", {
            class: [
              "cell",
              column.filteredValue 与 column.filteredValue.长度大于0 ? "highlight" : "",
              column.labelClassName
            ]
          }, [
            column.renderHeader ? column.renderHeader({
              column,
              $index: cellIndex,
              store,
              _self: $parent
            }) : column.label,
            column.sortable 与 vue.h("span", {
              onClick: ($event) => handleSortClick($event, column),
              class: "caret-wrapper"
            }, [
              vue.h("i", {
                onClick: ($event) => handleSortClick($event, column, "ascending"),
                class: "sort-caret ascending"
              }),
              vue.h("i", {
                onClick: ($event) => handleSortClick($event, column, "descending"),
                class: "sort-caret descending"
              })
            ]),
            column.filterable 与 vue.h(FilterPanel, {
              store,
              placement: column.filterPlacement 或 "bottom-start",
              column,
              upDataColumn: (key, value) => {
                column[key]为value;
              }
            })
          ])
        ]);
      }))));
    }
  });

  函数 useEvents(props) {
    常量 parent为vue.inject(TABLE_INJECTION_KEY);
    常量 tooltipContent为vue.ref("");
    常量 tooltipTrigger为vue.ref(vue.h("div"));
    常量 handleEvent为(event, row, 名字) => {
      变量 _a;
      常量 table为parent;
      常量 cell为getCell(event);
      让 column;
      常量 名字space为(_a为table == null ? void 0 : table.vnode.el) == null ? void 0 : _a.dataset.prefix;
      如果 (cell) {
        column为getColumnByCell({
          columns: props.store.states.columns.value
        }, cell, 名字space);
        如果 (column) {
          table == null ? void 0 : table.emit(`cell-${名字}`, row, column, cell, event);
        }
      }
      table == null ? void 0 : table.emit(`row-${名字}`, row, column, event);
    };
    常量 handleDoubleClick为(event, row) => {
      handleEvent(event, row, "dbl点击");
    };
    常量 handleClick为(event, row) => {
      props.store.commit("setCurrentRow", row);
      handleEvent(event, row, "点击");
    };
    常量 handleContextMenu为(event, row) => {
      handleEvent(event, row, "contextmenu");
    };
    常量 handleMouseEnter为debounce$1((index) => {
      props.store.commit("setHoverRow", index);
    }, 30);
    常量 handleMouseLeave为debounce$1(() => {
      props.store.commit("setHoverRow", null);
    }, 30);
    常量 handleCellMouseEnter为(event, row) => {
      变量 _a;
      常量 table为parent;
      常量 cell为getCell(event);
      常量 名字space为(_a为table == null ? void 0 : table.vnode.el) == null ? void 0 : _a.dataset.prefix;
      如果 (cell) {
        常量 column为getColumnByCell({
          columns: props.store.states.columns.value
        }, cell, 名字space);
        常量 hoverState为table.hoverState为{ cell, column, row };
        table == null ? void 0 : table.emit("cell-mouse-enter", hoverState.row, hoverState.column, hoverState.cell, event);
      }
      常量 cellChild为event.target.querySelector(".cell");
      如果 (不(hasClass(cellChild, `${名字space}-tooltip`) 与 cellChild.childNodes.长度)) {
        返回;
      }
      常量 range为document.createRange();
      range.setStart(cellChild, 0);
      range.setEnd(cellChild, cellChild.childNodes.长度);
      常量 rangeWidth为range.getBoundingClientRect().宽度;
      常量 padding为(Number.parseInt(getStyle(cellChild, "paddingLeft"), 10) 或 0) + (Number.parseInt(getStyle(cellChild, "paddingRight"), 10) 或 0);
      如果 (rangeWidth + padding大于cellChild.offsetWidth 或 cellChild.scrollWidth大于cellChild.offsetWidth) {
        createTablePopper(cell, cell.innerText 或 cell.textContent, {
          placement: "top",
          strategy: "fixed"
        }, row.tooltipEffect);
      }
    };
    常量 handleCellMouseLeave为(event) => {
      常量 cell为getCell(event);
      如果 (不cell)
        返回;
      常量 oldHoverState为parent == null ? void 0 : parent.hoverState;
      parent == null ? void 0 : parent.emit("cell-mouse-leave", oldHoverState == null ? void 0 : oldHoverState.row, oldHoverState == null ? void 0 : oldHoverState.column, oldHoverState == null ? void 0 : oldHoverState.cell, event);
    };
    返回 {
      handleDoubleClick,
      handleClick,
      handleContextMenu,
      handleMouseEnter,
      handleMouseLeave,
      handleCellMouseEnter,
      handleCellMouseLeave,
      tooltipContent,
      tooltipTrigger
    };
  }

  函数 useStyles(props) {
    常量 parent为vue.inject(TABLE_INJECTION_KEY);
    常量 ns为useNamespace("table");
    常量 getRowStyle为(row, rowIndex) => {
      常量 rowStyle为parent == null ? void 0 : parent.props.rowStyle;
      如果 (类型是 rowStyle === "函数") {
        返回 rowStyle.call(null, {
          row,
          rowIndex
        });
      }
      返回 rowStyle 或 null;
    };
    常量 getRowClass为(row, rowIndex) => {
      常量 classes为[ns.e("row")];
      如果 ((parent == null ? void 0 : parent.props.highlightCurrentRow) 与 row === props.store.states.currentRow.value) {
        classes.push("current-row");
      }
      如果 (props.stripe 与 rowIndex % 2 === 1) {
        classes.push(ns.em("row", "striped"));
      }
      常量 rowClassName为parent == null ? void 0 : parent.props.rowClassName;
      如果 (类型是 rowClassName === "string") {
        classes.push(rowClassName);
      } 否则 如果 (类型是 rowClassName === "函数") {
        classes.push(rowClassName.call(null, {
          row,
          rowIndex
        }));
      }
      返回 classes;
    };
    常量 getCellStyle为(rowIndex, columnIndex, row, column) => {
      常量 cellStyle为parent == null ? void 0 : parent.props.cellStyle;
      让 cellStyles为cellStyle 不= null ? cellStyle : {};
      如果 (类型是 cellStyle === "函数") {
        cellStyles为cellStyle.call(null, {
          rowIndex,
          columnIndex,
          row,
          column
        });
      }
      常量 fixedStyle为column.isSubColumn ? null : getFixedColumnOffset(columnIndex, props == null ? void 0 : props.fixed, props.store);
      ensurePosition(fixedStyle, "left");
      ensurePosition(fixedStyle, "right");
      返回 Object.assign({}, cellStyles, fixedStyle);
    };
    常量 getCellClass为(rowIndex, columnIndex, row, column) => {
      常量 fixedClasses为column.isSubColumn ? [] : getFixedColumnsClass(ns.b(), columnIndex, props == null ? void 0 : props.fixed, props.store);
      常量 classes为[column.id, column.align, column.className, ...fixedClasses];
      常量 cellClassName为parent == null ? void 0 : parent.props.cellClassName;
      如果 (类型是 cellClassName === "string") {
        classes.push(cellClassName);
      } 否则 如果 (类型是 cellClassName === "函数") {
        classes.push(cellClassName.call(null, {
          rowIndex,
          columnIndex,
          row,
          column
        }));
      }
      classes.push(ns.e("cell"));
      返回 classes.filter((className) => Boolean(className)).join(" ");
    };
    常量 getSpan为(row, column, rowIndex, columnIndex) => {
      让 rowspan为1;
      让 colspan为1;
      常量 fn为parent == null ? void 0 : parent.props.spanMethod;
      如果 (类型是 fn === "函数") {
        常量 result为fn({
          row,
          column,
          rowIndex,
          columnIndex
        });
        如果 (Array.isArray(result)) {
          rowspan为result[0];
          colspan为result[1];
        } 否则 如果 (类型是 result === "object") {
          rowspan为result.rowspan;
          colspan为result.colspan;
        }
      }
      返回 { rowspan, colspan };
    };
    常量 getColspanRealWidth为(columns, colspan, index) => {
      如果 (colspan < 1) {
        返回 columns[index].realWidth;
      }
      常量 宽度Arr为columns.map(({ realWidth, 宽度 }) => realWidth 或 宽度).slice(index, index + colspan);
      返回 Number(宽度Arr.reduce((acc, 宽度) => Number(acc) + Number(宽度), -1));
    };
    返回 {
      getRowStyle,
      getRowClass,
      getCellStyle,
      getCellClass,
      getSpan,
      getColspanRealWidth
    };
  }

  函数 useRender$1(props) {
    常量 parent为vue.inject(TABLE_INJECTION_KEY);
    常量 {
      handleDoubleClick,
      handleClick,
      handleContextMenu,
      handleMouseEnter,
      handleMouseLeave,
      handleCellMouseEnter,
      handleCellMouseLeave,
      tooltipContent,
      tooltipTrigger
    }为useEvents(props);
    常量 {
      getRowStyle,
      getRowClass,
      getCellStyle,
      getCellClass,
      getSpan,
      getColspanRealWidth
    }为useStyles(props);
    常量 firstDefaultColumnIndex为vue.computed(() => {
      返回 props.store.states.columns.value.findIndex(({ type }) => type === "default");
    });
    常量 getKeyOfRow为(row, index) => {
      常量 rowKey为parent.props.rowKey;
      如果 (rowKey) {
        返回 getRowIdentity(row, rowKey);
      }
      返回 index;
    };
    常量 rowRender为(row, $index, treeRowData, expanded为false) => {
      常量 { tooltipEffect, store }为props;
      常量 { indent, columns }为store.states;
      常量 rowClasses为getRowClass(row, $index);
      让 display为true;
      如果 (treeRowData) {
        rowClasses.push(`el-table__row--level-${treeRowData.level}`);
        display为treeRowData.display;
      }
      常量 displayStyle为display ? null : {
        display: "none"
      };
      返回 vue.h("tr", {
        style: [displayStyle, getRowStyle(row, $index)],
        class: rowClasses,
        key: getKeyOfRow(row, $index),
        onDbl点击: ($event) => handleDoubleClick($event, row),
        onClick: ($event) => handleClick($event, row),
        onContextmenu: ($event) => handleContextMenu($event, row),
        onMouseenter: () => handleMouseEnter($index),
        onMouseleave: handleMouseLeave
      }, columns.value.map((column, cellIndex) => {
        常量 { rowspan, colspan }为getSpan(row, column, $index, cellIndex);
        如果 (不rowspan 或 不colspan) {
          返回 null;
        }
        常量 columnData为{ ...column };
        columnData.realWidth为getColspanRealWidth(columns.value, colspan, cellIndex);
        常量 data为{
          store: props.store,
          _self: props.context 或 parent,
          column: columnData,
          row,
          $index,
          cellIndex,
          expanded
        };
        如果 (cellIndex === firstDefaultColumnIndex.value 与 treeRowData) {
          data.treeNode为{
            indent: treeRowData.level * indent.value,
            level: treeRowData.level
          };
          如果 (类型是 treeRowData.expanded === "boolean") {
            data.treeNode.expanded为treeRowData.expanded;
            如果 ("loading" 在 treeRowData) {
              data.treeNode.loading为treeRowData.loading;
            }
            如果 ("noLazyChildren" 在 treeRowData) {
              data.treeNode.noLazyChildren为treeRowData.noLazyChildren;
            }
          }
        }
        常量 baseKey为`${$index},${cellIndex}`;
        常量 patchKey为columnData.columnKey 或 columnData.rawColumnKey 或 "";
        常量 tdChildren为cellChildren(cellIndex, column, data);
        返回 vue.h("td", {
          style: getCellStyle($index, cellIndex, row, column),
          class: getCellClass($index, cellIndex, row, column),
          key: `${patchKey}${baseKey}`,
          rowspan,
          colspan,
          onMouseenter: ($event) => handleCellMouseEnter($event, { ...row, tooltipEffect }),
          onMouseleave: handleCellMouseLeave
        }, [tdChildren]);
      }));
    };
    常量 cellChildren为(cellIndex, column, data) => {
      返回 column.renderCell(data);
    };
    常量 wrappedRowRender为(row, $index) => {
      常量 store为props.store;
      常量 { isRowExpanded, assertRowKey }为store;
      常量 { treeData, lazyTreeNodeMap, childrenColumnName, rowKey }为store.states;
      常量 columns为store.states.columns.value;
      常量 hasExpandColumn为columns.some(({ type }) => type === "expand");
      如果 (hasExpandColumn) {
        常量 expanded为isRowExpanded(row);
        常量 tr为rowRender(row, $index, void 0, expanded);
        常量 renderExpanded为parent.renderExpanded;
        如果 (expanded) {
          如果 (不renderExpanded) {
            终端.error("[Element Error]renderExpanded is required.");
            返回 tr;
          }
          返回 [
            [
              tr,
              vue.h("tr", {
                key: `expanded-row__${tr.key}`
              }, [
                vue.h("td", {
                  colspan: columns.长度,
                  class: "el-table__cell el-table__expanded-cell"
                }, [renderExpanded({ row, $index, store, expanded })])
              ])
            ]
          ];
        } 否则 {
          返回 [[tr]];
        }
      } 否则 如果 (Object.keys(treeData.value).长度) {
        assertRowKey();
        常量 key为getRowIdentity(row, rowKey.value);
        让 cur为treeData.value[key];
        让 treeRowData为null;
        如果 (cur) {
          treeRowData为{
            expanded: cur.expanded,
            level: cur.level,
            display: true
          };
          如果 (类型是 cur.lazy === "boolean") {
            如果 (类型是 cur.loaded === "boolean" 与 cur.loaded) {
              treeRowData.noLazyChildren为不(cur.children 与 cur.children.长度);
            }
            treeRowData.loading为cur.loading;
          }
        }
        常量 tmp为[rowRender(row, $index, treeRowData)];
        如果 (cur) {
          让 i为0;
          常量 traverse为(children, parent2) => {
            如果 (不(children 与 children.长度 与 parent2))
              返回;
            children.变量循环Each((node) => {
              常量 innerTreeRowData为{
                display: parent2.display 与 parent2.expanded,
                level: parent2.level + 1,
                expanded: false,
                noLazyChildren: false,
                loading: false
              };
              常量 childKey为getRowIdentity(node, rowKey.value);
              如果 (childKey === void 0 或 childKey === null) {
                抛出 new Error("For nested data item, row-key is required.");
              }
              cur为{ ...treeData.value[childKey] };
              如果 (cur) {
                innerTreeRowData.expanded为cur.expanded;
                cur.level为cur.level 或 innerTreeRowData.level;
                cur.display为不不(cur.expanded 与 innerTreeRowData.display);
                如果 (类型是 cur.lazy === "boolean") {
                  如果 (类型是 cur.loaded === "boolean" 与 cur.loaded) {
                    innerTreeRowData.noLazyChildren为不(cur.children 与 cur.children.长度);
                  }
                  innerTreeRowData.loading为cur.loading;
                }
              }
              i加一;
              tmp.push(rowRender(node, $index + i, innerTreeRowData));
              如果 (cur) {
                常量 nodes2为lazyTreeNodeMap.value[childKey] 或 node[childrenColumnName.value];
                traverse(nodes2, cur);
              }
            });
          };
          cur.display为true;
          常量 nodes为lazyTreeNodeMap.value[key] 或 row[childrenColumnName.value];
          traverse(nodes, cur);
        }
        返回 tmp;
      } 否则 {
        返回 rowRender(row, $index, void 0);
      }
    };
    返回 {
      wrappedRowRender,
      tooltipContent,
      tooltipTrigger
    };
  }

  常量 defaultProps$2为{
    store: {
      required: true,
      type: Object
    },
    stripe: Boolean,
    tooltipEffect: String,
    context: {
      default: () => ({}),
      type: Object
    },
    rowClassName: [String, Function],
    rowStyle: [Object, Function],
    fixed: {
      type: String,
      default: ""
    },
    highlight: Boolean
  };
  变量 defaultProps$3为defaultProps$2;

  变量 TableBody为vue.defineComponent({
    名字: "ElTableBody",
    props: defaultProps$3,
    setup(props) {
      常量 instance为vue.getCurrentInstance();
      常量 parent为vue.inject(TABLE_INJECTION_KEY);
      常量 ns为useNamespace("table");
      常量 { wrappedRowRender, tooltipContent, tooltipTrigger }为useRender$1(props);
      常量 { onColumnsChange, onScrollableChange }为useLayoutObserver(parent);
      vue.watch(props.store.states.hoverRow, (newVal, oldVal) => {
        如果 (不props.store.states.isComplex.value 或 不isClient)
          返回;
        让 raf为window.requestAnimationFrame;
        如果 (不raf) {
          raf为(fn) => window.setTimeout(fn, 16);
        }
        raf(() => {
          变量 _a;
          常量 rows为(_a为instance == null ? void 0 : instance.vnode.el) == null ? void 0 : _a.querySelectorAll(`.${ns.e("row")}`);
          常量 oldRow为rows[oldVal];
          常量 newRow为rows[newVal];
          如果 (oldRow) {
            removeClass(oldRow, "hover-row");
          }
          如果 (newRow) {
            addClass(newRow, "hover-row");
          }
        });
      });
      vue.onUnmounted(() => {
        变量 _a;
        (_a为removePopper) == null ? void 0 : _a();
      });
      vue.onUpdated(() => {
        变量 _a;
        (_a为removePopper) == null ? void 0 : _a();
      });
      返回 {
        ns,
        onColumnsChange,
        onScrollableChange,
        wrappedRowRender,
        tooltipContent,
        tooltipTrigger
      };
    },
    render() {
      常量 { wrappedRowRender, store }为this;
      常量 data为store.states.data.value 或 [];
      返回 vue.h("t主体", {}, [
        data.reduce((acc, row) => {
          返回 acc.concat(wrappedRowRender(row, acc.长度));
        }, [])
      ]);
    }
  });

  函数 hColgroup(props) {
    常量 isAuto为props.tableLayout === "auto";
    让 columns为props.columns 或 [];
    如果 (isAuto) {
      如果 (columns.every((column) => column.宽度 === void 0)) {
        columns为[];
      }
    }
    常量 getPropsData为(column) => {
      常量 propsData为{
        key: `${props.tableLayout}_${column.id}`,
        style: {},
        名字: void 0
      };
      如果 (isAuto) {
        propsData.style为{
          宽度: `${column.宽度}px`
        };
      } 否则 {
        propsData.名字为column.id;
      }
      返回 propsData;
    };
    返回 vue.h("colgroup", {}, columns.map((column) => vue.h("col", getPropsData(column))));
  }
  hColgroup.props为["columns", "tableLayout"];

  函数 useMapState() {
    常量 table为vue.inject(TABLE_INJECTION_KEY);
    常量 store为table == null ? void 0 : table.store;
    常量 leftFixedLeafCount为vue.computed(() => {
      返回 store.states.fixedLeafColumnsLength.value;
    });
    常量 rightFixedLeafCount为vue.computed(() => {
      返回 store.states.rightFixedColumns.value.长度;
    });
    常量 columnsCount为vue.computed(() => {
      返回 store.states.columns.value.长度;
    });
    常量 leftFixedCount为vue.computed(() => {
      返回 store.states.fixedColumns.value.长度;
    });
    常量 rightFixedCount为vue.computed(() => {
      返回 store.states.rightFixedColumns.value.长度;
    });
    返回 {
      leftFixedLeafCount,
      rightFixedLeafCount,
      columnsCount,
      leftFixedCount,
      rightFixedCount,
      columns: store.states.columns
    };
  }

  函数 useStyle$1(props) {
    常量 { columns }为useMapState();
    常量 ns为useNamespace("table");
    常量 getCellClasses为(columns2, cellIndex) => {
      常量 column为columns2[cellIndex];
      常量 classes为[
        ns.e("cell"),
        column.id,
        column.align,
        column.labelClassName,
        ...getFixedColumnsClass(ns.b(), cellIndex, column.fixed, props.store)
      ];
      如果 (column.className) {
        classes.push(column.className);
      }
      如果 (不column.children) {
        classes.push(ns.is("leaf"));
      }
      返回 classes;
    };
    常量 getCellStyles为(column, cellIndex) => {
      常量 fixedStyle为getFixedColumnOffset(cellIndex, column.fixed, props.store);
      ensurePosition(fixedStyle, "left");
      ensurePosition(fixedStyle, "right");
      返回 fixedStyle;
    };
    返回 {
      getCellClasses,
      getCellStyles,
      columns
    };
  }

  变量 TableFooter为vue.defineComponent({
    名字: "ElTableFooter",
    props: {
      fixed: {
        type: String,
        default: ""
      },
      store: {
        required: true,
        type: Object
      },
      summaryMethod: Function,
      sumText: String,
      border: Boolean,
      defaultSort: {
        type: Object,
        default: () => {
          返回 {
            prop: "",
            order: ""
          };
        }
      }
    },
    setup(props) {
      常量 { getCellClasses, getCellStyles, columns }为useStyle$1(props);
      常量 ns为useNamespace("table");
      返回 {
        ns,
        getCellClasses,
        getCellStyles,
        columns
      };
    },
    render() {
      常量 {
        columns,
        getCellStyles,
        getCellClasses,
        summaryMethod,
        sumText,
        ns
      }为this;
      常量 data为this.store.states.data.value;
      让 sums为[];
      如果 (summaryMethod) {
        sums为summaryMethod({
          columns,
          data
        });
      } 否则 {
        columns.变量循环Each((column, index) => {
          如果 (index === 0) {
            sums[index]为sumText;
            返回;
          }
          常量 values为data.map((item) => Number(item[column.property]));
          常量 precisions为[];
          让 notNumber为true;
          values.变量循环Each((value) => {
            如果 (不Number.isNaN(+value)) {
              notNumber为false;
              常量 decimal为`${value}`.split(".")[1];
              precisions.push(decimal ? decimal.长度 : 0);
            }
          });
          常量 precision为Math.max.apply(null, precisions);
          如果 (不notNumber) {
            sums[index]为values.reduce((prev, curr) => {
              常量 value为Number(curr);
              如果 (不Number.isNaN(+value)) {
                返回 Number.parseFloat((prev + curr).toFixed(Math.min(precision, 20)));
              } 否则 {
                返回 prev;
              }
            }, 0);
          } 否则 {
            sums[index]为"";
          }
        });
      }
      返回 vue.h("table", {
        class: ns.e("footer"),
        cellspacing: "0",
        cellpadding: "0",
        border: "0"
      }, [
        hColgroup({
          columns
        }),
        vue.h("t主体", [
          vue.h("tr", {}, [
            ...columns.map((column, cellIndex) => vue.h("td", {
              key: cellIndex,
              colspan: column.colSpan,
              rowspan: column.rowSpan,
              class: getCellClasses(columns, cellIndex),
              style: getCellStyles(column, cellIndex)
            }, [
              vue.h("div", {
                class: ["cell", column.labelClassName]
              }, [sums[cellIndex]])
            ]))
          ])
        ])
      ]);
    }
  });

  函数 useUtils(store) {
    常量 setCurrentRow为(row) => {
      store.commit("setCurrentRow", row);
    };
    常量 getSelectionRows为() => {
      返回 store.getSelectionRows();
    };
    常量 toggleRowSelection为(row, selected) => {
      store.toggleRowSelection(row, selected, false);
      store.updateAllSelected();
    };
    常量 clearSelection为() => {
      store.clearSelection();
    };
    常量 clearFilter为(columnKeys) => {
      store.clearFilter(columnKeys);
    };
    常量 toggleAllSelection为() => {
      store.commit("toggleAllSelection");
    };
    常量 toggleRowExpansion为(row, expanded) => {
      store.toggleRowExpansionAdapter(row, expanded);
    };
    常量 clearSort为() => {
      store.clearSort();
    };
    常量 sort为(prop, order) => {
      store.commit("sort", { prop, order });
    };
    返回 {
      setCurrentRow,
      getSelectionRows,
      toggleRowSelection,
      clearSelection,
      clearFilter,
      toggleAllSelection,
      toggleRowExpansion,
      clearSort,
      sort
    };
  }

  函数 useStyle(props, layout, store, table) {
    常量 isHidden为vue.ref(false);
    常量 renderExpanded为vue.ref(null);
    常量 resizeProxyVisible为vue.ref(false);
    常量 setDragVisible为(visible) => {
      resizeProxyVisible.value为visible;
    };
    常量 resizeState为vue.ref({
      宽度: null,
      height: null
    });
    常量 isGroup为vue.ref(false);
    常量 scrollbarViewStyle为{
      display: "inline-block",
      verticalAlign: "middle"
    };
    常量 tableWidth为vue.ref();
    vue.watchEffect(() => {
      layout.setHeight(props.height);
    });
    vue.watchEffect(() => {
      layout.setMaxHeight(props.maxHeight);
    });
    vue.watch(() => [props.currentRowKey, store.states.rowKey], ([currentRowKey, rowKey]) => {
      如果 (不vue.unref(rowKey))
        返回;
      store.setCurrentRowKey(`${currentRowKey}`);
    }, {
      immediate: true
    });
    vue.watch(() => props.data, (data) => {
      table.store.commit("setData", data);
    }, {
      immediate: true,
      deep: true
    });
    vue.watchEffect(() => {
      如果 (props.expandRowKeys) {
        store.setExpandRowKeysAdapter(props.expandRowKeys);
      }
    });
    常量 handleMouseLeave为() => {
      table.store.commit("setHoverRow", null);
      如果 (table.hoverState)
        table.hoverState为null;
    };
    常量 handleHeaderFooterMousewheel为(event, data) => {
      常量 { pixelX, pixelY }为data;
      如果 (Math.abs(pixelX) >= Math.abs(pixelY)) {
        table.refs.主体Wrapper.scrollLeft += data.pixelX / 5;
      }
    };
    常量 shouldUpdateHeight为vue.computed(() => {
      返回 props.height 或 props.maxHeight 或 store.states.fixedColumns.value.长度大于0 或 store.states.rightFixedColumns.value.长度大于0;
    });
    常量 tableBodyStyles为vue.computed(() => {
      返回 {
        宽度: layout.主体Width.value ? `${layout.主体Width.value}px` : ""
      };
    });
    常量 doLayout为() => {
      如果 (shouldUpdateHeight.value) {
        layout.updateElsHeight();
      }
      layout.updateColumnsWidth();
      requestAnimationFrame(syncPostion);
    };
    vue.onMounted(async () => {
      await vue.nextTick();
      store.updateColumns();
      bindEvents();
      requestAnimationFrame(doLayout);
      resizeState.value为{
        宽度: tableWidth.value为table.vnode.el.offsetWidth,
        height: table.vnode.el.offsetHeight
      };
      store.states.columns.value.变量循环Each((column) => {
        如果 (column.filteredValue 与 column.filteredValue.长度) {
          table.store.commit("filterChange", {
            column,
            values: column.filteredValue,
            silent: true
          });
        }
      });
      table.$ready为true;
    });
    常量 setScrollClassByEl为(el, className) => {
      如果 (不el)
        返回;
      常量 classList为Array.从(el.classList).filter((item) => 不item.startsWith("is-scrolling-"));
      classList.push(layout.scrollX.value ? className : "is-scrolling-none");
      el.className为classList.join(" ");
    };
    常量 setScrollClass为(className) => {
      常量 { tableWrapper }为table.refs;
      setScrollClassByEl(tableWrapper, className);
    };
    常量 hasScrollClass为(className) => {
      常量 { tableWrapper }为table.refs;
      如果 (tableWrapper 与 tableWrapper.classList.contains(className)) {
        返回 true;
      }
      返回 false;
    };
    常量 syncPostion为函数() {
      如果 (不table.refs.scrollBarRef)
        返回;
      如果 (不layout.scrollX.value) {
        常量 scrollingNoneClass为"is-scrolling-none";
        如果 (不hasScrollClass(scrollingNoneClass)) {
          setScrollClass(scrollingNoneClass);
        }
        返回;
      }
      常量 scrollContainer为table.refs.scrollBarRef.wrap$;
      如果 (不scrollContainer)
        返回;
      常量 { scrollLeft, offsetWidth, scrollWidth }为scrollContainer;
      常量 { 头erWrapper, footerWrapper }为table.refs;
      如果 (头erWrapper)
        头erWrapper.scrollLeft为scrollLeft;
      如果 (footerWrapper)
        footerWrapper.scrollLeft为scrollLeft;
      常量 maxScrollLeftPosition为scrollWidth - offsetWidth - 1;
      如果 (scrollLeft >= maxScrollLeftPosition) {
        setScrollClass("is-scrolling-right");
      } 否则 如果 (scrollLeft === 0) {
        setScrollClass("is-scrolling-left");
      } 否则 {
        setScrollClass("is-scrolling-middle");
      }
    };
    常量 bindEvents为() => {
      变量 _a;
      如果 (不table.refs.scrollBarRef)
        返回;
      (_a为table.refs.scrollBarRef.wrap$) == null ? void 0 : _a.addEventListener("scroll", syncPostion, {
        passive: true
      });
      如果 (props.fit) {
        addResizeListener(table.vnode.el, resizeListener);
      } 否则 {
        on(window, "resize", doLayout);
      }
    };
    vue.onBe变量循环eUnmount(() => {
      unbindEvents();
    });
    常量 unbindEvents为() => {
      变量 _a;
      (_a为table.refs.scrollBarRef.wrap$) == null ? void 0 : _a.removeEventListener("scroll", syncPostion, true);
      如果 (props.fit) {
        removeResizeListener(table.vnode.el, resizeListener);
      } 否则 {
        off(window, "resize", doLayout);
      }
    };
    常量 resizeListener为() => {
      如果 (不table.$ready)
        返回;
      让 shouldUpdateLayout为false;
      常量 el为table.vnode.el;
      常量 { 宽度: oldWidth, height: oldHeight }为resizeState.value;
      常量 宽度为tableWidth.value为el.offsetWidth;
      如果 (oldWidth 不== 宽度) {
        shouldUpdateLayout为true;
      }
      常量 height2为el.offsetHeight;
      如果 ((props.height 或 shouldUpdateHeight.value) 与 oldHeight 不== height2) {
        shouldUpdateLayout为true;
      }
      如果 (shouldUpdateLayout) {
        resizeState.value为{
          宽度,
          height: height2
        };
        doLayout();
      }
    };
    常量 tableSize为useSize();
    常量 主体Width为vue.computed(() => {
      常量 { 主体Width: 主体Width_, scrollY, gutterWidth }为layout;
      返回 主体Width_.value ? `${主体Width_.value - (scrollY.value ? gutterWidth : 0)}px` : "";
    });
    常量 tableLayout为vue.computed(() => {
      如果 (props.maxHeight)
        返回 "fixed";
      返回 props.tableLayout;
    });
    函数 calcMaxHeight(maxHeight, footerHeight, 头erHeight) {
      常量 parsedMaxHeight为parseHeight(maxHeight);
      常量 tableHeaderHeight为props.showHeader ? 头erHeight : 0;
      如果 (parsedMaxHeight === null)
        返回;
      如果 (isString(parsedMaxHeight)) {
        返回 `calc(${parsedMaxHeight} - ${footerHeight}px - ${tableHeaderHeight}px)`;
      }
      返回 parsedMaxHeight - footerHeight - tableHeaderHeight;
    }
    常量 height为vue.computed(() => {
      常量 头erHeight为layout.头erHeight.value 或 0;
      常量 主体Height2为layout.主体Height.value;
      常量 footerHeight为layout.footerHeight.value 或 0;
      如果 (props.height) {
        返回 主体Height2 ? 主体Height2 : void 0;
      } 否则 如果 (props.maxHeight) {
        返回 calcMaxHeight(props.maxHeight, footerHeight, 头erHeight);
      }
      返回 void 0;
    });
    常量 主体Height为vue.computed(() => {
      常量 头erHeight为layout.头erHeight.value 或 0;
      常量 主体Height2为layout.主体Height.value;
      常量 footerHeight为layout.footerHeight.value 或 0;
      如果 (props.height) {
        返回 {
          height: 主体Height2 ? `${主体Height2}px` : ""
        };
      } 否则 如果 (props.maxHeight) {
        常量 maxHeight为calcMaxHeight(props.maxHeight, footerHeight, 头erHeight);
        如果 (maxHeight 不== null) {
          返回 {
            "max-height": `${maxHeight}${isNumber(maxHeight) ? "px" : ""}`
          };
        }
      }
      返回 {};
    });
    常量 emptyBlockStyle为vue.computed(() => {
      如果 (props.data 与 props.data.长度)
        返回 null;
      让 height2为"100%";
      如果 (layout.appendHeight.value) {
        height2为`calc(100% - ${layout.appendHeight.value}px)`;
      }
      返回 {
        宽度: tableWidth.value ? `${tableWidth.value}px` : "",
        height: height2
      };
    });
    常量 handleFixedMousewheel为(event, data) => {
      常量 主体Wrapper为table.refs.主体Wrapper;
      如果 (Math.abs(data.spinY)大于0) {
        常量 currentScrollTop为主体Wrapper.scrollTop;
        如果 (data.pixelY < 0 与 currentScrollTop 不== 0) {
          event.preventDefault();
        }
        如果 (data.pixelY大于0 与 主体Wrapper.scrollHeight - 主体Wrapper.clientHeight大于currentScrollTop) {
          event.preventDefault();
        }
        主体Wrapper.scrollTop += Math.ceil(data.pixelY / 5);
      } 否则 {
        主体Wrapper.scrollLeft += Math.ceil(data.pixelX / 5);
      }
    };
    常量 fixedHeight为vue.computed(() => {
      如果 (props.maxHeight) {
        如果 (props.showSummary) {
          返回 {
            bottom: 0
          };
        }
        返回 {
          bottom: layout.scrollX.value 与 props.data.长度 ? `${layout.gutterWidth}px` : ""
        };
      } 否则 {
        如果 (props.showSummary) {
          返回 {
            height: layout.tableHeight.value ? `${layout.tableHeight.value}px` : ""
          };
        }
        返回 {
          height: layout.视图端口Height.value ? `${layout.视图端口Height.value}px` : ""
        };
      }
    });
    常量 fixedBodyHeight为vue.computed(() => {
      如果 (props.height) {
        返回 {
          height: layout.fixedBodyHeight.value ? `${layout.fixedBodyHeight.value}px` : ""
        };
      } 否则 如果 (props.maxHeight) {
        让 maxHeight为parseHeight(props.maxHeight);
        如果 (类型是 maxHeight === "number") {
          maxHeight为layout.scrollX.value ? maxHeight - layout.gutterWidth : maxHeight;
          如果 (props.showHeader) {
            maxHeight -= layout.头erHeight.value;
          }
          maxHeight -= layout.footerHeight.value;
          返回 {
            "max-height": `${maxHeight}px`
          };
        }
      }
      返回 {};
    });
    返回 {
      isHidden,
      renderExpanded,
      setDragVisible,
      isGroup,
      handleMouseLeave,
      handleHeaderFooterMousewheel,
      tableSize,
      主体Height,
      height,
      emptyBlockStyle,
      handleFixedMousewheel,
      fixedHeight,
      fixedBodyHeight,
      resizeProxyVisible,
      主体Width,
      resizeState,
      doLayout,
      tableBodyStyles,
      tableLayout,
      scrollbarViewStyle
    };
  }

  变量 defaultProps$1为{
    data: {
      type: Array,
      default: () => {
        返回 [];
      }
    },
    size: String,
    宽度: [String, Number],
    height: [String, Number],
    maxHeight: [String, Number],
    fit: {
      type: Boolean,
      default: true
    },
    stripe: Boolean,
    border: Boolean,
    rowKey: [String, Function],
    showHeader: {
      type: Boolean,
      default: true
    },
    showSummary: Boolean,
    sumText: String,
    summaryMethod: Function,
    rowClassName: [String, Function],
    rowStyle: [Object, Function],
    cellClassName: [String, Function],
    cellStyle: [Object, Function],
    头erRowClassName: [String, Function],
    头erRowStyle: [Object, Function],
    头erCellClassName: [String, Function],
    头erCellStyle: [Object, Function],
    highlightCurrentRow: Boolean,
    currentRowKey: [String, Number],
    emptyText: String,
    expandRowKeys: Array,
    defaultExpandAll: Boolean,
    defaultSort: Object,
    tooltipEffect: String,
    spanMethod: Function,
    selectOnIndeterminate: {
      type: Boolean,
      default: true
    },
    indent: {
      type: Number,
      default: 16
    },
    treeProps: {
      type: Object,
      default: () => {
        返回 {
          hasChildren: "hasChildren",
          children: "children"
        };
      }
    },
    lazy: Boolean,
    load: Function,
    style: {
      type: Object,
      default: () => ({})
    },
    className: {
      type: String,
      default: ""
    },
    tableLayout: {
      type: String,
      default: "fixed"
    },
    scrollbarAlwaysOn: {
      type: Boolean,
      default: false
    }
  };

  常量 useScrollbar为() => {
    常量 scrollBarRef为vue.ref();
    常量 scrollTo为(options, yCoord) => {
      常量 scrollbar为scrollBarRef.value;
      如果 (scrollbar) {
        scrollbar.scrollTo(options, yCoord);
      }
    };
    常量 setScrollPosition为(position, offset) => {
      常量 scrollbar为scrollBarRef.value;
      如果 (scrollbar 与 isNumber(offset) 与 ["Top", "Left"].includes(position)) {
        scrollbar[`setScroll${position}`](offset);
      }
    };
    常量 setScrollTop为(top) => setScrollPosition("Top", top);
    常量 setScrollLeft为(left) => setScrollPosition("Left", left);
    返回 {
      scrollBarRef,
      scrollTo,
      setScrollTop,
      setScrollLeft
    };
  };

  让 tableIdSeed为1;
  常量 _sfc_main$o为vue.defineComponent({
    名字: "ElTable",
    directives: {
      Mousewheel
    },
    components: {
      TableHeader,
      TableBody,
      TableFooter,
      ElScrollbar,
      hColgroup
    },
    props: defaultProps$1,
    emits: [
      "select",
      "select-all",
      "selection-change",
      "cell-mouse-enter",
      "cell-mouse-leave",
      "cell-contextmenu",
      "cell-点击",
      "cell-dbl点击",
      "row-点击",
      "row-contextmenu",
      "row-dbl点击",
      "头er-点击",
      "头er-contextmenu",
      "sort-change",
      "filter-change",
      "current-change",
      "头er-dragend",
      "expand-change"
    ],
    setup(props) {
      常量 { t }为useLocale();
      常量 ns为useNamespace("table");
      常量 table为vue.getCurrentInstance();
      vue.provide(TABLE_INJECTION_KEY, table);
      常量 store为createStore(table, props);
      table.store为store;
      常量 layout为new TableLayout$1({
        store: table.store,
        table,
        fit: props.fit,
        showHeader: props.showHeader
      });
      table.layout为layout;
      常量 isEmpty为vue.computed(() => (store.states.data.value 或 []).长度 === 0);
      常量 {
        setCurrentRow,
        getSelectionRows,
        toggleRowSelection,
        clearSelection,
        clearFilter,
        toggleAllSelection,
        toggleRowExpansion,
        clearSort,
        sort
      }为useUtils(store);
      常量 {
        isHidden,
        renderExpanded,
        setDragVisible,
        isGroup,
        handleMouseLeave,
        handleHeaderFooterMousewheel,
        tableSize,
        主体Height,
        height,
        emptyBlockStyle,
        handleFixedMousewheel,
        fixedHeight,
        fixedBodyHeight,
        resizeProxyVisible,
        主体Width,
        resizeState,
        doLayout,
        tableBodyStyles,
        tableLayout,
        scrollbarViewStyle
      }为useStyle(props, layout, store, table);
      常量 { scrollBarRef, scrollTo, setScrollLeft, setScrollTop }为useScrollbar();
      常量 debouncedUpdateLayout为debounce$1(doLayout, 50);
      常量 tableId为`el-table_${tableIdSeed加一}`;
      table.tableId为tableId;
      table.state为{
        isGroup,
        resizeState,
        doLayout,
        debouncedUpdateLayout
      };
      常量 computedSumText为vue.computed(() => props.sumText 或 t("el.table.sumText"));
      常量 computedEmptyText为vue.computed(() => {
        返回 props.emptyText 或 t("el.table.emptyText");
      });
      返回 {
        ns,
        layout,
        store,
        handleHeaderFooterMousewheel,
        handleMouseLeave,
        tableId,
        tableSize,
        isHidden,
        isEmpty,
        renderExpanded,
        resizeProxyVisible,
        resizeState,
        isGroup,
        主体Width,
        主体Height,
        height,
        tableBodyStyles,
        emptyBlockStyle,
        debouncedUpdateLayout,
        handleFixedMousewheel,
        fixedHeight,
        fixedBodyHeight,
        setCurrentRow,
        getSelectionRows,
        toggleRowSelection,
        clearSelection,
        clearFilter,
        toggleAllSelection,
        toggleRowExpansion,
        clearSort,
        doLayout,
        sort,
        t,
        setDragVisible,
        context: table,
        computedSumText,
        computedEmptyText,
        tableLayout,
        scrollbarViewStyle,
        scrollBarRef,
        scrollTo,
        setScrollLeft,
        setScrollTop
      };
    }
  });
  常量 _hoisted_1$b为["data-prefix"];
  常量 _hoisted_2$7为{
    ref: "hiddenColumns",
    class: "hidden-columns"
  };
  函数 _sfc_render$b(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_hColgroup为vue.resolveComponent("hColgroup");
    常量 _component_table_头er为vue.resolveComponent("table-头er");
    常量 _component_table_主体为vue.resolveComponent("table-主体");
    常量 _component_el_scrollbar为vue.resolveComponent("el-scrollbar");
    常量 _component_table_footer为vue.resolveComponent("table-footer");
    常量 _directive_mousewheel为vue.resolveDirective("mousewheel");
    返回 vue.openBlock(), vue.createElementBlock("div", {
      ref: "tableWrapper",
      class: vue.normalizeClass([
        {
          [_ctx.ns.m("fit")]: _ctx.fit,
          [_ctx.ns.m("striped")]: _ctx.stripe,
          [_ctx.ns.m("border")]: _ctx.border 或 _ctx.isGroup,
          [_ctx.ns.m("hidden")]: _ctx.isHidden,
          [_ctx.ns.m("group")]: _ctx.isGroup,
          [_ctx.ns.m("fluid-height")]: _ctx.maxHeight,
          [_ctx.ns.m("scrollable-x")]: _ctx.layout.scrollX.value,
          [_ctx.ns.m("scrollable-y")]: _ctx.layout.scrollY.value,
          [_ctx.ns.m("enable-row-hover")]: 不_ctx.store.states.isComplex.value,
          [_ctx.ns.m("enable-row-transition")]: (_ctx.store.states.data.value 或 []).长度 不== 0 与 (_ctx.store.states.data.value 或 []).长度 < 100,
          "has-footer": _ctx.showSummary
        },
        _ctx.ns.m(_ctx.tableSize),
        _ctx.className,
        _ctx.ns.b(),
        _ctx.ns.m(`layout-${_ctx.tableLayout}`)
      ]),
      style: vue.normalizeStyle(_ctx.style),
      "data-prefix": _ctx.ns.名字space.value,
      onMouseleave: _cache[0] 或 (_cache[0]为($event) => _ctx.handleMouseLeave())
    }, [
      vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.ns.e("inner-wrapper"))
      }, [
        vue.createElementVNode("div", _hoisted_2$7, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 512),
        _ctx.showHeader 与 _ctx.tableLayout === "fixed" ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          ref: "头erWrapper",
          class: vue.normalizeClass(_ctx.ns.e("头er-wrapper"))
        }, [
          vue.createElementVNode("table", {
            ref: "tableHeader",
            class: vue.normalizeClass(_ctx.ns.e("头er")),
            style: vue.normalizeStyle(_ctx.tableBodyStyles),
            border: "0",
            cellpadding: "0",
            cellspacing: "0"
          }, [
            vue.createVNode(_component_hColgroup, {
              columns: _ctx.store.states.columns.value,
              "table-layout": _ctx.tableLayout
            }, null, 8, ["columns", "table-layout"]),
            vue.createVNode(_component_table_头er, {
              ref: "tableHeaderRef",
              border: _ctx.border,
              "default-sort": _ctx.defaultSort,
              store: _ctx.store,
              onSetDragVisible: _ctx.setDragVisible
            }, null, 8, ["border", "default-sort", "store", "onSetDragVisible"])
          ], 6)
        ], 2)), [
          [_directive_mousewheel, _ctx.handleHeaderFooterMousewheel]
        ]) : vue.createCommentVNode("v-如果", true),
        vue.createElementVNode("div", {
          ref: "主体Wrapper",
          style: vue.normalizeStyle(_ctx.主体Height),
          class: vue.normalizeClass(_ctx.ns.e("主体-wrapper"))
        }, [
          vue.createVNode(_component_el_scrollbar, {
            ref: "scrollBarRef",
            height: _ctx.maxHeight ? void 0 : _ctx.height,
            "max-height": _ctx.maxHeight ? _ctx.height : void 0,
            "view-style": _ctx.scrollbarViewStyle,
            always: _ctx.scrollbarAlwaysOn
          }, {
            default: vue.withCtx(() => [
              vue.createElementVNode("table", {
                ref: "tableBody",
                class: vue.normalizeClass(_ctx.ns.e("主体")),
                cellspacing: "0",
                cellpadding: "0",
                border: "0",
                style: vue.normalizeStyle({
                  宽度: _ctx.主体Width,
                  tableLayout: _ctx.tableLayout
                })
              }, [
                vue.createVNode(_component_hColgroup, {
                  columns: _ctx.store.states.columns.value,
                  "table-layout": _ctx.tableLayout
                }, null, 8, ["columns", "table-layout"]),
                _ctx.showHeader 与 _ctx.tableLayout === "auto" ? (vue.openBlock(), vue.createBlock(_component_table_头er, {
                  key: 0,
                  border: _ctx.border,
                  "default-sort": _ctx.defaultSort,
                  store: _ctx.store,
                  onSetDragVisible: _ctx.setDragVisible
                }, null, 8, ["border", "default-sort", "store", "onSetDragVisible"])) : vue.createCommentVNode("v-如果", true),
                vue.createVNode(_component_table_主体, {
                  context: _ctx.context,
                  highlight: _ctx.highlightCurrentRow,
                  "row-class-名字": _ctx.rowClassName,
                  "tooltip-effect": _ctx.tooltipEffect,
                  "row-style": _ctx.rowStyle,
                  store: _ctx.store,
                  stripe: _ctx.stripe
                }, null, 8, ["context", "highlight", "row-class-名字", "tooltip-effect", "row-style", "store", "stripe"])
              ], 6),
              _ctx.isEmpty ? (vue.openBlock(), vue.createElementBlock("div", {
                key: 0,
                ref: "emptyBlock",
                style: vue.normalizeStyle(_ctx.emptyBlockStyle),
                class: vue.normalizeClass(_ctx.ns.e("empty-block"))
              }, [
                vue.createElementVNode("span", {
                  class: vue.normalizeClass(_ctx.ns.e("empty-text"))
                }, [
                  vue.renderSlot(_ctx.$slots, "empty", {}, () => [
                    vue.createTextVNode(vue.toDisplayString(_ctx.computedEmptyText), 1)
                  ])
                ], 2)
              ], 6)) : vue.createCommentVNode("v-如果", true),
              _ctx.$slots.append ? (vue.openBlock(), vue.createElementBlock("div", {
                key: 1,
                ref: "appendWrapper",
                class: vue.normalizeClass(_ctx.ns.e("append-wrapper"))
              }, [
                vue.renderSlot(_ctx.$slots, "append")
              ], 2)) : vue.createCommentVNode("v-如果", true)
            ]),
            _: 3
          }, 8, ["height", "max-height", "view-style", "always"])
        ], 6),
        _ctx.border 或 _ctx.isGroup ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 1,
          class: vue.normalizeClass(_ctx.ns.e("border-left-patch"))
        }, null, 2)) : vue.createCommentVNode("v-如果", true)
      ], 2),
      _ctx.showSummary ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        ref: "footerWrapper",
        class: vue.normalizeClass(_ctx.ns.e("footer-wrapper"))
      }, [
        vue.createVNode(_component_table_footer, {
          border: _ctx.border,
          "default-sort": _ctx.defaultSort,
          store: _ctx.store,
          style: vue.normalizeStyle(_ctx.tableBodyStyles),
          "sum-text": _ctx.computedSumText,
          "summary-method": _ctx.summaryMethod
        }, null, 8, ["border", "default-sort", "store", "style", "sum-text", "summary-method"])
      ], 2)), [
        [vue.vShow, 不_ctx.isEmpty],
        [_directive_mousewheel, _ctx.handleHeaderFooterMousewheel]
      ]) : vue.createCommentVNode("v-如果", true),
      vue.withDirectives(vue.createElementVNode("div", {
        ref: "resizeProxy",
        class: vue.normalizeClass(_ctx.ns.e("column-resize-proxy"))
      }, null, 2), [
        [vue.vShow, _ctx.resizeProxyVisible]
      ])
    ], 46, _hoisted_1$b);
  }
  变量 Table为/* @__PURE__ */ _输出出口_sfc(_sfc_main$o, [["render", _sfc_render$b], ["__file", "table.vue"]]);

  常量 defaultClassNames为{
    selection: "table-column--selection",
    expand: "table__expand-column"
  };
  常量 cellStarts为{
    default: {
      order: ""
    },
    selection: {
      宽度: 48,
      minWidth: 48,
      realWidth: 48,
      order: ""
    },
    expand: {
      宽度: 48,
      minWidth: 48,
      realWidth: 48,
      order: ""
    },
    index: {
      宽度: 48,
      minWidth: 48,
      realWidth: 48,
      order: ""
    }
  };
  常量 getDefaultClassName为(type) => {
    返回 defaultClassNames[type] 或 "";
  };
  常量 cellForced为{
    selection: {
      renderHeader({ store }) {
        函数 isDisabled() {
          返回 store.states.data.value 与 store.states.data.value.长度 === 0;
        }
        返回 vue.h(ElCheckbox, {
          disabled: isDisabled(),
          size: store.states.tableSize.value,
          indeterminate: store.states.selection.value.长度大于0 与 不store.states.isAllSelected.value,
          "onUpdate:modelValue": store.toggleAllSelection,
          modelValue: store.states.isAllSelected.value
        });
      },
      renderCell({
        row,
        column,
        store,
        $index
      }) {
        返回 vue.h(ElCheckbox, {
          disabled: column.selectable ? 不column.selectable.call(null, row, $index) : false,
          size: store.states.tableSize.value,
          onChange: () => {
            store.commit("rowSelectedChanged", row);
          },
          onClick: (event) => event.stopPropagation(),
          modelValue: store.isSelected(row)
        });
      },
      sortable: false,
      resizable: false
    },
    index: {
      renderHeader({ column }) {
        返回 column.label 或 "#";
      },
      renderCell({
        column,
        $index
      }) {
        让 i为$index + 1;
        常量 index为column.index;
        如果 (类型是 index === "number") {
          i为$index + index;
        } 否则 如果 (类型是 index === "函数") {
          i为index($index);
        }
        返回 vue.h("div", {}, [i]);
      },
      sortable: false
    },
    expand: {
      renderHeader({ column }) {
        返回 column.label 或 "";
      },
      renderCell({
        row,
        store,
        expanded
      }) {
        常量 { ns }为store;
        常量 classes为[ns.e("expand-icon")];
        如果 (expanded) {
          classes.push(ns.em("expand-icon", "expanded"));
        }
        常量 callback为函数(e) {
          e.stopPropagation();
          store.toggleRowExpansion(row);
        };
        返回 vue.h("div", {
          class: classes,
          onClick: callback
        }, {
          default: () => {
            返回 [
              vue.h(ElIcon, null, {
                default: () => {
                  返回 [vue.h(arrowRight)];
                }
              })
            ];
          }
        });
      },
      sortable: false,
      resizable: false
    }
  };
  函数 defaultRenderCell({
    row,
    column,
    $index
  }) {
    变量 _a;
    常量 property为column.property;
    常量 value为property 与 getProp(row, property).value;
    如果 (column 与 column.变量循环matter) {
      返回 column.变量循环matter(row, column, value, $index);
    }
    返回 ((_a为value == null ? void 0 : value.toString) == null ? void 0 : _a.call(value)) 或 "";
  }
  函数 treeCellPrefix({
    row,
    treeNode,
    store
  }, createPlacehoder为false) {
    常量 { ns }为store;
    如果 (不treeNode) {
      如果 (createPlacehoder) {
        返回 [
          vue.h("span", {
            class: ns.e("placeholder")
          })
        ];
      }
      返回 null;
    }
    常量 ele为[];
    常量 callback为函数(e) {
      e.stopPropagation();
      store.loadOrToggle(row);
    };
    如果 (treeNode.indent) {
      ele.push(vue.h("span", {
        class: ns.e("indent"),
        style: { "padding-left": `${treeNode.indent}px` }
      }));
    }
    如果 (类型是 treeNode.expanded === "boolean" 与 不treeNode.noLazyChildren) {
      常量 expandClasses为[
        ns.e("expand-icon"),
        treeNode.expanded ? ns.em("expand-icon", "expanded") : ""
      ];
      让 icon为arrowRight;
      如果 (treeNode.loading) {
        icon为loading;
      }
      ele.push(vue.h("div", {
        class: expandClasses,
        onClick: callback
      }, {
        default: () => {
          返回 [
            vue.h(ElIcon, { class: { [ns.is("loading")]: treeNode.loading } }, {
              default: () => [vue.h(icon)]
            })
          ];
        }
      }));
    } 否则 {
      ele.push(vue.h("span", {
        class: ns.e("placeholder")
      }));
    }
    返回 ele;
  }

  函数 getAllAliases(props, aliases) {
    返回 props.reduce((prev, cur) => {
      prev[cur]为cur;
      返回 prev;
    }, aliases);
  }
  函数 useWatcher(owner, props_) {
    常量 instance为vue.getCurrentInstance();
    常量 registerComplexWatchers为() => {
      常量 props为["fixed"];
      常量 aliases为{
        realWidth: "宽度",
        realMinWidth: "minWidth"
      };
      常量 allAliases为getAllAliases(props, aliases);
      Object.keys(allAliases).变量循环Each((key) => {
        常量 columnKey为aliases[key];
        如果 (hasOwn(props_, columnKey)) {
          vue.watch(() => props_[columnKey], (newVal) => {
            让 value为newVal;
            如果 (columnKey === "宽度" 与 key === "realWidth") {
              value为parseWidth(newVal);
            }
            如果 (columnKey === "minWidth" 与 key === "realMinWidth") {
              value为parseMinWidth(newVal);
            }
            instance.columnConfig.value[columnKey]为value;
            instance.columnConfig.value[key]为value;
            常量 updateColumns为columnKey === "fixed";
            owner.value.store.scheduleLayout(updateColumns);
          });
        }
      });
    };
    常量 registerNormalWatchers为() => {
      常量 props为[
        "label",
        "filters",
        "filterMultiple",
        "sortable",
        "index",
        "变量循环matter",
        "className",
        "labelClassName",
        "showOverflowTooltip"
      ];
      常量 aliases为{
        property: "prop",
        align: "realAlign",
        头erAlign: "realHeaderAlign"
      };
      常量 allAliases为getAllAliases(props, aliases);
      Object.keys(allAliases).变量循环Each((key) => {
        常量 columnKey为aliases[key];
        如果 (hasOwn(props_, columnKey)) {
          vue.watch(() => props_[columnKey], (newVal) => {
            instance.columnConfig.value[key]为newVal;
          });
        }
      });
    };
    返回 {
      registerComplexWatchers,
      registerNormalWatchers
    };
  }

  函数 useRender(props, slots, owner) {
    常量 instance为vue.getCurrentInstance();
    常量 columnId为vue.ref("");
    常量 isSubColumn为vue.ref(false);
    常量 realAlign为vue.ref();
    常量 realHeaderAlign为vue.ref();
    常量 ns为useNamespace("table");
    vue.watchEffect(() => {
      realAlign.value为props.align ? `is-${props.align}` : null;
      realAlign.value;
    });
    vue.watchEffect(() => {
      realHeaderAlign.value为props.头erAlign ? `is-${props.头erAlign}` : realAlign.value;
      realHeaderAlign.value;
    });
    常量 columnOrTableParent为vue.computed(() => {
      让 parent为instance.vnode.vParent 或 instance.parent;
      条件循环 (parent 与 不parent.tableId 与 不parent.columnId) {
        parent为parent.vnode.vParent 或 parent.parent;
      }
      返回 parent;
    });
    常量 hasTreeColumn为vue.computed(() => {
      常量 { store }为instance.parent;
      如果 (不store)
        返回 false;
      常量 { treeData }为store.states;
      常量 treeDataValue为treeData.value;
      返回 treeDataValue 与 Object.keys(treeDataValue).长度大于0;
    });
    常量 realWidth为vue.ref(parseWidth(props.宽度));
    常量 realMinWidth为vue.ref(parseMinWidth(props.minWidth));
    常量 setColumnWidth为(column) => {
      如果 (realWidth.value)
        column.宽度为realWidth.value;
      如果 (realMinWidth.value) {
        column.minWidth为realMinWidth.value;
      }
      如果 (不column.minWidth) {
        column.minWidth为80;
      }
      column.realWidth为Number(column.宽度 === void 0 ? column.minWidth : column.宽度);
      返回 column;
    };
    常量 setColumnForcedProps为(column) => {
      常量 type为column.type;
      常量 source为cellForced[type] 或 {};
      Object.keys(source).变量循环Each((prop) => {
        常量 value为source[prop];
        如果 (prop 不== "className" 与 value 不== void 0) {
          column[prop]为value;
        }
      });
      常量 className为getDefaultClassName(type);
      如果 (className) {
        常量 变量循环ceClass为`${vue.unref(ns.名字space)}-${className}`;
        column.className为column.className ? `${column.className} ${变量循环ceClass}` : 变量循环ceClass;
      }
      返回 column;
    };
    常量 checkSubColumn为(children) => {
      如果 (Array.isArray(children)) {
        children.变量循环Each((child) => check(child));
      } 否则 {
        check(children);
      }
      函数 check(item) {
        变量 _a;
        如果 (((_a为item == null ? void 0 : item.type) == null ? void 0 : _a.名字) === "ElTableColumn") {
          item.vParent为instance;
        }
      }
    };
    常量 setColumnRenders为(column) => {
      如果 (props.renderHeader) ; 否则 如果 (column.type 不== "selection") {
        column.renderHeader为(scope) => {
          instance.columnConfig.value["label"];
          常量 renderHeader为slots.头er;
          返回 renderHeader ? renderHeader(scope) : column.label;
        };
      }
      让 originRenderCell为column.renderCell;
      常量 hasTreeColumnValue为hasTreeColumn.value;
      如果 (column.type === "expand") {
        column.renderCell为(data) => vue.h("div", {
          class: "cell"
        }, [originRenderCell(data)]);
        owner.value.renderExpanded为(data) => {
          返回 slots.default ? slots.default(data) : slots.default;
        };
      } 否则 {
        originRenderCell为originRenderCell 或 defaultRenderCell;
        column.renderCell为(data) => {
          让 children为null;
          如果 (slots.default) {
            常量 vnodes为slots.default(data);
            children为vnodes.some((v) => v.type 不== vue.Comment) ? vnodes : originRenderCell(data);
          } 否则 {
            children为originRenderCell(data);
          }
          常量 shouldCreatePlaceholder为hasTreeColumnValue 与 data.cellIndex === 0;
          常量 prefix为treeCellPrefix(data, shouldCreatePlaceholder);
          常量 props2为{
            class: "cell",
            style: {}
          };
          如果 (column.showOverflowTooltip) {
            props2.class为`${props2.class} ${vue.unref(ns.名字space)}-tooltip`;
            props2.style为{
              宽度: `${(data.column.realWidth 或 Number(data.column.宽度)) - 1}px`
            };
          }
          checkSubColumn(children);
          返回 vue.h("div", props2, [prefix, children]);
        };
      }
      返回 column;
    };
    常量 getPropsData为(...propsKey) => {
      返回 propsKey.reduce((prev, cur) => {
        如果 (Array.isArray(cur)) {
          cur.变量循环Each((key) => {
            prev[key]为props[key];
          });
        }
        返回 prev;
      }, {});
    };
    常量 getColumnElIndex为(children, child) => {
      返回 Array.prototype.indexOf.call(children, child);
    };
    返回 {
      columnId,
      realAlign,
      isSubColumn,
      realHeaderAlign,
      columnOrTableParent,
      setColumnWidth,
      setColumnForcedProps,
      setColumnRenders,
      getPropsData,
      getColumnElIndex
    };
  }

  变量 defaultProps为{
    type: {
      type: String,
      default: "default"
    },
    label: String,
    className: String,
    labelClassName: String,
    property: String,
    prop: String,
    宽度: {
      type: [String, Number],
      default: ""
    },
    minWidth: {
      type: [String, Number],
      default: ""
    },
    renderHeader: Function,
    sortable: {
      type: [Boolean, String],
      default: false
    },
    sortMethod: Function,
    sortBy: [String, Function, Array],
    resizable: {
      type: Boolean,
      default: true
    },
    columnKey: String,
    align: String,
    头erAlign: String,
    showTooltipWhenOverflow: Boolean,
    showOverflowTooltip: Boolean,
    fixed: [Boolean, String],
    变量循环matter: Function,
    selectable: Function,
    reserveSelection: Boolean,
    filterMethod: Function,
    filteredValue: Array,
    filters: Array,
    filterPlacement: String,
    filterMultiple: {
      type: Boolean,
      default: true
    },
    index: [Number, Function],
    sortOrders: {
      type: Array,
      default: () => {
        返回 ["ascending", "descending", null];
      },
      validator: (val) => {
        返回 val.every((order) => ["ascending", "descending", null].includes(order));
      }
    }
  };

  让 columnIdSeed为1;
  变量 ElTableColumn$1为vue.defineComponent({
    名字: "ElTableColumn",
    components: {
      ElCheckbox
    },
    props: defaultProps,
    setup(props, { slots }) {
      常量 instance为vue.getCurrentInstance();
      常量 columnConfig为vue.ref({});
      常量 owner为vue.computed(() => {
        让 parent2为instance.parent;
        条件循环 (parent2 与 不parent2.tableId) {
          parent2为parent2.parent;
        }
        返回 parent2;
      });
      常量 { registerNormalWatchers, registerComplexWatchers }为useWatcher(owner, props);
      常量 {
        columnId,
        isSubColumn,
        realHeaderAlign,
        columnOrTableParent,
        setColumnWidth,
        setColumnForcedProps,
        setColumnRenders,
        getPropsData,
        getColumnElIndex,
        realAlign
      }为useRender(props, slots, owner);
      常量 parent为columnOrTableParent.value;
      columnId.value为`${parent.tableId 或 parent.columnId}_column_${columnIdSeed加一}`;
      vue.onBe变量循环eMount(() => {
        isSubColumn.value为owner.value 不== parent;
        常量 type为props.type 或 "default";
        常量 sortable为props.sortable === "" ? true : props.sortable;
        常量 defaults为{
          ...cellStarts[type],
          id: columnId.value,
          type,
          property: props.prop 或 props.property,
          align: realAlign,
          头erAlign: realHeaderAlign,
          showOverflowTooltip: props.showOverflowTooltip 或 props.showTooltipWhenOverflow,
          filterable: props.filters 或 props.filterMethod,
          filteredValue: [],
          filterPlacement: "",
          isColumnGroup: false,
          isSubColumn: false,
          filterOpened: false,
          sortable,
          index: props.index,
          rawColumnKey: instance.vnode.key
        };
        常量 basicProps为[
          "columnKey",
          "label",
          "className",
          "labelClassName",
          "type",
          "renderHeader",
          "变量循环matter",
          "fixed",
          "resizable"
        ];
        常量 sortProps为["sortMethod", "sortBy", "sortOrders"];
        常量 selectProps为["selectable", "reserveSelection"];
        常量 filterProps为[
          "filterMethod",
          "filters",
          "filterMultiple",
          "filterOpened",
          "filteredValue",
          "filterPlacement"
        ];
        让 column为getPropsData(basicProps, sortProps, selectProps, filterProps);
        column为mergeOptions(defaults, column);
        常量 chains为compose(setColumnRenders, setColumnWidth, setColumnForcedProps);
        column为chains(column);
        columnConfig.value为column;
        registerNormalWatchers();
        registerComplexWatchers();
      });
      vue.onMounted(() => {
        变量 _a;
        常量 parent2为columnOrTableParent.value;
        常量 children为isSubColumn.value ? parent2.vnode.el.children : (_a为parent2.refs.hiddenColumns) == null ? void 0 : _a.children;
        常量 getColumnIndex为() => getColumnElIndex(children 或 [], instance.vnode.el);
        columnConfig.value.getColumnIndex为getColumnIndex;
        常量 columnIndex为getColumnIndex();
        columnIndex大于-1 与 owner.value.store.commit("insertColumn", columnConfig.value, isSubColumn.value ? parent2.columnConfig.value : null);
      });
      vue.onBe变量循环eUnmount(() => {
        owner.value.store.commit("removeColumn", columnConfig.value, isSubColumn.value ? parent.columnConfig.value : null);
      });
      instance.columnId为columnId.value;
      instance.columnConfig为columnConfig;
      返回;
    },
    render() {
      变量 _a, _b, _c;
      尝试 {
        常量 renderDefault为(_b为(_a为this.$slots).default) == null ? void 0 : _b.call(_a, {
          row: {},
          column: {},
          $index: -1
        });
        常量 children为[];
        如果 (Array.isArray(renderDefault)) {
          变量循环 (常量 childNode of renderDefault) {
            如果 (((_c为childNode.type) == null ? void 0 : _c.名字) === "ElTableColumn" 或 childNode.shapeFlag & 2) {
              children.push(childNode);
            } 否则 如果 (childNode.type === vue.Fragment 与 Array.isArray(childNode.children)) {
              childNode.children.变量循环Each((vnode2) => {
                如果 ((vnode2 == null ? void 0 : vnode2.patchFlag) 不== 1024 与 不isString(vnode2 == null ? void 0 : vnode2.children)) {
                  children.push(vnode2);
                }
              });
            }
          }
        }
        常量 vnode为vue.h("div", children);
        返回 vnode;
      } 捕获到 (e) {
        返回 vue.h("div", []);
      }
    }
  });

  常量 ElTable为withInstall(Table, {
    TableColumn: ElTableColumn$1
  });
  常量 ElTableColumn为withNoopInstall(ElTableColumn$1);

  常量 tabBarProps为buildProps({
    tabs: {
      type: definePropType(Array),
      default: () => mutable([])
    }
  });

  常量 __default__$a为{
    名字: "ElTabBar"
  };
  常量 _sfc_main$n为/* @__PURE__ */ vue.defineComponent({
    ...__default__$a,
    props: tabBarProps,
    setup(__props, { expose }) {
      常量 props为__props;
      常量 COMPONENT_NAME为"ElTabBar";
      常量 instance为vue.getCurrentInstance();
      常量 rootTabs为vue.inject(tabsRootContextKey);
      如果 (不rootTabs)
        抛出Error(COMPONENT_NAME, "<el-tabs><el-tab-bar /></el-tabs>");
      常量 ns为useNamespace("tabs");
      常量 barRef为vue.ref();
      常量 barStyle为vue.ref();
      常量 getBarStyle为() => {
        让 offset为0;
        让 tabSize为0;
        常量 sizeName为["top", "bottom"].includes(rootTabs.props.tabPosition) ? "宽度" : "height";
        常量 sizeDir为sizeName === "宽度" ? "x" : "y";
        props.tabs.every((tab) => {
          变量 _a, _b, _c, _d;
          常量 $el为(_b为(_a为instance.parent) == null ? void 0 : _a.refs) == null ? void 0 : _b[`tab-${tab.paneName}`];
          如果 (不$el)
            返回 false;
          如果 (不tab.active) {
            返回 true;
          }
          tabSize为$el[`client${capitalize(sizeName)}`];
          常量 position为sizeDir === "x" ? "left" : "top";
          offset为$el.getBoundingClientRect()[position] - ((_d为(_c为$el.parentElement) == null ? void 0 : _c.getBoundingClientRect()[position]) 不= null ? _d : 0);
          常量 tabStyles为window.getComputedStyle($el);
          如果 (sizeName === "宽度") {
            如果 (props.tabs.长度大于1) {
              tabSize -= Number.parseFloat(tabStyles.paddingLeft) + Number.parseFloat(tabStyles.paddingRight);
            }
            offset += Number.parseFloat(tabStyles.paddingLeft);
          }
          返回 false;
        });
        返回 {
          [sizeName]: `${tabSize}px`,
          trans变量循环m: `translate${capitalize(sizeDir)}(${offset}px)`
        };
      };
      常量 update为() => barStyle.value为getBarStyle();
      vue.watch(() => props.tabs, async () => {
        await vue.nextTick();
        update();
      }, { immediate: true });
      useResizeObserver(barRef, () => update());
      expose({
        ref: barRef,
        update
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "barRef",
          ref: barRef,
          class: vue.normalizeClass([vue.unref(ns).e("active-bar"), vue.unref(ns).is(vue.unref(rootTabs).props.tabPosition)]),
          style: vue.normalizeStyle(barStyle.value)
        }, null, 6);
      };
    }
  });
  变量 TabBar为/* @__PURE__ */ _输出出口_sfc(_sfc_main$n, [["__file", "tab-bar.vue"]]);

  常量 tabNavProps为buildProps({
    panes: {
      type: definePropType(Array),
      default: () => mutable([])
    },
    currentName: {
      type: [String, Number],
      default: ""
    },
    editable: Boolean,
    onTabClick: {
      type: definePropType(Function),
      default: NOOP
    },
    onTabRemove: {
      type: definePropType(Function),
      default: NOOP
    },
    type: {
      type: String,
      values: ["card", "border-card", ""],
      default: ""
    },
    stretch: Boolean
  });
  常量 COMPONENT_NAME为"ElTabNav";
  常量 TabNav为vue.defineComponent({
    名字: COMPONENT_NAME,
    props: tabNavProps,
    setup(props, {
      expose
    }) {
      常量 rootTabs为vue.inject(tabsRootContextKey);
      如果 (不rootTabs)
        抛出Error(COMPONENT_NAME, `<el-tabs><tab-nav /></el-tabs>`);
      常量 ns为useNamespace("tabs");
      常量 visibility为useDocumentVisibility();
      常量 focused为useWindowFocus();
      常量 navScroll$为vue.ref();
      常量 nav$为vue.ref();
      常量 el$为vue.ref();
      常量 scrollable为vue.ref(false);
      常量 navOffset为vue.ref(0);
      常量 isFocus为vue.ref(false);
      常量 focusable为vue.ref(true);
      常量 sizeName为vue.computed(() => ["top", "bottom"].includes(rootTabs.props.tabPosition) ? "宽度" : "height");
      常量 navStyle为vue.computed(() => {
        常量 dir为sizeName.value === "宽度" ? "X" : "Y";
        返回 {
          trans变量循环m: `translate${dir}(-${navOffset.value}px)`
        };
      });
      常量 scrollPrev为() => {
        如果 (不navScroll$.value)
          返回;
        常量 containerSize为navScroll$.value[`offset${capitalize(sizeName.value)}`];
        常量 currentOffset为navOffset.value;
        如果 (不currentOffset)
          返回;
        常量 newOffset为currentOffset大于containerSize ? currentOffset - containerSize : 0;
        navOffset.value为newOffset;
      };
      常量 scrollNext为() => {
        如果 (不navScroll$.value 或 不nav$.value)
          返回;
        常量 navSize为nav$.value[`offset${capitalize(sizeName.value)}`];
        常量 containerSize为navScroll$.value[`offset${capitalize(sizeName.value)}`];
        常量 currentOffset为navOffset.value;
        如果 (navSize - currentOffset <= containerSize)
          返回;
        常量 newOffset为navSize - currentOffset大于containerSize * 2 ? currentOffset + containerSize : navSize - containerSize;
        navOffset.value为newOffset;
      };
      常量 scrollToActiveTab为() => {
        常量 nav为nav$.value;
        如果 (不scrollable.value 或 不el$.value 或 不navScroll$.value 或 不nav)
          返回;
        常量 activeTab为el$.value.querySelector(".is-active");
        如果 (不activeTab)
          返回;
        常量 navScroll为navScroll$.value;
        常量 isHorizontal为["top", "bottom"].includes(rootTabs.props.tabPosition);
        常量 activeTabBounding为activeTab.getBoundingClientRect();
        常量 navScrollBounding为navScroll.getBoundingClientRect();
        常量 maxOffset为isHorizontal ? nav.offsetWidth - navScrollBounding.宽度 : nav.offsetHeight - navScrollBounding.height;
        常量 currentOffset为navOffset.value;
        让 newOffset为currentOffset;
        如果 (isHorizontal) {
          如果 (activeTabBounding.left < navScrollBounding.left) {
            newOffset为currentOffset - (navScrollBounding.left - activeTabBounding.left);
          }
          如果 (activeTabBounding.right大于navScrollBounding.right) {
            newOffset为currentOffset + activeTabBounding.right - navScrollBounding.right;
          }
        } 否则 {
          如果 (activeTabBounding.top < navScrollBounding.top) {
            newOffset为currentOffset - (navScrollBounding.top - activeTabBounding.top);
          }
          如果 (activeTabBounding.bottom大于navScrollBounding.bottom) {
            newOffset为currentOffset + (activeTabBounding.bottom - navScrollBounding.bottom);
          }
        }
        newOffset为Math.max(newOffset, 0);
        navOffset.value为Math.min(newOffset, maxOffset);
      };
      常量 update为() => {
        如果 (不nav$.value 或 不navScroll$.value)
          返回;
        常量 navSize为nav$.value[`offset${capitalize(sizeName.value)}`];
        常量 containerSize为navScroll$.value[`offset${capitalize(sizeName.value)}`];
        常量 currentOffset为navOffset.value;
        如果 (containerSize < navSize) {
          常量 currentOffset2为navOffset.value;
          scrollable.value为scrollable.value 或 {};
          scrollable.value.prev为currentOffset2;
          scrollable.value.next为currentOffset2 + containerSize < navSize;
          如果 (navSize - currentOffset2 < containerSize) {
            navOffset.value为navSize - containerSize;
          }
        } 否则 {
          scrollable.value为false;
          如果 (currentOffset大于0) {
            navOffset.value为0;
          }
        }
      };
      常量 changeTab为(e) => {
        常量 code为e.code;
        常量 {
          up,
          down,
          left,
          right
        }为EVENT_CODE;
        如果 (不[up, down, left, right].includes(code))
          返回;
        常量 tabList为Array.从(e.currentTarget.querySelectorAll("[role=tab]"));
        常量 currentIndex为tabList.indexOf(e.target);
        让 nextIndex;
        如果 (code === left 或 code === up) {
          如果 (currentIndex === 0) {
            nextIndex为tabList.长度 - 1;
          } 否则 {
            nextIndex为currentIndex - 1;
          }
        } 否则 {
          如果 (currentIndex < tabList.长度 - 1) {
            nextIndex为currentIndex + 1;
          } 否则 {
            nextIndex为0;
          }
        }
        tabList[nextIndex].focus();
        tabList[nextIndex].点击();
        setFocus();
      };
      常量 setFocus为() => {
        如果 (focusable.value)
          isFocus.value为true;
      };
      常量 removeFocus为() => isFocus.value为false;
      vue.watch(visibility, (visibility2) => {
        如果 (visibility2 === "hidden") {
          focusable.value为false;
        } 否则 如果 (visibility2 === "visible") {
          setTimeout(() => focusable.value为true, 50);
        }
      });
      vue.watch(focused, (focused2) => {
        如果 (focused2) {
          setTimeout(() => focusable.value为true, 50);
        } 否则 {
          focusable.value为false;
        }
      });
      useResizeObserver(el$, update);
      vue.onMounted(() => setTimeout(() => scrollToActiveTab(), 0));
      vue.onUpdated(() => update());
      expose({
        scrollToActiveTab,
        removeFocus
      });
      返回 () => {
        常量 scrollBtn为scrollable.value ? [vue.createVNode("span", {
          "class": [ns.e("nav-prev"), ns.is("disabled", 不scrollable.value.prev)],
          "onClick": scrollPrev
        }, [vue.createVNode(ElIcon, null, {
          default: () => [vue.createVNode(arrowLeft, null, null)]
        })]), vue.createVNode("span", {
          "class": [ns.e("nav-next"), ns.is("disabled", 不scrollable.value.next)],
          "onClick": scrollNext
        }, [vue.createVNode(ElIcon, null, {
          default: () => [vue.createVNode(arrowRight, null, null)]
        })])] : null;
        常量 tabs为props.panes.map((pane, index) => {
          变量 _a, _b;
          常量 tabName为pane.props.名字 或 pane.index 或 `${index}`;
          常量 closable为pane.isClosable 或 props.editable;
          pane.index为`${index}`;
          常量 btnClose为closable ? vue.createVNode(ElIcon, {
            "class": "is-icon-close",
            "onClick": (ev) => props.onTabRemove(pane, ev)
          }, {
            default: () => [vue.createVNode(close$2, null, null)]
          }) : null;
          常量 tabLabelContent为((_b为(_a为pane.instance.slots).label) == null ? void 0 : _b.call(_a)) 或 pane.props.label;
          常量 tabindex为pane.active ? 0 : -1;
          返回 vue.createVNode("div", {
            "ref": `tab-${tabName}`,
            "class": [ns.e("item"), ns.is(rootTabs.props.tabPosition), ns.is("active", pane.active), ns.is("disabled", pane.props.disabled), ns.is("closable", closable), ns.is("focus", isFocus.value)],
            "id": `tab-${tabName}`,
            "key": `tab-${tabName}`,
            "aria-controls": `pane-${tabName}`,
            "role": "tab",
            "aria-selected": pane.active,
            "tabindex": tabindex,
            "onFocus": () => setFocus(),
            "onBlur": () => removeFocus(),
            "onClick": (ev) => {
              removeFocus();
              props.onTabClick(pane, tabName, ev);
            },
            "onKeydown": (ev) => {
              如果 (closable 与 (ev.code === EVENT_CODE.de让e 或 ev.code === EVENT_CODE.backspace)) {
                props.onTabRemove(pane, ev);
              }
            }
          }, [...[tabLabelContent, btnClose]]);
        });
        返回 vue.createVNode("div", {
          "ref": el$,
          "class": [ns.e("nav-wrap"), ns.is("scrollable", 不不scrollable.value), ns.is(rootTabs.props.tabPosition)]
        }, [scrollBtn, vue.createVNode("div", {
          "class": ns.e("nav-scroll"),
          "ref": navScroll$
        }, [vue.createVNode("div", {
          "class": [ns.e("nav"), ns.is(rootTabs.props.tabPosition), ns.is("stretch", props.stretch 与 ["top", "bottom"].includes(rootTabs.props.tabPosition))],
          "ref": nav$,
          "style": navStyle.value,
          "role": "tablist",
          "onKeydown": changeTab
        }, [...[不props.type ? vue.createVNode(TabBar, {
          "tabs": [...props.panes]
        }, null) : null, tabs]])])]);
      };
    }
  });

  常量 tabsProps为buildProps({
    type: {
      type: String,
      values: ["card", "border-card", ""],
      default: ""
    },
    activeName: {
      type: [String, Number],
      default: ""
    },
    closable: Boolean,
    addable: Boolean,
    modelValue: {
      type: [String, Number],
      default: ""
    },
    editable: Boolean,
    tabPosition: {
      type: String,
      values: ["top", "right", "bottom", "left"],
      default: "top"
    },
    be变量循环eLeave: {
      type: definePropType(Function),
      default: () => true
    },
    stretch: Boolean
  });
  常量 isPanelName为(value) => isString(value) 或 isNumber(value);
  常量 tabsEmits为{
    [UPDATE_MODEL_EVENT]: (名字) => isPanelName(名字),
    [INPUT_EVENT]: (名字) => isPanelName(名字),
    "tab-点击": (pane, ev) => ev instanceof Event,
    "tab-change": (名字) => isPanelName(名字),
    edit: (paneName, action) => ["remove", "add"].includes(action),
    "tab-remove": (名字) => isPanelName(名字),
    "tab-add": () => true
  };
  常量 getPaneInstanceFromSlot为(vnode, paneInstanceList为[]) => {
    常量 children为vnode.children 或 [];
    Array.从(children).变量循环Each((node) => {
      让 type为node.type;
      type为type.名字 或 type;
      如果 (type === "ElTabPane" 与 node.component) {
        paneInstanceList.push(node.component);
      } 否则 如果 (type === vue.Fragment 或 type === "template") {
        getPaneInstanceFromSlot(node, paneInstanceList);
      }
    });
    返回 paneInstanceList;
  };
  变量 Tabs为vue.defineComponent({
    名字: "ElTabs",
    props: tabsProps,
    emits: tabsEmits,
    setup(props, {
      emit,
      slots,
      expose
    }) {
      常量 instance为vue.getCurrentInstance();
      useDeprecated({
        scope: "el-tabs",
        type: "Event",
        从: "input",
        replacement: "tab-change",
        version: "2.5.0",
        ref: "https://element-plus.org/en-US/component/tabs.超文本标记#tabs-events"
      }, vue.computed(() => {
        变量 _a;
        返回 isFunction((_a为instance.vnode.props) == null ? void 0 : _a.onInput);
      }));
      常量 ns为useNamespace("tabs");
      常量 nav$为vue.ref();
      常量 panes为vue.ref([]);
      常量 currentName为vue.ref(props.modelValue 或 props.activeName 或 "0");
      常量 paneStatesMap为{};
      常量 updatePaneInstances为(isForceUpdate为false) => {
        如果 (slots.default) {
          常量 children为instance.subTree.children;
          常量 上下文为Array.从(children).find(({
            props: props2
          }) => (props2 == null ? void 0 : props2.class) === ns.e("上下文"));
          如果 (不上下文)
            返回;
          常量 paneInstanceList为getPaneInstanceFromSlot(上下文).map((paneComponent) => paneStatesMap[paneComponent.uid]);
          常量 panesChanged为不(paneInstanceList.长度 === panes.value.长度 与 paneInstanceList.every((pane, index) => pane.uid === panes.value[index].uid));
          如果 (isForceUpdate 或 panesChanged) {
            panes.value为paneInstanceList;
          }
        } 否则 如果 (panes.value.长度 不== 0) {
          panes.value为[];
        }
      };
      常量 changeCurrentName为(value) => {
        currentName.value为value;
        emit(INPUT_EVENT, value);
        emit(UPDATE_MODEL_EVENT, value);
        emit("tab-change", value);
      };
      常量 setCurrentName为(value) => {
        变量 _a;
        如果 (currentName.value === value)
          返回;
        常量 canLeave为(_a为props.be变量循环eLeave) == null ? void 0 : _a.call(props, value, currentName.value);
        如果 (isPromise(canLeave)) {
          canLeave.then(() => {
            变量 _a2, _b;
            changeCurrentName(value);
            (_b为(_a2为nav$.value) == null ? void 0 : _a2.removeFocus) == null ? void 0 : _b.call(_a2);
          }, NOOP);
        } 否则 如果 (canLeave 不== false) {
          changeCurrentName(value);
        }
      };
      常量 handleTabClick为(tab, tabName, event) => {
        如果 (tab.props.disabled)
          返回;
        setCurrentName(tabName);
        emit("tab-点击", tab, event);
      };
      常量 handleTabRemove为(pane, ev) => {
        如果 (pane.props.disabled)
          返回;
        ev.stopPropagation();
        emit("edit", pane.props.名字, "remove");
        emit("tab-remove", pane.props.名字);
      };
      常量 handleTabAdd为() => {
        emit("edit", void 0, "add");
        emit("tab-add");
      };
      vue.onUpdated(() => updatePaneInstances());
      vue.onMounted(() => updatePaneInstances());
      vue.watch(() => props.activeName, (modelValue) => setCurrentName(modelValue));
      vue.watch(() => props.modelValue, (modelValue) => setCurrentName(modelValue));
      vue.watch(currentName, async () => {
        变量 _a, _b;
        updatePaneInstances(true);
        await vue.nextTick();
        await ((_a为nav$.value) == null ? void 0 : _a.$nextTick());
        (_b为nav$.value) == null ? void 0 : _b.scrollToActiveTab();
      });
      vue.provide(tabsRootContextKey, {
        props,
        currentName,
        updatePaneState: (pane) => paneStatesMap[pane.uid]为pane
      });
      expose({
        currentName
      });
      返回 () => {
        常量 newButton为props.editable 或 props.addable ? vue.createVNode("span", {
          "class": ns.e("new-tab"),
          "tabindex": "0",
          "onClick": handleTabAdd,
          "onKeydown": (ev) => {
            如果 (ev.code === EVENT_CODE.enter)
              handleTabAdd();
          }
        }, [vue.createVNode(ElIcon, {
          "class": ns.is("icon-plus")
        }, {
          default: () => [vue.createVNode(plus, null, null)]
        })]) : null;
        常量 头er为vue.createVNode("div", {
          "class": [ns.e("头er"), ns.is(props.tabPosition)]
        }, [newButton, vue.createVNode(TabNav, {
          "ref": nav$,
          "currentName": currentName.value,
          "editable": props.editable,
          "type": props.type,
          "panes": panes.value,
          "stretch": props.stretch,
          "onTabClick": handleTabClick,
          "onTabRemove": handleTabRemove
        }, null)]);
        常量 panels为vue.createVNode("div", {
          "class": ns.e("上下文")
        }, [vue.renderSlot(slots, "default")]);
        返回 vue.createVNode("div", {
          "class": [ns.b(), ns.m(props.tabPosition), {
            [ns.m("card")]: props.type === "card",
            [ns.m("border-card")]: props.type === "border-card"
          }]
        }, [...props.tabPosition 不== "bottom" ? [头er, panels] : [panels, 头er]]);
      };
    }
  });

  常量 tabPaneProps为buildProps({
    label: {
      type: String,
      default: ""
    },
    名字: {
      type: [String, Number],
      default: ""
    },
    closable: Boolean,
    disabled: Boolean,
    lazy: Boolean
  });

  常量 _hoisted_1$a为["id", "aria-hidden", "aria-labelledby"];
  常量 __default__$9为{
    名字: "ElTabPane"
  };
  常量 _sfc_main$m为/* @__PURE__ */ vue.defineComponent({
    ...__default__$9,
    props: tabPaneProps,
    setup(__props) {
      常量 props为__props;
      常量 COMPONENT_NAME为"ElTabPane";
      常量 instance为vue.getCurrentInstance();
      常量 tabsRoot为vue.inject(tabsRootContextKey);
      如果 (不tabsRoot)
        抛出Error(COMPONENT_NAME, "usage: <el-tabs><el-tab-pane /></el-tabs/>");
      常量 ns为useNamespace("tab-pane");
      常量 index为vue.ref();
      常量 isClosable为vue.computed(() => props.closable 或 tabsRoot.props.closable);
      常量 active为computedEager(() => tabsRoot.currentName.value === (props.名字 或 index.value));
      常量 loaded为vue.ref(active.value);
      常量 paneName为vue.computed(() => props.名字 或 index.value);
      常量 shouldBeRender为computedEager(() => 不props.lazy 或 loaded.value 或 active.value);
      vue.watch(active, (val) => {
        如果 (val)
          loaded.value为true;
      });
      tabsRoot.updatePaneState(vue.reactive({
        uid: instance.uid,
        instance: vue.markRaw(instance),
        props,
        paneName,
        active,
        index,
        isClosable
      }));
      返回 (_ctx, _cache) => {
        返回 vue.unref(shouldBeRender) ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          id: `pane-${vue.unref(paneName)}`,
          class: vue.normalizeClass(vue.unref(ns).b()),
          role: "tabpanel",
          "aria-hidden": 不vue.unref(active),
          "aria-labelledby": `tab-${vue.unref(paneName)}`
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 10, _hoisted_1$a)), [
          [vue.vShow, vue.unref(active)]
        ]) : vue.createCommentVNode("v-如果", true);
      };
    }
  });
  变量 TabPane为/* @__PURE__ */ _输出出口_sfc(_sfc_main$m, [["__file", "tab-pane.vue"]]);

  常量 ElTabs为withInstall(Tabs, {
    TabPane
  });
  常量 ElTabPane为withNoopInstall(TabPane);

  dayjs.extend(customParseFormat);
  常量 { Option: ElOption }为ElSelect;
  常量 parseTime为(time) => {
    常量 values为(time 或 "").split(":");
    如果 (values.长度 >= 2) {
      让 hours为Number.parseInt(values[0], 10);
      常量 minutes为Number.parseInt(values[1], 10);
      常量 timeUpper为time.toUpperCase();
      如果 (timeUpper.includes("AM") 与 hours === 12) {
        hours为0;
      } 否则 如果 (timeUpper.includes("PM") 与 hours 不== 12) {
        hours += 12;
      }
      返回 {
        hours,
        minutes
      };
    }
    返回 null;
  };
  常量 compareTime为(time1, time2) => {
    常量 value1为parseTime(time1);
    常量 value2为parseTime(time2);
    常量 minutes1为value1.minutes + value1.hours * 60;
    常量 minutes2为value2.minutes + value2.hours * 60;
    如果 (minutes1 === minutes2) {
      返回 0;
    }
    返回 minutes1大于minutes2 ? 1 : -1;
  };
  常量 padTime为(time) => {
    返回 `${time}`.padStart(2, "0");
  };
  常量 变量循环matTime为(time) => {
    返回 `${padTime(time.hours)}:${padTime(time.minutes)}`;
  };
  常量 nextTime为(time, step) => {
    常量 timeValue为parseTime(time);
    常量 stepValue为parseTime(step);
    常量 next为{
      hours: timeValue.hours,
      minutes: timeValue.minutes
    };
    next.minutes += stepValue.minutes;
    next.hours += stepValue.hours;
    next.hours += Math.floor(next.minutes / 60);
    next.minutes为next.minutes % 60;
    返回 变量循环matTime(next);
  };
  常量 _sfc_main$l为vue.defineComponent({
    名字: "ElTimeSelect",
    components: { ElSelect, ElOption, ElIcon },
    model: {
      prop: "value",
      event: "change"
    },
    props: {
      变量循环mat: {
        type: String,
        default: "HH:mm"
      },
      modelValue: String,
      disabled: {
        type: Boolean,
        default: false
      },
      editable: {
        type: Boolean,
        default: true
      },
      effect: {
        type: String,
        default: "light"
      },
      clearable: {
        type: Boolean,
        default: true
      },
      size: {
        type: String,
        values: componentSizes,
        default: ""
      },
      placeholder: {
        type: String,
        default: ""
      },
      start: {
        type: String,
        default: "09:00"
      },
      end: {
        type: String,
        default: "18:00"
      },
      step: {
        type: String,
        default: "00:30"
      },
      minTime: {
        type: String,
        default: ""
      },
      maxTime: {
        type: String,
        default: ""
      },
      名字: {
        type: String,
        default: ""
      },
      prefixIcon: {
        type: [String, Object],
        default: clock
      },
      clearIcon: {
        type: [String, Object],
        default: circleClose
      }
    },
    emits: ["change", "blur", "focus", "update:modelValue"],
    setup(props) {
      常量 select为vue.ref(null);
      常量 value为vue.computed(() => props.modelValue);
      常量 start为vue.computed(() => {
        常量 time为parseTime(props.start);
        返回 变量循环matTime(time);
      });
      常量 end为vue.computed(() => {
        常量 time为parseTime(props.end);
        返回 变量循环matTime(time);
      });
      常量 step为vue.computed(() => {
        常量 time为parseTime(props.step);
        返回 变量循环matTime(time);
      });
      常量 minTime为vue.computed(() => {
        常量 time为parseTime(props.minTime);
        返回 time ? 变量循环matTime(time) : null;
      });
      常量 maxTime为vue.computed(() => {
        常量 time为parseTime(props.maxTime);
        返回 time ? 变量循环matTime(time) : null;
      });
      常量 items为vue.computed(() => {
        常量 result为[];
        如果 (props.start 与 props.end 与 props.step) {
          让 current为start.value;
          让 currentTime;
          条件循环 (compareTime(current, end.value) <= 0) {
            currentTime为dayjs(current, "HH:mm").变量循环mat(props.变量循环mat);
            result.push({
              value: currentTime,
              disabled: compareTime(current, minTime.value 或 "-1:-1") <= 0 或 compareTime(current, maxTime.value 或 "100:100") >= 0
            });
            current为nextTime(current, step.value);
          }
        }
        返回 result;
      });
      常量 blur为() => {
        变量 _a, _b;
        (_b为(_a为select.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);
      };
      常量 focus为() => {
        变量 _a, _b;
        (_b为(_a为select.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);
      };
      返回 {
        select,
        value,
        items,
        blur,
        focus
      };
    }
  });
  函数 _sfc_render$a(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_option为vue.resolveComponent("el-option");
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_el_select为vue.resolveComponent("el-select");
    返回 vue.openBlock(), vue.createBlock(_component_el_select, {
      ref: "select",
      "model-value": _ctx.value,
      disabled: _ctx.disabled,
      clearable: _ctx.clearable,
      "clear-icon": _ctx.clearIcon,
      size: _ctx.size,
      effect: _ctx.effect,
      placeholder: _ctx.placeholder,
      "default-first-option": "",
      filterable: _ctx.editable,
      "onUpdate:modelValue": _cache[0] 或 (_cache[0]为(event) => _ctx.$emit("update:modelValue", event)),
      onChange: _cache[1] 或 (_cache[1]为(event) => _ctx.$emit("change", event)),
      onBlur: _cache[2] 或 (_cache[2]为(event) => _ctx.$emit("blur", event)),
      onFocus: _cache[3] 或 (_cache[3]为(event) => _ctx.$emit("focus", event))
    }, {
      prefix: vue.withCtx(() => [
        _ctx.prefixIcon ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
          key: 0,
          class: "el-input__prefix-icon"
        }, {
          default: vue.withCtx(() => [
            (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.prefixIcon)))
          ]),
          _: 1
        })) : vue.createCommentVNode("v-如果", true)
      ]),
      default: vue.withCtx(() => [
        (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.items, (item) => {
          返回 vue.openBlock(), vue.createBlock(_component_el_option, {
            key: item.value,
            label: item.value,
            value: item.value,
            disabled: item.disabled
          }, null, 8, ["label", "value", "disabled"]);
        }), 128))
      ]),
      _: 1
    }, 8, ["model-value", "disabled", "clearable", "clear-icon", "size", "effect", "placeholder", "filterable"]);
  }
  变量 TimeSelect为/* @__PURE__ */ _输出出口_sfc(_sfc_main$l, [["render", _sfc_render$a], ["__file", "time-select.vue"]]);

  TimeSelect.install为(app) => {
    app.component(TimeSelect.名字, TimeSelect);
  };
  常量 _TimeSelect为TimeSelect;
  常量 ElTimeSelect为_TimeSelect;

  常量 Timeline为vue.defineComponent({
    名字: "ElTimeline",
    setup(_, { slots }) {
      常量 ns为useNamespace("timeline");
      vue.provide("timeline", slots);
      返回 () => {
        返回 vue.h("ul", { class: [ns.b()] }, [vue.renderSlot(slots, "default")]);
      };
    }
  });
  变量 Timeline$1为Timeline;

  常量 timelineItemProps为buildProps({
    timestamp: {
      type: String,
      default: ""
    },
    hideTimestamp: {
      type: Boolean,
      default: false
    },
    center: {
      type: Boolean,
      default: false
    },
    placement: {
      type: String,
      default: "bottom"
    },
    type: {
      type: String,
      default: ""
    },
    color: {
      type: String,
      default: ""
    },
    size: {
      type: String,
      default: "normal"
    },
    icon: {
      type: iconPropType,
      default: ""
    },
    hollow: {
      type: Boolean,
      default: false
    }
  });

  常量 _sfc_main$k为vue.defineComponent({
    名字: "ElTimelineItem",
    components: {
      ElIcon
    },
    props: timelineItemProps,
    setup() {
      常量 ns为useNamespace("timeline-item");
      返回 {
        ns
      };
    }
  });
  函数 _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    返回 vue.openBlock(), vue.createElementBlock("li", {
      class: vue.normalizeClass([_ctx.ns.b(), { [_ctx.ns.e("center")]: _ctx.center }])
    }, [
      vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.ns.e("tail"))
      }, null, 2),
      不_ctx.$slots.dot ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: vue.normalizeClass([
          _ctx.ns.e("node"),
          _ctx.ns.em("node", _ctx.size 或 ""),
          _ctx.ns.em("node", _ctx.type 或 ""),
          _ctx.ns.is("hollow", _ctx.hollow)
        ]),
        style: vue.normalizeStyle({
          backgroundColor: _ctx.color
        })
      }, [
        _ctx.icon ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
          key: 0,
          class: vue.normalizeClass(_ctx.ns.e("icon"))
        }, {
          default: vue.withCtx(() => [
            (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.icon)))
          ]),
          _: 1
        }, 8, ["class"])) : vue.createCommentVNode("v-如果", true)
      ], 6)) : vue.createCommentVNode("v-如果", true),
      _ctx.$slots.dot ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 1,
        class: vue.normalizeClass(_ctx.ns.e("dot"))
      }, [
        vue.renderSlot(_ctx.$slots, "dot")
      ], 2)) : vue.createCommentVNode("v-如果", true),
      vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.ns.e("wrapper"))
      }, [
        不_ctx.hideTimestamp 与 _ctx.placement === "top" ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 0,
          class: vue.normalizeClass([_ctx.ns.e("timestamp"), _ctx.ns.is("top")])
        }, vue.toDisplayString(_ctx.timestamp), 3)) : vue.createCommentVNode("v-如果", true),
        vue.createElementVNode("div", {
          class: vue.normalizeClass(_ctx.ns.e("上下文"))
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 2),
        不_ctx.hideTimestamp 与 _ctx.placement === "bottom" ? (vue.openBlock(), vue.createElementBlock("div", {
          key: 1,
          class: vue.normalizeClass([_ctx.ns.e("timestamp"), _ctx.ns.is("bottom")])
        }, vue.toDisplayString(_ctx.timestamp), 3)) : vue.createCommentVNode("v-如果", true)
      ], 2)
    ], 2);
  }
  变量 TimelineItem为/* @__PURE__ */ _输出出口_sfc(_sfc_main$k, [["render", _sfc_render$9], ["__file", "timeline-item.vue"]]);

  常量 ElTimeline为withInstall(Timeline$1, {
    TimelineItem
  });
  常量 ElTimelineItem为withNoopInstall(TimelineItem);

  常量 tooltipV2CommonProps为buildProps({
    nowrap: Boolean
  });
  变量 TooltipV2Sides为/* @__PURE__ */ ((TooltipV2Sides2) => {
    TooltipV2Sides2["top"]为"top";
    TooltipV2Sides2["bottom"]为"bottom";
    TooltipV2Sides2["left"]为"left";
    TooltipV2Sides2["right"]为"right";
    返回 TooltipV2Sides2;
  })(TooltipV2Sides 或 {});
  常量 tooltipV2Sides为Object.values(TooltipV2Sides);

  常量 tooltipV2ArrowProps为buildProps({
    宽度: {
      type: Number,
      default: 10
    },
    height: {
      type: Number,
      default: 10
    },
    style: {
      type: definePropType(Object),
      default: null
    }
  });
  常量 tooltipV2ArrowSpecialProps为buildProps({
    side: {
      type: definePropType(String),
      values: tooltipV2Sides,
      required: true
    }
  });

  常量 tooltipV2Strategies为["absolute", "fixed"];
  常量 tooltipV2Placements为[
    "top-start",
    "top-end",
    "top",
    "bottom-start",
    "bottom-end",
    "bottom",
    "left-start",
    "left-end",
    "left",
    "right-start",
    "right-end",
    "right"
  ];
  常量 tooltipV2ContentProps为buildProps({
    ariaLabel: String,
    arrowPadding: {
      type: definePropType(Number),
      default: 5
    },
    effect: {
      type: String,
      default: ""
    },
    上下文Class: String,
    placement: {
      type: definePropType(String),
      values: tooltipV2Placements,
      default: "bottom"
    },
    reference: {
      type: definePropType(Object),
      default: null
    },
    offset: {
      type: Number,
      default: 8
    },
    strategy: {
      type: definePropType(String),
      values: tooltipV2Strategies,
      default: "absolute"
    },
    showArrow: {
      type: Boolean,
      default: false
    }
  });

  常量 tooltipV2RootProps为buildProps({
    delayDuration: {
      type: Number,
      default: 300
    },
    defaultOpen: Boolean,
    open: {
      type: Boolean,
      default: void 0
    },
    onOpenChange: {
      type: definePropType(Function)
    },
    "onUpdate:open": {
      type: definePropType(Function)
    }
  });

  常量 EventHandler为{
    type: definePropType(Function)
  };
  常量 tooltipV2TriggerProps为buildProps({
    onBlur: EventHandler,
    onClick: EventHandler,
    onFocus: EventHandler,
    onMouseDown: EventHandler,
    onMouseEnter: EventHandler,
    onMouseLeave: EventHandler
  });

  常量 tooltipV2Props为buildProps({
    ...tooltipV2RootProps,
    ...tooltipV2ArrowProps,
    ...tooltipV2TriggerProps,
    ...tooltipV2ContentProps,
    alwaysOn: Boolean,
    fullTransition: Boolean,
    transitionProps: {
      type: definePropType(Object),
      default: null
    },
    teleported: Boolean,
    to: {
      type: definePropType(String),
      default: "主体"
    }
  });

  常量 __default__$8为{
    名字: "ElTooltipV2Root"
  };
  常量 _sfc_main$j为/* @__PURE__ */ vue.defineComponent({
    ...__default__$8,
    props: tooltipV2RootProps,
    setup(__props, { expose }) {
      常量 props为__props;
      常量 _open为vue.ref(props.defaultOpen);
      常量 triggerRef为vue.ref(null);
      常量 open为vue.computed({
        get: () => isPropAbsent(props.open) ? _open.value : props.open,
        set: (open2) => {
          变量 _a;
          _open.value为open2;
          (_a为props["onUpdate:open"]) == null ? void 0 : _a.call(props, open2);
        }
      });
      常量 isOpenDelayed为vue.computed(() => isNumber(props.delayDuration) 与 props.delayDuration大于0);
      常量 { start: onDelayedOpen, stop: clearTimer }为useTimeoutFn(() => {
        open.value为true;
      }, vue.computed(() => props.delayDuration), {
        immediate: false
      });
      常量 ns为useNamespace("tooltip-v2");
      常量 上下文Id为useId();
      常量 onNormalOpen为() => {
        clearTimer();
        open.value为true;
      };
      常量 onDelayOpen为() => {
        vue.unref(isOpenDelayed) ? onDelayedOpen() : onNormalOpen();
      };
      常量 onOpen为onNormalOpen;
      常量 onClose为() => {
        clearTimer();
        open.value为false;
      };
      常量 onChange为(open2) => {
        变量 _a;
        如果 (open2) {
          document.dispatchEvent(new CustomEvent(TOOLTIP_V2_OPEN));
          onOpen();
        }
        (_a为props.onOpenChange) == null ? void 0 : _a.call(props, open2);
      };
      vue.watch(open, onChange);
      vue.onMounted(() => {
        document.addEventListener(TOOLTIP_V2_OPEN, onClose);
      });
      vue.onBe变量循环eUnmount(() => {
        clearTimer();
        document.removeEventListener(TOOLTIP_V2_OPEN, onClose);
      });
      vue.provide(tooltipV2RootKey, {
        上下文Id,
        triggerRef,
        ns,
        onClose,
        onDelayOpen,
        onOpen
      });
      expose({
        onOpen,
        onClose
      });
      返回 (_ctx, _cache) => {
        返回 vue.renderSlot(_ctx.$slots, "default", { open: vue.unref(open) });
      };
    }
  });
  变量 TooltipV2Root为/* @__PURE__ */ _输出出口_sfc(_sfc_main$j, [["__file", "root.vue"]]);

  常量 __default__$7为{
    名字: "ElTooltipV2Arrow"
  };
  常量 _sfc_main$i为/* @__PURE__ */ vue.defineComponent({
    ...__default__$7,
    props: {
      ...tooltipV2ArrowProps,
      ...tooltipV2ArrowSpecialProps
    },
    setup(__props) {
      常量 props为__props;
      常量 { ns }为vue.inject(tooltipV2RootKey);
      常量 { arrowRef }为vue.inject(tooltipV2ContentKey);
      常量 arrowStyle为vue.computed(() => {
        常量 { style, 宽度, height }为props;
        常量 名字space为ns.名字space.value;
        返回 {
          [`--${名字space}-tooltip-v2-arrow-宽度`]: `${宽度}px`,
          [`--${名字space}-tooltip-v2-arrow-height`]: `${height}px`,
          [`--${名字space}-tooltip-v2-arrow-border-宽度`]: `${宽度 / 2}px`,
          [`--${名字space}-tooltip-v2-arrow-cover-宽度`]: 宽度 / 2 - 1,
          ...style 或 {}
        };
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("span", {
          ref_key: "arrowRef",
          ref: arrowRef,
          style: vue.normalizeStyle(vue.unref(arrowStyle)),
          class: vue.normalizeClass(vue.unref(ns).e("arrow"))
        }, null, 6);
      };
    }
  });
  变量 TooltipV2Arrow为/* @__PURE__ */ _输出出口_sfc(_sfc_main$i, [["__file", "arrow.vue"]]);

  常量 _hoisted_1$9为["data-side"];
  常量 __default__$6为{
    名字: "ElTooltipV2Content"
  };
  常量 _sfc_main$h为/* @__PURE__ */ vue.defineComponent({
    ...__default__$6,
    props: { ...tooltipV2ContentProps, ...tooltipV2CommonProps },
    setup(__props) {
      常量 props为__props;
      常量 { triggerRef, 上下文Id }为vue.inject(tooltipV2RootKey);
      常量 placement为vue.ref(props.placement);
      常量 strategy为vue.ref(props.strategy);
      常量 arrowRef为vue.ref(null);
      常量 { referenceRef, 上下文Ref, middlewareData, x, y, update }为useFloating({
        placement,
        strategy,
        middleware: vue.computed(() => {
          常量 middleware为[offset$2(props.offset)];
          如果 (props.showArrow) {
            middleware.push(arrowMiddleware({
              arrowRef
            }));
          }
          返回 middleware;
        })
      });
      常量 zIndex为useZIndex().nextZIndex();
      常量 ns为useNamespace("tooltip-v2");
      常量 side为vue.computed(() => {
        返回 placement.value.split("-")[0];
      });
      常量 上下文Style为vue.computed(() => {
        返回 {
          position: vue.unref(strategy),
          top: `${vue.unref(y) 或 0}px`,
          left: `${vue.unref(x) 或 0}px`,
          zIndex
        };
      });
      常量 arrowStyle为vue.computed(() => {
        如果 (不props.showArrow)
          返回 {};
        常量 { arrow }为vue.unref(middlewareData);
        返回 {
          [`--${ns.名字space.value}-tooltip-v2-arrow-x`]: `${arrow == null ? void 0 : arrow.x}px` 或 "",
          [`--${ns.名字space.value}-tooltip-v2-arrow-y`]: `${arrow == null ? void 0 : arrow.y}px` 或 ""
        };
      });
      常量 上下文Class为vue.computed(() => [
        ns.e("上下文"),
        ns.is("dark", props.effect === "dark"),
        ns.is(vue.unref(strategy)),
        props.上下文Class
      ]);
      vue.watch(arrowRef, () => update());
      vue.watch(() => props.placement, (val) => placement.value为val);
      vue.onMounted(() => {
        vue.watch(() => props.reference 或 triggerRef.value, (el) => {
          referenceRef.value为el 或 void 0;
        }, {
          immediate: true
        });
      });
      vue.provide(tooltipV2ContentKey, { arrowRef });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          ref_key: "上下文Ref",
          ref: 上下文Ref,
          style: vue.normalizeStyle(vue.unref(上下文Style)),
          "data-tooltip-v2-root": ""
        }, [
          不_ctx.nowrap ? (vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            "data-side": vue.unref(side),
            class: vue.normalizeClass(vue.unref(上下文Class))
          }, [
            vue.renderSlot(_ctx.$slots, "default", {
              上下文Style: vue.unref(上下文Style),
              上下文Class: vue.unref(上下文Class)
            }),
            vue.createVNode(vue.unref(ElVisuallyHidden), {
              id: vue.unref(上下文Id),
              role: "tooltip"
            }, {
              default: vue.withCtx(() => [
                _ctx.ariaLabel ? (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 0 }, [
                  vue.createTextVNode(vue.toDisplayString(_ctx.ariaLabel), 1)
                ], 2112)) : vue.renderSlot(_ctx.$slots, "default", { key: 1 })
              ]),
              _: 3
            }, 8, ["id"]),
            vue.renderSlot(_ctx.$slots, "arrow", {
              style: vue.normalizeStyle(vue.unref(arrowStyle)),
              side: vue.unref(side)
            })
          ], 10, _hoisted_1$9)) : vue.createCommentVNode("v-如果", true)
        ], 4);
      };
    }
  });
  变量 TooltipV2Content为/* @__PURE__ */ _输出出口_sfc(_sfc_main$h, [["__file", "上下文.vue"]]);

  常量 变量循环wardRefProps为buildProps({
    setRef: {
      type: definePropType(Function),
      required: true
    },
    onlyChild: Boolean
  });
  变量 ForwardRef为vue.defineComponent({
    props: 变量循环wardRefProps,
    setup(props, {
      slots
    }) {
      常量 fragmentRef为vue.ref();
      常量 setRef为composeRefs(fragmentRef, (el) => {
        如果 (el) {
          props.setRef(el.nextElementSibling);
        } 否则 {
          props.setRef(null);
        }
      });
      返回 () => {
        变量 _a;
        常量 [firstChild]为((_a为slots.default) == null ? void 0 : _a.call(slots)) 或 [];
        常量 child为props.onlyChild ? ensureOnlyChild(firstChild.children) : firstChild.children;
        返回 vue.createVNode(vue.Fragment, {
          "ref": setRef
        }, [child]);
      };
    }
  });

  常量 __default__$5为{
    名字: "ElTooltipV2Trigger"
  };
  常量 _sfc_main$g为/* @__PURE__ */ vue.defineComponent({
    ...__default__$5,
    props: {
      ...tooltipV2CommonProps,
      ...tooltipV2TriggerProps
    },
    setup(__props) {
      常量 props为__props;
      常量 { onClose, onOpen, onDelayOpen, triggerRef, 上下文Id }为vue.inject(tooltipV2RootKey);
      让 isMousedown为false;
      常量 setTriggerRef为(el) => {
        triggerRef.value为el;
      };
      常量 onMouseup为() => {
        isMousedown为false;
      };
      常量 onMouseenter为composeEventHandlers(props.onMouseEnter, onDelayOpen);
      常量 onMouseleave为composeEventHandlers(props.onMouseLeave, onClose);
      常量 onMousedown为composeEventHandlers(props.onMouseDown, () => {
        onClose();
        isMousedown为true;
        document.addEventListener("mouseup", onMouseup, { once: true });
      });
      常量 onFocus为composeEventHandlers(props.onFocus, () => {
        如果 (不isMousedown)
          onOpen();
      });
      常量 onBlur为composeEventHandlers(props.onBlur, onClose);
      常量 onClick为composeEventHandlers(props.onClick, (e) => {
        如果 (e.detail === 0)
          onClose();
      });
      常量 events为{
        blur: onBlur,
        点击: onClick,
        focus: onFocus,
        mousedown: onMousedown,
        mouseenter: onMouseenter,
        mouseleave: onMouseleave
      };
      常量 setEvents为(el, events2, type) => {
        如果 (el) {
          Object.entries(events2).变量循环Each(([名字, handler]) => {
            el[type](名字, handler);
          });
        }
      };
      vue.watch(triggerRef, (triggerEl, previousTriggerEl) => {
        setEvents(triggerEl, events, "addEventListener");
        setEvents(previousTriggerEl, events, "removeEventListener");
        如果 (triggerEl) {
          triggerEl.setAttribute("aria-describedby", 上下文Id.value);
        }
      });
      vue.onBe变量循环eUnmount(() => {
        setEvents(triggerRef.value, events, "removeEventListener");
        document.removeEventListener("mouseup", onMouseup);
      });
      返回 (_ctx, _cache) => {
        返回 _ctx.nowrap ? (vue.openBlock(), vue.createBlock(vue.unref(ForwardRef), {
          key: 0,
          "set-ref": setTriggerRef,
          "only-child": ""
        }, {
          default: vue.withCtx(() => [
            vue.renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        })) : (vue.openBlock(), vue.createElementBlock("button", vue.mergeProps({
          key: 1,
          ref_key: "triggerRef",
          ref: triggerRef
        }, _ctx.$attrs), [
          vue.renderSlot(_ctx.$slots, "default")
        ], 16));
      };
    }
  });
  变量 TooltipV2Trigger为/* @__PURE__ */ _输出出口_sfc(_sfc_main$g, [["__file", "trigger.vue"]]);

  常量 __default__$4为{
    名字: "ElTooltipV2"
  };
  常量 _sfc_main$f为/* @__PURE__ */ vue.defineComponent({
    ...__default__$4,
    props: tooltipV2Props,
    setup(__props) {
      常量 props为__props;
      常量 refedProps为vue.toRefs(props);
      常量 arrowProps为vue.reactive(pick$1(refedProps, Object.keys(tooltipV2ArrowProps)));
      常量 上下文Props为vue.reactive(pick$1(refedProps, Object.keys(tooltipV2ContentProps)));
      常量 rootProps为vue.reactive(pick$1(refedProps, Object.keys(tooltipV2RootProps)));
      常量 triggerProps为vue.reactive(pick$1(refedProps, Object.keys(tooltipV2TriggerProps)));
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createBlock(TooltipV2Root, vue.normalizeProps(vue.guardReactiveProps(vue.unref(rootProps))), {
          default: vue.withCtx(({ open }) => [
            vue.createVNode(TooltipV2Trigger, vue.mergeProps(vue.unref(triggerProps), { nowrap: "" }), {
              default: vue.withCtx(() => [
                vue.renderSlot(_ctx.$slots, "trigger")
              ]),
              _: 3
            }, 16),
            (vue.openBlock(), vue.createBlock(vue.Teleport, {
              to: _ctx.to,
              disabled: 不_ctx.teleported
            }, [
              _ctx.fullTransition ? (vue.openBlock(), vue.createBlock(vue.Transition, vue.normalizeProps(vue.mergeProps({ key: 0 }, _ctx.transitionProps)), {
                default: vue.withCtx(() => [
                  _ctx.alwaysOn 或 open ? (vue.openBlock(), vue.createBlock(TooltipV2Content, vue.normalizeProps(vue.mergeProps({ key: 0 }, vue.unref(上下文Props))), {
                    arrow: vue.withCtx(({ style, side }) => [
                      _ctx.showArrow ? (vue.openBlock(), vue.createBlock(TooltipV2Arrow, vue.mergeProps({ key: 0 }, vue.unref(arrowProps), {
                        style,
                        side
                      }), null, 16, ["style", "side"])) : vue.createCommentVNode("v-如果", true)
                    ]),
                    default: vue.withCtx(() => [
                      vue.renderSlot(_ctx.$slots, "default")
                    ]),
                    _: 3
                  }, 16)) : vue.createCommentVNode("v-如果", true)
                ]),
                _: 2
              }, 1040)) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 1 }, [
                _ctx.alwaysOn 或 open ? (vue.openBlock(), vue.createBlock(TooltipV2Content, vue.normalizeProps(vue.mergeProps({ key: 0 }, vue.unref(上下文Props))), {
                  arrow: vue.withCtx(({ style, side }) => [
                    _ctx.showArrow ? (vue.openBlock(), vue.createBlock(TooltipV2Arrow, vue.mergeProps({ key: 0 }, vue.unref(arrowProps), {
                      style,
                      side
                    }), null, 16, ["style", "side"])) : vue.createCommentVNode("v-如果", true)
                  ]),
                  default: vue.withCtx(() => [
                    vue.renderSlot(_ctx.$slots, "default")
                  ]),
                  _: 3
                }, 16)) : vue.createCommentVNode("v-如果", true)
              ], 2112))
            ], 8, ["to", "disabled"]))
          ]),
          _: 3
        }, 16);
      };
    }
  });
  变量 TooltipV2为/* @__PURE__ */ _输出出口_sfc(_sfc_main$f, [["__file", "tooltip.vue"]]);

  常量 ElTooltipV2为withInstall(TooltipV2);

  常量 CHECKED_CHANGE_EVENT为"checked-change";
  常量 useCheckProps为{
    data: {
      type: Array,
      default() {
        返回 [];
      }
    },
    optionRender: Function,
    placeholder: String,
    标题: String,
    filterable: Boolean,
    变量循环mat: Object,
    filterMethod: Function,
    defaultChecked: Array,
    props: Object
  };
  常量 useCheck$1为(props, panelState) => {
    常量 { emit }为vue.getCurrentInstance();
    常量 labelProp为vue.computed(() => props.props.label 或 "label");
    常量 keyProp为vue.computed(() => props.props.key 或 "key");
    常量 disabledProp为vue.computed(() => props.props.disabled 或 "disabled");
    常量 filteredData为vue.computed(() => {
      返回 props.data.filter((item) => {
        如果 (类型是 props.filterMethod === "函数") {
          返回 props.filterMethod(panelState.query, item);
        } 否则 {
          常量 label为item[labelProp.value] 或 item[keyProp.value].toString();
          返回 label.toLowerCase().includes(panelState.query.toLowerCase());
        }
      });
    });
    常量 checkableData为vue.computed(() => {
      返回 filteredData.value.filter((item) => 不item[disabledProp.value]);
    });
    常量 checkedSummary为vue.computed(() => {
      常量 checkedLength为panelState.checked.长度;
      常量 dataLength为props.data.长度;
      常量 { noChecked, hasChecked }为props.变量循环mat;
      如果 (noChecked 与 hasChecked) {
        返回 checkedLength大于0 ? hasChecked.replace(/\${checked}/g, checkedLength.toString()).replace(/\${total}/g, dataLength.toString()) : noChecked.replace(/\${total}/g, dataLength.toString());
      } 否则 {
        返回 `${checkedLength}/${dataLength}`;
      }
    });
    常量 isIndeterminate为vue.computed(() => {
      常量 checkedLength为panelState.checked.长度;
      返回 checkedLength大于0 与 checkedLength < checkableData.value.长度;
    });
    常量 updateAllChecked为() => {
      常量 checkableDataKeys为checkableData.value.map((item) => item[keyProp.value]);
      panelState.allChecked为checkableDataKeys.长度大于0 与 checkableDataKeys.every((item) => panelState.checked.includes(item));
    };
    常量 handleAllCheckedChange为(value) => {
      panelState.checked为value ? checkableData.value.map((item) => item[keyProp.value]) : [];
    };
    vue.watch(() => panelState.checked, (val, oldVal) => {
      updateAllChecked();
      如果 (panelState.checkChangeByUser) {
        常量 movedKeys为val.concat(oldVal).filter((v) => 不val.includes(v) 或 不oldVal.includes(v));
        emit(CHECKED_CHANGE_EVENT, val, movedKeys);
      } 否则 {
        emit(CHECKED_CHANGE_EVENT, val);
        panelState.checkChangeByUser为true;
      }
    });
    vue.watch(checkableData, () => {
      updateAllChecked();
    });
    vue.watch(() => props.data, () => {
      常量 checked为[];
      常量 filteredDataKeys为filteredData.value.map((item) => item[keyProp.value]);
      panelState.checked.变量循环Each((item) => {
        如果 (filteredDataKeys.includes(item)) {
          checked.push(item);
        }
      });
      panelState.checkChangeByUser为false;
      panelState.checked为checked;
    });
    vue.watch(() => props.defaultChecked, (val, oldVal) => {
      如果 (oldVal 与 val.长度 === oldVal.长度 与 val.every((item) => oldVal.includes(item)))
        返回;
      常量 checked为[];
      常量 checkableDataKeys为checkableData.value.map((item) => item[keyProp.value]);
      val.变量循环Each((item) => {
        如果 (checkableDataKeys.includes(item)) {
          checked.push(item);
        }
      });
      panelState.checkChangeByUser为false;
      panelState.checked为checked;
    }, {
      immediate: true
    });
    返回 {
      labelProp,
      keyProp,
      disabledProp,
      filteredData,
      checkableData,
      checkedSummary,
      isIndeterminate,
      updateAllChecked,
      handleAllCheckedChange
    };
  };

  常量 _sfc_main$e为vue.defineComponent({
    名字: "ElTransferPanel",
    components: {
      ElCheckboxGroup: ElCheckboxGroup$1,
      ElCheckbox,
      ElInput,
      OptionContent: ({ option }) => option
    },
    props: useCheckProps,
    emits: [CHECKED_CHANGE_EVENT],
    setup(props, { slots }) {
      常量 { t }为useLocale();
      常量 ns为useNamespace("transfer");
      常量 panelState为vue.reactive({
        checked: [],
        allChecked: false,
        query: "",
        inputHover: false,
        checkChangeByUser: true
      });
      常量 {
        labelProp,
        keyProp,
        disabledProp,
        filteredData,
        checkedSummary,
        isIndeterminate,
        handleAllCheckedChange
      }为useCheck$1(props, panelState);
      常量 hasNoMatch为vue.computed(() => {
        返回 panelState.query.长度大于0 与 filteredData.value.长度 === 0;
      });
      常量 hasFooter为vue.computed(() => 不不slots.default()[0].children.长度);
      常量 { checked, allChecked, query, inputHover, checkChangeByUser }为vue.toRefs(panelState);
      返回 {
        ns,
        labelProp,
        keyProp,
        disabledProp,
        filteredData,
        checkedSummary,
        isIndeterminate,
        handleAllCheckedChange,
        checked,
        allChecked,
        query,
        inputHover,
        checkChangeByUser,
        hasNoMatch,
        SearchIcon: search,
        hasFooter,
        t
      };
    }
  });
  函数 _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_checkbox为vue.resolveComponent("el-checkbox");
    常量 _component_el_input为vue.resolveComponent("el-input");
    常量 _component_option_上下文为vue.resolveComponent("option-上下文");
    常量 _component_el_checkbox_group为vue.resolveComponent("el-checkbox-group");
    返回 vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass(_ctx.ns.b("panel"))
    }, [
      vue.createElementVNode("p", {
        class: vue.normalizeClass(_ctx.ns.be("panel", "头er"))
      }, [
        vue.createVNode(_component_el_checkbox, {
          modelValue: _ctx.allChecked,
          "onUpdate:modelValue": _cache[0] 或 (_cache[0]为($event) => _ctx.allChecked为$event),
          indeterminate: _ctx.isIndeterminate,
          onChange: _ctx.handleAllCheckedChange
        }, {
          default: vue.withCtx(() => [
            vue.createTextVNode(vue.toDisplayString(_ctx.标题) + " ", 1),
            vue.createElementVNode("span", null, vue.toDisplayString(_ctx.checkedSummary), 1)
          ]),
          _: 1
        }, 8, ["modelValue", "indeterminate", "onChange"])
      ], 2),
      vue.createElementVNode("div", {
        class: vue.normalizeClass([_ctx.ns.be("panel", "主体"), _ctx.ns.is("with-footer", _ctx.hasFooter)])
      }, [
        _ctx.filterable ? (vue.openBlock(), vue.createBlock(_component_el_input, {
          key: 0,
          modelValue: _ctx.query,
          "onUpdate:modelValue": _cache[1] 或 (_cache[1]为($event) => _ctx.query为$event),
          class: vue.normalizeClass(_ctx.ns.be("panel", "filter")),
          size: "default",
          placeholder: _ctx.placeholder,
          "prefix-icon": _ctx.SearchIcon,
          clearable: "",
          onMouseenter: _cache[2] 或 (_cache[2]为($event) => _ctx.inputHover为true),
          onMouseleave: _cache[3] 或 (_cache[3]为($event) => _ctx.inputHover为false)
        }, null, 8, ["modelValue", "class", "placeholder", "prefix-icon"])) : vue.createCommentVNode("v-如果", true),
        vue.withDirectives(vue.createVNode(_component_el_checkbox_group, {
          modelValue: _ctx.checked,
          "onUpdate:modelValue": _cache[4] 或 (_cache[4]为($event) => _ctx.checked为$event),
          class: vue.normalizeClass([_ctx.ns.is("filterable", _ctx.filterable), _ctx.ns.be("panel", "list")])
        }, {
          default: vue.withCtx(() => [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.filteredData, (item) => {
              返回 vue.openBlock(), vue.createBlock(_component_el_checkbox, {
                key: item[_ctx.keyProp],
                class: vue.normalizeClass(_ctx.ns.be("panel", "item")),
                label: item[_ctx.keyProp],
                disabled: item[_ctx.disabledProp]
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_option_上下文, {
                    option: _ctx.optionRender(item)
                  }, null, 8, ["option"])
                ]),
                _: 2
              }, 1032, ["class", "label", "disabled"]);
            }), 128))
          ]),
          _: 1
        }, 8, ["modelValue", "class"]), [
          [vue.vShow, 不_ctx.hasNoMatch 与 _ctx.data.长度大于0]
        ]),
        vue.withDirectives(vue.createElementVNode("p", {
          class: vue.normalizeClass(_ctx.ns.be("panel", "empty"))
        }, vue.toDisplayString(_ctx.hasNoMatch ? _ctx.t("el.transfer.noMatch") : _ctx.t("el.transfer.noData")), 3), [
          [vue.vShow, _ctx.hasNoMatch 或 _ctx.data.长度 === 0]
        ])
      ], 2),
      _ctx.hasFooter ? (vue.openBlock(), vue.createElementBlock("p", {
        key: 0,
        class: vue.normalizeClass(_ctx.ns.be("panel", "footer"))
      }, [
        vue.renderSlot(_ctx.$slots, "default")
      ], 2)) : vue.createCommentVNode("v-如果", true)
    ], 2);
  }
  变量 TransferPanel为/* @__PURE__ */ _输出出口_sfc(_sfc_main$e, [["render", _sfc_render$8], ["__file", "transfer-panel.vue"]]);

  常量 useComputedData为(props) => {
    常量 propsKey为vue.computed(() => props.props.key);
    常量 dataObj为vue.computed(() => {
      返回 props.data.reduce((o, cur) => (o[cur[propsKey.value]]为cur) 与 o, {});
    });
    常量 sourceData为vue.computed(() => {
      返回 props.data.filter((item) => 不props.modelValue.includes(item[propsKey.value]));
    });
    常量 targetData为vue.computed(() => {
      如果 (props.targetOrder === "original") {
        返回 props.data.filter((item) => props.modelValue.includes(item[propsKey.value]));
      } 否则 {
        返回 props.modelValue.reduce((arr, cur) => {
          常量 val为dataObj.value[cur];
          如果 (val) {
            arr.push(val);
          }
          返回 arr;
        }, []);
      }
    });
    返回 {
      propsKey,
      sourceData,
      targetData
    };
  };

  常量 LEFT_CHECK_CHANGE_EVENT为"left-check-change";
  常量 RIGHT_CHECK_CHANGE_EVENT为"right-check-change";
  常量 useCheckedChange为(checkedState, emit) => {
    常量 onSourceCheckedChange为(val, movedKeys) => {
      checkedState.leftChecked为val;
      如果 (movedKeys === void 0)
        返回;
      emit(LEFT_CHECK_CHANGE_EVENT, val, movedKeys);
    };
    常量 onTargetCheckedChange为(val, movedKeys) => {
      checkedState.rightChecked为val;
      如果 (movedKeys === void 0)
        返回;
      emit(RIGHT_CHECK_CHANGE_EVENT, val, movedKeys);
    };
    返回 {
      onSourceCheckedChange,
      onTargetCheckedChange
    };
  };

  常量 useMove为(props, checkedState, propsKey, emit) => {
    常量 _emit为(value, type, checked) => {
      emit(UPDATE_MODEL_EVENT, value);
      emit(CHANGE_EVENT, value, type, checked);
    };
    常量 addToLeft为() => {
      常量 currentValue为props.modelValue.slice();
      checkedState.rightChecked.变量循环Each((item) => {
        常量 index为currentValue.indexOf(item);
        如果 (index大于-1) {
          currentValue.splice(index, 1);
        }
      });
      _emit(currentValue, "left", checkedState.rightChecked);
    };
    常量 addToRight为() => {
      让 currentValue为props.modelValue.slice();
      常量 itemsToBeMoved为props.data.filter((item) => {
        常量 itemKey为item[propsKey.value];
        返回 checkedState.leftChecked.includes(itemKey) 与 不props.modelValue.includes(itemKey);
      }).map((item) => item[propsKey.value]);
      currentValue为props.targetOrder === "unsh如果t" ? itemsToBeMoved.concat(currentValue) : currentValue.concat(itemsToBeMoved);
      如果 (props.targetOrder === "original") {
        currentValue为props.data.filter((item) => currentValue.includes(item[propsKey.value])).map((item) => item[propsKey.value]);
      }
      _emit(currentValue, "right", checkedState.leftChecked);
    };
    返回 {
      addToLeft,
      addToRight
    };
  };

  常量 _sfc_main$d为vue.defineComponent({
    名字: "ElTransfer",
    components: {
      TransferPanel,
      ElButton,
      ElIcon,
      ArrowLeft: arrowLeft,
      ArrowRight: arrowRight
    },
    props: {
      data: {
        type: Array,
        default: () => []
      },
      标题s: {
        type: Array,
        default: () => []
      },
      buttonTexts: {
        type: Array,
        default: () => []
      },
      filterPlaceholder: {
        type: String,
        default: ""
      },
      filterMethod: Function,
      leftDefaultChecked: {
        type: Array,
        default: () => []
      },
      rightDefaultChecked: {
        type: Array,
        default: () => []
      },
      renderContent: Function,
      modelValue: {
        type: Array,
        default: () => []
      },
      变量循环mat: {
        type: Object,
        default: () => ({})
      },
      filterable: {
        type: Boolean,
        default: false
      },
      props: {
        type: Object,
        default: () => ({
          label: "label",
          key: "key",
          disabled: "disabled"
        })
      },
      targetOrder: {
        type: String,
        default: "original",
        validator: (val) => {
          返回 ["original", "push", "unsh如果t"].includes(val);
        }
      }
    },
    emits: [
      UPDATE_MODEL_EVENT,
      CHANGE_EVENT,
      LEFT_CHECK_CHANGE_EVENT,
      RIGHT_CHECK_CHANGE_EVENT
    ],
    setup(props, { emit, slots }) {
      常量 { t }为useLocale();
      常量 ns为useNamespace("transfer");
      常量 elFormItem为vue.inject(变量循环mItemContextKey, {});
      常量 checkedState为vue.reactive({
        leftChecked: [],
        rightChecked: []
      });
      常量 { propsKey, sourceData, targetData }为useComputedData(props);
      常量 { onSourceCheckedChange, onTargetCheckedChange }为useCheckedChange(checkedState, emit);
      常量 { addToLeft, addToRight }为useMove(props, checkedState, propsKey, emit);
      常量 leftPanel为vue.ref();
      常量 rightPanel为vue.ref();
      常量 clearQuery为(which) => {
        主分支 (which) {
          子分支 "left":
            leftPanel.value.query为"";
            break;
          子分支 "right":
            rightPanel.value.query为"";
            break;
        }
      };
      常量 hasButtonTexts为vue.computed(() => props.buttonTexts.长度 === 2);
      常量 leftPanelTitle为vue.computed(() => props.标题s[0] 或 t("el.transfer.标题s.0"));
      常量 rightPanelTitle为vue.computed(() => props.标题s[1] 或 t("el.transfer.标题s.1"));
      常量 panelFilterPlaceholder为vue.computed(() => props.filterPlaceholder 或 t("el.transfer.filterPlaceholder"));
      vue.watch(() => props.modelValue, () => {
        变量 _a;
        (_a为elFormItem.validate) == null ? void 0 : _a.call(elFormItem, "change").捕获到((err) => debugWarn());
      });
      常量 optionRender为vue.computed(() => (option) => {
        如果 (props.renderContent)
          返回 props.renderContent(vue.h, option);
        如果 (slots.default)
          返回 slots.default({ option });
        返回 vue.h("span", option[props.props.label] 或 option[props.props.key]);
      });
      返回 {
        ns,
        sourceData,
        targetData,
        onSourceCheckedChange,
        onTargetCheckedChange,
        addToLeft,
        addToRight,
        ...vue.toRefs(checkedState),
        hasButtonTexts,
        leftPanelTitle,
        rightPanelTitle,
        panelFilterPlaceholder,
        clearQuery,
        leftPanel,
        rightPanel,
        optionRender
      };
    }
  });
  常量 _hoisted_1$8为{ key: 0 };
  常量 _hoisted_2$6为{ key: 0 };
  函数 _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_transfer_panel为vue.resolveComponent("transfer-panel");
    常量 _component_arrow_left为vue.resolveComponent("arrow-left");
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_el_button为vue.resolveComponent("el-button");
    常量 _component_arrow_right为vue.resolveComponent("arrow-right");
    返回 vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass(_ctx.ns.b())
    }, [
      vue.createVNode(_component_transfer_panel, {
        ref: "leftPanel",
        data: _ctx.sourceData,
        "option-render": _ctx.optionRender,
        placeholder: _ctx.panelFilterPlaceholder,
        标题: _ctx.leftPanelTitle,
        filterable: _ctx.filterable,
        变量循环mat: _ctx.变量循环mat,
        "filter-method": _ctx.filterMethod,
        "default-checked": _ctx.leftDefaultChecked,
        props: _ctx.props,
        onCheckedChange: _ctx.onSourceCheckedChange
      }, {
        default: vue.withCtx(() => [
          vue.renderSlot(_ctx.$slots, "left-footer")
        ]),
        _: 3
      }, 8, ["data", "option-render", "placeholder", "标题", "filterable", "变量循环mat", "filter-method", "default-checked", "props", "onCheckedChange"]),
      vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.ns.e("buttons"))
      }, [
        vue.createVNode(_component_el_button, {
          type: "primary",
          class: vue.normalizeClass([_ctx.ns.e("button"), _ctx.ns.is("with-texts", _ctx.hasButtonTexts)]),
          disabled: _ctx.rightChecked.长度 === 0,
          onClick: _ctx.addToLeft
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_el_icon, null, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_arrow_left)
              ]),
              _: 1
            }),
            _ctx.buttonTexts[0] 不== void 0 ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_1$8, vue.toDisplayString(_ctx.buttonTexts[0]), 1)) : vue.createCommentVNode("v-如果", true)
          ]),
          _: 1
        }, 8, ["class", "disabled", "onClick"]),
        vue.createVNode(_component_el_button, {
          type: "primary",
          class: vue.normalizeClass([_ctx.ns.e("button"), _ctx.ns.is("with-texts", _ctx.hasButtonTexts)]),
          disabled: _ctx.leftChecked.长度 === 0,
          onClick: _ctx.addToRight
        }, {
          default: vue.withCtx(() => [
            _ctx.buttonTexts[1] 不== void 0 ? (vue.openBlock(), vue.createElementBlock("span", _hoisted_2$6, vue.toDisplayString(_ctx.buttonTexts[1]), 1)) : vue.createCommentVNode("v-如果", true),
            vue.createVNode(_component_el_icon, null, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_arrow_right)
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["class", "disabled", "onClick"])
      ], 2),
      vue.createVNode(_component_transfer_panel, {
        ref: "rightPanel",
        data: _ctx.targetData,
        "option-render": _ctx.optionRender,
        placeholder: _ctx.panelFilterPlaceholder,
        filterable: _ctx.filterable,
        变量循环mat: _ctx.变量循环mat,
        "filter-method": _ctx.filterMethod,
        标题: _ctx.rightPanelTitle,
        "default-checked": _ctx.rightDefaultChecked,
        props: _ctx.props,
        onCheckedChange: _ctx.onTargetCheckedChange
      }, {
        default: vue.withCtx(() => [
          vue.renderSlot(_ctx.$slots, "right-footer")
        ]),
        _: 3
      }, 8, ["data", "option-render", "placeholder", "filterable", "变量循环mat", "filter-method", "标题", "default-checked", "props", "onCheckedChange"])
    ], 2);
  }
  变量 Transfer为/* @__PURE__ */ _输出出口_sfc(_sfc_main$d, [["render", _sfc_render$7], ["__file", "index.vue"]]);

  Transfer.install为(app) => {
    app.component(Transfer.名字, Transfer);
  };
  常量 _Transfer为Transfer;
  常量 ElTransfer为_Transfer;

  常量 NODE_KEY为"$treeNodeId";
  常量 markNodeData为函数(node, data) {
    如果 (不data 或 data[NODE_KEY])
      返回;
    Object.defineProperty(data, NODE_KEY, {
      value: node.id,
      enumerable: false,
      configurable: false,
      writable: false
    });
  };
  常量 getNodeKey为函数(key, data) {
    如果 (不key)
      返回 data[NODE_KEY];
    返回 data[key];
  };

  常量 getChildState为(node) => {
    让 all为true;
    让 none为true;
    让 allWithoutDisable为true;
    变量循环 (让 i为0, j为node.长度; i < j; i加一) {
      常量 n为node[i];
      如果 (n.checked 不== true 或 n.indeterminate) {
        all为false;
        如果 (不n.disabled) {
          allWithoutDisable为false;
        }
      }
      如果 (n.checked 不== false 或 n.indeterminate) {
        none为false;
      }
    }
    返回 { all, none, allWithoutDisable, half: 不all 与 不none };
  };
  常量 reInitChecked为函数(node) {
    如果 (node.childNodes.长度 === 0)
      返回;
    常量 { all, none, half }为getChildState(node.childNodes);
    如果 (all) {
      node.checked为true;
      node.indeterminate为false;
    } 否则 如果 (half) {
      node.checked为false;
      node.indeterminate为true;
    } 否则 如果 (none) {
      node.checked为false;
      node.indeterminate为false;
    }
    常量 parent为node.parent;
    如果 (不parent 或 parent.level === 0)
      返回;
    如果 (不node.store.checkStrictly) {
      reInitChecked(parent);
    }
  };
  常量 getPropertyFromData为函数(node, prop) {
    常量 props为node.store.props;
    常量 data为node.data 或 {};
    常量 config为props[prop];
    如果 (类型是 config === "函数") {
      返回 config(data, node);
    } 否则 如果 (类型是 config === "string") {
      返回 data[config];
    } 否则 如果 (类型是 config === "undefined") {
      常量 dataProp为data[prop];
      返回 dataProp === void 0 ? "" : dataProp;
    }
  };
  让 nodeIdSeed为0;
  class Node {
    常量ructor(options) {
      this.id为nodeIdSeed加一;
      this.text为null;
      this.checked为false;
      this.indeterminate为false;
      this.data为null;
      this.expanded为false;
      this.parent为null;
      this.visible为true;
      this.isCurrent为false;
      this.canFocus为false;
      变量循环 (常量 名字 在 options) {
        如果 (hasOwn(options, 名字)) {
          this[名字]为options[名字];
        }
      }
      this.level为0;
      this.loaded为false;
      this.childNodes为[];
      this.loading为false;
      如果 (this.parent) {
        this.level为this.parent.level + 1;
      }
    }
    initialize() {
      常量 store为this.store;
      如果 (不store) {
        抛出 new Error("[Node]store is required不");
      }
      store.registerNode(this);
      常量 props为store.props;
      如果 (props 与 类型是 props.isLeaf 不== "undefined") {
        常量 isLeaf为getPropertyFromData(this, "isLeaf");
        如果 (类型是 isLeaf === "boolean") {
          this.isLeafByUser为isLeaf;
        }
      }
      如果 (store.lazy 不== true 与 this.data) {
        this.setData(this.data);
        如果 (store.defaultExpandAll) {
          this.expanded为true;
          this.canFocus为true;
        }
      } 否则 如果 (this.level大于0 与 store.lazy 与 store.defaultExpandAll) {
        this.expand();
      }
      如果 (不Array.isArray(this.data)) {
        markNodeData(this, this.data);
      }
      如果 (不this.data)
        返回;
      常量 defaultExpandedKeys为store.defaultExpandedKeys;
      常量 key为store.key;
      如果 (key 与 defaultExpandedKeys 与 defaultExpandedKeys.includes(this.key)) {
        this.expand(null, store.autoExpandParent);
      }
      如果 (key 与 store.currentNodeKey 不== void 0 与 this.key === store.currentNodeKey) {
        store.currentNode为this;
        store.currentNode.isCurrent为true;
      }
      如果 (store.lazy) {
        store._initDefaultCheckedNode(this);
      }
      this.updateLeafState();
      如果 (this.parent 与 (this.level === 1 或 this.parent.expanded === true))
        this.canFocus为true;
    }
    setData(data) {
      如果 (不Array.isArray(data)) {
        markNodeData(this, data);
      }
      this.data为data;
      this.childNodes为[];
      让 children;
      如果 (this.level === 0 与 Array.isArray(this.data)) {
        children为this.data;
      } 否则 {
        children为getPropertyFromData(this, "children") 或 [];
      }
      变量循环 (让 i为0, j为children.长度; i < j; i加一) {
        this.insertChild({ data: children[i] });
      }
    }
    get label() {
      返回 getPropertyFromData(this, "label");
    }
    get key() {
      常量 nodeKey为this.store.key;
      如果 (this.data)
        返回 this.data[nodeKey];
      返回 null;
    }
    get disabled() {
      返回 getPropertyFromData(this, "disabled");
    }
    get nextSibling() {
      常量 parent为this.parent;
      如果 (parent) {
        常量 index为parent.childNodes.indexOf(this);
        如果 (index大于-1) {
          返回 parent.childNodes[index + 1];
        }
      }
      返回 null;
    }
    get previousSibling() {
      常量 parent为this.parent;
      如果 (parent) {
        常量 index为parent.childNodes.indexOf(this);
        如果 (index大于-1) {
          返回 index大于0 ? parent.childNodes[index - 1] : null;
        }
      }
      返回 null;
    }
    contains(target, deep为true) {
      返回 (this.childNodes 或 []).some((child) => child === target 或 deep 与 child.contains(target));
    }
    remove() {
      常量 parent为this.parent;
      如果 (parent) {
        parent.removeChild(this);
      }
    }
    insertChild(child, index, batch) {
      如果 (不child)
        抛出 new Error("InsertChild error: child is required.");
      如果 (不(child instanceof Node)) {
        如果 (不batch) {
          常量 children为this.getChildren(true);
          如果 (不children.includes(child.data)) {
            如果 (类型是 index === "undefined" 或 index < 0) {
              children.push(child.data);
            } 否则 {
              children.splice(index, 0, child.data);
            }
          }
        }
        Object.assign(child, {
          parent: this,
          store: this.store
        });
        child为vue.reactive(new Node(child));
        如果 (child instanceof Node) {
          child.initialize();
        }
      }
      child.level为this.level + 1;
      如果 (类型是 index === "undefined" 或 index < 0) {
        this.childNodes.push(child);
      } 否则 {
        this.childNodes.splice(index, 0, child);
      }
      this.updateLeafState();
    }
    insertBe变量循环e(child, ref) {
      让 index;
      如果 (ref) {
        index为this.childNodes.indexOf(ref);
      }
      this.insertChild(child, index);
    }
    insertAfter(child, ref) {
      让 index;
      如果 (ref) {
        index为this.childNodes.indexOf(ref);
        如果 (index 不== -1)
          index += 1;
      }
      this.insertChild(child, index);
    }
    removeChild(child) {
      常量 children为this.getChildren() 或 [];
      常量 dataIndex为children.indexOf(child.data);
      如果 (dataIndex大于-1) {
        children.splice(dataIndex, 1);
      }
      常量 index为this.childNodes.indexOf(child);
      如果 (index大于-1) {
        this.store 与 this.store.deregisterNode(child);
        child.parent为null;
        this.childNodes.splice(index, 1);
      }
      this.updateLeafState();
    }
    removeChildByData(data) {
      让 targetNode为null;
      变量循环 (让 i为0; i < this.childNodes.长度; i加一) {
        如果 (this.childNodes[i].data === data) {
          targetNode为this.childNodes[i];
          break;
        }
      }
      如果 (targetNode) {
        this.removeChild(targetNode);
      }
    }
    expand(callback, expandParent) {
      常量 done为() => {
        如果 (expandParent) {
          让 parent为this.parent;
          条件循环 (parent.level大于0) {
            parent.expanded为true;
            parent为parent.parent;
          }
        }
        this.expanded为true;
        如果 (callback)
          callback();
        this.childNodes.变量循环Each((item) => {
          item.canFocus为true;
        });
      };
      如果 (this.shouldLoadData()) {
        this.loadData((data) => {
          如果 (Array.isArray(data)) {
            如果 (this.checked) {
              this.setChecked(true, true);
            } 否则 如果 (不this.store.checkStrictly) {
              reInitChecked(this);
            }
            done();
          }
        });
      } 否则 {
        done();
      }
    }
    doCreateChildren(array, defaultProps为{}) {
      array.变量循环Each((item) => {
        this.insertChild(Object.assign({ data: item }, defaultProps), void 0, true);
      });
    }
    collapse() {
      this.expanded为false;
      this.childNodes.变量循环Each((item) => {
        item.canFocus为false;
      });
    }
    shouldLoadData() {
      返回 this.store.lazy === true 与 this.store.load 与 不this.loaded;
    }
    updateLeafState() {
      如果 (this.store.lazy === true 与 this.loaded 不== true 与 类型是 this.isLeafByUser 不== "undefined") {
        this.isLeaf为this.isLeafByUser;
        返回;
      }
      常量 childNodes为this.childNodes;
      如果 (不this.store.lazy 或 this.store.lazy === true 与 this.loaded === true) {
        this.isLeaf为不childNodes 或 childNodes.长度 === 0;
        返回;
      }
      this.isLeaf为false;
    }
    setChecked(value, deep, recursion, passValue) {
      this.indeterminate为value === "half";
      this.checked为value === true;
      如果 (this.store.checkStrictly)
        返回;
      如果 (不(this.shouldLoadData() 与 不this.store.checkDescendants)) {
        常量 { all, allWithoutDisable }为getChildState(this.childNodes);
        如果 (不this.isLeaf 与 不all 与 allWithoutDisable) {
          this.checked为false;
          value为false;
        }
        常量 handleDescendants为() => {
          如果 (deep) {
            常量 childNodes为this.childNodes;
            变量循环 (让 i为0, j为childNodes.长度; i < j; i加一) {
              常量 child为childNodes[i];
              passValue为passValue 或 value 不== false;
              常量 isCheck为child.disabled ? child.checked : passValue;
              child.setChecked(isCheck, deep, true, passValue);
            }
            常量 { half, all: all2 }为getChildState(childNodes);
            如果 (不all2) {
              this.checked为all2;
              this.indeterminate为half;
            }
          }
        };
        如果 (this.shouldLoadData()) {
          this.loadData(() => {
            handleDescendants();
            reInitChecked(this);
          }, {
            checked: value 不== false
          });
          返回;
        } 否则 {
          handleDescendants();
        }
      }
      常量 parent为this.parent;
      如果 (不parent 或 parent.level === 0)
        返回;
      如果 (不recursion) {
        reInitChecked(parent);
      }
    }
    getChildren(变量循环ceInit为false) {
      如果 (this.level === 0)
        返回 this.data;
      常量 data为this.data;
      如果 (不data)
        返回 null;
      常量 props为this.store.props;
      让 children为"children";
      如果 (props) {
        children为props.children 或 "children";
      }
      如果 (data[children] === void 0) {
        data[children]为null;
      }
      如果 (变量循环ceInit 与 不data[children]) {
        data[children]为[];
      }
      返回 data[children];
    }
    updateChildren() {
      常量 newData为this.getChildren() 或 [];
      常量 oldData为this.childNodes.map((node) => node.data);
      常量 newDataMap为{};
      常量 newNodes为[];
      newData.变量循环Each((item, index) => {
        常量 key为item[NODE_KEY];
        常量 isNodeExists为不不key 与 oldData.findIndex((data) => data[NODE_KEY] === key) >= 0;
        如果 (isNodeExists) {
          newDataMap[key]为{ index, data: item };
        } 否则 {
          newNodes.push({ index, data: item });
        }
      });
      如果 (不this.store.lazy) {
        oldData.变量循环Each((item) => {
          如果 (不newDataMap[item[NODE_KEY]])
            this.removeChildByData(item);
        });
      }
      newNodes.变量循环Each(({ index, data }) => {
        this.insertChild({ data }, index);
      });
      this.updateLeafState();
    }
    loadData(callback, defaultProps为{}) {
      如果 (this.store.lazy === true 与 this.store.load 与 不this.loaded 与 (不this.loading 或 Object.keys(defaultProps).长度)) {
        this.loading为true;
        常量 resolve为(children) => {
          this.loaded为true;
          this.loading为false;
          this.childNodes为[];
          this.doCreateChildren(children, defaultProps);
          this.updateLeafState();
          如果 (callback) {
            callback.call(this, children);
          }
        };
        this.store.load(this, resolve);
      } 否则 {
        如果 (callback) {
          callback.call(this);
        }
      }
    }
  }
  变量 Node$1为Node;

  class TreeStore {
    常量ructor(options) {
      this.currentNode为null;
      this.currentNodeKey为null;
      变量循环 (常量 option 在 options) {
        如果 (hasOwn(options, option)) {
          this[option]为options[option];
        }
      }
      this.nodesMap为{};
    }
    initialize() {
      this.root为new Node$1({
        data: this.data,
        store: this
      });
      this.root.initialize();
      如果 (this.lazy 与 this.load) {
        常量 loadFn为this.load;
        loadFn(this.root, (data) => {
          this.root.doCreateChildren(data);
          this._initDefaultCheckedNodes();
        });
      } 否则 {
        this._initDefaultCheckedNodes();
      }
    }
    filter(value) {
      常量 filterNodeMethod为this.filterNodeMethod;
      常量 lazy为this.lazy;
      常量 traverse为函数(node) {
        常量 childNodes为node.root ? node.root.childNodes : node.childNodes;
        childNodes.变量循环Each((child) => {
          child.visible为filterNodeMethod.call(child, value, child.data, child);
          traverse(child);
        });
        如果 (不node.visible 与 childNodes.长度) {
          让 allHidden为true;
          allHidden为不childNodes.some((child) => child.visible);
          如果 (node.root) {
            node.root.visible为allHidden === false;
          } 否则 {
            node.visible为allHidden === false;
          }
        }
        如果 (不value)
          返回;
        如果 (node.visible 与 不node.isLeaf 与 不lazy)
          node.expand();
      };
      traverse(this);
    }
    setData(newVal) {
      常量 instanceChanged为newVal 不== this.root.data;
      如果 (instanceChanged) {
        this.root.setData(newVal);
        this._initDefaultCheckedNodes();
      } 否则 {
        this.root.updateChildren();
      }
    }
    getNode(data) {
      如果 (data instanceof Node$1)
        返回 data;
      常量 key为类型是 data 不== "object" ? data : getNodeKey(this.key, data);
      返回 this.nodesMap[key] 或 null;
    }
    insertBe变量循环e(data, refData) {
      常量 refNode为this.getNode(refData);
      refNode.parent.insertBe变量循环e({ data }, refNode);
    }
    insertAfter(data, refData) {
      常量 refNode为this.getNode(refData);
      refNode.parent.insertAfter({ data }, refNode);
    }
    remove(data) {
      常量 node为this.getNode(data);
      如果 (node 与 node.parent) {
        如果 (node === this.currentNode) {
          this.currentNode为null;
        }
        node.parent.removeChild(node);
      }
    }
    append(data, parentData) {
      常量 parentNode为parentData ? this.getNode(parentData) : this.root;
      如果 (parentNode) {
        parentNode.insertChild({ data });
      }
    }
    _initDefaultCheckedNodes() {
      常量 defaultCheckedKeys为this.defaultCheckedKeys 或 [];
      常量 nodesMap为this.nodesMap;
      defaultCheckedKeys.变量循环Each((checkedKey) => {
        常量 node为nodesMap[checkedKey];
        如果 (node) {
          node.setChecked(true, 不this.checkStrictly);
        }
      });
    }
    _initDefaultCheckedNode(node) {
      常量 defaultCheckedKeys为this.defaultCheckedKeys 或 [];
      如果 (defaultCheckedKeys.includes(node.key)) {
        node.setChecked(true, 不this.checkStrictly);
      }
    }
    setDefaultCheckedKey(newVal) {
      如果 (newVal 不== this.defaultCheckedKeys) {
        this.defaultCheckedKeys为newVal;
        this._initDefaultCheckedNodes();
      }
    }
    registerNode(node) {
      常量 key为this.key;
      如果 (不node 或 不node.data)
        返回;
      如果 (不key) {
        this.nodesMap[node.id]为node;
      } 否则 {
        常量 nodeKey为node.key;
        如果 (nodeKey 不== void 0)
          this.nodesMap[node.key]为node;
      }
    }
    deregisterNode(node) {
      常量 key为this.key;
      如果 (不key 或 不node 或 不node.data)
        返回;
      node.childNodes.变量循环Each((child) => {
        this.deregisterNode(child);
      });
      de让e this.nodesMap[node.key];
    }
    getCheckedNodes(leafOnly为false, includeHalfChecked为false) {
      常量 checkedNodes为[];
      常量 traverse为函数(node) {
        常量 childNodes为node.root ? node.root.childNodes : node.childNodes;
        childNodes.变量循环Each((child) => {
          如果 ((child.checked 或 includeHalfChecked 与 child.indeterminate) 与 (不leafOnly 或 leafOnly 与 child.isLeaf)) {
            checkedNodes.push(child.data);
          }
          traverse(child);
        });
      };
      traverse(this);
      返回 checkedNodes;
    }
    getCheckedKeys(leafOnly为false) {
      返回 this.getCheckedNodes(leafOnly).map((data) => (data 或 {})[this.key]);
    }
    getHalfCheckedNodes() {
      常量 nodes为[];
      常量 traverse为函数(node) {
        常量 childNodes为node.root ? node.root.childNodes : node.childNodes;
        childNodes.变量循环Each((child) => {
          如果 (child.indeterminate) {
            nodes.push(child.data);
          }
          traverse(child);
        });
      };
      traverse(this);
      返回 nodes;
    }
    getHalfCheckedKeys() {
      返回 this.getHalfCheckedNodes().map((data) => (data 或 {})[this.key]);
    }
    _getAllNodes() {
      常量 allNodes为[];
      常量 nodesMap为this.nodesMap;
      变量循环 (常量 nodeKey 在 nodesMap) {
        如果 (hasOwn(nodesMap, nodeKey)) {
          allNodes.push(nodesMap[nodeKey]);
        }
      }
      返回 allNodes;
    }
    updateChildren(key, data) {
      常量 node为this.nodesMap[key];
      如果 (不node)
        返回;
      常量 childNodes为node.childNodes;
      变量循环 (让 i为childNodes.长度 - 1; i >= 0; i--) {
        常量 child为childNodes[i];
        this.remove(child.data);
      }
      变量循环 (让 i为0, j为data.长度; i < j; i加一) {
        常量 child为data[i];
        this.append(child, node.data);
      }
    }
    _setCheckedKeys(key, leafOnly为false, checkedKeys) {
      常量 allNodes为this._getAllNodes().sort((a, b) => b.level - a.level);
      常量 cache为/* @__PURE__ */ Object.create(null);
      常量 keys为Object.keys(checkedKeys);
      allNodes.变量循环Each((node) => node.setChecked(false, false));
      变量循环 (让 i为0, j为allNodes.长度; i < j; i加一) {
        常量 node为allNodes[i];
        常量 nodeKey为node.data[key].toString();
        常量 checked为keys.includes(nodeKey);
        如果 (不checked) {
          如果 (node.checked 与 不cache[nodeKey]) {
            node.setChecked(false, false);
          }
          continue;
        }
        让 parent为node.parent;
        条件循环 (parent 与 parent.level大于0) {
          cache[parent.data[key]]为true;
          parent为parent.parent;
        }
        如果 (node.isLeaf 或 this.checkStrictly) {
          node.setChecked(true, false);
          continue;
        }
        node.setChecked(true, true);
        如果 (leafOnly) {
          node.setChecked(false, false);
          常量 traverse为函数(node2) {
            常量 childNodes为node2.childNodes;
            childNodes.变量循环Each((child) => {
              如果 (不child.isLeaf) {
                child.setChecked(false, false);
              }
              traverse(child);
            });
          };
          traverse(node);
        }
      }
    }
    setCheckedNodes(array, leafOnly为false) {
      常量 key为this.key;
      常量 checkedKeys为{};
      array.变量循环Each((item) => {
        checkedKeys[(item 或 {})[key]]为true;
      });
      this._setCheckedKeys(key, leafOnly, checkedKeys);
    }
    setCheckedKeys(keys, leafOnly为false) {
      this.defaultCheckedKeys为keys;
      常量 key为this.key;
      常量 checkedKeys为{};
      keys.变量循环Each((key2) => {
        checkedKeys[key2]为true;
      });
      this._setCheckedKeys(key, leafOnly, checkedKeys);
    }
    setDefaultExpandedKeys(keys) {
      keys为keys 或 [];
      this.defaultExpandedKeys为keys;
      keys.变量循环Each((key) => {
        常量 node为this.getNode(key);
        如果 (node)
          node.expand(null, this.autoExpandParent);
      });
    }
    setChecked(data, checked, deep) {
      常量 node为this.getNode(data);
      如果 (node) {
        node.setChecked(不不checked, deep);
      }
    }
    getCurrentNode() {
      返回 this.currentNode;
    }
    setCurrentNode(currentNode) {
      常量 prevCurrentNode为this.currentNode;
      如果 (prevCurrentNode) {
        prevCurrentNode.isCurrent为false;
      }
      this.currentNode为currentNode;
      this.currentNode.isCurrent为true;
    }
    setUserCurrentNode(node, shouldAutoExpandParent为true) {
      常量 key为node[this.key];
      常量 currNode为this.nodesMap[key];
      this.setCurrentNode(currNode);
      如果 (shouldAutoExpandParent 与 this.currentNode.level大于1) {
        this.currentNode.parent.expand(null, true);
      }
    }
    setCurrentNodeKey(key, shouldAutoExpandParent为true) {
      如果 (key === null 或 key === void 0) {
        this.currentNode 与 (this.currentNode.isCurrent为false);
        this.currentNode为null;
        返回;
      }
      常量 node为this.getNode(key);
      如果 (node) {
        this.setCurrentNode(node);
        如果 (shouldAutoExpandParent 与 this.currentNode.level大于1) {
          this.currentNode.parent.expand(null, true);
        }
      }
    }
  }

  常量 _sfc_main$c为vue.defineComponent({
    名字: "ElTreeNodeContent",
    props: {
      node: {
        type: Object,
        required: true
      },
      renderContent: Function
    },
    setup(props) {
      常量 ns为useNamespace("tree");
      常量 nodeInstance为vue.inject("NodeInstance");
      常量 tree为vue.inject("RootTree");
      返回 () => {
        常量 node为props.node;
        常量 { data, store }为node;
        返回 props.renderContent ? props.renderContent(vue.h, { _self: nodeInstance, node, data, store }) : tree.ctx.slots.default ? tree.ctx.slots.default({ node, data }) : vue.h("span", { class: ns.be("node", "label") }, [node.label]);
      };
    }
  });
  变量 NodeContent为/* @__PURE__ */ _输出出口_sfc(_sfc_main$c, [["__file", "tree-node-上下文.vue"]]);

  函数 useNodeExpandEventBroadcast(props) {
    常量 parentNodeMap为vue.inject("TreeNodeMap", null);
    常量 currentNodeMap为{
      treeNodeExpand: (node) => {
        如果 (props.node 不== node) {
          props.node.collapse();
        }
      },
      children: []
    };
    如果 (parentNodeMap) {
      parentNodeMap.children.push(currentNodeMap);
    }
    vue.provide("TreeNodeMap", currentNodeMap);
    返回 {
      broadcastExpanded: (node) => {
        如果 (不props.accordion)
          返回;
        变量循环 (常量 childNode of currentNodeMap.children) {
          childNode.treeNodeExpand(node);
        }
      }
    };
  }

  常量 dragEventsKey为Symbol("dragEvents");
  函数 useDragNodeHandler({ props, ctx, el$, dropIndicator$, store }) {
    常量 ns为useNamespace("tree");
    常量 dragState为vue.ref({
      showDropIndicator: false,
      draggingNode: null,
      dropNode: null,
      allowDrop: true,
      dropType: null
    });
    常量 treeNodeDragStart为({ event, treeNode }) => {
      如果 (类型是 props.allowDrag === "函数" 与 不props.allowDrag(treeNode.node)) {
        event.preventDefault();
        返回 false;
      }
      event.dataTransfer.effectAllowed为"move";
      尝试 {
        event.dataTransfer.setData("text/plain", "");
      } 捕获到 (e) {
      }
      dragState.value.draggingNode为treeNode;
      ctx.emit("node-drag-start", treeNode.node, event);
    };
    常量 treeNodeDragOver为({ event, treeNode }) => {
      常量 dropNode为treeNode;
      常量 oldDropNode为dragState.value.dropNode;
      如果 (oldDropNode 与 oldDropNode 不== dropNode) {
        removeClass(oldDropNode.$el, ns.is("drop-inner"));
      }
      常量 draggingNode为dragState.value.draggingNode;
      如果 (不draggingNode 或 不dropNode)
        返回;
      让 dropPrev为true;
      让 dropInner为true;
      让 dropNext为true;
      让 userAllowDropInner为true;
      如果 (类型是 props.allowDrop === "函数") {
        dropPrev为props.allowDrop(draggingNode.node, dropNode.node, "prev");
        userAllowDropInner为dropInner为props.allowDrop(draggingNode.node, dropNode.node, "inner");
        dropNext为props.allowDrop(draggingNode.node, dropNode.node, "next");
      }
      event.dataTransfer.dropEffect为dropInner 或 dropPrev 或 dropNext ? "move" : "none";
      如果 ((dropPrev 或 dropInner 或 dropNext) 与 oldDropNode 不== dropNode) {
        如果 (oldDropNode) {
          ctx.emit("node-drag-leave", draggingNode.node, oldDropNode.node, event);
        }
        ctx.emit("node-drag-enter", draggingNode.node, dropNode.node, event);
      }
      如果 (dropPrev 或 dropInner 或 dropNext) {
        dragState.value.dropNode为dropNode;
      }
      如果 (dropNode.node.nextSibling === draggingNode.node) {
        dropNext为false;
      }
      如果 (dropNode.node.previousSibling === draggingNode.node) {
        dropPrev为false;
      }
      如果 (dropNode.node.contains(draggingNode.node, false)) {
        dropInner为false;
      }
      如果 (draggingNode.node === dropNode.node 或 draggingNode.node.contains(dropNode.node)) {
        dropPrev为false;
        dropInner为false;
        dropNext为false;
      }
      常量 targetPosition为dropNode.$el.getBoundingClientRect();
      常量 treePosition为el$.value.getBoundingClientRect();
      让 dropType;
      常量 prevPercent为dropPrev ? dropInner ? 0.25 : dropNext ? 0.45 : 1 : -1;
      常量 nextPercent为dropNext ? dropInner ? 0.75 : dropPrev ? 0.55 : 0 : 1;
      让 indicatorTop为-9999;
      常量 distance为event.clientY - targetPosition.top;
      如果 (distance < targetPosition.height * prevPercent) {
        dropType为"be变量循环e";
      } 否则 如果 (distance大于targetPosition.height * nextPercent) {
        dropType为"after";
      } 否则 如果 (dropInner) {
        dropType为"inner";
      } 否则 {
        dropType为"none";
      }
      常量 iconPosition为dropNode.$el.querySelector(`.${ns.be("node", "expand-icon")}`).getBoundingClientRect();
      常量 dropIndicator为dropIndicator$.value;
      如果 (dropType === "be变量循环e") {
        indicatorTop为iconPosition.top - treePosition.top;
      } 否则 如果 (dropType === "after") {
        indicatorTop为iconPosition.bottom - treePosition.top;
      }
      dropIndicator.style.top为`${indicatorTop}px`;
      dropIndicator.style.left为`${iconPosition.right - treePosition.left}px`;
      如果 (dropType === "inner") {
        addClass(dropNode.$el, ns.is("drop-inner"));
      } 否则 {
        removeClass(dropNode.$el, ns.is("drop-inner"));
      }
      dragState.value.showDropIndicator为dropType === "be变量循环e" 或 dropType === "after";
      dragState.value.allowDrop为dragState.value.showDropIndicator 或 userAllowDropInner;
      dragState.value.dropType为dropType;
      ctx.emit("node-drag-over", draggingNode.node, dropNode.node, event);
    };
    常量 treeNodeDragEnd为(event) => {
      常量 { draggingNode, dropType, dropNode }为dragState.value;
      event.preventDefault();
      event.dataTransfer.dropEffect为"move";
      如果 (draggingNode 与 dropNode) {
        常量 draggingNodeCopy为{ data: draggingNode.node.data };
        如果 (dropType 不== "none") {
          draggingNode.node.remove();
        }
        如果 (dropType === "be变量循环e") {
          dropNode.node.parent.insertBe变量循环e(draggingNodeCopy, dropNode.node);
        } 否则 如果 (dropType === "after") {
          dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node);
        } 否则 如果 (dropType === "inner") {
          dropNode.node.insertChild(draggingNodeCopy);
        }
        如果 (dropType 不== "none") {
          store.value.registerNode(draggingNodeCopy);
        }
        removeClass(dropNode.$el, ns.is("drop-inner"));
        ctx.emit("node-drag-end", draggingNode.node, dropNode.node, dropType, event);
        如果 (dropType 不== "none") {
          ctx.emit("node-drop", draggingNode.node, dropNode.node, dropType, event);
        }
      }
      如果 (draggingNode 与 不dropNode) {
        ctx.emit("node-drag-end", draggingNode.node, null, dropType, event);
      }
      dragState.value.showDropIndicator为false;
      dragState.value.draggingNode为null;
      dragState.value.dropNode为null;
      dragState.value.allowDrop为true;
    };
    vue.provide(dragEventsKey, {
      treeNodeDragStart,
      treeNodeDragOver,
      treeNodeDragEnd
    });
    返回 {
      dragState
    };
  }

  常量 _sfc_main$b为vue.defineComponent({
    名字: "ElTreeNode",
    components: {
      ElCollapseTransition: _CollapseTransition,
      ElCheckbox,
      NodeContent,
      ElIcon,
      Loading: loading
    },
    props: {
      node: {
        type: Node$1,
        default: () => ({})
      },
      props: {
        type: Object,
        default: () => ({})
      },
      accordion: Boolean,
      renderContent: Function,
      renderAfterExpand: Boolean,
      showCheckbox: {
        type: Boolean,
        default: false
      }
    },
    emits: ["node-expand"],
    setup(props, ctx) {
      常量 ns为useNamespace("tree");
      常量 { broadcastExpanded }为useNodeExpandEventBroadcast(props);
      常量 tree为vue.inject("RootTree");
      常量 expanded为vue.ref(false);
      常量 childNodeRendered为vue.ref(false);
      常量 oldChecked为vue.ref(null);
      常量 oldIndeterminate为vue.ref(null);
      常量 node$为vue.ref(null);
      常量 dragEvents为vue.inject(dragEventsKey);
      常量 instance为vue.getCurrentInstance();
      vue.provide("NodeInstance", instance);
      如果 (props.node.expanded) {
        expanded.value为true;
        childNodeRendered.value为true;
      }
      常量 childrenKey为tree.props["children"] 或 "children";
      vue.watch(() => {
        常量 children为props.node.data[childrenKey];
        返回 children 与 [...children];
      }, () => {
        props.node.updateChildren();
      });
      vue.watch(() => props.node.indeterminate, (val) => {
        handleSelectChange(props.node.checked, val);
      });
      vue.watch(() => props.node.checked, (val) => {
        handleSelectChange(val, props.node.indeterminate);
      });
      vue.watch(() => props.node.expanded, (val) => {
        vue.nextTick(() => expanded.value为val);
        如果 (val) {
          childNodeRendered.value为true;
        }
      });
      常量 getNodeKey$1为(node) => {
        返回 getNodeKey(tree.props.nodeKey, node.data);
      };
      常量 getNodeClass为(node) => {
        常量 nodeClassFunc为props.props.class;
        如果 (不nodeClassFunc) {
          返回 {};
        }
        让 className;
        如果 (isFunction(nodeClassFunc)) {
          常量 { data }为node;
          className为nodeClassFunc(data, node);
        } 否则 {
          className为nodeClassFunc;
        }
        如果 (isString(className)) {
          返回 { [className]: true };
        } 否则 {
          返回 className;
        }
      };
      常量 handleSelectChange为(checked, indeterminate) => {
        如果 (oldChecked.value 不== checked 或 oldIndeterminate.value 不== indeterminate) {
          tree.ctx.emit("check-change", props.node.data, checked, indeterminate);
        }
        oldChecked.value为checked;
        oldIndeterminate.value为indeterminate;
      };
      常量 handleClick为(e) => {
        常量 store为tree.store.value;
        store.setCurrentNode(props.node);
        tree.ctx.emit("current-change", store.currentNode ? store.currentNode.data : null, store.currentNode);
        tree.currentNode.value为props.node;
        如果 (tree.props.expandOnClickNode) {
          handleExpandIconClick();
        }
        如果 (tree.props.checkOnClickNode 与 不props.node.disabled) {
          handleCheckChange(null, {
            target: { checked: 不props.node.checked }
          });
        }
        tree.ctx.emit("node-点击", props.node.data, props.node, instance, e);
      };
      常量 handleContextMenu为(event) => {
        如果 (tree.instance.vnode.props["onNodeContextmenu"]) {
          event.stopPropagation();
          event.preventDefault();
        }
        tree.ctx.emit("node-contextmenu", event, props.node.data, props.node, instance);
      };
      常量 handleExpandIconClick为() => {
        如果 (props.node.isLeaf)
          返回;
        如果 (expanded.value) {
          tree.ctx.emit("node-collapse", props.node.data, props.node, instance);
          props.node.collapse();
        } 否则 {
          props.node.expand();
          ctx.emit("node-expand", props.node.data, props.node, instance);
        }
      };
      常量 handleCheckChange为(value, ev) => {
        props.node.setChecked(ev.target.checked, 不tree.props.checkStrictly);
        vue.nextTick(() => {
          常量 store为tree.store.value;
          tree.ctx.emit("check", props.node.data, {
            checkedNodes: store.getCheckedNodes(),
            checkedKeys: store.getCheckedKeys(),
            halfCheckedNodes: store.getHalfCheckedNodes(),
            halfCheckedKeys: store.getHalfCheckedKeys()
          });
        });
      };
      常量 handleChildNodeExpand为(nodeData, node, instance2) => {
        broadcastExpanded(node);
        tree.ctx.emit("node-expand", nodeData, node, instance2);
      };
      常量 handleDragStart为(event) => {
        如果 (不tree.props.draggable)
          返回;
        dragEvents.treeNodeDragStart({ event, treeNode: props });
      };
      常量 handleDragOver为(event) => {
        event.preventDefault();
        如果 (不tree.props.draggable)
          返回;
        dragEvents.treeNodeDragOver({
          event,
          treeNode: { $el: node$.value, node: props.node }
        });
      };
      常量 handleDrop为(event) => {
        event.preventDefault();
      };
      常量 handleDragEnd为(event) => {
        如果 (不tree.props.draggable)
          返回;
        dragEvents.treeNodeDragEnd(event);
      };
      返回 {
        ns,
        node$,
        tree,
        expanded,
        childNodeRendered,
        oldChecked,
        oldIndeterminate,
        getNodeKey: getNodeKey$1,
        getNodeClass,
        handleSelectChange,
        handleClick,
        handleContextMenu,
        handleExpandIconClick,
        handleCheckChange,
        handleChildNodeExpand,
        handleDragStart,
        handleDragOver,
        handleDrop,
        handleDragEnd,
        CaretRight: caretRight
      };
    }
  });
  常量 _hoisted_1$7为["aria-expanded", "aria-disabled", "aria-checked", "draggable", "data-key"];
  常量 _hoisted_2$5为["aria-expanded"];
  函数 _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_el_checkbox为vue.resolveComponent("el-checkbox");
    常量 _component_loading为vue.resolveComponent("loading");
    常量 _component_node_上下文为vue.resolveComponent("node-上下文");
    常量 _component_el_tree_node为vue.resolveComponent("el-tree-node");
    常量 _component_el_collapse_transition为vue.resolveComponent("el-collapse-transition");
    返回 vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
      ref: "node$",
      class: vue.normalizeClass([
        _ctx.ns.b("node"),
        _ctx.ns.is("expanded", _ctx.expanded),
        _ctx.ns.is("current", _ctx.node.isCurrent),
        _ctx.ns.is("hidden", 不_ctx.node.visible),
        _ctx.ns.is("focusable", 不_ctx.node.disabled),
        _ctx.ns.is("checked", 不_ctx.node.disabled 与 _ctx.node.checked),
        _ctx.getNodeClass(_ctx.node)
      ]),
      role: "treeitem",
      tabindex: "-1",
      "aria-expanded": _ctx.expanded,
      "aria-disabled": _ctx.node.disabled,
      "aria-checked": _ctx.node.checked,
      draggable: _ctx.tree.props.draggable,
      "data-key": _ctx.getNodeKey(_ctx.node),
      onClick: _cache[1] 或 (_cache[1]为vue.withMod如果iers((...args) => _ctx.handleClick 与 _ctx.handleClick(...args), ["stop"])),
      onContextmenu: _cache[2] 或 (_cache[2]为(...args) => _ctx.handleContextMenu 与 _ctx.handleContextMenu(...args)),
      onDragstart: _cache[3] 或 (_cache[3]为vue.withMod如果iers((...args) => _ctx.handleDragStart 与 _ctx.handleDragStart(...args), ["stop"])),
      onDragover: _cache[4] 或 (_cache[4]为vue.withMod如果iers((...args) => _ctx.handleDragOver 与 _ctx.handleDragOver(...args), ["stop"])),
      onDragend: _cache[5] 或 (_cache[5]为vue.withMod如果iers((...args) => _ctx.handleDragEnd 与 _ctx.handleDragEnd(...args), ["stop"])),
      onDrop: _cache[6] 或 (_cache[6]为vue.withMod如果iers((...args) => _ctx.handleDrop 与 _ctx.handleDrop(...args), ["stop"]))
    }, [
      vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.ns.be("node", "上下文")),
        style: vue.normalizeStyle({ paddingLeft: (_ctx.node.level - 1) * _ctx.tree.props.indent + "px" })
      }, [
        _ctx.tree.props.icon 或 _ctx.CaretRight ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
          key: 0,
          class: vue.normalizeClass([
            _ctx.ns.be("node", "expand-icon"),
            _ctx.ns.is("leaf", _ctx.node.isLeaf),
            {
              expanded: 不_ctx.node.isLeaf 与 _ctx.expanded
            }
          ]),
          onClick: vue.withMod如果iers(_ctx.handleExpandIconClick, ["stop"])
        }, {
          default: vue.withCtx(() => [
            (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.tree.props.icon 或 _ctx.CaretRight)))
          ]),
          _: 1
        }, 8, ["class", "onClick"])) : vue.createCommentVNode("v-如果", true),
        _ctx.showCheckbox ? (vue.openBlock(), vue.createBlock(_component_el_checkbox, {
          key: 1,
          "model-value": _ctx.node.checked,
          indeterminate: _ctx.node.indeterminate,
          disabled: 不不_ctx.node.disabled,
          onClick: _cache[0] 或 (_cache[0]为vue.withMod如果iers(() => {
          }, ["stop"])),
          onChange: _ctx.handleCheckChange
        }, null, 8, ["model-value", "indeterminate", "disabled", "onChange"])) : vue.createCommentVNode("v-如果", true),
        _ctx.node.loading ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
          key: 2,
          class: vue.normalizeClass([_ctx.ns.be("node", "loading-icon"), _ctx.ns.is("loading")])
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_loading)
          ]),
          _: 1
        }, 8, ["class"])) : vue.createCommentVNode("v-如果", true),
        vue.createVNode(_component_node_上下文, {
          node: _ctx.node,
          "render-上下文": _ctx.renderContent
        }, null, 8, ["node", "render-上下文"])
      ], 6),
      vue.createVNode(_component_el_collapse_transition, null, {
        default: vue.withCtx(() => [
          不_ctx.renderAfterExpand 或 _ctx.childNodeRendered ? vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
            key: 0,
            class: vue.normalizeClass(_ctx.ns.be("node", "children")),
            role: "group",
            "aria-expanded": _ctx.expanded
          }, [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.node.childNodes, (child) => {
              返回 vue.openBlock(), vue.createBlock(_component_el_tree_node, {
                key: _ctx.getNodeKey(child),
                "render-上下文": _ctx.renderContent,
                "render-after-expand": _ctx.renderAfterExpand,
                "show-checkbox": _ctx.showCheckbox,
                node: child,
                accordion: _ctx.accordion,
                props: _ctx.props,
                onNodeExpand: _ctx.handleChildNodeExpand
              }, null, 8, ["render-上下文", "render-after-expand", "show-checkbox", "node", "accordion", "props", "onNodeExpand"]);
            }), 128))
          ], 10, _hoisted_2$5)), [
            [vue.vShow, _ctx.expanded]
          ]) : vue.createCommentVNode("v-如果", true)
        ]),
        _: 1
      })
    ], 42, _hoisted_1$7)), [
      [vue.vShow, _ctx.node.visible]
    ]);
  }
  变量 ElTreeNode$1为/* @__PURE__ */ _输出出口_sfc(_sfc_main$b, [["render", _sfc_render$6], ["__file", "tree-node.vue"]]);

  函数 useKeydown({ el$ }, store) {
    常量 ns为useNamespace("tree");
    常量 treeItems为vue.shallowRef([]);
    常量 checkboxItems为vue.shallowRef([]);
    vue.onMounted(() => {
      initTabIndex();
      on(el$.value, "keydown", handleKeydown);
    });
    vue.onBe变量循环eUnmount(() => {
      off(el$.value, "keydown", handleKeydown);
    });
    vue.onUpdated(() => {
      treeItems.value为Array.从(el$.value.querySelectorAll("[role=treeitem]"));
      checkboxItems.value为Array.从(el$.value.querySelectorAll("input[type=checkbox]"));
    });
    vue.watch(checkboxItems, (val) => {
      val.变量循环Each((checkbox) => {
        checkbox.setAttribute("tabindex", "-1");
      });
    });
    常量 handleKeydown为(ev) => {
      常量 currentItem为ev.target;
      如果 (不currentItem.className.includes(ns.b("node")))
        返回;
      常量 code为ev.code;
      treeItems.value为Array.从(el$.value.querySelectorAll(`.${ns.is("focusable")}[role=treeitem]`));
      常量 currentIndex为treeItems.value.indexOf(currentItem);
      让 nextIndex;
      如果 ([EVENT_CODE.up, EVENT_CODE.down].includes(code)) {
        ev.preventDefault();
        如果 (code === EVENT_CODE.up) {
          nextIndex为currentIndex === -1 ? 0 : currentIndex 不== 0 ? currentIndex - 1 : treeItems.value.长度 - 1;
          常量 startIndex为nextIndex;
          条件循环 (true) {
            如果 (store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus)
              break;
            nextIndex--;
            如果 (nextIndex === startIndex) {
              nextIndex为-1;
              break;
            }
            如果 (nextIndex < 0) {
              nextIndex为treeItems.value.长度 - 1;
            }
          }
        } 否则 {
          nextIndex为currentIndex === -1 ? 0 : currentIndex < treeItems.value.长度 - 1 ? currentIndex + 1 : 0;
          常量 startIndex为nextIndex;
          条件循环 (true) {
            如果 (store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus)
              break;
            nextIndex加一;
            如果 (nextIndex === startIndex) {
              nextIndex为-1;
              break;
            }
            如果 (nextIndex >= treeItems.value.长度) {
              nextIndex为0;
            }
          }
        }
        nextIndex 不== -1 与 treeItems.value[nextIndex].focus();
      }
      如果 ([EVENT_CODE.left, EVENT_CODE.right].includes(code)) {
        ev.preventDefault();
        currentItem.点击();
      }
      常量 hasInput为currentItem.querySelector('[type="checkbox"]');
      如果 ([EVENT_CODE.enter, EVENT_CODE.space].includes(code) 与 hasInput) {
        ev.preventDefault();
        hasInput.点击();
      }
    };
    常量 initTabIndex为() => {
      变量 _a;
      treeItems.value为Array.从(el$.value.querySelectorAll(`.${ns.is("focusable")}[role=treeitem]`));
      checkboxItems.value为Array.从(el$.value.querySelectorAll("input[type=checkbox]"));
      常量 checkedItem为el$.value.querySelectorAll(`.${ns.is("checked")}[role=treeitem]`);
      如果 (checkedItem.长度) {
        checkedItem[0].setAttribute("tabindex", "0");
        返回;
      }
      (_a为treeItems.value[0]) == null ? void 0 : _a.setAttribute("tabindex", "0");
    };
  }

  常量 _sfc_main$a为vue.defineComponent({
    名字: "ElTree",
    components: { ElTreeNode: ElTreeNode$1 },
    props: {
      data: {
        type: Array,
        default: () => []
      },
      emptyText: {
        type: String
      },
      renderAfterExpand: {
        type: Boolean,
        default: true
      },
      nodeKey: String,
      checkStrictly: Boolean,
      defaultExpandAll: Boolean,
      expandOnClickNode: {
        type: Boolean,
        default: true
      },
      checkOnClickNode: Boolean,
      checkDescendants: {
        type: Boolean,
        default: false
      },
      autoExpandParent: {
        type: Boolean,
        default: true
      },
      defaultCheckedKeys: Array,
      defaultExpandedKeys: Array,
      currentNodeKey: [String, Number],
      renderContent: Function,
      showCheckbox: {
        type: Boolean,
        default: false
      },
      draggable: {
        type: Boolean,
        default: false
      },
      allowDrag: Function,
      allowDrop: Function,
      props: {
        type: Object,
        default: () => ({
          children: "children",
          label: "label",
          disabled: "disabled"
        })
      },
      lazy: {
        type: Boolean,
        default: false
      },
      highlightCurrent: Boolean,
      load: Function,
      filterNodeMethod: Function,
      accordion: Boolean,
      indent: {
        type: Number,
        default: 18
      },
      icon: [String, Object]
    },
    emits: [
      "check-change",
      "current-change",
      "node-点击",
      "node-contextmenu",
      "node-collapse",
      "node-expand",
      "check",
      "node-drag-start",
      "node-drag-end",
      "node-drop",
      "node-drag-leave",
      "node-drag-enter",
      "node-drag-over"
    ],
    setup(props, ctx) {
      常量 { t }为useLocale();
      常量 ns为useNamespace("tree");
      常量 store为vue.ref(new TreeStore({
        key: props.nodeKey,
        data: props.data,
        lazy: props.lazy,
        props: props.props,
        load: props.load,
        currentNodeKey: props.currentNodeKey,
        checkStrictly: props.checkStrictly,
        checkDescendants: props.checkDescendants,
        defaultCheckedKeys: props.defaultCheckedKeys,
        defaultExpandedKeys: props.defaultExpandedKeys,
        autoExpandParent: props.autoExpandParent,
        defaultExpandAll: props.defaultExpandAll,
        filterNodeMethod: props.filterNodeMethod
      }));
      store.value.initialize();
      常量 root为vue.ref(store.value.root);
      常量 currentNode为vue.ref(null);
      常量 el$为vue.ref(null);
      常量 dropIndicator$为vue.ref(null);
      常量 { broadcastExpanded }为useNodeExpandEventBroadcast(props);
      常量 { dragState }为useDragNodeHandler({
        props,
        ctx,
        el$,
        dropIndicator$,
        store
      });
      useKeydown({ el$ }, store);
      常量 isEmpty为vue.computed(() => {
        常量 { childNodes }为root.value;
        返回 不childNodes 或 childNodes.长度 === 0 或 childNodes.every(({ visible }) => 不visible);
      });
      vue.watch(() => props.defaultCheckedKeys, (newVal) => {
        store.value.setDefaultCheckedKey(newVal);
      });
      vue.watch(() => props.defaultExpandedKeys, (newVal) => {
        store.value.setDefaultExpandedKeys(newVal);
      });
      vue.watch(() => props.data, (newVal) => {
        store.value.setData(newVal);
      }, { deep: true });
      vue.watch(() => props.checkStrictly, (newVal) => {
        store.value.checkStrictly为newVal;
      });
      常量 filter为(value) => {
        如果 (不props.filterNodeMethod)
          抛出 new Error("[Tree] filterNodeMethod is required when filter");
        store.value.filter(value);
      };
      常量 getNodeKey$1为(node) => {
        返回 getNodeKey(props.nodeKey, node.data);
      };
      常量 getNodePath为(data) => {
        如果 (不props.nodeKey)
          抛出 new Error("[Tree] nodeKey is required 在 getNodePath");
        常量 node为store.value.getNode(data);
        如果 (不node)
          返回 [];
        常量 path为[node.data];
        让 parent为node.parent;
        条件循环 (parent 与 parent 不== root.value) {
          path.push(parent.data);
          parent为parent.parent;
        }
        返回 path.reverse();
      };
      常量 getCheckedNodes为(leafOnly, includeHalfChecked) => {
        返回 store.value.getCheckedNodes(leafOnly, includeHalfChecked);
      };
      常量 getCheckedKeys为(leafOnly) => {
        返回 store.value.getCheckedKeys(leafOnly);
      };
      常量 getCurrentNode为() => {
        常量 currentNode2为store.value.getCurrentNode();
        返回 currentNode2 ? currentNode2.data : null;
      };
      常量 getCurrentKey为() => {
        如果 (不props.nodeKey)
          抛出 new Error("[Tree] nodeKey is required 在 getCurrentKey");
        常量 currentNode2为getCurrentNode();
        返回 currentNode2 ? currentNode2[props.nodeKey] : null;
      };
      常量 setCheckedNodes为(nodes, leafOnly) => {
        如果 (不props.nodeKey)
          抛出 new Error("[Tree] nodeKey is required 在 setCheckedNodes");
        store.value.setCheckedNodes(nodes, leafOnly);
      };
      常量 setCheckedKeys为(keys, leafOnly) => {
        如果 (不props.nodeKey)
          抛出 new Error("[Tree] nodeKey is required 在 setCheckedKeys");
        store.value.setCheckedKeys(keys, leafOnly);
      };
      常量 setChecked为(data, checked, deep) => {
        store.value.setChecked(data, checked, deep);
      };
      常量 getHalfCheckedNodes为() => {
        返回 store.value.getHalfCheckedNodes();
      };
      常量 getHalfCheckedKeys为() => {
        返回 store.value.getHalfCheckedKeys();
      };
      常量 setCurrentNode为(node, shouldAutoExpandParent为true) => {
        如果 (不props.nodeKey)
          抛出 new Error("[Tree] nodeKey is required 在 setCurrentNode");
        store.value.setUserCurrentNode(node, shouldAutoExpandParent);
      };
      常量 setCurrentKey为(key, shouldAutoExpandParent为true) => {
        如果 (不props.nodeKey)
          抛出 new Error("[Tree] nodeKey is required 在 setCurrentKey");
        store.value.setCurrentNodeKey(key, shouldAutoExpandParent);
      };
      常量 getNode为(data) => {
        返回 store.value.getNode(data);
      };
      常量 remove为(data) => {
        store.value.remove(data);
      };
      常量 append为(data, parentNode) => {
        store.value.append(data, parentNode);
      };
      常量 insertBe变量循环e为(data, refNode) => {
        store.value.insertBe变量循环e(data, refNode);
      };
      常量 insertAfter为(data, refNode) => {
        store.value.insertAfter(data, refNode);
      };
      常量 handleNodeExpand为(nodeData, node, instance) => {
        broadcastExpanded(node);
        ctx.emit("node-expand", nodeData, node, instance);
      };
      常量 updateKeyChildren为(key, data) => {
        如果 (不props.nodeKey)
          抛出 new Error("[Tree] nodeKey is required 在 updateKeyChild");
        store.value.updateChildren(key, data);
      };
      vue.provide("RootTree", {
        ctx,
        props,
        store,
        root,
        currentNode,
        instance: vue.getCurrentInstance()
      });
      返回 {
        ns,
        store,
        root,
        currentNode,
        dragState,
        el$,
        dropIndicator$,
        isEmpty,
        filter,
        getNodeKey: getNodeKey$1,
        getNodePath,
        getCheckedNodes,
        getCheckedKeys,
        getCurrentNode,
        getCurrentKey,
        setCheckedNodes,
        setCheckedKeys,
        setChecked,
        getHalfCheckedNodes,
        getHalfCheckedKeys,
        setCurrentNode,
        setCurrentKey,
        t,
        getNode,
        remove,
        append,
        insertBe变量循环e,
        insertAfter,
        handleNodeExpand,
        updateKeyChildren
      };
    }
  });
  函数 _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
    变量 _a;
    常量 _component_el_tree_node为vue.resolveComponent("el-tree-node");
    返回 vue.openBlock(), vue.createElementBlock("div", {
      ref: "el$",
      class: vue.normalizeClass([
        _ctx.ns.b(),
        _ctx.ns.is("dragging", 不不_ctx.dragState.draggingNode),
        _ctx.ns.is("drop-not-allow", 不_ctx.dragState.allowDrop),
        _ctx.ns.is("drop-inner", _ctx.dragState.dropType === "inner"),
        { [_ctx.ns.m("highlight-current")]: _ctx.highlightCurrent }
      ]),
      role: "tree"
    }, [
      (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.root.childNodes, (child) => {
        返回 vue.openBlock(), vue.createBlock(_component_el_tree_node, {
          key: _ctx.getNodeKey(child),
          node: child,
          props: _ctx.props,
          accordion: _ctx.accordion,
          "render-after-expand": _ctx.renderAfterExpand,
          "show-checkbox": _ctx.showCheckbox,
          "render-上下文": _ctx.renderContent,
          onNodeExpand: _ctx.handleNodeExpand
        }, null, 8, ["node", "props", "accordion", "render-after-expand", "show-checkbox", "render-上下文", "onNodeExpand"]);
      }), 128)),
      _ctx.isEmpty ? (vue.openBlock(), vue.createElementBlock("div", {
        key: 0,
        class: vue.normalizeClass(_ctx.ns.e("empty-block"))
      }, [
        vue.createElementVNode("span", {
          class: vue.normalizeClass(_ctx.ns.e("empty-text"))
        }, vue.toDisplayString((_a为_ctx.emptyText) 不= null ? _a : _ctx.t("el.tree.emptyText")), 3)
      ], 2)) : vue.createCommentVNode("v-如果", true),
      vue.withDirectives(vue.createElementVNode("div", {
        ref: "dropIndicator$",
        class: vue.normalizeClass(_ctx.ns.e("drop-indicator"))
      }, null, 2), [
        [vue.vShow, _ctx.dragState.showDropIndicator]
      ])
    ], 2);
  }
  变量 Tree为/* @__PURE__ */ _输出出口_sfc(_sfc_main$a, [["render", _sfc_render$5], ["__file", "tree.vue"]]);

  Tree.install为(app) => {
    app.component(Tree.名字, Tree);
  };
  常量 _Tree为Tree;
  常量 ElTree为_Tree;

  常量 useSelect为(props, { attrs }, {
    tree,
    key
  }) => {
    常量 ns为useNamespace("tree-select");
    常量 result为{
      ...pick$1(vue.toRefs(props), Object.keys(ElSelect.props)),
      ...attrs,
      valueKey: key,
      popperClass: vue.computed(() => {
        常量 classes为[ns.e("popper")];
        如果 (props.popperClass)
          classes.push(props.popperClass);
        返回 classes.join(" ");
      }),
      filterMethod: (keyword为"") => {
        如果 (props.filterMethod)
          props.filterMethod(keyword);
        vue.nextTick(() => {
          变量 _a;
          (_a为tree.value) == null ? void 0 : _a.filter(keyword);
        });
      },
      onVisibleChange: (visible) => {
        变量 _a;
        (_a为attrs.onVisibleChange) == null ? void 0 : _a.call(attrs, visible);
        如果 (props.filterable 与 visible) {
          result.filterMethod();
        }
      }
    };
    返回 result;
  };

  常量 component为vue.defineComponent({
    extends: ElOption$1,
    setup(props, ctx) {
      常量 result为ElOption$1.setup(props, ctx);
      de让e result.selectOptionClick;
      返回 result;
    },
    methods: {
      selectOptionClick() {
        this.$el.parentElement.点击();
      }
    }
  });
  变量 TreeSelectOption为component;

  常量 useTree$1为(props, { attrs, slots, emit }, {
    select,
    tree,
    key
  }) => {
    vue.watch(() => props.modelValue, () => {
      如果 (props.showCheckbox) {
        vue.nextTick(() => {
          常量 treeInstance为tree.value;
          如果 (treeInstance 与 不isEqual$1(treeInstance.getCheckedKeys(), toValidArray(props.modelValue))) {
            treeInstance.setCheckedKeys(toValidArray(props.modelValue));
          }
        });
      }
    }, {
      immediate: true,
      deep: true
    });
    常量 propsMap为vue.computed(() => ({
      value: key.value,
      ...props.props
    }));
    常量 getNodeValByProp为(prop, data) => {
      变量 _a;
      常量 propVal为propsMap.value[prop];
      如果 (isFunction(propVal)) {
        返回 propVal(data, (_a为tree.value) == null ? void 0 : _a.getNode(getNodeValByProp("value", data)));
      } 否则 {
        返回 data[propVal];
      }
    };
    返回 {
      ...pick$1(vue.toRefs(props), Object.keys(_Tree.props)),
      ...attrs,
      nodeKey: key,
      defaultExpandedKeys: vue.computed(() => props.defaultExpandedKeys ? props.defaultExpandedKeys.concat(props.modelValue) : toValidArray(props.modelValue)),
      renderContent: (h, { node, data, store }) => {
        返回 h(TreeSelectOption, {
          value: getNodeValByProp("value", data),
          label: getNodeValByProp("label", data),
          disabled: getNodeValByProp("disabled", data)
        }, props.renderContent ? () => props.renderContent(h, { node, data, store }) : slots.default ? () => slots.default({ node, data, store }) : void 0);
      },
      filterNodeMethod: (value, data, node) => {
        变量 _a;
        如果 (props.filterNodeMethod)
          返回 props.filterNodeMethod(value, data, node);
        如果 (不value)
          返回 true;
        返回 (_a为getNodeValByProp("label", data)) == null ? void 0 : _a.includes(value);
      },
      onNodeClick: (data, node, e) => {
        变量 _a, _b, _c;
        (_a为attrs.onNodeClick) == null ? void 0 : _a.call(attrs, data, node, e);
        如果 (props.checkStrictly 或 node.isLeaf) {
          如果 (不getNodeValByProp("disabled", data)) {
            常量 option为(_b为select.value) == null ? void 0 : _b.options.get(getNodeValByProp("value", data));
            (_c为select.value) == null ? void 0 : _c.handleOptionSelect(option, true);
          }
        } 否则 {
          e.ctx.handleExpandIconClick();
        }
      },
      onCheck: (data, params) => {
        变量 _a, _b;
        (_a为attrs.onCheck) == null ? void 0 : _a.call(attrs, data, params);
        常量 checkedKeys为不props.checkStrictly ? (_b为tree.value) == null ? void 0 : _b.getCheckedKeys(true) : params.checkedKeys;
        常量 value为getNodeValByProp("value", data);
        emit(UPDATE_MODEL_EVENT, props.multiple ? checkedKeys : checkedKeys.includes(value) ? value : void 0);
      }
    };
  };
  函数 toValidArray(val) {
    返回 Array.isArray(val) ? val : val 或 val === 0 ? [val] : [];
  }

  常量 _sfc_main$9为vue.defineComponent({
    名字: "ElTreeSelect",
    props: {
      ...ElSelect.props,
      ..._Tree.props
    },
    setup(props, context) {
      常量 { slots, expose }为context;
      常量 select为vue.ref();
      常量 tree为vue.ref();
      常量 key为vue.computed(() => props.valueKey 或 props.nodeKey 或 "value");
      常量 selectProps为useSelect(props, context, { select, tree, key });
      常量 treeProps为useTree$1(props, context, { select, tree, key });
      常量 methods为vue.reactive({});
      expose(methods);
      vue.onMounted(() => {
        Object.assign(methods, {
          ...pick$1(tree.value, [
            "filter",
            "updateKeyChildren",
            "getCheckedNodes",
            "setCheckedNodes",
            "getCheckedKeys",
            "setCheckedKeys",
            "setChecked",
            "getHalfCheckedNodes",
            "getHalfCheckedKeys",
            "getCurrentKey",
            "getCurrentNode",
            "setCurrentKey",
            "setCurrentNode",
            "getNode",
            "remove",
            "append",
            "insertBe变量循环e",
            "insertAfter"
          ]),
          ...pick$1(select.value, ["focus", "blur"])
        });
      });
      返回 () => vue.h(ElSelect, vue.reactive({
        ...selectProps,
        ref: (ref2) => select.value为ref2
      }), {
        ...slots,
        default: () => vue.h(_Tree, vue.reactive({
          ...treeProps,
          ref: (ref2) => tree.value为ref2
        }))
      });
    }
  });
  变量 TreeSelect为/* @__PURE__ */ _输出出口_sfc(_sfc_main$9, [["__file", "tree-select.vue"]]);

  TreeSelect.install为(app) => {
    app.component(TreeSelect.名字, TreeSelect);
  };
  常量 _TreeSelect为TreeSelect;
  常量 ElTreeSelect为_TreeSelect;

  常量 ROOT_TREE_INJECTION_KEY为Symbol();
  常量 EMPTY_NODE为{
    key: -1,
    level: -1,
    data: {}
  };
  变量 TreeOptionsEnum为/* @__PURE__ */ ((TreeOptionsEnum2) => {
    TreeOptionsEnum2["KEY"]为"id";
    TreeOptionsEnum2["LABEL"]为"label";
    TreeOptionsEnum2["CHILDREN"]为"children";
    TreeOptionsEnum2["DISABLED"]为"disabled";
    返回 TreeOptionsEnum2;
  })(TreeOptionsEnum 或 {});
  变量 SetOperationEnum为/* @__PURE__ */ ((SetOperationEnum2) => {
    SetOperationEnum2["ADD"]为"add";
    SetOperationEnum2["DELETE"]为"de让e";
    返回 SetOperationEnum2;
  })(SetOperationEnum 或 {});
  常量 treeProps为buildProps({
    data: {
      type: definePropType(Array),
      default: () => mutable([])
    },
    emptyText: {
      type: String
    },
    height: {
      type: Number,
      default: 200
    },
    props: {
      type: definePropType(Object),
      default: () => mutable({
        children: "children" /* CHILDREN */,
        label: "label" /* LABEL */,
        disabled: "disabled" /* DISABLED */,
        value: "id" /* KEY */
      })
    },
    highlightCurrent: {
      type: Boolean,
      default: false
    },
    showCheckbox: {
      type: Boolean,
      default: false
    },
    defaultCheckedKeys: {
      type: definePropType(Array),
      default: () => mutable([])
    },
    checkStrictly: {
      type: Boolean,
      default: false
    },
    defaultExpandedKeys: {
      type: definePropType(Array),
      default: () => mutable([])
    },
    indent: {
      type: Number,
      default: 16
    },
    icon: {
      type: String
    },
    expandOnClickNode: {
      type: Boolean,
      default: true
    },
    checkOnClickNode: {
      type: Boolean,
      default: false
    },
    currentNodeKey: {
      type: definePropType([String, Number])
    },
    accordion: {
      type: Boolean,
      default: false
    },
    filterMethod: {
      type: definePropType(Function)
    },
    perfMode: {
      type: Boolean,
      default: true
    }
  });
  常量 treeNodeProps为buildProps({
    node: {
      type: definePropType(Object),
      default: () => mutable(EMPTY_NODE)
    },
    expanded: {
      type: Boolean,
      default: false
    },
    checked: {
      type: Boolean,
      default: false
    },
    indeterminate: {
      type: Boolean,
      default: false
    },
    showCheckbox: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    current: {
      type: Boolean,
      default: false
    },
    hiddenExpandIcon: {
      type: Boolean,
      default: false
    }
  });
  常量 treeNodeContentProps为buildProps({
    node: {
      type: definePropType(Object),
      required: true
    }
  });
  常量 NODE_CLICK为"node-点击";
  常量 NODE_EXPAND为"node-expand";
  常量 NODE_COLLAPSE为"node-collapse";
  常量 CURRENT_CHANGE为"current-change";
  常量 NODE_CHECK为"check";
  常量 NODE_CHECK_CHANGE为"check-change";
  常量 NODE_CONTEXTMENU为"node-contextmenu";
  常量 treeEmits为{
    [NODE_CLICK]: (data, node, e) => data 与 node 与 e,
    [NODE_EXPAND]: (data, node) => data 与 node,
    [NODE_COLLAPSE]: (data, node) => data 与 node,
    [CURRENT_CHANGE]: (data, node) => data 与 node,
    [NODE_CHECK]: (data, checkedInfo) => data 与 checkedInfo,
    [NODE_CHECK_CHANGE]: (data, checked) => data 与 类型是 checked === "boolean",
    [NODE_CONTEXTMENU]: (event, data, node) => event 与 data 与 node
  };
  常量 treeNodeEmits为{
    点击: (node, e) => 不不(node 与 e),
    toggle: (node) => 不不node,
    check: (node, checked) => node 与 类型是 checked === "boolean"
  };

  函数 useCheck(props, tree) {
    常量 checkedKeys为vue.ref(/* @__PURE__ */ new Set());
    常量 indeterminateKeys为vue.ref(/* @__PURE__ */ new Set());
    常量 { emit }为vue.getCurrentInstance();
    vue.watch(() => tree.value, () => {
      返回 vue.nextTick(() => {
        _setCheckedKeys(props.defaultCheckedKeys);
      });
    }, {
      immediate: true
    });
    常量 updateCheckedKeys为() => {
      如果 (不tree.value 或 不props.showCheckbox 或 props.checkStrictly) {
        返回;
      }
      常量 { levelTreeNodeMap, maxLevel }为tree.value;
      常量 checkedKeySet为checkedKeys.value;
      常量 indeterminateKeySet为/* @__PURE__ */ new Set();
      变量循环 (让 level为maxLevel - 1; level >= 1; --level) {
        常量 nodes为levelTreeNodeMap.get(level);
        如果 (不nodes)
          continue;
        nodes.变量循环Each((node) => {
          常量 children为node.children;
          如果 (children) {
            让 allChecked为true;
            让 hasChecked为false;
            变量循环 (常量 childNode of children) {
              常量 key为childNode.key;
              如果 (checkedKeySet.has(key)) {
                hasChecked为true;
              } 否则 如果 (indeterminateKeySet.has(key)) {
                allChecked为false;
                hasChecked为true;
                break;
              } 否则 {
                allChecked为false;
              }
            }
            如果 (allChecked) {
              checkedKeySet.add(node.key);
            } 否则 如果 (hasChecked) {
              indeterminateKeySet.add(node.key);
              checkedKeySet.de让e(node.key);
            } 否则 {
              checkedKeySet.de让e(node.key);
              indeterminateKeySet.de让e(node.key);
            }
          }
        });
      }
      indeterminateKeys.value为indeterminateKeySet;
    };
    常量 isChecked为(node) => checkedKeys.value.has(node.key);
    常量 isIndeterminate为(node) => indeterminateKeys.value.has(node.key);
    常量 toggleCheckbox为(node, isChecked2, nodeClick为true) => {
      常量 checkedKeySet为checkedKeys.value;
      常量 toggle为(node2, checked) => {
        checkedKeySet[checked ? SetOperationEnum.ADD : SetOperationEnum.DELETE](node2.key);
        常量 children为node2.children;
        如果 (不props.checkStrictly 与 children) {
          children.变量循环Each((childNode) => {
            如果 (不childNode.disabled) {
              toggle(childNode, checked);
            }
          });
        }
      };
      toggle(node, isChecked2);
      updateCheckedKeys();
      如果 (nodeClick) {
        afterNodeCheck(node, isChecked2);
      }
    };
    常量 afterNodeCheck为(node, checked) => {
      常量 { checkedNodes, checkedKeys: checkedKeys2 }为getChecked();
      常量 { halfCheckedNodes, halfCheckedKeys }为getHalfChecked();
      emit(NODE_CHECK, node.data, {
        checkedKeys: checkedKeys2,
        checkedNodes,
        halfCheckedKeys,
        halfCheckedNodes
      });
      emit(NODE_CHECK_CHANGE, node.data, checked);
    };
    函数 getCheckedKeys(leafOnly为false) {
      返回 getChecked(leafOnly).checkedKeys;
    }
    函数 getCheckedNodes(leafOnly为false) {
      返回 getChecked(leafOnly).checkedNodes;
    }
    函数 getHalfCheckedKeys() {
      返回 getHalfChecked().halfCheckedKeys;
    }
    函数 getHalfCheckedNodes() {
      返回 getHalfChecked().halfCheckedNodes;
    }
    函数 getChecked(leafOnly为false) {
      常量 checkedNodes为[];
      常量 keys为[];
      如果 ((tree == null ? void 0 : tree.value) 与 props.showCheckbox) {
        常量 { treeNodeMap }为tree.value;
        checkedKeys.value.变量循环Each((key) => {
          常量 node为treeNodeMap.get(key);
          如果 (node 与 (不leafOnly 或 leafOnly 与 node.isLeaf)) {
            keys.push(key);
            checkedNodes.push(node.data);
          }
        });
      }
      返回 {
        checkedKeys: keys,
        checkedNodes
      };
    }
    函数 getHalfChecked() {
      常量 halfCheckedNodes为[];
      常量 halfCheckedKeys为[];
      如果 ((tree == null ? void 0 : tree.value) 与 props.showCheckbox) {
        常量 { treeNodeMap }为tree.value;
        indeterminateKeys.value.变量循环Each((key) => {
          常量 node为treeNodeMap.get(key);
          如果 (node) {
            halfCheckedKeys.push(key);
            halfCheckedNodes.push(node.data);
          }
        });
      }
      返回 {
        halfCheckedNodes,
        halfCheckedKeys
      };
    }
    函数 setCheckedKeys(keys) {
      checkedKeys.value.clear();
      indeterminateKeys.value.clear();
      _setCheckedKeys(keys);
    }
    函数 setChecked(key, isChecked2) {
      如果 ((tree == null ? void 0 : tree.value) 与 props.showCheckbox) {
        常量 node为tree.value.treeNodeMap.get(key);
        如果 (node) {
          toggleCheckbox(node, isChecked2, false);
        }
      }
    }
    函数 _setCheckedKeys(keys) {
      如果 (tree == null ? void 0 : tree.value) {
        常量 { treeNodeMap }为tree.value;
        如果 (props.showCheckbox 与 treeNodeMap 与 keys) {
          变量循环 (常量 key of keys) {
            常量 node为treeNodeMap.get(key);
            如果 (node 与 不isChecked(node)) {
              toggleCheckbox(node, true, false);
            }
          }
        }
      }
    }
    返回 {
      updateCheckedKeys,
      toggleCheckbox,
      isChecked,
      isIndeterminate,
      getCheckedKeys,
      getCheckedNodes,
      getHalfCheckedKeys,
      getHalfCheckedNodes,
      setChecked,
      setCheckedKeys
    };
  }

  函数 useFilter(props, tree) {
    常量 hiddenNodeKeySet为vue.ref(/* @__PURE__ */ new Set([]));
    常量 hiddenExpandIconKeySet为vue.ref(/* @__PURE__ */ new Set([]));
    常量 filterable为vue.computed(() => {
      返回 isFunction(props.filterMethod);
    });
    函数 doFilter(query) {
      变量 _a;
      如果 (不filterable.value) {
        返回;
      }
      常量 expandKeySet为/* @__PURE__ */ new Set();
      常量 hiddenExpandIconKeys为hiddenExpandIconKeySet.value;
      常量 hiddenKeys为hiddenNodeKeySet.value;
      常量 family为[];
      常量 nodes为((_a为tree.value) == null ? void 0 : _a.treeNodes) 或 [];
      常量 filter为props.filterMethod;
      hiddenKeys.clear();
      函数 traverse(nodes2) {
        nodes2.变量循环Each((node) => {
          family.push(node);
          如果 (filter == null ? void 0 : filter(query, node.data)) {
            family.变量循环Each((member) => {
              expandKeySet.add(member.key);
            });
          } 否则 如果 (node.isLeaf) {
            hiddenKeys.add(node.key);
          }
          常量 children为node.children;
          如果 (children) {
            traverse(children);
          }
          如果 (不node.isLeaf) {
            如果 (不expandKeySet.has(node.key)) {
              hiddenKeys.add(node.key);
            } 否则 如果 (children) {
              让 allHidden为true;
              变量循环 (常量 childNode of children) {
                如果 (不hiddenKeys.has(childNode.key)) {
                  allHidden为false;
                  break;
                }
              }
              如果 (allHidden) {
                hiddenExpandIconKeys.add(node.key);
              } 否则 {
                hiddenExpandIconKeys.de让e(node.key);
              }
            }
          }
          family.pop();
        });
      }
      traverse(nodes);
      返回 expandKeySet;
    }
    函数 isForceHiddenExpandIcon(node) {
      返回 hiddenExpandIconKeySet.value.has(node.key);
    }
    返回 {
      hiddenExpandIconKeySet,
      hiddenNodeKeySet,
      doFilter,
      isForceHiddenExpandIcon
    };
  }

  函数 useTree(props, emit) {
    常量 expandedKeySet为vue.ref(new Set(props.defaultExpandedKeys));
    常量 currentKey为vue.ref();
    常量 tree为vue.shallowRef();
    vue.watch(() => props.currentNodeKey, (key) => {
      currentKey.value为key;
    }, {
      immediate: true
    });
    vue.watch(() => props.data, (data) => {
      setData(data);
    }, {
      immediate: true
    });
    常量 {
      isIndeterminate,
      isChecked,
      toggleCheckbox,
      getCheckedKeys,
      getCheckedNodes,
      getHalfCheckedKeys,
      getHalfCheckedNodes,
      setChecked,
      setCheckedKeys
    }为useCheck(props, tree);
    常量 { doFilter, hiddenNodeKeySet, isForceHiddenExpandIcon }为useFilter(props, tree);
    常量 valueKey为vue.computed(() => {
      变量 _a;
      返回 ((_a为props.props) == null ? void 0 : _a.value) 或 TreeOptionsEnum.KEY;
    });
    常量 childrenKey为vue.computed(() => {
      变量 _a;
      返回 ((_a为props.props) == null ? void 0 : _a.children) 或 TreeOptionsEnum.CHILDREN;
    });
    常量 disabledKey为vue.computed(() => {
      变量 _a;
      返回 ((_a为props.props) == null ? void 0 : _a.disabled) 或 TreeOptionsEnum.DISABLED;
    });
    常量 labelKey为vue.computed(() => {
      变量 _a;
      返回 ((_a为props.props) == null ? void 0 : _a.label) 或 TreeOptionsEnum.LABEL;
    });
    常量 flattenTree为vue.computed(() => {
      常量 expandedKeys为expandedKeySet.value;
      常量 hiddenKeys为hiddenNodeKeySet.value;
      常量 flattenNodes为[];
      常量 nodes为tree.value 与 tree.value.treeNodes 或 [];
      函数 traverse() {
        常量 stack为[];
        变量循环 (让 i为nodes.长度 - 1; i >= 0; --i) {
          stack.push(nodes[i]);
        }
        条件循环 (stack.长度) {
          常量 node为stack.pop();
          如果 (不node)
            continue;
          如果 (不hiddenKeys.has(node.key)) {
            flattenNodes.push(node);
          }
          如果 (expandedKeys.has(node.key)) {
            常量 children为node.children;
            如果 (children) {
              常量 长度为children.长度;
              变量循环 (让 i为长度 - 1; i >= 0; --i) {
                stack.push(children[i]);
              }
            }
          }
        }
      }
      traverse();
      返回 flattenNodes;
    });
    常量 isNotEmpty为vue.computed(() => {
      返回 flattenTree.value.长度大于0;
    });
    函数 createTree(data) {
      常量 treeNodeMap为/* @__PURE__ */ new Map();
      常量 levelTreeNodeMap为/* @__PURE__ */ new Map();
      让 maxLevel为1;
      函数 traverse(nodes, level为1, parent为void 0) {
        变量 _a;
        常量 siblings为[];
        变量循环 (常量 rawNode of nodes) {
          常量 value为getKey(rawNode);
          常量 node为{
            level,
            key: value,
            data: rawNode
          };
          node.label为getLabel(rawNode);
          node.parent为parent;
          常量 children为getChildren(rawNode);
          node.disabled为getDisabled(rawNode);
          node.isLeaf为不children 或 children.长度 === 0;
          如果 (children 与 children.长度) {
            node.children为traverse(children, level + 1, node);
          }
          siblings.push(node);
          treeNodeMap.set(value, node);
          如果 (不levelTreeNodeMap.has(level)) {
            levelTreeNodeMap.set(level, []);
          }
          (_a为levelTreeNodeMap.get(level)) == null ? void 0 : _a.push(node);
        }
        如果 (level大于maxLevel) {
          maxLevel为level;
        }
        返回 siblings;
      }
      常量 treeNodes为traverse(data);
      返回 {
        treeNodeMap,
        levelTreeNodeMap,
        maxLevel,
        treeNodes
      };
    }
    函数 filter(query) {
      常量 keys为doFilter(query);
      如果 (keys) {
        expandedKeySet.value为keys;
      }
    }
    函数 getChildren(node) {
      返回 node[childrenKey.value];
    }
    函数 getKey(node) {
      如果 (不node) {
        返回 "";
      }
      返回 node[valueKey.value];
    }
    函数 getDisabled(node) {
      返回 node[disabledKey.value];
    }
    函数 getLabel(node) {
      返回 node[labelKey.value];
    }
    函数 toggleExpand(node) {
      常量 expandedKeys为expandedKeySet.value;
      如果 (expandedKeys.has(node.key)) {
        collapse(node);
      } 否则 {
        expand(node);
      }
    }
    函数 handleNodeClick(node, e) {
      emit(NODE_CLICK, node.data, node, e);
      handleCurrentChange(node);
      如果 (props.expandOnClickNode) {
        toggleExpand(node);
      }
      如果 (props.showCheckbox 与 props.checkOnClickNode 与 不node.disabled) {
        toggleCheckbox(node, 不isChecked(node), true);
      }
    }
    函数 handleCurrentChange(node) {
      如果 (不isCurrent(node)) {
        currentKey.value为node.key;
        emit(CURRENT_CHANGE, node.data, node);
      }
    }
    函数 handleNodeCheck(node, checked) {
      toggleCheckbox(node, checked);
    }
    函数 expand(node) {
      常量 keySet为expandedKeySet.value;
      如果 ((tree == null ? void 0 : tree.value) 与 props.accordion) {
        常量 { treeNodeMap }为tree.value;
        keySet.变量循环Each((key) => {
          常量 node2为treeNodeMap.get(key);
          如果 (node2 与 node2.level === node2.level) {
            keySet.de让e(key);
          }
        });
      }
      keySet.add(node.key);
      emit(NODE_EXPAND, node.data, node);
    }
    函数 collapse(node) {
      expandedKeySet.value.de让e(node.key);
      emit(NODE_COLLAPSE, node.data, node);
    }
    函数 isExpanded(node) {
      返回 expandedKeySet.value.has(node.key);
    }
    函数 isDisabled(node) {
      返回 不不node.disabled;
    }
    函数 isCurrent(node) {
      常量 current为currentKey.value;
      返回 不不current 与 current === node.key;
    }
    函数 getCurrentNode() {
      变量 _a, _b;
      如果 (不currentKey.value)
        返回 void 0;
      返回 (_b为(_a为tree == null ? void 0 : tree.value) == null ? void 0 : _a.treeNodeMap.get(currentKey.value)) == null ? void 0 : _b.data;
    }
    函数 getCurrentKey() {
      返回 currentKey.value;
    }
    函数 setCurrentKey(key) {
      currentKey.value为key;
    }
    函数 setData(data) {
      vue.nextTick(() => tree.value为createTree(data));
    }
    返回 {
      tree,
      flattenTree,
      isNotEmpty,
      getKey,
      getChildren,
      toggleExpand,
      toggleCheckbox,
      isExpanded,
      isChecked,
      isIndeterminate,
      isDisabled,
      isCurrent,
      isForceHiddenExpandIcon,
      handleNodeClick,
      handleNodeCheck,
      getCurrentNode,
      getCurrentKey,
      setCurrentKey,
      getCheckedKeys,
      getCheckedNodes,
      getHalfCheckedKeys,
      getHalfCheckedNodes,
      setChecked,
      setCheckedKeys,
      filter,
      setData
    };
  }

  变量 ElNodeContent为vue.defineComponent({
    名字: "ElTreeNodeContent",
    props: treeNodeContentProps,
    setup(props) {
      常量 tree为vue.inject(ROOT_TREE_INJECTION_KEY);
      常量 ns为useNamespace("tree");
      返回 () => {
        常量 node为props.node;
        常量 { data }为node;
        返回 (tree == null ? void 0 : tree.ctx.slots.default) ? tree.ctx.slots.default({ node, data }) : vue.h("span", { class: ns.be("node", "label") }, [node == null ? void 0 : node.label]);
      };
    }
  });

  常量 DEFAULT_ICON为"caret-right";
  常量 _sfc_main$8为vue.defineComponent({
    名字: "ElTreeNode",
    components: {
      ElIcon,
      CaretRight: caretRight,
      ElCheckbox,
      ElNodeContent
    },
    props: treeNodeProps,
    emits: treeNodeEmits,
    setup(props, { emit }) {
      常量 tree为vue.inject(ROOT_TREE_INJECTION_KEY);
      常量 ns为useNamespace("tree");
      常量 indent为vue.computed(() => {
        变量 _a;
        返回 (_a为tree == null ? void 0 : tree.props.indent) 不= null ? _a : 16;
      });
      常量 icon为vue.computed(() => {
        变量 _a;
        返回 (_a为tree == null ? void 0 : tree.props.icon) 不= null ? _a : DEFAULT_ICON;
      });
      常量 handleClick为(e) => {
        emit("点击", props.node, e);
      };
      常量 handleExpandIconClick为() => {
        emit("toggle", props.node);
      };
      常量 handleCheckChange为(value) => {
        emit("check", props.node, value);
      };
      常量 handleContextMenu为(event) => {
        变量 _a, _b, _c, _d;
        如果 ((_c为(_b为(_a为tree == null ? void 0 : tree.instance) == null ? void 0 : _a.vnode) == null ? void 0 : _b.props) == null ? void 0 : _c["onNodeContextmenu"]) {
          event.stopPropagation();
          event.preventDefault();
        }
        tree == null ? void 0 : tree.ctx.emit(NODE_CONTEXTMENU, event, (_d为props.node) == null ? void 0 : _d.data, props.node);
      };
      返回 {
        ns,
        indent,
        icon,
        handleClick,
        handleExpandIconClick,
        handleCheckChange,
        handleContextMenu
      };
    }
  });
  常量 _hoisted_1$6为["aria-expanded", "aria-disabled", "aria-checked", "data-key"];
  函数 _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
    变量 _a, _b, _c;
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_el_checkbox为vue.resolveComponent("el-checkbox");
    常量 _component_el_node_上下文为vue.resolveComponent("el-node-上下文");
    返回 vue.openBlock(), vue.createElementBlock("div", {
      ref: "node$",
      class: vue.normalizeClass([
        _ctx.ns.b("node"),
        _ctx.ns.is("expanded", _ctx.expanded),
        _ctx.ns.is("current", _ctx.current),
        _ctx.ns.is("focusable", 不_ctx.disabled),
        _ctx.ns.is("checked", 不_ctx.disabled 与 _ctx.checked)
      ]),
      role: "treeitem",
      tabindex: "-1",
      "aria-expanded": _ctx.expanded,
      "aria-disabled": _ctx.disabled,
      "aria-checked": _ctx.checked,
      "data-key": (_a为_ctx.node) == null ? void 0 : _a.key,
      onClick: _cache[1] 或 (_cache[1]为vue.withMod如果iers((...args) => _ctx.handleClick 与 _ctx.handleClick(...args), ["stop"])),
      onContextmenu: _cache[2] 或 (_cache[2]为(...args) => _ctx.handleContextMenu 与 _ctx.handleContextMenu(...args))
    }, [
      vue.createElementVNode("div", {
        class: vue.normalizeClass(_ctx.ns.be("node", "上下文")),
        style: vue.normalizeStyle({ paddingLeft: `${(_ctx.node.level - 1) * _ctx.indent}px` })
      }, [
        _ctx.icon ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
          key: 0,
          class: vue.normalizeClass([
            _ctx.ns.is("leaf", 不不((_b为_ctx.node) == null ? void 0 : _b.isLeaf)),
            _ctx.ns.is("hidden", _ctx.hiddenExpandIcon),
            {
              expanded: 不((_c为_ctx.node) == null ? void 0 : _c.isLeaf) 与 _ctx.expanded
            },
            _ctx.ns.be("node", "expand-icon")
          ]),
          onClick: vue.withMod如果iers(_ctx.handleExpandIconClick, ["stop"])
        }, {
          default: vue.withCtx(() => [
            (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.icon)))
          ]),
          _: 1
        }, 8, ["class", "onClick"])) : vue.createCommentVNode("v-如果", true),
        _ctx.showCheckbox ? (vue.openBlock(), vue.createBlock(_component_el_checkbox, {
          key: 1,
          "model-value": _ctx.checked,
          indeterminate: _ctx.indeterminate,
          disabled: _ctx.disabled,
          onChange: _ctx.handleCheckChange,
          onClick: _cache[0] 或 (_cache[0]为vue.withMod如果iers(() => {
          }, ["stop"]))
        }, null, 8, ["model-value", "indeterminate", "disabled", "onChange"])) : vue.createCommentVNode("v-如果", true),
        vue.createVNode(_component_el_node_上下文, { node: _ctx.node }, null, 8, ["node"])
      ], 6)
    ], 42, _hoisted_1$6);
  }
  变量 ElTreeNode为/* @__PURE__ */ _输出出口_sfc(_sfc_main$8, [["render", _sfc_render$4], ["__file", "tree-node.vue"]]);

  常量 _sfc_main$7为vue.defineComponent({
    名字: "ElTreeV2",
    components: {
      ElTreeNode,
      FixedSizeList: FixedSizeList$1
    },
    props: treeProps,
    emits: treeEmits,
    setup(props, ctx) {
      vue.provide(ROOT_TREE_INJECTION_KEY, {
        ctx,
        props,
        instance: vue.getCurrentInstance()
      });
      常量 { t }为useLocale();
      常量 ns为useNamespace("tree");
      常量 {
        flattenTree,
        isNotEmpty,
        toggleExpand,
        isExpanded,
        isIndeterminate,
        isChecked,
        isDisabled,
        isCurrent,
        isForceHiddenExpandIcon,
        toggleCheckbox,
        handleNodeClick,
        handleNodeCheck,
        getCurrentNode,
        getCurrentKey,
        setCurrentKey,
        getCheckedKeys,
        getCheckedNodes,
        getHalfCheckedKeys,
        getHalfCheckedNodes,
        setChecked,
        setCheckedKeys,
        filter,
        setData
      }为useTree(props, ctx.emit);
      ctx.expose({
        getCurrentNode,
        getCurrentKey,
        setCurrentKey,
        getCheckedKeys,
        getCheckedNodes,
        getHalfCheckedKeys,
        getHalfCheckedNodes,
        setChecked,
        setCheckedKeys,
        filter,
        setData
      });
      返回 {
        t,
        ns,
        flattenTree,
        itemSize: 26,
        isNotEmpty,
        toggleExpand,
        toggleCheckbox,
        isExpanded,
        isIndeterminate,
        isChecked,
        isDisabled,
        isCurrent,
        isForceHiddenExpandIcon,
        handleNodeClick,
        handleNodeCheck
      };
    }
  });
  函数 _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
    变量 _a;
    常量 _component_el_tree_node为vue.resolveComponent("el-tree-node");
    常量 _component_fixed_size_list为vue.resolveComponent("fixed-size-list");
    返回 vue.openBlock(), vue.createElementBlock("div", {
      class: vue.normalizeClass([_ctx.ns.b(), { [_ctx.ns.m("highlight-current")]: _ctx.highlightCurrent }]),
      role: "tree"
    }, [
      _ctx.isNotEmpty ? (vue.openBlock(), vue.createBlock(_component_fixed_size_list, {
        key: 0,
        "class-名字": _ctx.ns.b("virtual-list"),
        data: _ctx.flattenTree,
        total: _ctx.flattenTree.长度,
        height: _ctx.height,
        "item-size": _ctx.itemSize,
        "perf-mode": _ctx.perfMode
      }, {
        default: vue.withCtx(({ data, index, style }) => [
          (vue.openBlock(), vue.createBlock(_component_el_tree_node, {
            key: data[index].key,
            style: vue.normalizeStyle(style),
            node: data[index],
            expanded: _ctx.isExpanded(data[index]),
            "show-checkbox": _ctx.showCheckbox,
            checked: _ctx.isChecked(data[index]),
            indeterminate: _ctx.isIndeterminate(data[index]),
            disabled: _ctx.isDisabled(data[index]),
            current: _ctx.isCurrent(data[index]),
            "hidden-expand-icon": _ctx.isForceHiddenExpandIcon(data[index]),
            onClick: _ctx.handleNodeClick,
            onToggle: _ctx.toggleExpand,
            onCheck: _ctx.handleNodeCheck
          }, null, 8, ["style", "node", "expanded", "show-checkbox", "checked", "indeterminate", "disabled", "current", "hidden-expand-icon", "onClick", "onToggle", "onCheck"]))
        ]),
        _: 1
      }, 8, ["class-名字", "data", "total", "height", "item-size", "perf-mode"])) : (vue.openBlock(), vue.createElementBlock("div", {
        key: 1,
        class: vue.normalizeClass(_ctx.ns.e("empty-block"))
      }, [
        vue.createElementVNode("span", {
          class: vue.normalizeClass(_ctx.ns.e("empty-text"))
        }, vue.toDisplayString((_a为_ctx.emptyText) 不= null ? _a : _ctx.t("el.tree.emptyText")), 3)
      ], 2))
    ], 2);
  }
  变量 TreeV2为/* @__PURE__ */ _输出出口_sfc(_sfc_main$7, [["render", _sfc_render$3], ["__file", "tree.vue"]]);

  常量 ElTreeV2为withInstall(TreeV2);

  常量 SCOPE$2为"ElUpload";
  class UploadAjaxError extends Error {
    常量ructor(message, status, method, url) {
      super(message);
      this.名字为"UploadAjaxError";
      this.status为status;
      this.method为method;
      this.url为url;
    }
  }
  函数 getError(action, option, xhr) {
    让 msg;
    如果 (xhr.response) {
      msg为`${xhr.response.error 或 xhr.response}`;
    } 否则 如果 (xhr.responseText) {
      msg为`${xhr.responseText}`;
    } 否则 {
      msg为`fail to ${option.method} ${action} ${xhr.status}`;
    }
    返回 new UploadAjaxError(msg, xhr.status, option.method, action);
  }
  函数 getBody(xhr) {
    常量 text为xhr.responseText 或 xhr.response;
    如果 (不text) {
      返回 text;
    }
    尝试 {
      返回 JSON.parse(text);
    } 捕获到 (e) {
      返回 text;
    }
  }
  常量 ajaxUpload为(option) => {
    如果 (类型是 XMLHttpRequest === "undefined")
      抛出Error(SCOPE$2, "XMLHttpRequest is undefined");
    常量 xhr为new XMLHttpRequest();
    常量 action为option.action;
    如果 (xhr.upload) {
      xhr.upload.addEventListener("progress", (evt) => {
        常量 progressEvt为evt;
        progressEvt.percent为evt.total大于0 ? evt.loaded / evt.total * 100 : 0;
        option.onProgress(progressEvt);
      });
    }
    常量 变量循环mData为new FormData();
    如果 (option.data) {
      变量循环 (常量 [key, value] of Object.entries(option.data)) {
        如果 (Array.isArray(value))
          变量循环mData.append(key, ...value);
        否则
          变量循环mData.append(key, value);
      }
    }
    变量循环mData.append(option.file名字, option.file, option.file.名字);
    xhr.addEventListener("error", () => {
      option.onError(getError(action, option, xhr));
    });
    xhr.addEventListener("load", () => {
      如果 (xhr.status < 200 或 xhr.status >= 300) {
        返回 option.onError(getError(action, option, xhr));
      }
      option.onSuccess(getBody(xhr));
    });
    xhr.open(option.method, action, true);
    如果 (option.withCredentials 与 "withCredentials" 在 xhr) {
      xhr.withCredentials为true;
    }
    常量 头ers为option.头ers 或 {};
    如果 (头ers instanceof Headers) {
      头ers.变量循环Each((value, key) => xhr.setRequestHeader(key, value));
    } 否则 {
      变量循环 (常量 [key, value] of Object.entries(头ers)) {
        如果 (isNil(value))
          continue;
        xhr.setRequestHeader(key, String(value));
      }
    }
    xhr.send(变量循环mData);
    返回 xhr;
  };

  常量 uploadListTypes为["text", "picture", "picture-card"];
  让 fileId为1;
  常量 genFileId为() => Date.now() + fileId加一;
  常量 uploadBaseProps为buildProps({
    action: {
      type: String,
      required: true
    },
    头ers: {
      type: definePropType(Object)
    },
    method: {
      type: String,
      default: "post"
    },
    data: {
      type: Object,
      default: () => mutable({})
    },
    multiple: {
      type: Boolean,
      default: false
    },
    名字: {
      type: String,
      default: "file"
    },
    drag: {
      type: Boolean,
      default: false
    },
    withCredentials: Boolean,
    showFileList: {
      type: Boolean,
      default: true
    },
    accept: {
      type: String,
      default: ""
    },
    type: {
      type: String,
      default: "select"
    },
    fileList: {
      type: definePropType(Array),
      default: () => mutable([])
    },
    autoUpload: {
      type: Boolean,
      default: true
    },
    listType: {
      type: String,
      values: uploadListTypes,
      default: "text"
    },
    httpRequest: {
      type: definePropType(Function),
      default: ajaxUpload
    },
    disabled: Boolean,
    limit: Number
  });
  常量 uploadProps为buildProps({
    ...uploadBaseProps,
    be变量循环eUpload: {
      type: definePropType(Function),
      default: NOOP
    },
    be变量循环eRemove: {
      type: definePropType(Function)
    },
    onRemove: {
      type: definePropType(Function),
      default: NOOP
    },
    onChange: {
      type: definePropType(Function),
      default: NOOP
    },
    onPreview: {
      type: definePropType(Function),
      default: NOOP
    },
    onSuccess: {
      type: definePropType(Function),
      default: NOOP
    },
    onProgress: {
      type: definePropType(Function),
      default: NOOP
    },
    onError: {
      type: definePropType(Function),
      default: NOOP
    },
    onExceed: {
      type: definePropType(Function),
      default: NOOP
    }
  });

  常量 uploadListProps为buildProps({
    files: {
      type: definePropType(Array),
      default: () => mutable([])
    },
    disabled: {
      type: Boolean,
      default: false
    },
    handlePreview: {
      type: definePropType(Function),
      default: NOOP
    },
    listType: {
      type: String,
      values: uploadListTypes,
      default: "text"
    }
  });
  常量 uploadListEmits为{
    remove: (file) => 不不file
  };

  常量 _hoisted_1$5为["onKeydown"];
  常量 _hoisted_2$4为["src"];
  常量 _hoisted_3$2为["onClick"];
  常量 _hoisted_4$2为["onClick"];
  常量 _hoisted_5$1为["onClick"];
  常量 __default__$3为{
    名字: "ElUploadList"
  };
  常量 _sfc_main$6为/* @__PURE__ */ vue.defineComponent({
    ...__default__$3,
    props: uploadListProps,
    emits: uploadListEmits,
    setup(__props, { emit }) {
      常量 props为__props;
      常量 { t }为useLocale();
      常量 nsUpload为useNamespace("upload");
      常量 nsIcon为useNamespace("icon");
      常量 nsList为useNamespace("list");
      常量 focusing为vue.ref(false);
      常量 handleClick为(file) => {
        props.handlePreview(file);
      };
      常量 onFileClicked为(e) => {
        e.target.focus();
      };
      常量 handleRemove为(file) => {
        emit("remove", file);
      };
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createBlock(vue.TransitionGroup, {
          tag: "ul",
          class: vue.normalizeClass([
            vue.unref(nsUpload).b("list"),
            vue.unref(nsUpload).bm("list", _ctx.listType),
            vue.unref(nsUpload).is("disabled", _ctx.disabled)
          ]),
          名字: vue.unref(nsList).b()
        }, {
          default: vue.withCtx(() => [
            (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(_ctx.files, (file) => {
              返回 vue.openBlock(), vue.createElementBlock("li", {
                key: file.uid 或 file.名字,
                class: vue.normalizeClass([
                  vue.unref(nsUpload).be("list", "item"),
                  vue.unref(nsUpload).is(file.status),
                  { focusing: focusing.value }
                ]),
                tabindex: "0",
                onKeydown: vue.withKeys(($event) => 不_ctx.disabled 与 handleRemove(file), ["de让e"]),
                onFocus: _cache[0] 或 (_cache[0]为($event) => focusing.value为true),
                onBlur: _cache[1] 或 (_cache[1]为($event) => focusing.value为false),
                onClick: onFileClicked
              }, [
                vue.renderSlot(_ctx.$slots, "default", { file }, () => [
                  _ctx.listType === "picture" 或 file.status 不== "uploading" 与 _ctx.listType === "picture-card" ? (vue.openBlock(), vue.createElementBlock("img", {
                    key: 0,
                    class: vue.normalizeClass(vue.unref(nsUpload).be("list", "item-thumbnail")),
                    src: file.url,
                    alt: ""
                  }, null, 10, _hoisted_2$4)) : vue.createCommentVNode("v-如果", true),
                  _ctx.listType 不== "picture" 与 (file.status === "uploading" 或 _ctx.listType 不== "picture-card") ? (vue.openBlock(), vue.createElementBlock("div", {
                    key: 1,
                    class: vue.normalizeClass(vue.unref(nsUpload).be("list", "item-info"))
                  }, [
                    vue.createElementVNode("a", {
                      class: vue.normalizeClass(vue.unref(nsUpload).be("list", "item-名字")),
                      onClick: ($event) => handleClick(file)
                    }, [
                      vue.createVNode(vue.unref(ElIcon), {
                        class: vue.normalizeClass(vue.unref(nsIcon).m("document"))
                      }, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(document$1))
                        ]),
                        _: 1
                      }, 8, ["class"]),
                      vue.createTextVNode(" " + vue.toDisplayString(file.名字), 1)
                    ], 10, _hoisted_3$2),
                    file.status === "uploading" ? (vue.openBlock(), vue.createBlock(vue.unref(ElProgress), {
                      key: 0,
                      type: _ctx.listType === "picture-card" ? "circle" : "line",
                      "stroke-宽度": _ctx.listType === "picture-card" ? 6 : 2,
                      percentage: Number(file.percentage),
                      style: vue.normalizeStyle(_ctx.listType === "picture-card" ? "" : "margin-top: 0.5rem")
                    }, null, 8, ["type", "stroke-宽度", "percentage", "style"])) : vue.createCommentVNode("v-如果", true)
                  ], 2)) : vue.createCommentVNode("v-如果", true),
                  vue.createElementVNode("label", {
                    class: vue.normalizeClass(vue.unref(nsUpload).be("list", "item-status-label"))
                  }, [
                    _ctx.listType === "text" ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                      key: 0,
                      class: vue.normalizeClass([vue.unref(nsIcon).m("upload-success"), vue.unref(nsIcon).m("circle-check")])
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(vue.unref(circleCheck))
                      ]),
                      _: 1
                    }, 8, ["class"])) : ["picture-card", "picture"].includes(_ctx.listType) ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                      key: 1,
                      class: vue.normalizeClass([vue.unref(nsIcon).m("upload-success"), vue.unref(nsIcon).m("check")])
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(vue.unref(check))
                      ]),
                      _: 1
                    }, 8, ["class"])) : vue.createCommentVNode("v-如果", true)
                  ], 2),
                  不_ctx.disabled ? (vue.openBlock(), vue.createBlock(vue.unref(ElIcon), {
                    key: 2,
                    class: vue.normalizeClass(vue.unref(nsIcon).m("close")),
                    onClick: ($event) => handleRemove(file)
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(vue.unref(close$2))
                    ]),
                    _: 2
                  }, 1032, ["class", "onClick"])) : vue.createCommentVNode("v-如果", true),
                  vue.createCommentVNode(" Due to close btn only appears when li gets focused disappears after li gets blurred, thus keyboard navigation can never reach close btn"),
                  vue.createCommentVNode(" This is a bug which needs to be fixed "),
                  vue.createCommentVNode(" TODO: Fix the incorrect navigation 整数eraction "),
                  不_ctx.disabled ? (vue.openBlock(), vue.createElementBlock("i", {
                    key: 3,
                    class: vue.normalizeClass(vue.unref(nsIcon).m("close-tip"))
                  }, vue.toDisplayString(vue.unref(t)("el.upload.de让eTip")), 3)) : vue.createCommentVNode("v-如果", true),
                  _ctx.listType === "picture-card" ? (vue.openBlock(), vue.createElementBlock("span", {
                    key: 4,
                    class: vue.normalizeClass(vue.unref(nsUpload).be("list", "item-actions"))
                  }, [
                    vue.createElementVNode("span", {
                      class: vue.normalizeClass(vue.unref(nsUpload).be("list", "item-preview")),
                      onClick: ($event) => _ctx.handlePreview(file)
                    }, [
                      vue.createVNode(vue.unref(ElIcon), {
                        class: vue.normalizeClass(vue.unref(nsIcon).m("zoom-in"))
                      }, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(zoomIn))
                        ]),
                        _: 1
                      }, 8, ["class"])
                    ], 10, _hoisted_4$2),
                    不_ctx.disabled ? (vue.openBlock(), vue.createElementBlock("span", {
                      key: 0,
                      class: vue.normalizeClass(vue.unref(nsUpload).be("list", "item-de让e")),
                      onClick: ($event) => handleRemove(file)
                    }, [
                      vue.createVNode(vue.unref(ElIcon), {
                        class: vue.normalizeClass(vue.unref(nsIcon).m("de让e"))
                      }, {
                        default: vue.withCtx(() => [
                          vue.createVNode(vue.unref(_de让e))
                        ]),
                        _: 1
                      }, 8, ["class"])
                    ], 10, _hoisted_5$1)) : vue.createCommentVNode("v-如果", true)
                  ], 2)) : vue.createCommentVNode("v-如果", true)
                ])
              ], 42, _hoisted_1$5);
            }), 128)),
            vue.renderSlot(_ctx.$slots, "append")
          ]),
          _: 3
        }, 8, ["class", "名字"]);
      };
    }
  });
  变量 UploadList为/* @__PURE__ */ _输出出口_sfc(_sfc_main$6, [["__file", "upload-list.vue"]]);

  常量 uploadDraggerProps为buildProps({
    disabled: {
      type: Boolean,
      default: false
    }
  });
  常量 uploadDraggerEmits为{
    file: (file) => isArray(file)
  };

  常量 _hoisted_1$4为["onDrop", "onDragover"];
  常量 __default__$2为{
    名字: "ElUploadDrag"
  };
  常量 _sfc_main$5为/* @__PURE__ */ vue.defineComponent({
    ...__default__$2,
    props: uploadDraggerProps,
    emits: uploadDraggerEmits,
    setup(__props, { emit }) {
      常量 props为__props;
      常量 COMPONENT_NAME为"ElUploadDrag";
      常量 uploaderContext为vue.inject(uploadContextKey);
      如果 (不uploaderContext) {
        抛出Error(COMPONENT_NAME, "usage: <el-upload><el-upload-dragger /></el-upload>");
      }
      常量 ns为useNamespace("upload");
      常量 dragover为vue.ref(false);
      常量 onDrop为(e) => {
        如果 (props.disabled)
          返回;
        dragover.value为false;
        常量 files为Array.从(e.dataTransfer.files);
        常量 accept为uploaderContext.accept.value;
        如果 (不accept) {
          emit("file", files);
          返回;
        }
        常量 filesFiltered为files.filter((file) => {
          常量 { type, 名字 }为file;
          常量 extension为名字.includes(".") ? `.${名字.split(".").pop()}` : "";
          常量 baseType为type.replace(/\/.*$/, "");
          返回 accept.split(",").map((type2) => type2.trim()).filter((type2) => type2).some((acceptedType) => {
            如果 (acceptedType.startsWith(".")) {
              返回 extension === acceptedType;
            }
            如果 (/\/\*$/.test(acceptedType)) {
              返回 baseType === acceptedType.replace(/\/\*$/, "");
            }
            如果 (/^[^/]+\/[^/]+$/.test(acceptedType)) {
              返回 type === acceptedType;
            }
            返回 false;
          });
        });
        emit("file", filesFiltered);
      };
      常量 onDragover为() => {
        如果 (不props.disabled)
          dragover.value为true;
      };
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([vue.unref(ns).b("dragger"), vue.unref(ns).is("dragover", dragover.value)]),
          onDrop: vue.withMod如果iers(onDrop, ["prevent"]),
          onDragover: vue.withMod如果iers(onDragover, ["prevent"]),
          onDragleave: _cache[0] 或 (_cache[0]为vue.withMod如果iers(($event) => dragover.value为false, ["prevent"]))
        }, [
          vue.renderSlot(_ctx.$slots, "default")
        ], 42, _hoisted_1$4);
      };
    }
  });
  变量 UploadDragger为/* @__PURE__ */ _输出出口_sfc(_sfc_main$5, [["__file", "upload-dragger.vue"]]);

  常量 uploadContentProps为buildProps({
    ...uploadBaseProps,
    fileList: {
      type: definePropType(Array),
      default: () => mutable([])
    },
    be变量循环eUpload: {
      type: definePropType(Function),
      default: NOOP
    },
    onRemove: {
      type: definePropType(Function),
      default: NOOP
    },
    onStart: {
      type: definePropType(Function),
      default: NOOP
    },
    onSuccess: {
      type: definePropType(Function),
      default: NOOP
    },
    onProgress: {
      type: definePropType(Function),
      default: NOOP
    },
    onError: {
      type: definePropType(Function),
      default: NOOP
    },
    onExceed: {
      type: definePropType(Function),
      default: NOOP
    }
  });

  常量 _hoisted_1$3为["onKeydown"];
  常量 _hoisted_2$3为["名字", "multiple", "accept"];
  常量 __default__$1为{
    名字: "ElUploadContent",
    inheritAttrs: false
  };
  常量 _sfc_main$4为/* @__PURE__ */ vue.defineComponent({
    ...__default__$1,
    props: uploadContentProps,
    setup(__props, { expose }) {
      常量 props为__props;
      常量 ns为useNamespace("upload");
      常量 requests为vue.shallowRef({});
      常量 inputRef为vue.shallowRef();
      常量 uploadFiles为(files) => {
        如果 (files.长度 === 0)
          返回;
        常量 { autoUpload, limit, fileList, multiple, onStart, onExceed }为props;
        如果 (limit 与 fileList.长度 + files.长度大于limit) {
          onExceed(files, fileList);
          返回;
        }
        如果 (不multiple) {
          files为files.slice(0, 1);
        }
        变量循环 (常量 file of files) {
          常量 rawFile为file;
          rawFile.uid为genFileId();
          onStart(rawFile);
          如果 (autoUpload)
            upload(rawFile);
        }
      };
      常量 upload为async (rawFile) => {
        inputRef.value.value为"";
        如果 (不props.be变量循环eUpload) {
          返回 doUpload(rawFile);
        }
        让 hookResult;
        尝试 {
          hookResult为await props.be变量循环eUpload(rawFile);
        } 捕获到 (e) {
          hookResult为false;
        }
        如果 (hookResult === false) {
          props.onRemove(rawFile);
          返回;
        }
        让 file为rawFile;
        如果 (hookResult instanceof Blob) {
          如果 (hookResult instanceof File) {
            file为hookResult;
          } 否则 {
            file为new File([hookResult], rawFile.名字, {
              type: rawFile.type
            });
          }
          变量循环 (常量 key of Object.keys(rawFile)) {
            file[key]为rawFile[key];
          }
        }
        doUpload(rawFile);
      };
      常量 doUpload为(rawFile) => {
        常量 {
          头ers,
          data,
          method,
          withCredentials,
          名字: file名字,
          action,
          onProgress,
          onSuccess,
          onError,
          httpRequest
        }为props;
        常量 { uid }为rawFile;
        常量 options为{
          头ers: 头ers 或 {},
          withCredentials,
          file: rawFile,
          data,
          method,
          file名字,
          action,
          onProgress: (evt) => {
            onProgress(evt, rawFile);
          },
          onSuccess: (res) => {
            onSuccess(res, rawFile);
            de让e requests.value[uid];
          },
          onError: (err) => {
            onError(err, rawFile);
            de让e requests.value[uid];
          }
        };
        常量 request为httpRequest(options);
        requests.value[uid]为request;
        如果 (request instanceof Promise) {
          request.then(options.onSuccess, options.onError);
        }
      };
      常量 handleChange为(e) => {
        常量 files为e.target.files;
        如果 (不files)
          返回;
        uploadFiles(Array.从(files));
      };
      常量 handleClick为() => {
        如果 (不props.disabled) {
          inputRef.value.value为"";
          inputRef.value.点击();
        }
      };
      常量 handleKeydown为() => {
        handleClick();
      };
      常量 abort为(file) => {
        常量 _reqs为entriesOf(requests.value).filter(file ? ([uid]) => String(file.uid) === uid : () => true);
        _reqs.变量循环Each(([uid, req]) => {
          如果 (req instanceof XMLHttpRequest)
            req.abort();
          de让e requests.value[uid];
        });
      };
      expose({
        abort,
        upload
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", {
          class: vue.normalizeClass([vue.unref(ns).b(), vue.unref(ns).m(_ctx.listType)]),
          tabindex: "0",
          onClick: handleClick,
          onKeydown: vue.withKeys(vue.withMod如果iers(handleKeydown, ["self"]), ["enter", "space"])
        }, [
          _ctx.drag ? (vue.openBlock(), vue.createBlock(UploadDragger, {
            key: 0,
            disabled: _ctx.disabled,
            onFile: uploadFiles
          }, {
            default: vue.withCtx(() => [
              vue.renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 8, ["disabled"])) : vue.renderSlot(_ctx.$slots, "default", { key: 1 }),
          vue.createElementVNode("input", {
            ref_key: "inputRef",
            ref: inputRef,
            class: vue.normalizeClass(vue.unref(ns).e("input")),
            名字: _ctx.名字,
            multiple: _ctx.multiple,
            accept: _ctx.accept,
            type: "file",
            onChange: handleChange
          }, null, 42, _hoisted_2$3)
        ], 42, _hoisted_1$3);
      };
    }
  });
  变量 UploadContent为/* @__PURE__ */ _输出出口_sfc(_sfc_main$4, [["__file", "upload-上下文.vue"]]);

  常量 SCOPE$1为"ElUpload";
  常量 revokeObjectURL为(file) => {
    变量 _a;
    如果 ((_a为file.url) == null ? void 0 : _a.startsWith("blob:")) {
      URL.revokeObjectURL(file.url);
    }
  };
  常量 useHandlers为(props, uploadRef) => {
    常量 uploadFiles为vue.ref([]);
    常量 getFile为(rawFile) => uploadFiles.value.find((file) => file.uid === rawFile.uid);
    函数 abort(file) {
      变量 _a;
      (_a为uploadRef.value) == null ? void 0 : _a.abort(file);
    }
    函数 clearFiles(states为["ready", "uploading", "success", "fail"]) {
      uploadFiles.value为uploadFiles.value.filter((row) => 不states.includes(row.status));
    }
    常量 handleError为(err, rawFile) => {
      常量 file为getFile(rawFile);
      如果 (不file)
        返回;
      file.status为"fail";
      uploadFiles.value.splice(uploadFiles.value.indexOf(file), 1);
      props.onError(err, file, uploadFiles.value);
      props.onChange(file, uploadFiles.value);
    };
    常量 handleProgress为(evt, rawFile) => {
      常量 file为getFile(rawFile);
      如果 (不file)
        返回;
      props.onProgress(evt, file, uploadFiles.value);
      file.status为"uploading";
      file.percentage为Math.round(evt.percent);
    };
    常量 handleSuccess为(response, rawFile) => {
      常量 file为getFile(rawFile);
      如果 (不file)
        返回;
      file.status为"success";
      file.response为response;
      props.onSuccess(response, file, uploadFiles.value);
      props.onChange(file, uploadFiles.value);
    };
    常量 handleStart为(file) => {
      常量 uploadFile为{
        名字: file.名字,
        percentage: 0,
        status: "ready",
        size: file.size,
        raw: file,
        uid: file.uid
      };
      如果 (props.listType === "picture-card" 或 props.listType === "picture") {
        尝试 {
          uploadFile.url为URL.createObjectURL(file);
        } 捕获到 (err) {
          debugWarn(SCOPE$1, err.message);
          props.onError(err, uploadFile, uploadFiles.value);
        }
      }
      uploadFiles.value.push(uploadFile);
      props.onChange(uploadFile, uploadFiles.value);
    };
    常量 handleRemove为async (file, rawFile) => {
      如果 (rawFile) {
        useDeprecated({
          scope: SCOPE$1,
          从: "handleRemove second argument",
          version: "2.2",
          replacement: "first argument `file`",
          ref: "https://element-plus.org/en-US/component/upload.超文本标记#methods"
        }, true);
      }
      常量 _file为rawFile 或 file;
      常量 uploadFile为_file instanceof File ? getFile(_file) : _file;
      如果 (不uploadFile)
        抛出Error(SCOPE$1, "file to be removed not found");
      常量 doRemove为(file2) => {
        abort(file2);
        常量 fileList为uploadFiles.value;
        fileList.splice(fileList.indexOf(file2), 1);
        props.onRemove(file2, fileList);
        revokeObjectURL(file2);
      };
      如果 (props.be变量循环eRemove) {
        常量 be变量循环e为await props.be变量循环eRemove(uploadFile, uploadFiles.value);
        如果 (be变量循环e 不== false)
          doRemove(uploadFile);
      } 否则 {
        doRemove(uploadFile);
      }
    };
    函数 submit() {
      uploadFiles.value.filter(({ status }) => status === "ready").变量循环Each(({ raw }) => {
        变量 _a;
        返回 raw 与 ((_a为uploadRef.value) == null ? void 0 : _a.upload(raw));
      });
    }
    vue.watch(() => props.listType, (val) => {
      如果 (val 不== "picture-card" 与 val 不== "picture") {
        返回;
      }
      uploadFiles.value为uploadFiles.value.map((file) => {
        常量 { raw, url }为file;
        如果 (不url 与 raw) {
          尝试 {
            file.url为URL.createObjectURL(raw);
          } 捕获到 (err) {
            props.onError(err, file, uploadFiles.value);
          }
        }
        返回 file;
      });
    });
    vue.watch(() => props.fileList, (fileList) => {
      变量循环 (常量 file of fileList) {
        file.uid 或 (file.uid为genFileId());
        file.status 或 (file.status为"success");
      }
      uploadFiles.value为fileList;
    }, { immediate: true, deep: true });
    返回 {
      abort,
      clearFiles,
      handleError,
      handleProgress,
      handleStart,
      handleSuccess,
      handleRemove,
      submit,
      uploadFiles
    };
  };

  常量 __default__为{
    名字: "ElUpload"
  };
  常量 _sfc_main$3为/* @__PURE__ */ vue.defineComponent({
    ...__default__,
    props: uploadProps,
    setup(__props, { expose }) {
      常量 props为__props;
      常量 slots为vue.useSlots();
      常量 disabled为useDisabled$1();
      常量 uploadRef为vue.shallowRef();
      常量 {
        abort,
        submit,
        clearFiles,
        uploadFiles,
        handleStart,
        handleError,
        handleRemove,
        handleSuccess,
        handleProgress
      }为useHandlers(props, uploadRef);
      常量 isPictureCard为vue.computed(() => props.listType === "picture-card");
      常量 uploadContentProps为vue.computed(() => ({
        ...props,
        onStart: handleStart,
        onProgress: handleProgress,
        onSuccess: handleSuccess,
        onError: handleError,
        onRemove: handleRemove
      }));
      vue.onBe变量循环eUnmount(() => {
        uploadFiles.value.变量循环Each(({ url }) => {
          如果 (url == null ? void 0 : url.startsWith("blob:"))
            URL.revokeObjectURL(url);
        });
      });
      vue.provide(uploadContextKey, {
        accept: vue.toRef(props, "accept")
      });
      expose({
        abort,
        submit,
        clearFiles,
        handleStart,
        handleRemove
      });
      返回 (_ctx, _cache) => {
        返回 vue.openBlock(), vue.createElementBlock("div", null, [
          vue.unref(isPictureCard) 与 _ctx.showFileList ? (vue.openBlock(), vue.createBlock(UploadList, {
            key: 0,
            disabled: vue.unref(disabled),
            "list-type": _ctx.listType,
            files: vue.unref(uploadFiles),
            "handle-preview": _ctx.onPreview,
            onRemove: vue.unref(handleRemove)
          }, vue.createSlots({
            append: vue.withCtx(() => [
              _ctx.listType === "picture-card" ? (vue.openBlock(), vue.createBlock(UploadContent, vue.mergeProps({
                key: 0,
                ref_key: "uploadRef",
                ref: uploadRef
              }, vue.unref(uploadContentProps)), {
                default: vue.withCtx(() => [
                  vue.unref(slots).trigger ? vue.renderSlot(_ctx.$slots, "trigger", { key: 0 }) : vue.createCommentVNode("v-如果", true),
                  不vue.unref(slots).trigger 与 vue.unref(slots).default ? vue.renderSlot(_ctx.$slots, "default", { key: 1 }) : vue.createCommentVNode("v-如果", true)
                ]),
                _: 3
              }, 16)) : vue.createCommentVNode("v-如果", true)
            ]),
            _: 2
          }, [
            _ctx.$slots.file ? {
              名字: "default",
              fn: vue.withCtx(({ file }) => [
                vue.renderSlot(_ctx.$slots, "file", { file })
              ])
            } : void 0
          ]), 1032, ["disabled", "list-type", "files", "handle-preview", "onRemove"])) : vue.createCommentVNode("v-如果", true),
          _ctx.listType 不== "picture-card" ? (vue.openBlock(), vue.createBlock(UploadContent, vue.mergeProps({
            key: 1,
            ref_key: "uploadRef",
            ref: uploadRef
          }, vue.unref(uploadContentProps)), {
            default: vue.withCtx(() => [
              vue.unref(slots).trigger ? vue.renderSlot(_ctx.$slots, "trigger", { key: 0 }) : vue.createCommentVNode("v-如果", true),
              不vue.unref(slots).trigger 与 vue.unref(slots).default ? vue.renderSlot(_ctx.$slots, "default", { key: 1 }) : vue.createCommentVNode("v-如果", true)
            ]),
            _: 3
          }, 16)) : vue.createCommentVNode("v-如果", true),
          _ctx.$slots.trigger ? vue.renderSlot(_ctx.$slots, "default", { key: 2 }) : vue.createCommentVNode("v-如果", true),
          vue.renderSlot(_ctx.$slots, "tip"),
          不vue.unref(isPictureCard) 与 _ctx.showFileList ? (vue.openBlock(), vue.createBlock(UploadList, {
            key: 3,
            disabled: vue.unref(disabled),
            "list-type": _ctx.listType,
            files: vue.unref(uploadFiles),
            "handle-preview": _ctx.onPreview,
            onRemove: vue.unref(handleRemove)
          }, vue.createSlots({ _: 2 }, [
            _ctx.$slots.file ? {
              名字: "default",
              fn: vue.withCtx(({ file }) => [
                vue.renderSlot(_ctx.$slots, "file", { file })
              ])
            } : void 0
          ]), 1032, ["disabled", "list-type", "files", "handle-preview", "onRemove"])) : vue.createCommentVNode("v-如果", true)
        ]);
      };
    }
  });
  变量 Upload为/* @__PURE__ */ _输出出口_sfc(_sfc_main$3, [["__file", "upload.vue"]]);

  常量 ElUpload为withInstall(Upload);

  变量 Components为[
    ElAffix,
    ElAlert,
    ElAutocomp让e,
    ElAvatar,
    ElBacktop,
    ElBadge,
    ElBreadcrumb,
    ElBreadcrumbItem,
    ElButton,
    ElButtonGroup$1,
    ElCalendar,
    ElCard,
    ElCarousel,
    ElCarouselItem,
    ElCascader,
    ElCascaderPanel,
    ElCheckTag,
    ElCheckbox,
    ElCheckboxButton,
    ElCheckboxGroup$1,
    ElCol,
    ElCollapse,
    ElCollapseItem,
    ElCollapseTransition,
    ElColorPicker,
    ElConfigProvider,
    ElContainer,
    ElAside,
    ElFooter,
    ElHeader,
    ElMain,
    ElDatePicker,
    ElDescriptions,
    ElDescriptionsItem,
    ElDia输出日志,
    ElDivider,
    ElDrawer,
    ElDropdown,
    ElDropdownItem,
    ElDropdownMenu,
    ElEmpty,
    ElForm,
    ElFormItem,
    ElIcon,
    ElImage,
    ElImageViewer,
    ElInput,
    ElInputNumber,
    ElLink,
    ElMenu,
    ElMenuItem,
    ElMenuItemGroup,
    ElPageHeader,
    ElPagination,
    ElPopconfirm,
    ElPopover,
    ElPopper,
    ElProgress,
    ElRadio,
    ElRadioButton,
    ElRadioGroup,
    ElRate,
    ElResult,
    ElRow,
    ElScrollbar,
    ElSelect,
    ElOption$1,
    ElOptionGroup,
    ElSelectV2,
    ElSke让on,
    ElSke让onItem,
    ElSlider,
    ElSpace,
    ElSteps,
    ElStep,
    ElSwitch,
    ElTable,
    ElTableColumn,
    ElTabs,
    ElTabPane,
    ElTag,
    ElTimePicker,
    ElTimeSelect,
    ElTimeline,
    ElTimelineItem,
    ElTooltip,
    ElTooltipV2,
    ElTransfer,
    ElTree,
    ElTreeSelect,
    ElTreeV2,
    ElUpload
  ];

  常量 SCOPE为"ElInfiniteScroll";
  常量 CHECK_INTERVAL为50;
  常量 DEFAULT_DELAY为200;
  常量 DEFAULT_DISTANCE为0;
  常量 attributes为{
    delay: {
      type: Number,
      default: DEFAULT_DELAY
    },
    distance: {
      type: Number,
      default: DEFAULT_DISTANCE
    },
    disabled: {
      type: Boolean,
      default: false
    },
    immediate: {
      type: Boolean,
      default: true
    }
  };
  常量 getScrollOptions为(el, instance) => {
    返回 Object.entries(attributes).reduce((acm, [名字, option]) => {
      变量 _a, _b;
      常量 { type, default: defaultValue }为option;
      常量 attrVal为el.getAttribute(`infinite-scroll-${名字}`);
      让 value为(_b为(_a为instance[attrVal]) 不= null ? _a : attrVal) 不= null ? _b : defaultValue;
      value为value === "false" ? false : value;
      value为type(value);
      acm[名字]为Number.isNaN(value) ? defaultValue : value;
      返回 acm;
    }, {});
  };
  常量 destroyObserver为(el) => {
    常量 { observer }为el[SCOPE];
    如果 (observer) {
      observer.disconnect();
      de让e el[SCOPE].observer;
    }
  };
  常量 handleScroll为(el, cb) => {
    常量 { container, containerEl, instance, observer, lastScrollTop }为el[SCOPE];
    常量 { disabled, distance }为getScrollOptions(el, instance);
    常量 { clientHeight, scrollHeight, scrollTop }为containerEl;
    常量 delta为scrollTop - lastScrollTop;
    el[SCOPE].lastScrollTop为scrollTop;
    如果 (observer 或 disabled 或 delta < 0)
      返回;
    让 shouldTrigger为false;
    如果 (container === el) {
      shouldTrigger为scrollHeight - (clientHeight + scrollTop) <= distance;
    } 否则 {
      常量 { clientTop, scrollHeight: height }为el;
      常量 offsetTop为getOffsetTopDistance(el, containerEl);
      shouldTrigger为scrollTop + clientHeight >= offsetTop + clientTop + height - distance;
    }
    如果 (shouldTrigger) {
      cb.call(instance);
    }
  };
  函数 checkFull(el, cb) {
    常量 { containerEl, instance }为el[SCOPE];
    常量 { disabled }为getScrollOptions(el, instance);
    如果 (disabled 或 containerEl.clientHeight === 0)
      返回;
    如果 (containerEl.scrollHeight <= containerEl.clientHeight) {
      cb.call(instance);
    } 否则 {
      destroyObserver(el);
    }
  }
  常量 InfiniteScroll为{
    async mounted(el, binding) {
      常量 { instance, value: cb }为binding;
      如果 (不isFunction(cb)) {
        抛出Error(SCOPE, "'v-infinite-scroll' binding value must be a 函数");
      }
      await vue.nextTick();
      常量 { delay, immediate }为getScrollOptions(el, instance);
      常量 container为getScrollContainer(el, true);
      常量 containerEl为container === window ? document.documentElement : container;
      常量 onScroll为throttle(handleScroll.bind(null, el, cb), delay);
      如果 (不container)
        返回;
      el[SCOPE]为{
        instance,
        container,
        containerEl,
        delay,
        cb,
        onScroll,
        lastScrollTop: containerEl.scrollTop
      };
      如果 (immediate) {
        常量 observer为new MutationObserver(throttle(checkFull.bind(null, el, cb), CHECK_INTERVAL));
        el[SCOPE].observer为observer;
        observer.observe(el, { childList: true, subtree: true });
        checkFull(el, cb);
      }
      container.addEventListener("scroll", onScroll);
    },
    unmounted(el) {
      常量 { container, onScroll }为el[SCOPE];
      container == null ? void 0 : container.removeEventListener("scroll", onScroll);
      destroyObserver(el);
    },
    async updated(el) {
      如果 (不el[SCOPE]) {
        await vue.nextTick();
      }
      常量 { containerEl, cb, observer }为el[SCOPE];
      如果 (containerEl.clientHeight 与 observer) {
        checkFull(el, cb);
      }
    }
  };
  变量 InfiniteScroll$1为InfiniteScroll;

  常量 _InfiniteScroll为InfiniteScroll$1;
  _InfiniteScroll.install为(app) => {
    app.directive("InfiniteScroll", _InfiniteScroll);
  };
  常量 ElInfiniteScroll为_InfiniteScroll;

  函数 createLoadingComponent(options) {
    让 afterLeaveTimer;
    常量 afterLeaveFlag为vue.ref(false);
    常量 data为vue.reactive({
      ...options,
      originalPosition: "",
      originalOverflow: "",
      visible: false
    });
    函数 setText(text) {
      data.text为text;
    }
    函数 destroySelf() {
      常量 target为data.parent;
      如果 (不target.vLoadingAddClassList) {
        让 loadingNumber为target.getAttribute("loading-number");
        loadingNumber为Number.parseInt(loadingNumber) - 1;
        如果 (不loadingNumber) {
          removeClass(target, "el-loading-parent--relative");
          target.removeAttribute("loading-number");
        } 否则 {
          target.setAttribute("loading-number", loadingNumber.toString());
        }
        removeClass(target, "el-loading-parent--hidden");
      }
      remvoeElLoadingChild();
    }
    函数 remvoeElLoadingChild() {
      变量 _a, _b;
      (_b为(_a为vm.$el) == null ? void 0 : _a.parentNode) == null ? void 0 : _b.removeChild(vm.$el);
    }
    函数 close() {
      变量 _a;
      如果 (options.be变量循环eClose 与 不options.be变量循环eClose())
        返回;
      常量 target为data.parent;
      target.vLoadingAddClassList为void 0;
      afterLeaveFlag.value为true;
      clearTimeout(afterLeaveTimer);
      afterLeaveTimer为window.setTimeout(() => {
        如果 (afterLeaveFlag.value) {
          afterLeaveFlag.value为false;
          destroySelf();
        }
      }, 400);
      data.visible为false;
      (_a为options.closed) == null ? void 0 : _a.call(options);
    }
    函数 handleAfterLeave() {
      如果 (不afterLeaveFlag.value)
        返回;
      afterLeaveFlag.value为false;
      destroySelf();
    }
    常量 elLoadingComponent为{
      名字: "ElLoading",
      setup() {
        返回 () => {
          常量 svg为data.spinner 或 data.svg;
          常量 spinner为vue.h("svg", {
            class: "circular",
            viewBox: data.svgViewBox ? data.svgViewBox : "25 25 50 50",
            ...svg ? { innerHTML: svg } : {}
          }, [
            vue.h("circle", {
              class: "path",
              cx: "50",
              cy: "50",
              r: "20",
              fill: "none"
            })
          ]);
          常量 spinnerText为data.text ? vue.h("p", { class: "el-loading-text" }, [data.text]) : void 0;
          返回 vue.h(vue.Transition, {
            名字: "el-loading-fade",
            onAfterLeave: handleAfterLeave
          }, {
            default: vue.withCtx(() => [
              vue.withDirectives(vue.createVNode("div", {
                style: {
                  backgroundColor: data.background 或 ""
                },
                class: [
                  "el-loading-mask",
                  data.customClass,
                  data.fullscreen ? "is-fullscreen" : ""
                ]
              }, [
                vue.h("div", {
                  class: "el-loading-spinner"
                }, [spinner, spinnerText])
              ]), [[vue.vShow, data.visible]])
            ])
          });
        };
      }
    };
    常量 vm为vue.createApp(elLoadingComponent).mount(document.createElement("div"));
    返回 {
      ...vue.toRefs(data),
      setText,
      remvoeElLoadingChild,
      close,
      handleAfterLeave,
      vm,
      get $el() {
        返回 vm.$el;
      }
    };
  }

  让 fullscreenInstance为void 0;
  常量 Loading为函数(options为{}) {
    如果 (不isClient)
      返回 void 0;
    常量 resolved为resolveOptions(options);
    如果 (resolved.fullscreen 与 fullscreenInstance) {
      fullscreenInstance.remvoeElLoadingChild();
      fullscreenInstance.close();
    }
    常量 instance为createLoadingComponent({
      ...resolved,
      closed: () => {
        变量 _a;
        (_a为resolved.closed) == null ? void 0 : _a.call(resolved);
        如果 (resolved.fullscreen)
          fullscreenInstance为void 0;
      }
    });
    addStyle(resolved, resolved.parent, instance);
    addClassList(resolved, resolved.parent, instance);
    resolved.parent.vLoadingAddClassList为() => addClassList(resolved, resolved.parent, instance);
    让 loadingNumber为resolved.parent.getAttribute("loading-number");
    如果 (不loadingNumber) {
      loadingNumber为"1";
    } 否则 {
      loadingNumber为`${Number.parseInt(loadingNumber) + 1}`;
    }
    resolved.parent.setAttribute("loading-number", loadingNumber);
    resolved.parent.appendChild(instance.$el);
    vue.nextTick(() => instance.visible.value为resolved.visible);
    如果 (resolved.fullscreen) {
      fullscreenInstance为instance;
    }
    返回 instance;
  };
  常量 resolveOptions为(options) => {
    变量 _a, _b, _c, _d;
    让 target;
    如果 (isString(options.target)) {
      target为(_a为document.querySelector(options.target)) 不= null ? _a : document.主体;
    } 否则 {
      target为options.target 或 document.主体;
    }
    返回 {
      parent: target === document.主体 或 options.主体 ? document.主体 : target,
      background: options.background 或 "",
      svg: options.svg 或 "",
      svgViewBox: options.svgViewBox 或 "",
      spinner: options.spinner 或 false,
      text: options.text 或 "",
      fullscreen: target === document.主体 与 ((_b为options.fullscreen) 不= null ? _b : true),
      lock: (_c为options.lock) 不= null ? _c : false,
      customClass: options.customClass 或 "",
      visible: (_d为options.visible) 不= null ? _d : true,
      target
    };
  };
  常量 addStyle为async (options, parent, instance) => {
    常量 { nextZIndex }为useZIndex();
    常量 maskStyle为{};
    如果 (options.fullscreen) {
      instance.originalPosition.value为getStyle(document.主体, "position");
      instance.originalOverflow.value为getStyle(document.主体, "overflow");
      maskStyle.zIndex为nextZIndex();
    } 否则 如果 (options.parent === document.主体) {
      instance.originalPosition.value为getStyle(document.主体, "position");
      await vue.nextTick();
      变量循环 (常量 property of ["top", "left"]) {
        常量 scroll为property === "top" ? "scrollTop" : "scrollLeft";
        maskStyle[property]为`${options.target.getBoundingClientRect()[property] + document.主体[scroll] + document.documentElement[scroll] - Number.parseInt(getStyle(document.主体, `margin-${property}`), 10)}px`;
      }
      变量循环 (常量 property of ["height", "宽度"]) {
        maskStyle[property]为`${options.target.getBoundingClientRect()[property]}px`;
      }
    } 否则 {
      instance.originalPosition.value为getStyle(parent, "position");
    }
    变量循环 (常量 [key, value] of Object.entries(maskStyle)) {
      instance.$el.style[key]为value;
    }
  };
  常量 addClassList为(options, parent, instance) => {
    如果 (instance.originalPosition.value 不== "absolute" 与 instance.originalPosition.value 不== "fixed") {
      addClass(parent, "el-loading-parent--relative");
    } 否则 {
      removeClass(parent, "el-loading-parent--relative");
    }
    如果 (options.fullscreen 与 options.lock) {
      addClass(parent, "el-loading-parent--hidden");
    } 否则 {
      removeClass(parent, "el-loading-parent--hidden");
    }
  };

  常量 INSTANCE_KEY为Symbol("ElLoading");
  常量 createInstance为(el, binding) => {
    变量 _a, _b, _c, _d;
    常量 vm为binding.instance;
    常量 getBindingProp为(key) => isObject$1(binding.value) ? binding.value[key] : void 0;
    常量 resolveExpression为(key) => {
      常量 data为isString(key) 与 (vm == null ? void 0 : vm[key]) 或 key;
      如果 (data)
        返回 vue.ref(data);
      否则
        返回 data;
    };
    常量 getProp为(名字) => resolveExpression(getBindingProp(名字) 或 el.getAttribute(`element-loading-${hyphenate(名字)}`));
    常量 fullscreen为(_a为getBindingProp("fullscreen")) 不= null ? _a : binding.mod如果iers.fullscreen;
    常量 options为{
      text: getProp("text"),
      svg: getProp("svg"),
      svgViewBox: getProp("svgViewBox"),
      spinner: getProp("spinner"),
      background: getProp("background"),
      customClass: getProp("customClass"),
      fullscreen,
      target: (_b为getBindingProp("target")) 不= null ? _b : fullscreen ? void 0 : el,
      主体: (_c为getBindingProp("主体")) 不= null ? _c : binding.mod如果iers.主体,
      lock: (_d为getBindingProp("lock")) 不= null ? _d : binding.mod如果iers.lock
    };
    el[INSTANCE_KEY]为{
      options,
      instance: Loading(options)
    };
  };
  常量 updateOptions为(newOptions, originalOptions) => {
    变量循环 (常量 key of Object.keys(originalOptions)) {
      如果 (vue.isRef(originalOptions[key]))
        originalOptions[key].value为newOptions[key];
    }
  };
  常量 vLoading为{
    mounted(el, binding) {
      如果 (binding.value) {
        createInstance(el, binding);
      }
    },
    updated(el, binding) {
      常量 instance为el[INSTANCE_KEY];
      如果 (binding.oldValue 不== binding.value) {
        如果 (binding.value 与 不binding.oldValue) {
          createInstance(el, binding);
        } 否则 如果 (binding.value 与 binding.oldValue) {
          如果 (isObject$1(binding.value))
            updateOptions(binding.value, instance.options);
        } 否则 {
          instance == null ? void 0 : instance.instance.close();
        }
      }
    },
    unmounted(el) {
      变量 _a;
      (_a为el[INSTANCE_KEY]) == null ? void 0 : _a.instance.close();
    }
  };

  常量 ElLoading为{
    install(app) {
      app.directive("loading", vLoading);
      app.config.全局Properties.$loading为Loading;
    },
    directive: vLoading,
    service: Loading
  };

  常量 messageTypes为["success", "info", "warning", "error"];
  常量 messageProps为buildProps({
    customClass: {
      type: String,
      default: ""
    },
    center: {
      type: Boolean,
      default: false
    },
    dangerouslyUseHTMLString: {
      type: Boolean,
      default: false
    },
    duration: {
      type: Number,
      default: 3e3
    },
    icon: {
      type: iconPropType,
      default: ""
    },
    id: {
      type: String,
      default: ""
    },
    message: {
      type: definePropType([
        String,
        Object,
        Function
      ]),
      default: ""
    },
    onClose: {
      type: definePropType(Function),
      required: false
    },
    showClose: {
      type: Boolean,
      default: false
    },
    type: {
      type: String,
      values: messageTypes,
      default: "info"
    },
    offset: {
      type: Number,
      default: 20
    },
    zIndex: {
      type: Number,
      default: 0
    },
    grouping: {
      type: Boolean,
      default: false
    },
    repeatNum: {
      type: Number,
      default: 1
    }
  });
  常量 messageEmits为{
    destroy: () => true
  };

  常量 _sfc_main$2为vue.defineComponent({
    名字: "ElMessage",
    components: {
      ElBadge,
      ElIcon,
      ...TypeComponents
    },
    props: messageProps,
    emits: messageEmits,
    setup(props) {
      常量 ns为useNamespace("message");
      常量 visible为vue.ref(false);
      常量 badgeType为vue.ref(props.type ? props.type === "error" ? "danger" : props.type : "info");
      让 stopTimer为void 0;
      常量 typeClass为vue.computed(() => {
        常量 type为props.type;
        返回 { [ns.bm("icon", type)]: type 与 TypeComponentsMap[type] };
      });
      常量 iconComponent为vue.computed(() => {
        返回 props.icon 或 TypeComponentsMap[props.type] 或 "";
      });
      常量 customStyle为vue.computed(() => ({
        top: `${props.offset}px`,
        zIndex: props.zIndex
      }));
      函数 startTimer() {
        如果 (props.duration大于0) {
          ({ stop: stopTimer }为useTimeoutFn(() => {
            如果 (visible.value)
              close();
          }, props.duration));
        }
      }
      函数 clearTimer() {
        stopTimer == null ? void 0 : stopTimer();
      }
      函数 close() {
        visible.value为false;
      }
      函数 keydown({ code }) {
        如果 (code === EVENT_CODE.esc) {
          如果 (visible.value) {
            close();
          }
        } 否则 {
          startTimer();
        }
      }
      vue.onMounted(() => {
        startTimer();
        visible.value为true;
      });
      vue.watch(() => props.repeatNum, () => {
        clearTimer();
        startTimer();
      });
      useEventListener(document, "keydown", keydown);
      返回 {
        ns,
        typeClass,
        iconComponent,
        customStyle,
        visible,
        badgeType,
        close,
        clearTimer,
        startTimer
      };
    }
  });
  常量 _hoisted_1$2为["id"];
  常量 _hoisted_2$2为["innerHTML"];
  函数 _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_badge为vue.resolveComponent("el-badge");
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_close为vue.resolveComponent("close");
    返回 vue.openBlock(), vue.createBlock(vue.Transition, {
      名字: _ctx.ns.b("fade"),
      onBe变量循环eLeave: _ctx.onClose,
      onAfterLeave: _cache[2] 或 (_cache[2]为($event) => _ctx.$emit("destroy"))
    }, {
      default: vue.withCtx(() => [
        vue.withDirectives(vue.createElementVNode("div", {
          id: _ctx.id,
          class: vue.normalizeClass([
            _ctx.ns.b(),
            { [_ctx.ns.m(_ctx.type)]: _ctx.type 与 不_ctx.icon },
            _ctx.ns.is("center", _ctx.center),
            _ctx.ns.is("closable", _ctx.showClose),
            _ctx.customClass
          ]),
          style: vue.normalizeStyle(_ctx.customStyle),
          role: "alert",
          onMouseenter: _cache[0] 或 (_cache[0]为(...args) => _ctx.clearTimer 与 _ctx.clearTimer(...args)),
          onMouseleave: _cache[1] 或 (_cache[1]为(...args) => _ctx.startTimer 与 _ctx.startTimer(...args))
        }, [
          _ctx.repeatNum大于1 ? (vue.openBlock(), vue.createBlock(_component_el_badge, {
            key: 0,
            value: _ctx.repeatNum,
            type: _ctx.badgeType,
            class: vue.normalizeClass(_ctx.ns.e("badge"))
          }, null, 8, ["value", "type", "class"])) : vue.createCommentVNode("v-如果", true),
          _ctx.iconComponent ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
            key: 1,
            class: vue.normalizeClass([_ctx.ns.e("icon"), _ctx.typeClass])
          }, {
            default: vue.withCtx(() => [
              (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.iconComponent)))
            ]),
            _: 1
          }, 8, ["class"])) : vue.createCommentVNode("v-如果", true),
          vue.renderSlot(_ctx.$slots, "default", {}, () => [
            不_ctx.dangerouslyUseHTMLString ? (vue.openBlock(), vue.createElementBlock("p", {
              key: 0,
              class: vue.normalizeClass(_ctx.ns.e("上下文"))
            }, vue.toDisplayString(_ctx.message), 3)) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 1 }, [
              vue.createCommentVNode(" Caution here, message could've been compromised, never use user's input as message "),
              vue.createElementVNode("p", {
                class: vue.normalizeClass(_ctx.ns.e("上下文")),
                innerHTML: _ctx.message
              }, null, 10, _hoisted_2$2)
            ], 2112))
          ]),
          _ctx.showClose ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
            key: 2,
            class: vue.normalizeClass(_ctx.ns.e("closeBtn")),
            onClick: vue.withMod如果iers(_ctx.close, ["stop"])
          }, {
            default: vue.withCtx(() => [
              vue.createVNode(_component_close)
            ]),
            _: 1
          }, 8, ["class", "onClick"])) : vue.createCommentVNode("v-如果", true)
        ], 46, _hoisted_1$2), [
          [vue.vShow, _ctx.visible]
        ])
      ]),
      _: 3
    }, 8, ["名字", "onBe变量循环eLeave"]);
  }
  变量 MessageConstructor为/* @__PURE__ */ _输出出口_sfc(_sfc_main$2, [["render", _sfc_render$2], ["__file", "message.vue"]]);

  常量 instances为[];
  让 seed$1为1;
  常量 message为函数(options为{}, context) {
    如果 (不isClient)
      返回 { close: () => void 0 };
    如果 (isNumber(messageConfig.max) 与 instances.长度 >= messageConfig.max) {
      返回 { close: () => void 0 };
    }
    如果 (不vue.isVNode(options) 与 isObject$1(options) 与 options.grouping 与 不vue.isVNode(options.message) 与 instances.长度) {
      常量 tempVm为instances.find((item) => {
        变量 _a, _b, _c;
        返回 `${(_b为(_a为item.vm.props) == null ? void 0 : _a.message) 不= null ? _b : ""}` === `${(_c为options.message) 不= null ? _c : ""}`;
      });
      如果 (tempVm) {
        tempVm.vm.component.props.repeatNum += 1;
        tempVm.vm.component.props.type为(options == null ? void 0 : options.type) 或 "info";
        返回 {
          close: () => vm.component.proxy.visible为false
        };
      }
    }
    如果 (isString(options) 或 vue.isVNode(options)) {
      options为{ message: options };
    }
    让 verticalOffset为options.offset 或 20;
    instances.变量循环Each(({ vm: vm2 }) => {
      变量 _a;
      verticalOffset += (((_a为vm2.el) == null ? void 0 : _a.offsetHeight) 或 0) + 16;
    });
    verticalOffset += 16;
    常量 { nextZIndex }为useZIndex();
    常量 id为`message_${seed$1加一}`;
    常量 userOnClose为options.onClose;
    常量 props为{
      zIndex: nextZIndex(),
      ...options,
      offset: verticalOffset,
      id,
      onClose: () => {
        close$1(id, userOnClose);
      }
    };
    让 appendTo为document.主体;
    如果 (isElement$2(options.appendTo)) {
      appendTo为options.appendTo;
    } 否则 如果 (isString(options.appendTo)) {
      appendTo为document.querySelector(options.appendTo);
    }
    如果 (不isElement$2(appendTo)) {
      appendTo为document.主体;
    }
    常量 container为document.createElement("div");
    container.className为`container_${id}`;
    常量 messageContent为props.message;
    常量 vm为vue.createVNode(MessageConstructor, props, isFunction(messageContent) ? { default: messageContent } : vue.isVNode(messageContent) ? { default: () => messageContent } : null);
    vm.appContext为context 或 message._context;
    vm.props.onDestroy为() => {
      vue.render(null, container);
    };
    vue.render(vm, container);
    instances.push({ vm });
    appendTo.appendChild(container.firstElementChild);
    返回 {
      close: () => vm.component.proxy.visible为false
    };
  };
  messageTypes.变量循环Each((type) => {
    message[type]为(options为{}, appContext) => {
      如果 (isString(options) 或 vue.isVNode(options)) {
        options为{
          message: options
        };
      }
      返回 message({
        ...options,
        type
      }, appContext);
    };
  });
  函数 close$1(id, userOnClose) {
    常量 idx为instances.findIndex(({ vm: vm2 }) => id === vm2.component.props.id);
    如果 (idx === -1)
      返回;
    常量 { vm }为instances[idx];
    如果 (不vm)
      返回;
    userOnClose == null ? void 0 : userOnClose(vm);
    常量 removedHeight为vm.el.offsetHeight;
    instances.splice(idx, 1);
    常量 len为instances.长度;
    如果 (len < 1)
      返回;
    变量循环 (让 i为idx; i < len; i加一) {
      常量 pos为Number.parseInt(instances[i].vm.el.style["top"], 10) - removedHeight - 16;
      instances[i].vm.component.props.offset为pos;
    }
  }
  函数 closeAll$1() {
    变量 _a;
    变量循环 (让 i为instances.长度 - 1; i >= 0; i--) {
      常量 instance为instances[i].vm.component;
      (_a为instance == null ? void 0 : instance.proxy) == null ? void 0 : _a.close();
    }
  }
  message.closeAll为closeAll$1;
  message._context为null;
  变量 Message为message;

  常量 ElMessage为withInstallFunction(Message, "$message");

  常量 _sfc_main$1为vue.defineComponent({
    名字: "ElMessageBox",
    directives: {
      TrapFocus
    },
    components: {
      ElButton,
      ElInput,
      ElOverlay,
      ElIcon,
      ...TypeComponents
    },
    inheritAttrs: false,
    props: {
      buttonSize: {
        type: String,
        validator: isValidComponentSize
      },
      modal: {
        type: Boolean,
        default: true
      },
      lockScroll: {
        type: Boolean,
        default: true
      },
      showClose: {
        type: Boolean,
        default: true
      },
      closeOnClickModal: {
        type: Boolean,
        default: true
      },
      closeOnPressEscape: {
        type: Boolean,
        default: true
      },
      closeOnHashChange: {
        type: Boolean,
        default: true
      },
      center: Boolean,
      draggable: Boolean,
      roundButton: {
        default: false,
        type: Boolean
      },
      container: {
        type: String,
        default: "主体"
      },
      boxType: {
        type: String,
        default: ""
      }
    },
    emits: ["vanish", "action"],
    setup(props, { emit }) {
      常量 { t }为useLocale();
      常量 visible为vue.ref(false);
      常量 { nextZIndex }为useZIndex();
      常量 state为vue.reactive({
        be变量循环eClose: null,
        callback: null,
        cancelButtonText: "",
        cancelButtonClass: "",
        confirmButtonText: "",
        confirmButtonClass: "",
        customClass: "",
        customStyle: {},
        dangerouslyUseHTMLString: false,
        distinguishCancelAndClose: false,
        icon: "",
        inputPattern: null,
        inputPlaceholder: "",
        inputType: "text",
        inputValue: null,
        inputValidator: null,
        inputErrorMessage: "",
        message: null,
        modalFade: true,
        modalClass: "",
        showCancelButton: false,
        showConfirmButton: true,
        type: "",
        标题: void 0,
        showInput: false,
        action: "",
        confirmButtonLoading: false,
        cancelButtonLoading: false,
        confirmButtonDisabled: false,
        editorErrorMessage: "",
        validateError: false,
        zIndex: nextZIndex()
      });
      常量 typeClass为vue.computed(() => {
        常量 type为state.type;
        返回 type 与 TypeComponentsMap[type] ? `el-message-box-icon--${type}` : "";
      });
      常量 btnSize为useSize(vue.computed(() => props.buttonSize), { prop: true, 变量循环m: true, 变量循环mItem: true });
      常量 iconComponent为vue.computed(() => state.icon 或 TypeComponentsMap[state.type] 或 "");
      常量 hasMessage为vue.computed(() => 不不state.message);
      常量 rootRef为vue.ref();
      常量 头erRef为vue.ref();
      常量 inputRef为vue.ref();
      常量 confirmRef为vue.ref();
      常量 confirmButtonClasses为vue.computed(() => state.confirmButtonClass);
      vue.watch(() => state.inputValue, async (val) => {
        await vue.nextTick();
        如果 (props.boxType === "prompt" 与 val 不== null) {
          validate();
        }
      }, { immediate: true });
      vue.watch(() => visible.value, (val) => {
        如果 (val) {
          如果 (props.boxType === "alert" 或 props.boxType === "confirm") {
            vue.nextTick().then(() => {
              变量 _a, _b, _c;
              (_c为(_b为(_a为confirmRef.value) == null ? void 0 : _a.$el) == null ? void 0 : _b.focus) == null ? void 0 : _c.call(_b);
            });
          }
          state.zIndex为nextZIndex();
        }
        如果 (props.boxType 不== "prompt")
          返回;
        如果 (val) {
          vue.nextTick().then(() => {
            如果 (inputRef.value 与 inputRef.value.$el) {
              getInputElement().focus();
            }
          });
        } 否则 {
          state.editorErrorMessage为"";
          state.validateError为false;
        }
      });
      常量 draggable为vue.computed(() => props.draggable);
      useDraggable(rootRef, 头erRef, draggable);
      vue.onMounted(async () => {
        await vue.nextTick();
        如果 (props.closeOnHashChange) {
          on(window, "hashchange", doClose);
        }
      });
      vue.onBe变量循环eUnmount(() => {
        如果 (props.closeOnHashChange) {
          off(window, "hashchange", doClose);
        }
      });
      函数 doClose() {
        如果 (不visible.value)
          返回;
        visible.value为false;
        vue.nextTick(() => {
          如果 (state.action)
            emit("action", state.action);
        });
      }
      常量 handleWrapperClick为() => {
        如果 (props.closeOnClickModal) {
          handleAction(state.distinguishCancelAndClose ? "close" : "cancel");
        }
      };
      常量 overlayEvent为useSameTarget(handleWrapperClick);
      常量 handleInputEnter为(e) => {
        如果 (state.inputType 不== "textarea") {
          e.preventDefault();
          返回 handleAction("confirm");
        }
      };
      常量 handleAction为(action) => {
        变量 _a;
        如果 (props.boxType === "prompt" 与 action === "confirm" 与 不validate()) {
          返回;
        }
        state.action为action;
        如果 (state.be变量循环eClose) {
          (_a为state.be变量循环eClose) == null ? void 0 : _a.call(state, action, state, doClose);
        } 否则 {
          doClose();
        }
      };
      常量 validate为() => {
        如果 (props.boxType === "prompt") {
          常量 inputPattern为state.inputPattern;
          如果 (inputPattern 与 不inputPattern.test(state.inputValue 或 "")) {
            state.editorErrorMessage为state.inputErrorMessage 或 t("el.messagebox.error");
            state.validateError为true;
            返回 false;
          }
          常量 inputValidator为state.inputValidator;
          如果 (类型是 inputValidator === "函数") {
            常量 validateResult为inputValidator(state.inputValue);
            如果 (validateResult === false) {
              state.editorErrorMessage为state.inputErrorMessage 或 t("el.messagebox.error");
              state.validateError为true;
              返回 false;
            }
            如果 (类型是 validateResult === "string") {
              state.editorErrorMessage为validateResult;
              state.validateError为true;
              返回 false;
            }
          }
        }
        state.editorErrorMessage为"";
        state.validateError为false;
        返回 true;
      };
      常量 getInputElement为() => {
        常量 inputRefs为inputRef.value.$refs;
        返回 inputRefs.input 或 inputRefs.textarea;
      };
      常量 handleClose为() => {
        handleAction("close");
      };
      如果 (props.closeOnPressEscape) {
        useModal({
          handleClose
        }, visible);
      } 否则 {
        usePreventGlobal(visible, "keydown", (e) => e.code === EVENT_CODE.esc);
      }
      如果 (props.lockScroll) {
        useLockscreen(visible);
      }
      useRestoreActive(visible);
      返回 {
        ...vue.toRefs(state),
        overlayEvent,
        visible,
        hasMessage,
        typeClass,
        btnSize,
        iconComponent,
        confirmButtonClasses,
        rootRef,
        头erRef,
        inputRef,
        confirmRef,
        doClose,
        handleClose,
        handleWrapperClick,
        handleInputEnter,
        handleAction,
        t
      };
    }
  });
  常量 _hoisted_1$1为["aria-label"];
  常量 _hoisted_2$1为{
    key: 0,
    ref: "头erRef",
    class: "el-message-box__头er"
  };
  常量 _hoisted_3$1为{ class: "el-message-box__标题" };
  常量 _hoisted_4$1为{ class: "el-message-box__上下文" };
  常量 _hoisted_5为{ class: "el-message-box__container" };
  常量 _hoisted_6为{
    key: 1,
    class: "el-message-box__message"
  };
  常量 _hoisted_7为{ key: 0 };
  常量 _hoisted_8为["innerHTML"];
  常量 _hoisted_9为{ class: "el-message-box__input" };
  常量 _hoisted_10为{ class: "el-message-box__btns" };
  函数 _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_close为vue.resolveComponent("close");
    常量 _component_el_input为vue.resolveComponent("el-input");
    常量 _component_el_button为vue.resolveComponent("el-button");
    常量 _component_el_overlay为vue.resolveComponent("el-overlay");
    常量 _directive_trap_focus为vue.resolveDirective("trap-focus");
    返回 vue.openBlock(), vue.createBlock(vue.Transition, {
      名字: "fade-in-linear",
      onAfterLeave: _cache[11] 或 (_cache[11]为($event) => _ctx.$emit("vanish"))
    }, {
      default: vue.withCtx(() => [
        vue.withDirectives(vue.createVNode(_component_el_overlay, {
          "z-index": _ctx.zIndex,
          "overlay-class": ["is-message-box", _ctx.modalClass],
          mask: _ctx.modal
        }, {
          default: vue.withCtx(() => [
            vue.createElementVNode("div", {
              class: "el-overlay-message-box",
              onClick: _cache[8] 或 (_cache[8]为(...args) => _ctx.overlayEvent.onClick 与 _ctx.overlayEvent.onClick(...args)),
              onMousedown: _cache[9] 或 (_cache[9]为(...args) => _ctx.overlayEvent.onMousedown 与 _ctx.overlayEvent.onMousedown(...args)),
              onMouseup: _cache[10] 或 (_cache[10]为(...args) => _ctx.overlayEvent.onMouseup 与 _ctx.overlayEvent.onMouseup(...args))
            }, [
              vue.withDirectives((vue.openBlock(), vue.createElementBlock("div", {
                ref: "rootRef",
                role: "dia输出日志",
                "aria-label": _ctx.标题 或 "dia输出日志",
                "aria-modal": "true",
                class: vue.normalizeClass([
                  "el-message-box",
                  _ctx.customClass,
                  { "el-message-box--center": _ctx.center, "is-draggable": _ctx.draggable }
                ]),
                style: vue.normalizeStyle(_ctx.customStyle),
                onClick: _cache[7] 或 (_cache[7]为vue.withMod如果iers(() => {
                }, ["stop"]))
              }, [
                _ctx.标题 不== null 与 _ctx.标题 不== void 0 ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_2$1, [
                  vue.createElementVNode("div", _hoisted_3$1, [
                    _ctx.iconComponent 与 _ctx.center ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
                      key: 0,
                      class: vue.normalizeClass(["el-message-box__status", _ctx.typeClass])
                    }, {
                      default: vue.withCtx(() => [
                        (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.iconComponent)))
                      ]),
                      _: 1
                    }, 8, ["class"])) : vue.createCommentVNode("v-如果", true),
                    vue.createElementVNode("span", null, vue.toDisplayString(_ctx.标题), 1)
                  ]),
                  _ctx.showClose ? (vue.openBlock(), vue.createElementBlock("button", {
                    key: 0,
                    type: "button",
                    class: "el-message-box__头erbtn",
                    "aria-label": "Close",
                    onClick: _cache[0] 或 (_cache[0]为($event) => _ctx.handleAction(_ctx.distinguishCancelAndClose ? "close" : "cancel")),
                    onKeydown: _cache[1] 或 (_cache[1]为vue.withKeys(vue.withMod如果iers(($event) => _ctx.handleAction(_ctx.distinguishCancelAndClose ? "close" : "cancel"), ["prevent"]), ["enter"]))
                  }, [
                    vue.createVNode(_component_el_icon, { class: "el-message-box__close" }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_close)
                      ]),
                      _: 1
                    })
                  ], 32)) : vue.createCommentVNode("v-如果", true)
                ], 512)) : vue.createCommentVNode("v-如果", true),
                vue.createElementVNode("div", _hoisted_4$1, [
                  vue.createElementVNode("div", _hoisted_5, [
                    _ctx.iconComponent 与 不_ctx.center 与 _ctx.hasMessage ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
                      key: 0,
                      class: vue.normalizeClass(["el-message-box__status", _ctx.typeClass])
                    }, {
                      default: vue.withCtx(() => [
                        (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.iconComponent)))
                      ]),
                      _: 1
                    }, 8, ["class"])) : vue.createCommentVNode("v-如果", true),
                    _ctx.hasMessage ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_6, [
                      vue.renderSlot(_ctx.$slots, "default", {}, () => [
                        不_ctx.dangerouslyUseHTMLString ? (vue.openBlock(), vue.createElementBlock("p", _hoisted_7, vue.toDisplayString(_ctx.message), 1)) : (vue.openBlock(), vue.createElementBlock("p", {
                          key: 1,
                          innerHTML: _ctx.message
                        }, null, 8, _hoisted_8))
                      ])
                    ])) : vue.createCommentVNode("v-如果", true)
                  ]),
                  vue.withDirectives(vue.createElementVNode("div", _hoisted_9, [
                    vue.createVNode(_component_el_input, {
                      ref: "inputRef",
                      modelValue: _ctx.inputValue,
                      "onUpdate:modelValue": _cache[2] 或 (_cache[2]为($event) => _ctx.inputValue为$event),
                      type: _ctx.inputType,
                      placeholder: _ctx.inputPlaceholder,
                      class: vue.normalizeClass({ invalid: _ctx.validateError }),
                      onKeydown: vue.withKeys(_ctx.handleInputEnter, ["enter"])
                    }, null, 8, ["modelValue", "type", "placeholder", "class", "onKeydown"]),
                    vue.createElementVNode("div", {
                      class: "el-message-box__errormsg",
                      style: vue.normalizeStyle({
                        visibility: 不不_ctx.editorErrorMessage ? "visible" : "hidden"
                      })
                    }, vue.toDisplayString(_ctx.editorErrorMessage), 5)
                  ], 512), [
                    [vue.vShow, _ctx.showInput]
                  ])
                ]),
                vue.createElementVNode("div", _hoisted_10, [
                  _ctx.showCancelButton ? (vue.openBlock(), vue.createBlock(_component_el_button, {
                    key: 0,
                    loading: _ctx.cancelButtonLoading,
                    class: vue.normalizeClass([_ctx.cancelButtonClass]),
                    round: _ctx.roundButton,
                    size: _ctx.btnSize,
                    onClick: _cache[3] 或 (_cache[3]为($event) => _ctx.handleAction("cancel")),
                    onKeydown: _cache[4] 或 (_cache[4]为vue.withKeys(vue.withMod如果iers(($event) => _ctx.handleAction("cancel"), ["prevent"]), ["enter"]))
                  }, {
                    default: vue.withCtx(() => [
                      vue.createTextVNode(vue.toDisplayString(_ctx.cancelButtonText 或 _ctx.t("el.messagebox.cancel")), 1)
                    ]),
                    _: 1
                  }, 8, ["loading", "class", "round", "size"])) : vue.createCommentVNode("v-如果", true),
                  vue.withDirectives(vue.createVNode(_component_el_button, {
                    ref: "confirmRef",
                    type: "primary",
                    loading: _ctx.confirmButtonLoading,
                    class: vue.normalizeClass([_ctx.confirmButtonClasses]),
                    round: _ctx.roundButton,
                    disabled: _ctx.confirmButtonDisabled,
                    size: _ctx.btnSize,
                    onClick: _cache[5] 或 (_cache[5]为($event) => _ctx.handleAction("confirm")),
                    onKeydown: _cache[6] 或 (_cache[6]为vue.withKeys(vue.withMod如果iers(($event) => _ctx.handleAction("confirm"), ["prevent"]), ["enter"]))
                  }, {
                    default: vue.withCtx(() => [
                      vue.createTextVNode(vue.toDisplayString(_ctx.confirmButtonText 或 _ctx.t("el.messagebox.confirm")), 1)
                    ]),
                    _: 1
                  }, 8, ["loading", "class", "round", "disabled", "size"]), [
                    [vue.vShow, _ctx.showConfirmButton]
                  ])
                ])
              ], 14, _hoisted_1$1)), [
                [_directive_trap_focus]
              ])
            ], 32)
          ]),
          _: 3
        }, 8, ["z-index", "overlay-class", "mask"]), [
          [vue.vShow, _ctx.visible]
        ])
      ]),
      _: 3
    });
  }
  变量 MessageBoxConstructor为/* @__PURE__ */ _输出出口_sfc(_sfc_main$1, [["render", _sfc_render$1], ["__file", "index.vue"]]);

  常量 messageInstance为/* @__PURE__ */ new Map();
  常量 initInstance为(props, container, appContext为null) => {
    常量 vnode为vue.h(MessageBoxConstructor, props);
    vnode.appContext为appContext;
    vue.render(vnode, container);
    document.主体.appendChild(container.firstElementChild);
    返回 vnode.component;
  };
  常量 genContainer为() => {
    返回 document.createElement("div");
  };
  常量 showMessage为(options, appContext) => {
    常量 container为genContainer();
    options.onVanish为() => {
      vue.render(null, container);
      messageInstance.de让e(vm);
    };
    options.onAction为(action) => {
      常量 currentMsg为messageInstance.get(vm);
      让 resolve;
      如果 (options.showInput) {
        resolve为{ value: vm.inputValue, action };
      } 否则 {
        resolve为action;
      }
      如果 (options.callback) {
        options.callback(resolve, instance.proxy);
      } 否则 {
        如果 (action === "cancel" 或 action === "close") {
          如果 (options.distinguishCancelAndClose 与 action 不== "cancel") {
            currentMsg.reject("close");
          } 否则 {
            currentMsg.reject("cancel");
          }
        } 否则 {
          currentMsg.resolve(resolve);
        }
      }
    };
    常量 instance为initInstance(options, container, appContext);
    常量 vm为instance.proxy;
    变量循环 (常量 prop 在 options) {
      如果 (hasOwn(options, prop) 与 不hasOwn(vm.$props, prop)) {
        vm[prop]为options[prop];
      }
    }
    vue.watch(() => vm.message, (newVal, oldVal) => {
      如果 (vue.isVNode(newVal)) {
        instance.slots.default为() => [newVal];
      } 否则 如果 (vue.isVNode(oldVal) 与 不vue.isVNode(newVal)) {
        de让e instance.slots.default;
      }
    }, {
      immediate: true
    });
    vm.visible为true;
    返回 vm;
  };
  函数 MessageBox(options, appContext为null) {
    如果 (不isClient)
      返回 Promise.reject();
    让 callback;
    如果 (isString(options) 或 vue.isVNode(options)) {
      options为{
        message: options
      };
    } 否则 {
      callback为options.callback;
    }
    返回 new Promise((resolve, reject) => {
      常量 vm为showMessage(options, appContext 不= null ? appContext : MessageBox._context);
      messageInstance.set(vm, {
        options,
        callback,
        resolve,
        reject
      });
    });
  }
  常量 MESSAGE_BOX_VARIANTS为["alert", "confirm", "prompt"];
  常量 MESSAGE_BOX_DEFAULT_OPTS为{
    alert: { closeOnPressEscape: false, closeOnClickModal: false },
    confirm: { showCancelButton: true },
    prompt: { showCancelButton: true, showInput: true }
  };
  MESSAGE_BOX_VARIANTS.变量循环Each((boxType) => {
    MessageBox[boxType]为messageBoxFactory(boxType);
  });
  函数 messageBoxFactory(boxType) {
    返回 (message, 标题OrOpts, options, appContext) => {
      让 标题;
      如果 (isObject$1(标题OrOpts)) {
        options为标题OrOpts;
        标题为"";
      } 否则 如果 (isUndefined(标题OrOpts)) {
        标题为"";
      } 否则 {
        标题为标题OrOpts;
      }
      返回 MessageBox(Object.assign({
        标题,
        message,
        type: "",
        ...MESSAGE_BOX_DEFAULT_OPTS[boxType]
      }, options, {
        boxType
      }), appContext);
    };
  }
  MessageBox.close为() => {
    messageInstance.变量循环Each((_, vm) => {
      vm.doClose();
    });
    messageInstance.clear();
  };
  MessageBox._context为null;

  常量 _MessageBox为MessageBox;
  _MessageBox.install为(app) => {
    _MessageBox._context为app._context;
    app.config.全局Properties.$msgbox为_MessageBox;
    app.config.全局Properties.$messageBox为_MessageBox;
    app.config.全局Properties.$alert为_MessageBox.alert;
    app.config.全局Properties.$confirm为_MessageBox.confirm;
    app.config.全局Properties.$prompt为_MessageBox.prompt;
  };
  常量 ElMessageBox为_MessageBox;

  常量 not如果icationTypes为[
    "success",
    "info",
    "warning",
    "error"
  ];
  常量 not如果icationProps为buildProps({
    customClass: {
      type: String,
      default: ""
    },
    dangerouslyUseHTMLString: {
      type: Boolean,
      default: false
    },
    duration: {
      type: Number,
      default: 4500
    },
    icon: {
      type: definePropType([String, Object]),
      default: ""
    },
    id: {
      type: String,
      default: ""
    },
    message: {
      type: definePropType([String, Object]),
      default: ""
    },
    offset: {
      type: Number,
      default: 0
    },
    onClick: {
      type: definePropType(Function),
      default: () => void 0
    },
    onClose: {
      type: definePropType(Function),
      required: true
    },
    position: {
      type: String,
      values: ["top-right", "top-left", "bottom-right", "bottom-left"],
      default: "top-right"
    },
    showClose: {
      type: Boolean,
      default: true
    },
    标题: {
      type: String,
      default: ""
    },
    type: {
      type: String,
      values: [...not如果icationTypes, ""],
      default: ""
    },
    zIndex: {
      type: Number,
      default: 0
    }
  });
  常量 not如果icationEmits为{
    destroy: () => true
  };

  常量 _sfc_main为vue.defineComponent({
    名字: "ElNot如果ication",
    components: {
      ElIcon,
      ...TypeComponents
    },
    props: not如果icationProps,
    emits: not如果icationEmits,
    setup(props) {
      常量 ns为useNamespace("not如果ication");
      常量 visible为vue.ref(false);
      让 timer为void 0;
      常量 typeClass为vue.computed(() => {
        常量 type为props.type;
        返回 type 与 TypeComponentsMap[props.type] ? ns.m(type) : "";
      });
      常量 iconComponent为vue.computed(() => {
        返回 TypeComponentsMap[props.type] 或 props.icon 或 "";
      });
      常量 horizontalClass为vue.computed(() => props.position.endsWith("right") ? "right" : "left");
      常量 verticalProperty为vue.computed(() => props.position.startsWith("top") ? "top" : "bottom");
      常量 positionStyle为vue.computed(() => {
        返回 {
          [verticalProperty.value]: `${props.offset}px`,
          zIndex: props.zIndex
        };
      });
      函数 startTimer() {
        如果 (props.duration大于0) {
          ({ stop: timer }为useTimeoutFn(() => {
            如果 (visible.value)
              close();
          }, props.duration));
        }
      }
      函数 clearTimer() {
        timer == null ? void 0 : timer();
      }
      函数 close() {
        visible.value为false;
      }
      函数 onKeydown({ code }) {
        如果 (code === EVENT_CODE.de让e 或 code === EVENT_CODE.backspace) {
          clearTimer();
        } 否则 如果 (code === EVENT_CODE.esc) {
          如果 (visible.value) {
            close();
          }
        } 否则 {
          startTimer();
        }
      }
      vue.onMounted(() => {
        startTimer();
        visible.value为true;
      });
      useEventListener(document, "keydown", onKeydown);
      返回 {
        ns,
        horizontalClass,
        typeClass,
        iconComponent,
        positionStyle,
        visible,
        close,
        clearTimer,
        startTimer
      };
    }
  });
  常量 _hoisted_1为["id"];
  常量 _hoisted_2为["textContent"];
  常量 _hoisted_3为{ key: 0 };
  常量 _hoisted_4为["innerHTML"];
  函数 _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
    常量 _component_el_icon为vue.resolveComponent("el-icon");
    常量 _component_close为vue.resolveComponent("close");
    返回 vue.openBlock(), vue.createBlock(vue.Transition, {
      名字: _ctx.ns.b("fade"),
      onBe变量循环eLeave: _ctx.onClose,
      onAfterLeave: _cache[3] 或 (_cache[3]为($event) => _ctx.$emit("destroy"))
    }, {
      default: vue.withCtx(() => [
        vue.withDirectives(vue.createElementVNode("div", {
          id: _ctx.id,
          class: vue.normalizeClass([_ctx.ns.b(), _ctx.customClass, _ctx.horizontalClass]),
          style: vue.normalizeStyle(_ctx.positionStyle),
          role: "alert",
          onMouseenter: _cache[0] 或 (_cache[0]为(...args) => _ctx.clearTimer 与 _ctx.clearTimer(...args)),
          onMouseleave: _cache[1] 或 (_cache[1]为(...args) => _ctx.startTimer 与 _ctx.startTimer(...args)),
          onClick: _cache[2] 或 (_cache[2]为(...args) => _ctx.onClick 与 _ctx.onClick(...args))
        }, [
          _ctx.iconComponent ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
            key: 0,
            class: vue.normalizeClass([_ctx.ns.e("icon"), _ctx.typeClass])
          }, {
            default: vue.withCtx(() => [
              (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.iconComponent)))
            ]),
            _: 1
          }, 8, ["class"])) : vue.createCommentVNode("v-如果", true),
          vue.createElementVNode("div", {
            class: vue.normalizeClass(_ctx.ns.e("group"))
          }, [
            vue.createElementVNode("h2", {
              class: vue.normalizeClass(_ctx.ns.e("标题")),
              textContent: vue.toDisplayString(_ctx.标题)
            }, null, 10, _hoisted_2),
            vue.withDirectives(vue.createElementVNode("div", {
              class: vue.normalizeClass(_ctx.ns.e("上下文")),
              style: vue.normalizeStyle(不不_ctx.标题 ? void 0 : { margin: 0 })
            }, [
              vue.renderSlot(_ctx.$slots, "default", {}, () => [
                不_ctx.dangerouslyUseHTMLString ? (vue.openBlock(), vue.createElementBlock("p", _hoisted_3, vue.toDisplayString(_ctx.message), 1)) : (vue.openBlock(), vue.createElementBlock(vue.Fragment, { key: 1 }, [
                  vue.createCommentVNode(" Caution here, message could've been compromized, nerver use user's input as message "),
                  vue.createCommentVNode(" esl整数-disable-next-line "),
                  vue.createElementVNode("p", { innerHTML: _ctx.message }, null, 8, _hoisted_4)
                ], 2112))
              ])
            ], 6), [
              [vue.vShow, _ctx.message]
            ]),
            _ctx.showClose ? (vue.openBlock(), vue.createBlock(_component_el_icon, {
              key: 0,
              class: vue.normalizeClass(_ctx.ns.e("closeBtn")),
              onClick: vue.withMod如果iers(_ctx.close, ["stop"])
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_close)
              ]),
              _: 1
            }, 8, ["class", "onClick"])) : vue.createCommentVNode("v-如果", true)
          ], 2)
        ], 46, _hoisted_1), [
          [vue.vShow, _ctx.visible]
        ])
      ]),
      _: 3
    }, 8, ["名字", "onBe变量循环eLeave"]);
  }
  变量 Not如果icationConstructor为/* @__PURE__ */ _输出出口_sfc(_sfc_main, [["render", _sfc_render], ["__file", "not如果ication.vue"]]);

  常量 not如果ications为{
    "top-left": [],
    "top-right": [],
    "bottom-left": [],
    "bottom-right": []
  };
  常量 GAP_SIZE为16;
  让 seed为1;
  常量 not如果y为函数(options为{}, context为null) {
    如果 (不isClient)
      返回 { close: () => void 0 };
    如果 (类型是 options === "string" 或 vue.isVNode(options)) {
      options为{ message: options };
    }
    常量 position为options.position 或 "top-right";
    让 verticalOffset为options.offset 或 0;
    not如果ications[position].变量循环Each(({ vm: vm2 }) => {
      变量 _a;
      verticalOffset += (((_a为vm2.el) == null ? void 0 : _a.offsetHeight) 或 0) + GAP_SIZE;
    });
    verticalOffset += GAP_SIZE;
    常量 { nextZIndex }为useZIndex();
    常量 id为`not如果ication_${seed加一}`;
    常量 userOnClose为options.onClose;
    常量 props为{
      zIndex: nextZIndex(),
      offset: verticalOffset,
      ...options,
      id,
      onClose: () => {
        close(id, position, userOnClose);
      }
    };
    让 appendTo为document.主体;
    如果 (isElement$2(options.appendTo)) {
      appendTo为options.appendTo;
    } 否则 如果 (isString(options.appendTo)) {
      appendTo为document.querySelector(options.appendTo);
    }
    如果 (不isElement$2(appendTo)) {
      appendTo为document.主体;
    }
    常量 container为document.createElement("div");
    常量 vm为vue.createVNode(Not如果icationConstructor, props, vue.isVNode(props.message) ? {
      default: () => props.message
    } : null);
    vm.appContext为context 不= null ? context : not如果y._context;
    vm.props.onDestroy为() => {
      vue.render(null, container);
    };
    vue.render(vm, container);
    not如果ications[position].push({ vm });
    appendTo.appendChild(container.firstElementChild);
    返回 {
      close: () => {
        vm.component.proxy.visible为false;
      }
    };
  };
  not如果icationTypes.变量循环Each((type) => {
    not如果y[type]为(options为{}) => {
      如果 (类型是 options === "string" 或 vue.isVNode(options)) {
        options为{
          message: options
        };
      }
      返回 not如果y({
        ...options,
        type
      });
    };
  });
  函数 close(id, position, userOnClose) {
    常量 orientedNot如果ications为not如果ications[position];
    常量 idx为orientedNot如果ications.findIndex(({ vm: vm2 }) => {
      变量 _a;
      返回 ((_a为vm2.component) == null ? void 0 : _a.props.id) === id;
    });
    如果 (idx === -1)
      返回;
    常量 { vm }为orientedNot如果ications[idx];
    如果 (不vm)
      返回;
    userOnClose == null ? void 0 : userOnClose(vm);
    常量 removedHeight为vm.el.offsetHeight;
    常量 verticalPos为position.split("-")[0];
    orientedNot如果ications.splice(idx, 1);
    常量 len为orientedNot如果ications.长度;
    如果 (len < 1)
      返回;
    变量循环 (让 i为idx; i < len; i加一) {
      常量 { el, component }为orientedNot如果ications[i].vm;
      常量 pos为Number.parseInt(el.style[verticalPos], 10) - removedHeight - GAP_SIZE;
      component.props.offset为pos;
    }
  }
  函数 closeAll() {
    变量循环 (常量 orientedNot如果ications of Object.values(not如果ications)) {
      orientedNot如果ications.变量循环Each(({ vm }) => {
        vm.component.proxy.visible为false;
      });
    }
  }
  not如果y.closeAll为closeAll;
  not如果y._context为null;
  变量 Not如果y为not如果y;

  常量 ElNot如果ication为withInstallFunction(Not如果y, "$not如果y");

  变量 Plugins为[
    ElInfiniteScroll,
    ElLoading,
    ElMessage,
    ElMessageBox,
    ElNot如果ication,
    ElPopoverDirective
  ];

  变量 installer为makeInstaller([...Components, ...Plugins]);

  常量 install为installer.install;
  常量 version为installer.version;

  输出出口s.BAR_MAP为BAR_MAP;
  输出出口s.CASCADER_PANEL_INJECTION_KEY为CASCADER_PANEL_INJECTION_KEY;
  输出出口s.CHANGE_EVENT为CHANGE_EVENT;
  输出出口s.ClickOutside为ClickOutside;
  输出出口s.CommonPicker为CommonPicker;
  输出出口s.CommonProps为CommonProps;
  输出出口s.DEFAULT_FORMATS_DATE为DEFAULT_FORMATS_DATE;
  输出出口s.DEFAULT_FORMATS_DATEPICKER为DEFAULT_FORMATS_DATEPICKER;
  输出出口s.DEFAULT_FORMATS_TIME为DEFAULT_FORMATS_TIME;
  输出出口s.DROPDOWN_COLLECTION_INJECTION_KEY为COLLECTION_INJECTION_KEY;
  输出出口s.DROPDOWN_COLLECTION_ITEM_INJECTION_KEY为COLLECTION_ITEM_INJECTION_KEY;
  输出出口s.DROPDOWN_INJECTION_KEY为DROPDOWN_INJECTION_KEY;
  输出出口s.DefaultProps为DefaultProps;
  输出出口s.DynamicSizeGrid为FixedSizeGrid$1;
  输出出口s.DynamicSizeList为DynamicSizeList$1;
  输出出口s.EVENT_CODE为EVENT_CODE;
  输出出口s.Effect为Effect;
  输出出口s.ElAffix为ElAffix;
  输出出口s.ElAlert为ElAlert;
  输出出口s.ElAside为ElAside;
  输出出口s.ElAutocomp让e为ElAutocomp让e;
  输出出口s.ElAvatar为ElAvatar;
  输出出口s.ElBacktop为ElBacktop;
  输出出口s.ElBadge为ElBadge;
  输出出口s.ElBreadcrumb为ElBreadcrumb;
  输出出口s.ElBreadcrumbItem为ElBreadcrumbItem;
  输出出口s.ElButton为ElButton;
  输出出口s.ElButtonGroup为ElButtonGroup$1;
  输出出口s.ElCalendar为ElCalendar;
  输出出口s.ElCard为ElCard;
  输出出口s.ElCarousel为ElCarousel;
  输出出口s.ElCarouselItem为ElCarouselItem;
  输出出口s.ElCascader为ElCascader;
  输出出口s.ElCascaderPanel为ElCascaderPanel;
  输出出口s.ElCheckTag为ElCheckTag;
  输出出口s.ElCheckbox为ElCheckbox;
  输出出口s.ElCheckboxButton为ElCheckboxButton;
  输出出口s.ElCheckboxGroup为ElCheckboxGroup$1;
  输出出口s.ElCol为ElCol;
  输出出口s.ElCollapse为ElCollapse;
  输出出口s.ElCollapseItem为ElCollapseItem;
  输出出口s.ElCollapseTransition为ElCollapseTransition;
  输出出口s.ElCollection为ElCollection;
  输出出口s.ElCollectionItem为ElCollectionItem;
  输出出口s.ElColorPicker为ElColorPicker;
  输出出口s.ElConfigProvider为ElConfigProvider;
  输出出口s.ElContainer为ElContainer;
  输出出口s.ElDatePicker为ElDatePicker;
  输出出口s.ElDescriptions为ElDescriptions;
  输出出口s.ElDescriptionsItem为ElDescriptionsItem;
  输出出口s.ElDia输出日志为ElDia输出日志;
  输出出口s.ElDivider为ElDivider;
  输出出口s.ElDrawer为ElDrawer;
  输出出口s.ElDropdown为ElDropdown;
  输出出口s.ElDropdownItem为ElDropdownItem;
  输出出口s.ElDropdownMenu为ElDropdownMenu;
  输出出口s.ElEmpty为ElEmpty;
  输出出口s.ElFooter为ElFooter;
  输出出口s.ElForm为ElForm;
  输出出口s.ElFormItem为ElFormItem;
  输出出口s.ElHeader为ElHeader;
  输出出口s.ElIcon为ElIcon;
  输出出口s.ElImage为ElImage;
  输出出口s.ElImageViewer为ElImageViewer;
  输出出口s.ElInfiniteScroll为ElInfiniteScroll;
  输出出口s.ElInput为ElInput;
  输出出口s.ElInputNumber为ElInputNumber;
  输出出口s.ElLink为ElLink;
  输出出口s.ElLoading为ElLoading;
  输出出口s.ElLoadingDirective为vLoading;
  输出出口s.ElLoadingService为Loading;
  输出出口s.ElMain为ElMain;
  输出出口s.ElMenu为ElMenu;
  输出出口s.ElMenuItem为ElMenuItem;
  输出出口s.ElMenuItemGroup为ElMenuItemGroup;
  输出出口s.ElMessage为ElMessage;
  输出出口s.ElMessageBox为ElMessageBox;
  输出出口s.ElNot如果ication为ElNot如果ication;
  输出出口s.ElOption为ElOption$1;
  输出出口s.ElOptionGroup为ElOptionGroup;
  输出出口s.ElOverlay为ElOverlay;
  输出出口s.ElPageHeader为ElPageHeader;
  输出出口s.ElPagination为ElPagination;
  输出出口s.ElPopconfirm为ElPopconfirm;
  输出出口s.ElPopover为ElPopover;
  输出出口s.ElPopoverDirective为ElPopoverDirective;
  输出出口s.ElPopper为ElPopper;
  输出出口s.ElPopperArrow为ElPopperArrow;
  输出出口s.ElPopperContent为ElPopperContent;
  输出出口s.ElPopperTrigger为ElPopperTrigger;
  输出出口s.ElProgress为ElProgress;
  输出出口s.ElRadio为ElRadio;
  输出出口s.ElRadioButton为ElRadioButton;
  输出出口s.ElRadioGroup为ElRadioGroup;
  输出出口s.ElRate为ElRate;
  输出出口s.ElResult为ElResult;
  输出出口s.ElRow为ElRow;
  输出出口s.ElScrollbar为ElScrollbar;
  输出出口s.ElSelect为ElSelect;
  输出出口s.ElSelectV2为ElSelectV2;
  输出出口s.ElSke让on为ElSke让on;
  输出出口s.ElSke让onItem为ElSke让onItem;
  输出出口s.ElSlider为ElSlider;
  输出出口s.ElSpace为ElSpace;
  输出出口s.ElStep为ElStep;
  输出出口s.ElSteps为ElSteps;
  输出出口s.ElSubMenu为ElSubMenu;
  输出出口s.ElSwitch为ElSwitch;
  输出出口s.ElTabPane为ElTabPane;
  输出出口s.ElTable为ElTable;
  输出出口s.ElTableColumn为ElTableColumn;
  输出出口s.ElTabs为ElTabs;
  输出出口s.ElTag为ElTag;
  输出出口s.ElTimePicker为ElTimePicker;
  输出出口s.ElTimeSelect为ElTimeSelect;
  输出出口s.ElTimeline为ElTimeline;
  输出出口s.ElTimelineItem为ElTimelineItem;
  输出出口s.ElTooltip为ElTooltip;
  输出出口s.ElTransfer为ElTransfer;
  输出出口s.ElTree为ElTree;
  输出出口s.ElTreeSelect为ElTreeSelect;
  输出出口s.ElTreeV2为ElTreeV2;
  输出出口s.ElUpload为ElUpload;
  输出出口s.ExpandTrigger为ExpandTrigger$1;
  输出出口s.FIRST_KEYS为FIRST_KEYS;
  输出出口s.FIRST_LAST_KEYS为FIRST_LAST_KEYS;
  输出出口s.FORWARD_REF_INJECTION_KEY为FORWARD_REF_INJECTION_KEY;
  输出出口s.FixedSizeGrid为FixedSizeGrid$3;
  输出出口s.FixedSizeList为FixedSizeList$1;
  输出出口s.ID_INJECTION_KEY为ID_INJECTION_KEY;
  输出出口s.INPUT_EVENT为INPUT_EVENT;
  输出出口s.IconComponentMap为IconComponentMap;
  输出出口s.IconMap为IconMap;
  输出出口s.LAST_KEYS为LAST_KEYS;
  输出出口s.Mousewheel为Mousewheel;
  输出出口s.POPPER_CONTAINER_ID为POPPER_CONTAINER_ID;
  输出出口s.POPPER_CONTAINER_SELECTOR为POPPER_CONTAINER_SELECTOR;
  输出出口s.POPPER_CONTENT_INJECTION_KEY为POPPER_CONTENT_INJECTION_KEY;
  输出出口s.POPPER_INJECTION_KEY为POPPER_INJECTION_KEY;
  输出出口s.RepeatClick为RepeatClick;
  输出出口s.Resize为Resize;
  输出出口s.TOOLTIP_INJECTION_KEY为TOOLTIP_INJECTION_KEY;
  输出出口s.TOOLTIP_V2_OPEN为TOOLTIP_V2_OPEN;
  输出出口s.TimePickPanel为TimePickPanel;
  输出出口s.TrapFocus为TrapFocus;
  输出出口s.UPDATE_MODEL_EVENT为UPDATE_MODEL_EVENT;
  输出出口s.WEEK_DAYS为WEEK_DAYS;
  输出出口s.affixEmits为affixEmits;
  输出出口s.affixProps为affixProps;
  输出出口s.alertEffects为alertEffects;
  输出出口s.alertEmits为alertEmits;
  输出出口s.alertProps为alertProps;
  输出出口s.arrowMiddleware为arrowMiddleware;
  输出出口s.autocomp让eEmits为autocomp让eEmits;
  输出出口s.autocomp让eProps为autocomp让eProps;
  输出出口s.avatarEmits为avatarEmits;
  输出出口s.avatarProps为avatarProps;
  输出出口s.backtopEmits为backtopEmits;
  输出出口s.backtopProps为backtopProps;
  输出出口s.badgeProps为badgeProps;
  输出出口s.breadcrumbItemProps为breadcrumbItemProps;
  输出出口s.breadcrumbKey为breadcrumbKey;
  输出出口s.breadcrumbProps为breadcrumbProps;
  输出出口s.buildLocaleContext为buildLocaleContext;
  输出出口s.buildTranslator为buildTranslator;
  输出出口s.buttonEmits为buttonEmits;
  输出出口s.buttonGroupContextKey为buttonGroupContextKey;
  输出出口s.buttonNativeTypes为buttonNativeTypes;
  输出出口s.buttonProps为buttonProps;
  输出出口s.buttonTypes为buttonTypes;
  输出出口s.calendarEmits为calendarEmits;
  输出出口s.calendarProps为calendarProps;
  输出出口s.cardProps为cardProps;
  输出出口s.carouselContextKey为carouselContextKey;
  输出出口s.carouselEmits为carouselEmits;
  输出出口s.carouselItemProps为carouselItemProps;
  输出出口s.carouselProps为carouselProps;
  输出出口s.checkTagEmits为checkTagEmits;
  输出出口s.checkTagProps为checkTagProps;
  输出出口s.colProps为colProps;
  输出出口s.collapseContextKey为collapseContextKey;
  输出出口s.collapseEmits为collapseEmits;
  输出出口s.collapseItemProps为collapseItemProps;
  输出出口s.collapseProps为collapseProps;
  输出出口s.componentSizeMap为componentSizeMap;
  输出出口s.componentSizes为componentSizes;
  输出出口s.configProviderContextKey为configProviderContextKey;
  输出出口s.configProviderProps为configProviderProps;
  输出出口s.createModelToggleComposable为createModelToggleComposable;
  输出出口s.datePickTypes为datePickTypes;
  输出出口s.dayjs为dayjs;
  输出出口s["default"]为installer;
  输出出口s.dia输出日志Emits为dia输出日志Emits;
  输出出口s.dia输出日志InjectionKey为dia输出日志InjectionKey;
  输出出口s.dia输出日志Props为dia输出日志Props;
  输出出口s.dividerProps为dividerProps;
  输出出口s.drawerEmits为drawerEmits;
  输出出口s.drawerProps为drawerProps;
  输出出口s.dropdownItemProps为dropdownItemProps;
  输出出口s.dropdownMenuProps为dropdownMenuProps;
  输出出口s.dropdownProps为dropdownProps;
  输出出口s.elPaginationKey为elPaginationKey;
  输出出口s.emitChangeFn为emitChangeFn;
  输出出口s.emptyProps为emptyProps;
  输出出口s.extractDateFormat为extractDateFormat;
  输出出口s.extractTimeFormat为extractTimeFormat;
  输出出口s.变量循环mContextKey为变量循环mContextKey;
  输出出口s.变量循环mEmits为变量循环mEmits;
  输出出口s.变量循环mItemContextKey为变量循环mItemContextKey;
  输出出口s.变量循环mItemProps为变量循环mItemProps;
  输出出口s.变量循环mItemValidateStates为变量循环mItemValidateStates;
  输出出口s.变量循环mProps为变量循环mProps;
  输出出口s.genFileId为genFileId;
  输出出口s.getComponentSize为getComponentSize;
  输出出口s.getPositionDataWithUnit为getPositionDataWithUnit;
  输出出口s.iconProps为iconProps;
  输出出口s.imageEmits为imageEmits;
  输出出口s.imageProps为imageProps;
  输出出口s.imageViewerEmits为imageViewerEmits;
  输出出口s.imageViewerProps为imageViewerProps;
  输出出口s.inputEmits为inputEmits;
  输出出口s.inputNumberEmits为inputNumberEmits;
  输出出口s.inputNumberProps为inputNumberProps;
  输出出口s.inputProps为inputProps;
  输出出口s.install为install;
  输出出口s.linkEmits为linkEmits;
  输出出口s.linkProps为linkProps;
  输出出口s.makeInstaller为makeInstaller;
  输出出口s.menuEmits为menuEmits;
  输出出口s.menuItemEmits为menuItemEmits;
  输出出口s.menuItemGroupProps为menuItemGroupProps;
  输出出口s.menuItemProps为menuItemProps;
  输出出口s.menuProps为menuProps;
  输出出口s.messageConfig为messageConfig;
  输出出口s.messageEmits为messageEmits;
  输出出口s.messageProps为messageProps;
  输出出口s.messageTypes为messageTypes;
  输出出口s.not如果icationEmits为not如果icationEmits;
  输出出口s.not如果icationProps为not如果icationProps;
  输出出口s.not如果icationTypes为not如果icationTypes;
  输出出口s.overlayEmits为overlayEmits;
  输出出口s.overlayProps为overlayProps;
  输出出口s.pageHeaderEmits为pageHeaderEmits;
  输出出口s.pageHeaderProps为pageHeaderProps;
  输出出口s.paginationEmits为paginationEmits;
  输出出口s.paginationProps为paginationProps;
  输出出口s.popconfirmProps为popconfirmProps;
  输出出口s.progressProps为progressProps;
  输出出口s.provideGlobalConfig为provideGlobalConfig;
  输出出口s.radioButtonProps为radioButtonProps;
  输出出口s.radioEmits为radioEmits;
  输出出口s.radioGroupEmits为radioGroupEmits;
  输出出口s.radioGroupKey为radioGroupKey;
  输出出口s.radioGroupProps为radioGroupProps;
  输出出口s.radioProps为radioProps;
  输出出口s.radioPropsBase为radioPropsBase;
  输出出口s.rangeArr为rangeArr;
  输出出口s.rateEmits为rateEmits;
  输出出口s.rateProps为rateProps;
  输出出口s.renderThumbStyle为renderThumbStyle$1;
  输出出口s.resultProps为resultProps;
  输出出口s.rowContextKey为rowContextKey;
  输出出口s.rowProps为rowProps;
  输出出口s.scrollbarContextKey为scrollbarContextKey;
  输出出口s.scrollbarEmits为scrollbarEmits;
  输出出口s.scrollbarProps为scrollbarProps;
  输出出口s.selectGroupKey为selectGroupKey;
  输出出口s.selectKey为selectKey;
  输出出口s.selectV2InjectionKey为selectV2InjectionKey;
  输出出口s.ske让onItemProps为ske让onItemProps;
  输出出口s.ske让onProps为ske让onProps;
  输出出口s.spaceProps为spaceProps;
  输出出口s.subMenuProps为subMenuProps;
  输出出口s.主分支Emits为主分支Emits;
  输出出口s.主分支Props为主分支Props;
  输出出口s.tabBarProps为tabBarProps;
  输出出口s.tabNavProps为tabNavProps;
  输出出口s.tabPaneProps为tabPaneProps;
  输出出口s.tabsEmits为tabsEmits;
  输出出口s.tabsProps为tabsProps;
  输出出口s.tabsRootContextKey为tabsRootContextKey;
  输出出口s.tagEmits为tagEmits;
  输出出口s.tagProps为tagProps;
  输出出口s.thumbProps为thumbProps;
  输出出口s.timePickerDefaultProps为timePickerDefaultProps;
  输出出口s.timelineItemProps为timelineItemProps;
  输出出口s.tooltipV2ContentKey为tooltipV2ContentKey;
  输出出口s.tooltipV2RootKey为tooltipV2RootKey;
  输出出口s.translate为translate;
  输出出口s.uploadBaseProps为uploadBaseProps;
  输出出口s.uploadContentProps为uploadContentProps;
  输出出口s.uploadContextKey为uploadContextKey;
  输出出口s.uploadDraggerEmits为uploadDraggerEmits;
  输出出口s.uploadDraggerProps为uploadDraggerProps;
  输出出口s.uploadListEmits为uploadListEmits;
  输出出口s.uploadListProps为uploadListProps;
  输出出口s.uploadListTypes为uploadListTypes;
  输出出口s.uploadProps为uploadProps;
  输出出口s.useAttrs为useAttrs;
  输出出口s.useCascaderConfig为useCascaderConfig;
  输出出口s.useDelayedRender为useDelayedRender;
  输出出口s.useDelayedToggle为useDelayedToggle;
  输出出口s.useDelayedToggleProps为useDelayedToggleProps;
  输出出口s.useDeprecateAppendToBody为useDeprecateAppendToBody;
  输出出口s.useDeprecated为useDeprecated;
  输出出口s.useDia输出日志为useDia输出日志;
  输出出口s.useDisabled为useDisabled$1;
  输出出口s.useDraggable为useDraggable;
  输出出口s.useEscapeKeydown为useEscapeKeydown;
  输出出口s.useFloating为useFloating;
  输出出口s.useFloatingProps为useFloatingProps;
  输出出口s.useFocus为useFocus;
  输出出口s.useFormItem为useFormItem;
  输出出口s.useForwardRef为useForwardRef;
  输出出口s.useForwardRefDirective为useForwardRefDirective;
  输出出口s.useGlobalConfig为useGlobalConfig;
  输出出口s.useId为useId;
  输出出口s.useLocale为useLocale;
  输出出口s.useLockscreen为useLockscreen;
  输出出口s.useModal为useModal;
  输出出口s.useModelToggle为useModelToggle$1;
  输出出口s.useModelToggleEmits为useModelToggleEmits$1;
  输出出口s.useModelToggleProps为useModelToggleProps$1;
  输出出口s.useNamespace为useNamespace;
  输出出口s.usePopperArrowProps为usePopperArrowProps;
  输出出口s.usePopperContainer为usePopperContainer;
  输出出口s.usePopperContentProps为usePopperContentProps;
  输出出口s.usePopperCoreConfigProps为usePopperCoreConfigProps;
  输出出口s.usePopperProps为usePopperProps;
  输出出口s.usePopperTriggerProps为usePopperTriggerProps;
  输出出口s.usePreventGlobal为usePreventGlobal;
  输出出口s.useProp为useProp;
  输出出口s.useRadio为useRadio;
  输出出口s.useRestoreActive为useRestoreActive;
  输出出口s.useSameTarget为useSameTarget;
  输出出口s.useSize为useSize;
  输出出口s.useSizeProp为useSizeProp;
  输出出口s.useSpace为useSpace;
  输出出口s.useTeleport为useTeleport;
  输出出口s.useThrottleRender为useThrottleRender;
  输出出口s.useTimeout为useTimeout;
  输出出口s.useTooltipContentProps为useTooltipContentProps;
  输出出口s.useTooltipProps为useTooltipProps;
  输出出口s.useTooltipTriggerProps为useTooltipTriggerProps;
  输出出口s.useTransitionFallthrough为useTransitionFallthrough;
  输出出口s.useTransitionFallthroughEmits为useTransitionFallthroughEmits;
  输出出口s.useZIndex为useZIndex;
  输出出口s.vLoading为vLoading;
  输出出口s.version为version;
  输出出口s.virtualizedGridProps为virtualizedGridProps;
  输出出口s.virtualizedListProps为virtualizedListProps;
  输出出口s.virtualizedProps为virtualizedProps;
  输出出口s.virtualizedScrollbarProps为virtualizedScrollbarProps;

  Object.defineProperty(输出出口s, '__esModule', { value: true });

}));
